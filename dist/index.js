var rh = (t) => {
  throw TypeError(t);
};
var Pl = (t, e, r) => e.has(t) || rh("Cannot " + r);
var y = (t, e, r) => (Pl(t, e, "read from private field"), r ? r.call(t) : e.get(t)), P0 = (t, e, r) => e.has(t) ? rh("Cannot add the same private member more than once") : e instanceof WeakSet ? e.add(t) : e.set(t, r), tt = (t, e, r, i) => (Pl(t, e, "write to private field"), i ? i.call(t, r) : e.set(t, r), r), N = (t, e, r) => (Pl(t, e, "access private method"), r);
var Pe = typeof globalThis < "u" ? globalThis : typeof window < "u" || typeof window < "u" ? window : typeof self < "u" ? self : {};
function Dt(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function Fv(t) {
  if (t.__esModule) return t;
  var e = t.default;
  if (typeof e == "function") {
    var r = function i() {
      return this instanceof i ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    r.prototype = e.prototype;
  } else r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(t).forEach(function(i) {
    var n = Object.getOwnPropertyDescriptor(t, i);
    Object.defineProperty(r, i, n.get ? n : {
      enumerable: !0,
      get: function() {
        return t[i];
      }
    });
  }), r;
}
function Ov() {
  this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
}
var Dv = Ov;
const Bv = /* @__PURE__ */ Dt(Dv);
var sr = {}, Xa = {};
(function(t) {
  var e = typeof Uint8Array < "u" && typeof Uint16Array < "u" && typeof Int32Array < "u";
  t.assign = function(n) {
    for (var a = Array.prototype.slice.call(arguments, 1); a.length; ) {
      var s = a.shift();
      if (s) {
        if (typeof s != "object")
          throw new TypeError(s + "must be non-object");
        for (var o in s)
          s.hasOwnProperty(o) && (n[o] = s[o]);
      }
    }
    return n;
  }, t.shrinkBuf = function(n, a) {
    return n.length === a ? n : n.subarray ? n.subarray(0, a) : (n.length = a, n);
  };
  var r = {
    arraySet: function(n, a, s, o, c) {
      if (a.subarray && n.subarray) {
        n.set(a.subarray(s, s + o), c);
        return;
      }
      for (var l = 0; l < o; l++)
        n[c + l] = a[s + l];
    },
    // Join array of chunks to single array.
    flattenChunks: function(n) {
      var a, s, o, c, l, f;
      for (o = 0, a = 0, s = n.length; a < s; a++)
        o += n[a].length;
      for (f = new Uint8Array(o), c = 0, a = 0, s = n.length; a < s; a++)
        l = n[a], f.set(l, c), c += l.length;
      return f;
    }
  }, i = {
    arraySet: function(n, a, s, o, c) {
      for (var l = 0; l < o; l++)
        n[c + l] = a[s + l];
    },
    // Join array of chunks to single array.
    flattenChunks: function(n) {
      return [].concat.apply([], n);
    }
  };
  t.setTyped = function(n) {
    n ? (t.Buf8 = Uint8Array, t.Buf16 = Uint16Array, t.Buf32 = Int32Array, t.assign(t, r)) : (t.Buf8 = Array, t.Buf16 = Array, t.Buf32 = Array, t.assign(t, i));
  }, t.setTyped(e);
})(Xa);
var zn = {}, Iv = Xa, Rv = 4, ih = 0, nh = 1, Pv = 2;
function Wn(t) {
  for (var e = t.length; --e >= 0; )
    t[e] = 0;
}
var Lv = 0, P3 = 1, Nv = 2, Mv = 3, Uv = 258, kf = 29, Ka = 256, Oa = Ka + 1 + kf, _n = 30, Ff = 19, L3 = 2 * Oa + 1, gi = 15, Ll = 16, $v = 7, Of = 256, N3 = 16, M3 = 17, U3 = 18, z1 = (
  /* extra bits for each length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
), Gs = (
  /* extra bits for each distance code */
  [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
), zv = (
  /* extra bits for each bit length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]
), $3 = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], Wv = 512, vr = new Array((Oa + 2) * 2);
Wn(vr);
var ya = new Array(_n * 2);
Wn(ya);
var Da = new Array(Wv);
Wn(Da);
var Ba = new Array(Uv - Mv + 1);
Wn(Ba);
var Df = new Array(kf);
Wn(Df);
var ho = new Array(_n);
Wn(ho);
function Nl(t, e, r, i, n) {
  this.static_tree = t, this.extra_bits = e, this.extra_base = r, this.elems = i, this.max_length = n, this.has_stree = t && t.length;
}
var z3, W3, H3;
function Ml(t, e) {
  this.dyn_tree = t, this.max_code = 0, this.stat_desc = e;
}
function q3(t) {
  return t < 256 ? Da[t] : Da[256 + (t >>> 7)];
}
function Ia(t, e) {
  t.pending_buf[t.pending++] = e & 255, t.pending_buf[t.pending++] = e >>> 8 & 255;
}
function j0(t, e, r) {
  t.bi_valid > Ll - r ? (t.bi_buf |= e << t.bi_valid & 65535, Ia(t, t.bi_buf), t.bi_buf = e >> Ll - t.bi_valid, t.bi_valid += r - Ll) : (t.bi_buf |= e << t.bi_valid & 65535, t.bi_valid += r);
}
function qt(t, e, r) {
  j0(
    t,
    r[e * 2],
    r[e * 2 + 1]
    /*.Len*/
  );
}
function V3(t, e) {
  var r = 0;
  do
    r |= t & 1, t >>>= 1, r <<= 1;
  while (--e > 0);
  return r >>> 1;
}
function Hv(t) {
  t.bi_valid === 16 ? (Ia(t, t.bi_buf), t.bi_buf = 0, t.bi_valid = 0) : t.bi_valid >= 8 && (t.pending_buf[t.pending++] = t.bi_buf & 255, t.bi_buf >>= 8, t.bi_valid -= 8);
}
function qv(t, e) {
  var r = e.dyn_tree, i = e.max_code, n = e.stat_desc.static_tree, a = e.stat_desc.has_stree, s = e.stat_desc.extra_bits, o = e.stat_desc.extra_base, c = e.stat_desc.max_length, l, f, u, h, d, p, m = 0;
  for (h = 0; h <= gi; h++)
    t.bl_count[h] = 0;
  for (r[t.heap[t.heap_max] * 2 + 1] = 0, l = t.heap_max + 1; l < L3; l++)
    f = t.heap[l], h = r[r[f * 2 + 1] * 2 + 1] + 1, h > c && (h = c, m++), r[f * 2 + 1] = h, !(f > i) && (t.bl_count[h]++, d = 0, f >= o && (d = s[f - o]), p = r[f * 2], t.opt_len += p * (h + d), a && (t.static_len += p * (n[f * 2 + 1] + d)));
  if (m !== 0) {
    do {
      for (h = c - 1; t.bl_count[h] === 0; )
        h--;
      t.bl_count[h]--, t.bl_count[h + 1] += 2, t.bl_count[c]--, m -= 2;
    } while (m > 0);
    for (h = c; h !== 0; h--)
      for (f = t.bl_count[h]; f !== 0; )
        u = t.heap[--l], !(u > i) && (r[u * 2 + 1] !== h && (t.opt_len += (h - r[u * 2 + 1]) * r[u * 2], r[u * 2 + 1] = h), f--);
  }
}
function Y3(t, e, r) {
  var i = new Array(gi + 1), n = 0, a, s;
  for (a = 1; a <= gi; a++)
    i[a] = n = n + r[a - 1] << 1;
  for (s = 0; s <= e; s++) {
    var o = t[s * 2 + 1];
    o !== 0 && (t[s * 2] = V3(i[o]++, o));
  }
}
function Vv() {
  var t, e, r, i, n, a = new Array(gi + 1);
  for (r = 0, i = 0; i < kf - 1; i++)
    for (Df[i] = r, t = 0; t < 1 << z1[i]; t++)
      Ba[r++] = i;
  for (Ba[r - 1] = i, n = 0, i = 0; i < 16; i++)
    for (ho[i] = n, t = 0; t < 1 << Gs[i]; t++)
      Da[n++] = i;
  for (n >>= 7; i < _n; i++)
    for (ho[i] = n << 7, t = 0; t < 1 << Gs[i] - 7; t++)
      Da[256 + n++] = i;
  for (e = 0; e <= gi; e++)
    a[e] = 0;
  for (t = 0; t <= 143; )
    vr[t * 2 + 1] = 8, t++, a[8]++;
  for (; t <= 255; )
    vr[t * 2 + 1] = 9, t++, a[9]++;
  for (; t <= 279; )
    vr[t * 2 + 1] = 7, t++, a[7]++;
  for (; t <= 287; )
    vr[t * 2 + 1] = 8, t++, a[8]++;
  for (Y3(vr, Oa + 1, a), t = 0; t < _n; t++)
    ya[t * 2 + 1] = 5, ya[t * 2] = V3(t, 5);
  z3 = new Nl(vr, z1, Ka + 1, Oa, gi), W3 = new Nl(ya, Gs, 0, _n, gi), H3 = new Nl(new Array(0), zv, 0, Ff, $v);
}
function G3(t) {
  var e;
  for (e = 0; e < Oa; e++)
    t.dyn_ltree[e * 2] = 0;
  for (e = 0; e < _n; e++)
    t.dyn_dtree[e * 2] = 0;
  for (e = 0; e < Ff; e++)
    t.bl_tree[e * 2] = 0;
  t.dyn_ltree[Of * 2] = 1, t.opt_len = t.static_len = 0, t.last_lit = t.matches = 0;
}
function Z3(t) {
  t.bi_valid > 8 ? Ia(t, t.bi_buf) : t.bi_valid > 0 && (t.pending_buf[t.pending++] = t.bi_buf), t.bi_buf = 0, t.bi_valid = 0;
}
function Yv(t, e, r, i) {
  Z3(t), Ia(t, r), Ia(t, ~r), Iv.arraySet(t.pending_buf, t.window, e, r, t.pending), t.pending += r;
}
function ah(t, e, r, i) {
  var n = e * 2, a = r * 2;
  return t[n] < t[a] || t[n] === t[a] && i[e] <= i[r];
}
function Ul(t, e, r) {
  for (var i = t.heap[r], n = r << 1; n <= t.heap_len && (n < t.heap_len && ah(e, t.heap[n + 1], t.heap[n], t.depth) && n++, !ah(e, i, t.heap[n], t.depth)); )
    t.heap[r] = t.heap[n], r = n, n <<= 1;
  t.heap[r] = i;
}
function sh(t, e, r) {
  var i, n, a = 0, s, o;
  if (t.last_lit !== 0)
    do
      i = t.pending_buf[t.d_buf + a * 2] << 8 | t.pending_buf[t.d_buf + a * 2 + 1], n = t.pending_buf[t.l_buf + a], a++, i === 0 ? qt(t, n, e) : (s = Ba[n], qt(t, s + Ka + 1, e), o = z1[s], o !== 0 && (n -= Df[s], j0(t, n, o)), i--, s = q3(i), qt(t, s, r), o = Gs[s], o !== 0 && (i -= ho[s], j0(t, i, o)));
    while (a < t.last_lit);
  qt(t, Of, e);
}
function W1(t, e) {
  var r = e.dyn_tree, i = e.stat_desc.static_tree, n = e.stat_desc.has_stree, a = e.stat_desc.elems, s, o, c = -1, l;
  for (t.heap_len = 0, t.heap_max = L3, s = 0; s < a; s++)
    r[s * 2] !== 0 ? (t.heap[++t.heap_len] = c = s, t.depth[s] = 0) : r[s * 2 + 1] = 0;
  for (; t.heap_len < 2; )
    l = t.heap[++t.heap_len] = c < 2 ? ++c : 0, r[l * 2] = 1, t.depth[l] = 0, t.opt_len--, n && (t.static_len -= i[l * 2 + 1]);
  for (e.max_code = c, s = t.heap_len >> 1; s >= 1; s--)
    Ul(t, r, s);
  l = a;
  do
    s = t.heap[
      1
      /*SMALLEST*/
    ], t.heap[
      1
      /*SMALLEST*/
    ] = t.heap[t.heap_len--], Ul(
      t,
      r,
      1
      /*SMALLEST*/
    ), o = t.heap[
      1
      /*SMALLEST*/
    ], t.heap[--t.heap_max] = s, t.heap[--t.heap_max] = o, r[l * 2] = r[s * 2] + r[o * 2], t.depth[l] = (t.depth[s] >= t.depth[o] ? t.depth[s] : t.depth[o]) + 1, r[s * 2 + 1] = r[o * 2 + 1] = l, t.heap[
      1
      /*SMALLEST*/
    ] = l++, Ul(
      t,
      r,
      1
      /*SMALLEST*/
    );
  while (t.heap_len >= 2);
  t.heap[--t.heap_max] = t.heap[
    1
    /*SMALLEST*/
  ], qv(t, e), Y3(r, c, t.bl_count);
}
function oh(t, e, r) {
  var i, n = -1, a, s = e[0 * 2 + 1], o = 0, c = 7, l = 4;
  for (s === 0 && (c = 138, l = 3), e[(r + 1) * 2 + 1] = 65535, i = 0; i <= r; i++)
    a = s, s = e[(i + 1) * 2 + 1], !(++o < c && a === s) && (o < l ? t.bl_tree[a * 2] += o : a !== 0 ? (a !== n && t.bl_tree[a * 2]++, t.bl_tree[N3 * 2]++) : o <= 10 ? t.bl_tree[M3 * 2]++ : t.bl_tree[U3 * 2]++, o = 0, n = a, s === 0 ? (c = 138, l = 3) : a === s ? (c = 6, l = 3) : (c = 7, l = 4));
}
function lh(t, e, r) {
  var i, n = -1, a, s = e[0 * 2 + 1], o = 0, c = 7, l = 4;
  for (s === 0 && (c = 138, l = 3), i = 0; i <= r; i++)
    if (a = s, s = e[(i + 1) * 2 + 1], !(++o < c && a === s)) {
      if (o < l)
        do
          qt(t, a, t.bl_tree);
        while (--o !== 0);
      else a !== 0 ? (a !== n && (qt(t, a, t.bl_tree), o--), qt(t, N3, t.bl_tree), j0(t, o - 3, 2)) : o <= 10 ? (qt(t, M3, t.bl_tree), j0(t, o - 3, 3)) : (qt(t, U3, t.bl_tree), j0(t, o - 11, 7));
      o = 0, n = a, s === 0 ? (c = 138, l = 3) : a === s ? (c = 6, l = 3) : (c = 7, l = 4);
    }
}
function Gv(t) {
  var e;
  for (oh(t, t.dyn_ltree, t.l_desc.max_code), oh(t, t.dyn_dtree, t.d_desc.max_code), W1(t, t.bl_desc), e = Ff - 1; e >= 3 && t.bl_tree[$3[e] * 2 + 1] === 0; e--)
    ;
  return t.opt_len += 3 * (e + 1) + 5 + 5 + 4, e;
}
function Zv(t, e, r, i) {
  var n;
  for (j0(t, e - 257, 5), j0(t, r - 1, 5), j0(t, i - 4, 4), n = 0; n < i; n++)
    j0(t, t.bl_tree[$3[n] * 2 + 1], 3);
  lh(t, t.dyn_ltree, e - 1), lh(t, t.dyn_dtree, r - 1);
}
function jv(t) {
  var e = 4093624447, r;
  for (r = 0; r <= 31; r++, e >>>= 1)
    if (e & 1 && t.dyn_ltree[r * 2] !== 0)
      return ih;
  if (t.dyn_ltree[9 * 2] !== 0 || t.dyn_ltree[10 * 2] !== 0 || t.dyn_ltree[13 * 2] !== 0)
    return nh;
  for (r = 32; r < Ka; r++)
    if (t.dyn_ltree[r * 2] !== 0)
      return nh;
  return ih;
}
var ch = !1;
function Xv(t) {
  ch || (Vv(), ch = !0), t.l_desc = new Ml(t.dyn_ltree, z3), t.d_desc = new Ml(t.dyn_dtree, W3), t.bl_desc = new Ml(t.bl_tree, H3), t.bi_buf = 0, t.bi_valid = 0, G3(t);
}
function j3(t, e, r, i) {
  j0(t, (Lv << 1) + (i ? 1 : 0), 3), Yv(t, e, r);
}
function Kv(t) {
  j0(t, P3 << 1, 3), qt(t, Of, vr), Hv(t);
}
function Jv(t, e, r, i) {
  var n, a, s = 0;
  t.level > 0 ? (t.strm.data_type === Pv && (t.strm.data_type = jv(t)), W1(t, t.l_desc), W1(t, t.d_desc), s = Gv(t), n = t.opt_len + 3 + 7 >>> 3, a = t.static_len + 3 + 7 >>> 3, a <= n && (n = a)) : n = a = r + 5, r + 4 <= n && e !== -1 ? j3(t, e, r, i) : t.strategy === Rv || a === n ? (j0(t, (P3 << 1) + (i ? 1 : 0), 3), sh(t, vr, ya)) : (j0(t, (Nv << 1) + (i ? 1 : 0), 3), Zv(t, t.l_desc.max_code + 1, t.d_desc.max_code + 1, s + 1), sh(t, t.dyn_ltree, t.dyn_dtree)), G3(t), i && Z3(t);
}
function Qv(t, e, r) {
  return t.pending_buf[t.d_buf + t.last_lit * 2] = e >>> 8 & 255, t.pending_buf[t.d_buf + t.last_lit * 2 + 1] = e & 255, t.pending_buf[t.l_buf + t.last_lit] = r & 255, t.last_lit++, e === 0 ? t.dyn_ltree[r * 2]++ : (t.matches++, e--, t.dyn_ltree[(Ba[r] + Ka + 1) * 2]++, t.dyn_dtree[q3(e) * 2]++), t.last_lit === t.lit_bufsize - 1;
}
zn._tr_init = Xv;
zn._tr_stored_block = j3;
zn._tr_flush_block = Jv;
zn._tr_tally = Qv;
zn._tr_align = Kv;
function em(t, e, r, i) {
  for (var n = t & 65535 | 0, a = t >>> 16 & 65535 | 0, s = 0; r !== 0; ) {
    s = r > 2e3 ? 2e3 : r, r -= s;
    do
      n = n + e[i++] | 0, a = a + n | 0;
    while (--s);
    n %= 65521, a %= 65521;
  }
  return n | a << 16 | 0;
}
var X3 = em;
function tm() {
  for (var t, e = [], r = 0; r < 256; r++) {
    t = r;
    for (var i = 0; i < 8; i++)
      t = t & 1 ? 3988292384 ^ t >>> 1 : t >>> 1;
    e[r] = t;
  }
  return e;
}
var rm = tm();
function im(t, e, r, i) {
  var n = rm, a = i + r;
  t ^= -1;
  for (var s = i; s < a; s++)
    t = t >>> 8 ^ n[(t ^ e[s]) & 255];
  return t ^ -1;
}
var K3 = im, nm = {
  2: "need dictionary",
  /* Z_NEED_DICT       2  */
  1: "stream end",
  /* Z_STREAM_END      1  */
  0: "",
  /* Z_OK              0  */
  "-1": "file error",
  /* Z_ERRNO         (-1) */
  "-2": "stream error",
  /* Z_STREAM_ERROR  (-2) */
  "-3": "data error",
  /* Z_DATA_ERROR    (-3) */
  "-4": "insufficient memory",
  /* Z_MEM_ERROR     (-4) */
  "-5": "buffer error",
  /* Z_BUF_ERROR     (-5) */
  "-6": "incompatible version"
  /* Z_VERSION_ERROR (-6) */
}, U0 = Xa, ht = zn, J3 = X3, Br = K3, am = nm, Hi = 0, sm = 1, om = 3, Zr = 4, fh = 5, Vt = 0, uh = 1, dt = -2, lm = -3, $l = -5, cm = -1, fm = 1, Ts = 2, um = 3, hm = 4, dm = 0, gm = 2, Vo = 8, pm = 9, vm = 15, mm = 8, bm = 29, xm = 256, H1 = xm + 1 + bm, wm = 30, ym = 19, _m = 2 * H1 + 1, Am = 15, Ne = 3, Hr = 258, At = Hr + Ne + 1, Em = 32, Yo = 42, q1 = 69, Zs = 73, js = 91, Xs = 103, pi = 113, va = 666, b0 = 1, Ja = 2, Pi = 3, Hn = 4, Cm = 3;
function qr(t, e) {
  return t.msg = am[e], e;
}
function hh(t) {
  return (t << 1) - (t > 4 ? 9 : 0);
}
function zr(t) {
  for (var e = t.length; --e >= 0; )
    t[e] = 0;
}
function Ir(t) {
  var e = t.state, r = e.pending;
  r > t.avail_out && (r = t.avail_out), r !== 0 && (U0.arraySet(t.output, e.pending_buf, e.pending_out, r, t.next_out), t.next_out += r, e.pending_out += r, t.total_out += r, t.avail_out -= r, e.pending -= r, e.pending === 0 && (e.pending_out = 0));
}
function S0(t, e) {
  ht._tr_flush_block(t, t.block_start >= 0 ? t.block_start : -1, t.strstart - t.block_start, e), t.block_start = t.strstart, Ir(t.strm);
}
function qe(t, e) {
  t.pending_buf[t.pending++] = e;
}
function ca(t, e) {
  t.pending_buf[t.pending++] = e >>> 8 & 255, t.pending_buf[t.pending++] = e & 255;
}
function Sm(t, e, r, i) {
  var n = t.avail_in;
  return n > i && (n = i), n === 0 ? 0 : (t.avail_in -= n, U0.arraySet(e, t.input, t.next_in, n, r), t.state.wrap === 1 ? t.adler = J3(t.adler, e, n, r) : t.state.wrap === 2 && (t.adler = Br(t.adler, e, n, r)), t.next_in += n, t.total_in += n, n);
}
function Q3(t, e) {
  var r = t.max_chain_length, i = t.strstart, n, a, s = t.prev_length, o = t.nice_match, c = t.strstart > t.w_size - At ? t.strstart - (t.w_size - At) : 0, l = t.window, f = t.w_mask, u = t.prev, h = t.strstart + Hr, d = l[i + s - 1], p = l[i + s];
  t.prev_length >= t.good_match && (r >>= 2), o > t.lookahead && (o = t.lookahead);
  do
    if (n = e, !(l[n + s] !== p || l[n + s - 1] !== d || l[n] !== l[i] || l[++n] !== l[i + 1])) {
      i += 2, n++;
      do
        ;
      while (l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && i < h);
      if (a = Hr - (h - i), i = h - Hr, a > s) {
        if (t.match_start = e, s = a, a >= o)
          break;
        d = l[i + s - 1], p = l[i + s];
      }
    }
  while ((e = u[e & f]) > c && --r !== 0);
  return s <= t.lookahead ? s : t.lookahead;
}
function Li(t) {
  var e = t.w_size, r, i, n, a, s;
  do {
    if (a = t.window_size - t.lookahead - t.strstart, t.strstart >= e + (e - At)) {
      U0.arraySet(t.window, t.window, e, e, 0), t.match_start -= e, t.strstart -= e, t.block_start -= e, i = t.hash_size, r = i;
      do
        n = t.head[--r], t.head[r] = n >= e ? n - e : 0;
      while (--i);
      i = e, r = i;
      do
        n = t.prev[--r], t.prev[r] = n >= e ? n - e : 0;
      while (--i);
      a += e;
    }
    if (t.strm.avail_in === 0)
      break;
    if (i = Sm(t.strm, t.window, t.strstart + t.lookahead, a), t.lookahead += i, t.lookahead + t.insert >= Ne)
      for (s = t.strstart - t.insert, t.ins_h = t.window[s], t.ins_h = (t.ins_h << t.hash_shift ^ t.window[s + 1]) & t.hash_mask; t.insert && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[s + Ne - 1]) & t.hash_mask, t.prev[s & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = s, s++, t.insert--, !(t.lookahead + t.insert < Ne)); )
        ;
  } while (t.lookahead < At && t.strm.avail_in !== 0);
}
function Tm(t, e) {
  var r = 65535;
  for (r > t.pending_buf_size - 5 && (r = t.pending_buf_size - 5); ; ) {
    if (t.lookahead <= 1) {
      if (Li(t), t.lookahead === 0 && e === Hi)
        return b0;
      if (t.lookahead === 0)
        break;
    }
    t.strstart += t.lookahead, t.lookahead = 0;
    var i = t.block_start + r;
    if ((t.strstart === 0 || t.strstart >= i) && (t.lookahead = t.strstart - i, t.strstart = i, S0(t, !1), t.strm.avail_out === 0) || t.strstart - t.block_start >= t.w_size - At && (S0(t, !1), t.strm.avail_out === 0))
      return b0;
  }
  return t.insert = 0, e === Zr ? (S0(t, !0), t.strm.avail_out === 0 ? Pi : Hn) : (t.strstart > t.block_start && (S0(t, !1), t.strm.avail_out === 0), b0);
}
function zl(t, e) {
  for (var r, i; ; ) {
    if (t.lookahead < At) {
      if (Li(t), t.lookahead < At && e === Hi)
        return b0;
      if (t.lookahead === 0)
        break;
    }
    if (r = 0, t.lookahead >= Ne && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + Ne - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart), r !== 0 && t.strstart - r <= t.w_size - At && (t.match_length = Q3(t, r)), t.match_length >= Ne)
      if (i = ht._tr_tally(t, t.strstart - t.match_start, t.match_length - Ne), t.lookahead -= t.match_length, t.match_length <= t.max_lazy_match && t.lookahead >= Ne) {
        t.match_length--;
        do
          t.strstart++, t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + Ne - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart;
        while (--t.match_length !== 0);
        t.strstart++;
      } else
        t.strstart += t.match_length, t.match_length = 0, t.ins_h = t.window[t.strstart], t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + 1]) & t.hash_mask;
    else
      i = ht._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++;
    if (i && (S0(t, !1), t.strm.avail_out === 0))
      return b0;
  }
  return t.insert = t.strstart < Ne - 1 ? t.strstart : Ne - 1, e === Zr ? (S0(t, !0), t.strm.avail_out === 0 ? Pi : Hn) : t.last_lit && (S0(t, !1), t.strm.avail_out === 0) ? b0 : Ja;
}
function an(t, e) {
  for (var r, i, n; ; ) {
    if (t.lookahead < At) {
      if (Li(t), t.lookahead < At && e === Hi)
        return b0;
      if (t.lookahead === 0)
        break;
    }
    if (r = 0, t.lookahead >= Ne && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + Ne - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart), t.prev_length = t.match_length, t.prev_match = t.match_start, t.match_length = Ne - 1, r !== 0 && t.prev_length < t.max_lazy_match && t.strstart - r <= t.w_size - At && (t.match_length = Q3(t, r), t.match_length <= 5 && (t.strategy === fm || t.match_length === Ne && t.strstart - t.match_start > 4096) && (t.match_length = Ne - 1)), t.prev_length >= Ne && t.match_length <= t.prev_length) {
      n = t.strstart + t.lookahead - Ne, i = ht._tr_tally(t, t.strstart - 1 - t.prev_match, t.prev_length - Ne), t.lookahead -= t.prev_length - 1, t.prev_length -= 2;
      do
        ++t.strstart <= n && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + Ne - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart);
      while (--t.prev_length !== 0);
      if (t.match_available = 0, t.match_length = Ne - 1, t.strstart++, i && (S0(t, !1), t.strm.avail_out === 0))
        return b0;
    } else if (t.match_available) {
      if (i = ht._tr_tally(t, 0, t.window[t.strstart - 1]), i && S0(t, !1), t.strstart++, t.lookahead--, t.strm.avail_out === 0)
        return b0;
    } else
      t.match_available = 1, t.strstart++, t.lookahead--;
  }
  return t.match_available && (i = ht._tr_tally(t, 0, t.window[t.strstart - 1]), t.match_available = 0), t.insert = t.strstart < Ne - 1 ? t.strstart : Ne - 1, e === Zr ? (S0(t, !0), t.strm.avail_out === 0 ? Pi : Hn) : t.last_lit && (S0(t, !1), t.strm.avail_out === 0) ? b0 : Ja;
}
function km(t, e) {
  for (var r, i, n, a, s = t.window; ; ) {
    if (t.lookahead <= Hr) {
      if (Li(t), t.lookahead <= Hr && e === Hi)
        return b0;
      if (t.lookahead === 0)
        break;
    }
    if (t.match_length = 0, t.lookahead >= Ne && t.strstart > 0 && (n = t.strstart - 1, i = s[n], i === s[++n] && i === s[++n] && i === s[++n])) {
      a = t.strstart + Hr;
      do
        ;
      while (i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && n < a);
      t.match_length = Hr - (a - n), t.match_length > t.lookahead && (t.match_length = t.lookahead);
    }
    if (t.match_length >= Ne ? (r = ht._tr_tally(t, 1, t.match_length - Ne), t.lookahead -= t.match_length, t.strstart += t.match_length, t.match_length = 0) : (r = ht._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++), r && (S0(t, !1), t.strm.avail_out === 0))
      return b0;
  }
  return t.insert = 0, e === Zr ? (S0(t, !0), t.strm.avail_out === 0 ? Pi : Hn) : t.last_lit && (S0(t, !1), t.strm.avail_out === 0) ? b0 : Ja;
}
function Fm(t, e) {
  for (var r; ; ) {
    if (t.lookahead === 0 && (Li(t), t.lookahead === 0)) {
      if (e === Hi)
        return b0;
      break;
    }
    if (t.match_length = 0, r = ht._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++, r && (S0(t, !1), t.strm.avail_out === 0))
      return b0;
  }
  return t.insert = 0, e === Zr ? (S0(t, !0), t.strm.avail_out === 0 ? Pi : Hn) : t.last_lit && (S0(t, !1), t.strm.avail_out === 0) ? b0 : Ja;
}
function Pt(t, e, r, i, n) {
  this.good_length = t, this.max_lazy = e, this.nice_length = r, this.max_chain = i, this.func = n;
}
var vn;
vn = [
  /*      good lazy nice chain */
  new Pt(0, 0, 0, 0, Tm),
  /* 0 store only */
  new Pt(4, 4, 8, 4, zl),
  /* 1 max speed, no lazy matches */
  new Pt(4, 5, 16, 8, zl),
  /* 2 */
  new Pt(4, 6, 32, 32, zl),
  /* 3 */
  new Pt(4, 4, 16, 16, an),
  /* 4 lazy matches */
  new Pt(8, 16, 32, 32, an),
  /* 5 */
  new Pt(8, 16, 128, 128, an),
  /* 6 */
  new Pt(8, 32, 128, 256, an),
  /* 7 */
  new Pt(32, 128, 258, 1024, an),
  /* 8 */
  new Pt(32, 258, 258, 4096, an)
  /* 9 max compression */
];
function Om(t) {
  t.window_size = 2 * t.w_size, zr(t.head), t.max_lazy_match = vn[t.level].max_lazy, t.good_match = vn[t.level].good_length, t.nice_match = vn[t.level].nice_length, t.max_chain_length = vn[t.level].max_chain, t.strstart = 0, t.block_start = 0, t.lookahead = 0, t.insert = 0, t.match_length = t.prev_length = Ne - 1, t.match_available = 0, t.ins_h = 0;
}
function Dm() {
  this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = Vo, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new U0.Buf16(_m * 2), this.dyn_dtree = new U0.Buf16((2 * wm + 1) * 2), this.bl_tree = new U0.Buf16((2 * ym + 1) * 2), zr(this.dyn_ltree), zr(this.dyn_dtree), zr(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new U0.Buf16(Am + 1), this.heap = new U0.Buf16(2 * H1 + 1), zr(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new U0.Buf16(2 * H1 + 1), zr(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
}
function e4(t) {
  var e;
  return !t || !t.state ? qr(t, dt) : (t.total_in = t.total_out = 0, t.data_type = gm, e = t.state, e.pending = 0, e.pending_out = 0, e.wrap < 0 && (e.wrap = -e.wrap), e.status = e.wrap ? Yo : pi, t.adler = e.wrap === 2 ? 0 : 1, e.last_flush = Hi, ht._tr_init(e), Vt);
}
function t4(t) {
  var e = e4(t);
  return e === Vt && Om(t.state), e;
}
function Bm(t, e) {
  return !t || !t.state || t.state.wrap !== 2 ? dt : (t.state.gzhead = e, Vt);
}
function r4(t, e, r, i, n, a) {
  if (!t)
    return dt;
  var s = 1;
  if (e === cm && (e = 6), i < 0 ? (s = 0, i = -i) : i > 15 && (s = 2, i -= 16), n < 1 || n > pm || r !== Vo || i < 8 || i > 15 || e < 0 || e > 9 || a < 0 || a > hm)
    return qr(t, dt);
  i === 8 && (i = 9);
  var o = new Dm();
  return t.state = o, o.strm = t, o.wrap = s, o.gzhead = null, o.w_bits = i, o.w_size = 1 << o.w_bits, o.w_mask = o.w_size - 1, o.hash_bits = n + 7, o.hash_size = 1 << o.hash_bits, o.hash_mask = o.hash_size - 1, o.hash_shift = ~~((o.hash_bits + Ne - 1) / Ne), o.window = new U0.Buf8(o.w_size * 2), o.head = new U0.Buf16(o.hash_size), o.prev = new U0.Buf16(o.w_size), o.lit_bufsize = 1 << n + 6, o.pending_buf_size = o.lit_bufsize * 4, o.pending_buf = new U0.Buf8(o.pending_buf_size), o.d_buf = 1 * o.lit_bufsize, o.l_buf = 3 * o.lit_bufsize, o.level = e, o.strategy = a, o.method = r, t4(t);
}
function Im(t, e) {
  return r4(t, e, Vo, vm, mm, dm);
}
function Rm(t, e) {
  var r, i, n, a;
  if (!t || !t.state || e > fh || e < 0)
    return t ? qr(t, dt) : dt;
  if (i = t.state, !t.output || !t.input && t.avail_in !== 0 || i.status === va && e !== Zr)
    return qr(t, t.avail_out === 0 ? $l : dt);
  if (i.strm = t, r = i.last_flush, i.last_flush = e, i.status === Yo)
    if (i.wrap === 2)
      t.adler = 0, qe(i, 31), qe(i, 139), qe(i, 8), i.gzhead ? (qe(
        i,
        (i.gzhead.text ? 1 : 0) + (i.gzhead.hcrc ? 2 : 0) + (i.gzhead.extra ? 4 : 0) + (i.gzhead.name ? 8 : 0) + (i.gzhead.comment ? 16 : 0)
      ), qe(i, i.gzhead.time & 255), qe(i, i.gzhead.time >> 8 & 255), qe(i, i.gzhead.time >> 16 & 255), qe(i, i.gzhead.time >> 24 & 255), qe(i, i.level === 9 ? 2 : i.strategy >= Ts || i.level < 2 ? 4 : 0), qe(i, i.gzhead.os & 255), i.gzhead.extra && i.gzhead.extra.length && (qe(i, i.gzhead.extra.length & 255), qe(i, i.gzhead.extra.length >> 8 & 255)), i.gzhead.hcrc && (t.adler = Br(t.adler, i.pending_buf, i.pending, 0)), i.gzindex = 0, i.status = q1) : (qe(i, 0), qe(i, 0), qe(i, 0), qe(i, 0), qe(i, 0), qe(i, i.level === 9 ? 2 : i.strategy >= Ts || i.level < 2 ? 4 : 0), qe(i, Cm), i.status = pi);
    else {
      var s = Vo + (i.w_bits - 8 << 4) << 8, o = -1;
      i.strategy >= Ts || i.level < 2 ? o = 0 : i.level < 6 ? o = 1 : i.level === 6 ? o = 2 : o = 3, s |= o << 6, i.strstart !== 0 && (s |= Em), s += 31 - s % 31, i.status = pi, ca(i, s), i.strstart !== 0 && (ca(i, t.adler >>> 16), ca(i, t.adler & 65535)), t.adler = 1;
    }
  if (i.status === q1)
    if (i.gzhead.extra) {
      for (n = i.pending; i.gzindex < (i.gzhead.extra.length & 65535) && !(i.pending === i.pending_buf_size && (i.gzhead.hcrc && i.pending > n && (t.adler = Br(t.adler, i.pending_buf, i.pending - n, n)), Ir(t), n = i.pending, i.pending === i.pending_buf_size)); )
        qe(i, i.gzhead.extra[i.gzindex] & 255), i.gzindex++;
      i.gzhead.hcrc && i.pending > n && (t.adler = Br(t.adler, i.pending_buf, i.pending - n, n)), i.gzindex === i.gzhead.extra.length && (i.gzindex = 0, i.status = Zs);
    } else
      i.status = Zs;
  if (i.status === Zs)
    if (i.gzhead.name) {
      n = i.pending;
      do {
        if (i.pending === i.pending_buf_size && (i.gzhead.hcrc && i.pending > n && (t.adler = Br(t.adler, i.pending_buf, i.pending - n, n)), Ir(t), n = i.pending, i.pending === i.pending_buf_size)) {
          a = 1;
          break;
        }
        i.gzindex < i.gzhead.name.length ? a = i.gzhead.name.charCodeAt(i.gzindex++) & 255 : a = 0, qe(i, a);
      } while (a !== 0);
      i.gzhead.hcrc && i.pending > n && (t.adler = Br(t.adler, i.pending_buf, i.pending - n, n)), a === 0 && (i.gzindex = 0, i.status = js);
    } else
      i.status = js;
  if (i.status === js)
    if (i.gzhead.comment) {
      n = i.pending;
      do {
        if (i.pending === i.pending_buf_size && (i.gzhead.hcrc && i.pending > n && (t.adler = Br(t.adler, i.pending_buf, i.pending - n, n)), Ir(t), n = i.pending, i.pending === i.pending_buf_size)) {
          a = 1;
          break;
        }
        i.gzindex < i.gzhead.comment.length ? a = i.gzhead.comment.charCodeAt(i.gzindex++) & 255 : a = 0, qe(i, a);
      } while (a !== 0);
      i.gzhead.hcrc && i.pending > n && (t.adler = Br(t.adler, i.pending_buf, i.pending - n, n)), a === 0 && (i.status = Xs);
    } else
      i.status = Xs;
  if (i.status === Xs && (i.gzhead.hcrc ? (i.pending + 2 > i.pending_buf_size && Ir(t), i.pending + 2 <= i.pending_buf_size && (qe(i, t.adler & 255), qe(i, t.adler >> 8 & 255), t.adler = 0, i.status = pi)) : i.status = pi), i.pending !== 0) {
    if (Ir(t), t.avail_out === 0)
      return i.last_flush = -1, Vt;
  } else if (t.avail_in === 0 && hh(e) <= hh(r) && e !== Zr)
    return qr(t, $l);
  if (i.status === va && t.avail_in !== 0)
    return qr(t, $l);
  if (t.avail_in !== 0 || i.lookahead !== 0 || e !== Hi && i.status !== va) {
    var c = i.strategy === Ts ? Fm(i, e) : i.strategy === um ? km(i, e) : vn[i.level].func(i, e);
    if ((c === Pi || c === Hn) && (i.status = va), c === b0 || c === Pi)
      return t.avail_out === 0 && (i.last_flush = -1), Vt;
    if (c === Ja && (e === sm ? ht._tr_align(i) : e !== fh && (ht._tr_stored_block(i, 0, 0, !1), e === om && (zr(i.head), i.lookahead === 0 && (i.strstart = 0, i.block_start = 0, i.insert = 0))), Ir(t), t.avail_out === 0))
      return i.last_flush = -1, Vt;
  }
  return e !== Zr ? Vt : i.wrap <= 0 ? uh : (i.wrap === 2 ? (qe(i, t.adler & 255), qe(i, t.adler >> 8 & 255), qe(i, t.adler >> 16 & 255), qe(i, t.adler >> 24 & 255), qe(i, t.total_in & 255), qe(i, t.total_in >> 8 & 255), qe(i, t.total_in >> 16 & 255), qe(i, t.total_in >> 24 & 255)) : (ca(i, t.adler >>> 16), ca(i, t.adler & 65535)), Ir(t), i.wrap > 0 && (i.wrap = -i.wrap), i.pending !== 0 ? Vt : uh);
}
function Pm(t) {
  var e;
  return !t || !t.state ? dt : (e = t.state.status, e !== Yo && e !== q1 && e !== Zs && e !== js && e !== Xs && e !== pi && e !== va ? qr(t, dt) : (t.state = null, e === pi ? qr(t, lm) : Vt));
}
function Lm(t, e) {
  var r = e.length, i, n, a, s, o, c, l, f;
  if (!t || !t.state || (i = t.state, s = i.wrap, s === 2 || s === 1 && i.status !== Yo || i.lookahead))
    return dt;
  for (s === 1 && (t.adler = J3(t.adler, e, r, 0)), i.wrap = 0, r >= i.w_size && (s === 0 && (zr(i.head), i.strstart = 0, i.block_start = 0, i.insert = 0), f = new U0.Buf8(i.w_size), U0.arraySet(f, e, r - i.w_size, i.w_size, 0), e = f, r = i.w_size), o = t.avail_in, c = t.next_in, l = t.input, t.avail_in = r, t.next_in = 0, t.input = e, Li(i); i.lookahead >= Ne; ) {
    n = i.strstart, a = i.lookahead - (Ne - 1);
    do
      i.ins_h = (i.ins_h << i.hash_shift ^ i.window[n + Ne - 1]) & i.hash_mask, i.prev[n & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = n, n++;
    while (--a);
    i.strstart = n, i.lookahead = Ne - 1, Li(i);
  }
  return i.strstart += i.lookahead, i.block_start = i.strstart, i.insert = i.lookahead, i.lookahead = 0, i.match_length = i.prev_length = Ne - 1, i.match_available = 0, t.next_in = c, t.input = l, t.avail_in = o, i.wrap = s, Vt;
}
sr.deflateInit = Im;
sr.deflateInit2 = r4;
sr.deflateReset = t4;
sr.deflateResetKeep = e4;
sr.deflateSetHeader = Bm;
sr.deflate = Rm;
sr.deflateEnd = Pm;
sr.deflateSetDictionary = Lm;
sr.deflateInfo = "pako deflate (from Nodeca project)";
var Bt = {}, ks = 30, Nm = 12, Mm = function(e, r) {
  var i, n, a, s, o, c, l, f, u, h, d, p, m, C, A, b, x, _, v, F, S, D, P, B, I;
  i = e.state, n = e.next_in, B = e.input, a = n + (e.avail_in - 5), s = e.next_out, I = e.output, o = s - (r - e.avail_out), c = s + (e.avail_out - 257), l = i.dmax, f = i.wsize, u = i.whave, h = i.wnext, d = i.window, p = i.hold, m = i.bits, C = i.lencode, A = i.distcode, b = (1 << i.lenbits) - 1, x = (1 << i.distbits) - 1;
  e:
    do {
      m < 15 && (p += B[n++] << m, m += 8, p += B[n++] << m, m += 8), _ = C[p & b];
      t:
        for (; ; ) {
          if (v = _ >>> 24, p >>>= v, m -= v, v = _ >>> 16 & 255, v === 0)
            I[s++] = _ & 65535;
          else if (v & 16) {
            F = _ & 65535, v &= 15, v && (m < v && (p += B[n++] << m, m += 8), F += p & (1 << v) - 1, p >>>= v, m -= v), m < 15 && (p += B[n++] << m, m += 8, p += B[n++] << m, m += 8), _ = A[p & x];
            r:
              for (; ; ) {
                if (v = _ >>> 24, p >>>= v, m -= v, v = _ >>> 16 & 255, v & 16) {
                  if (S = _ & 65535, v &= 15, m < v && (p += B[n++] << m, m += 8, m < v && (p += B[n++] << m, m += 8)), S += p & (1 << v) - 1, S > l) {
                    e.msg = "invalid distance too far back", i.mode = ks;
                    break e;
                  }
                  if (p >>>= v, m -= v, v = s - o, S > v) {
                    if (v = S - v, v > u && i.sane) {
                      e.msg = "invalid distance too far back", i.mode = ks;
                      break e;
                    }
                    if (D = 0, P = d, h === 0) {
                      if (D += f - v, v < F) {
                        F -= v;
                        do
                          I[s++] = d[D++];
                        while (--v);
                        D = s - S, P = I;
                      }
                    } else if (h < v) {
                      if (D += f + h - v, v -= h, v < F) {
                        F -= v;
                        do
                          I[s++] = d[D++];
                        while (--v);
                        if (D = 0, h < F) {
                          v = h, F -= v;
                          do
                            I[s++] = d[D++];
                          while (--v);
                          D = s - S, P = I;
                        }
                      }
                    } else if (D += h - v, v < F) {
                      F -= v;
                      do
                        I[s++] = d[D++];
                      while (--v);
                      D = s - S, P = I;
                    }
                    for (; F > 2; )
                      I[s++] = P[D++], I[s++] = P[D++], I[s++] = P[D++], F -= 3;
                    F && (I[s++] = P[D++], F > 1 && (I[s++] = P[D++]));
                  } else {
                    D = s - S;
                    do
                      I[s++] = I[D++], I[s++] = I[D++], I[s++] = I[D++], F -= 3;
                    while (F > 2);
                    F && (I[s++] = I[D++], F > 1 && (I[s++] = I[D++]));
                  }
                } else if (v & 64) {
                  e.msg = "invalid distance code", i.mode = ks;
                  break e;
                } else {
                  _ = A[(_ & 65535) + (p & (1 << v) - 1)];
                  continue r;
                }
                break;
              }
          } else if (v & 64)
            if (v & 32) {
              i.mode = Nm;
              break e;
            } else {
              e.msg = "invalid literal/length code", i.mode = ks;
              break e;
            }
          else {
            _ = C[(_ & 65535) + (p & (1 << v) - 1)];
            continue t;
          }
          break;
        }
    } while (n < a && s < c);
  F = m >> 3, n -= F, m -= F << 3, p &= (1 << m) - 1, e.next_in = n, e.next_out = s, e.avail_in = n < a ? 5 + (a - n) : 5 - (n - a), e.avail_out = s < c ? 257 + (c - s) : 257 - (s - c), i.hold = p, i.bits = m;
}, dh = Xa, sn = 15, gh = 852, ph = 592, vh = 0, Wl = 1, mh = 2, Um = [
  /* Length codes 257..285 base */
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
], $m = [
  /* Length codes 257..285 extra */
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
], zm = [
  /* Distance codes 0..29 base */
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
], Wm = [
  /* Distance codes 0..29 extra */
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
], Hm = function(e, r, i, n, a, s, o, c) {
  var l = c.bits, f = 0, u = 0, h = 0, d = 0, p = 0, m = 0, C = 0, A = 0, b = 0, x = 0, _, v, F, S, D, P = null, B = 0, I, w = new dh.Buf16(sn + 1), k = new dh.Buf16(sn + 1), z = null, H = 0, re, ie, X;
  for (f = 0; f <= sn; f++)
    w[f] = 0;
  for (u = 0; u < n; u++)
    w[r[i + u]]++;
  for (p = l, d = sn; d >= 1 && w[d] === 0; d--)
    ;
  if (p > d && (p = d), d === 0)
    return a[s++] = 1 << 24 | 64 << 16 | 0, a[s++] = 1 << 24 | 64 << 16 | 0, c.bits = 1, 0;
  for (h = 1; h < d && w[h] === 0; h++)
    ;
  for (p < h && (p = h), A = 1, f = 1; f <= sn; f++)
    if (A <<= 1, A -= w[f], A < 0)
      return -1;
  if (A > 0 && (e === vh || d !== 1))
    return -1;
  for (k[1] = 0, f = 1; f < sn; f++)
    k[f + 1] = k[f] + w[f];
  for (u = 0; u < n; u++)
    r[i + u] !== 0 && (o[k[r[i + u]]++] = u);
  if (e === vh ? (P = z = o, I = 19) : e === Wl ? (P = Um, B -= 257, z = $m, H -= 257, I = 256) : (P = zm, z = Wm, I = -1), x = 0, u = 0, f = h, D = s, m = p, C = 0, F = -1, b = 1 << p, S = b - 1, e === Wl && b > gh || e === mh && b > ph)
    return 1;
  for (; ; ) {
    re = f - C, o[u] < I ? (ie = 0, X = o[u]) : o[u] > I ? (ie = z[H + o[u]], X = P[B + o[u]]) : (ie = 96, X = 0), _ = 1 << f - C, v = 1 << m, h = v;
    do
      v -= _, a[D + (x >> C) + v] = re << 24 | ie << 16 | X | 0;
    while (v !== 0);
    for (_ = 1 << f - 1; x & _; )
      _ >>= 1;
    if (_ !== 0 ? (x &= _ - 1, x += _) : x = 0, u++, --w[f] === 0) {
      if (f === d)
        break;
      f = r[i + o[u]];
    }
    if (f > p && (x & S) !== F) {
      for (C === 0 && (C = p), D += h, m = f - C, A = 1 << m; m + C < d && (A -= w[m + C], !(A <= 0)); )
        m++, A <<= 1;
      if (b += 1 << m, e === Wl && b > gh || e === mh && b > ph)
        return 1;
      F = x & S, a[F] = p << 24 | m << 16 | D - s | 0;
    }
  }
  return x !== 0 && (a[D + x] = f - C << 24 | 64 << 16 | 0), c.bits = p, 0;
}, it = Xa, V1 = X3, Lt = K3, qm = Mm, _a = Hm, Vm = 0, i4 = 1, n4 = 2, bh = 4, Ym = 5, Fs = 6, Ni = 0, Gm = 1, Zm = 2, vt = -2, a4 = -3, s4 = -4, jm = -5, xh = 8, o4 = 1, wh = 2, yh = 3, _h = 4, Ah = 5, Eh = 6, Ch = 7, Sh = 8, Th = 9, kh = 10, go = 11, ur = 12, Hl = 13, Fh = 14, ql = 15, Oh = 16, Dh = 17, Bh = 18, Ih = 19, Os = 20, Ds = 21, Rh = 22, Ph = 23, Lh = 24, Nh = 25, Mh = 26, Vl = 27, Uh = 28, $h = 29, a0 = 30, l4 = 31, Xm = 32, Km = 852, Jm = 592, Qm = 15, e8 = Qm;
function zh(t) {
  return (t >>> 24 & 255) + (t >>> 8 & 65280) + ((t & 65280) << 8) + ((t & 255) << 24);
}
function t8() {
  this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new it.Buf16(320), this.work = new it.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
}
function c4(t) {
  var e;
  return !t || !t.state ? vt : (e = t.state, t.total_in = t.total_out = e.total = 0, t.msg = "", e.wrap && (t.adler = e.wrap & 1), e.mode = o4, e.last = 0, e.havedict = 0, e.dmax = 32768, e.head = null, e.hold = 0, e.bits = 0, e.lencode = e.lendyn = new it.Buf32(Km), e.distcode = e.distdyn = new it.Buf32(Jm), e.sane = 1, e.back = -1, Ni);
}
function f4(t) {
  var e;
  return !t || !t.state ? vt : (e = t.state, e.wsize = 0, e.whave = 0, e.wnext = 0, c4(t));
}
function u4(t, e) {
  var r, i;
  return !t || !t.state || (i = t.state, e < 0 ? (r = 0, e = -e) : (r = (e >> 4) + 1, e < 48 && (e &= 15)), e && (e < 8 || e > 15)) ? vt : (i.window !== null && i.wbits !== e && (i.window = null), i.wrap = r, i.wbits = e, f4(t));
}
function h4(t, e) {
  var r, i;
  return t ? (i = new t8(), t.state = i, i.window = null, r = u4(t, e), r !== Ni && (t.state = null), r) : vt;
}
function r8(t) {
  return h4(t, e8);
}
var Wh = !0, Yl, Gl;
function i8(t) {
  if (Wh) {
    var e;
    for (Yl = new it.Buf32(512), Gl = new it.Buf32(32), e = 0; e < 144; )
      t.lens[e++] = 8;
    for (; e < 256; )
      t.lens[e++] = 9;
    for (; e < 280; )
      t.lens[e++] = 7;
    for (; e < 288; )
      t.lens[e++] = 8;
    for (_a(i4, t.lens, 0, 288, Yl, 0, t.work, { bits: 9 }), e = 0; e < 32; )
      t.lens[e++] = 5;
    _a(n4, t.lens, 0, 32, Gl, 0, t.work, { bits: 5 }), Wh = !1;
  }
  t.lencode = Yl, t.lenbits = 9, t.distcode = Gl, t.distbits = 5;
}
function d4(t, e, r, i) {
  var n, a = t.state;
  return a.window === null && (a.wsize = 1 << a.wbits, a.wnext = 0, a.whave = 0, a.window = new it.Buf8(a.wsize)), i >= a.wsize ? (it.arraySet(a.window, e, r - a.wsize, a.wsize, 0), a.wnext = 0, a.whave = a.wsize) : (n = a.wsize - a.wnext, n > i && (n = i), it.arraySet(a.window, e, r - i, n, a.wnext), i -= n, i ? (it.arraySet(a.window, e, r - i, i, 0), a.wnext = i, a.whave = a.wsize) : (a.wnext += n, a.wnext === a.wsize && (a.wnext = 0), a.whave < a.wsize && (a.whave += n))), 0;
}
function n8(t, e) {
  var r, i, n, a, s, o, c, l, f, u, h, d, p, m, C = 0, A, b, x, _, v, F, S, D, P = new it.Buf8(4), B, I, w = (
    /* permutation of code lengths */
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
  );
  if (!t || !t.state || !t.output || !t.input && t.avail_in !== 0)
    return vt;
  r = t.state, r.mode === ur && (r.mode = Hl), s = t.next_out, n = t.output, c = t.avail_out, a = t.next_in, i = t.input, o = t.avail_in, l = r.hold, f = r.bits, u = o, h = c, D = Ni;
  e:
    for (; ; )
      switch (r.mode) {
        case o4:
          if (r.wrap === 0) {
            r.mode = Hl;
            break;
          }
          for (; f < 16; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if (r.wrap & 2 && l === 35615) {
            r.check = 0, P[0] = l & 255, P[1] = l >>> 8 & 255, r.check = Lt(r.check, P, 2, 0), l = 0, f = 0, r.mode = wh;
            break;
          }
          if (r.flags = 0, r.head && (r.head.done = !1), !(r.wrap & 1) || /* check if zlib header allowed */
          (((l & 255) << 8) + (l >> 8)) % 31) {
            t.msg = "incorrect header check", r.mode = a0;
            break;
          }
          if ((l & 15) !== xh) {
            t.msg = "unknown compression method", r.mode = a0;
            break;
          }
          if (l >>>= 4, f -= 4, S = (l & 15) + 8, r.wbits === 0)
            r.wbits = S;
          else if (S > r.wbits) {
            t.msg = "invalid window size", r.mode = a0;
            break;
          }
          r.dmax = 1 << S, t.adler = r.check = 1, r.mode = l & 512 ? kh : ur, l = 0, f = 0;
          break;
        case wh:
          for (; f < 16; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if (r.flags = l, (r.flags & 255) !== xh) {
            t.msg = "unknown compression method", r.mode = a0;
            break;
          }
          if (r.flags & 57344) {
            t.msg = "unknown header flags set", r.mode = a0;
            break;
          }
          r.head && (r.head.text = l >> 8 & 1), r.flags & 512 && (P[0] = l & 255, P[1] = l >>> 8 & 255, r.check = Lt(r.check, P, 2, 0)), l = 0, f = 0, r.mode = yh;
        case yh:
          for (; f < 32; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          r.head && (r.head.time = l), r.flags & 512 && (P[0] = l & 255, P[1] = l >>> 8 & 255, P[2] = l >>> 16 & 255, P[3] = l >>> 24 & 255, r.check = Lt(r.check, P, 4, 0)), l = 0, f = 0, r.mode = _h;
        case _h:
          for (; f < 16; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          r.head && (r.head.xflags = l & 255, r.head.os = l >> 8), r.flags & 512 && (P[0] = l & 255, P[1] = l >>> 8 & 255, r.check = Lt(r.check, P, 2, 0)), l = 0, f = 0, r.mode = Ah;
        case Ah:
          if (r.flags & 1024) {
            for (; f < 16; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            r.length = l, r.head && (r.head.extra_len = l), r.flags & 512 && (P[0] = l & 255, P[1] = l >>> 8 & 255, r.check = Lt(r.check, P, 2, 0)), l = 0, f = 0;
          } else r.head && (r.head.extra = null);
          r.mode = Eh;
        case Eh:
          if (r.flags & 1024 && (d = r.length, d > o && (d = o), d && (r.head && (S = r.head.extra_len - r.length, r.head.extra || (r.head.extra = new Array(r.head.extra_len)), it.arraySet(
            r.head.extra,
            i,
            a,
            // extra field is limited to 65536 bytes
            // - no need for additional size check
            d,
            /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
            S
          )), r.flags & 512 && (r.check = Lt(r.check, i, d, a)), o -= d, a += d, r.length -= d), r.length))
            break e;
          r.length = 0, r.mode = Ch;
        case Ch:
          if (r.flags & 2048) {
            if (o === 0)
              break e;
            d = 0;
            do
              S = i[a + d++], r.head && S && r.length < 65536 && (r.head.name += String.fromCharCode(S));
            while (S && d < o);
            if (r.flags & 512 && (r.check = Lt(r.check, i, d, a)), o -= d, a += d, S)
              break e;
          } else r.head && (r.head.name = null);
          r.length = 0, r.mode = Sh;
        case Sh:
          if (r.flags & 4096) {
            if (o === 0)
              break e;
            d = 0;
            do
              S = i[a + d++], r.head && S && r.length < 65536 && (r.head.comment += String.fromCharCode(S));
            while (S && d < o);
            if (r.flags & 512 && (r.check = Lt(r.check, i, d, a)), o -= d, a += d, S)
              break e;
          } else r.head && (r.head.comment = null);
          r.mode = Th;
        case Th:
          if (r.flags & 512) {
            for (; f < 16; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            if (l !== (r.check & 65535)) {
              t.msg = "header crc mismatch", r.mode = a0;
              break;
            }
            l = 0, f = 0;
          }
          r.head && (r.head.hcrc = r.flags >> 9 & 1, r.head.done = !0), t.adler = r.check = 0, r.mode = ur;
          break;
        case kh:
          for (; f < 32; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          t.adler = r.check = zh(l), l = 0, f = 0, r.mode = go;
        case go:
          if (r.havedict === 0)
            return t.next_out = s, t.avail_out = c, t.next_in = a, t.avail_in = o, r.hold = l, r.bits = f, Zm;
          t.adler = r.check = 1, r.mode = ur;
        case ur:
          if (e === Ym || e === Fs)
            break e;
        case Hl:
          if (r.last) {
            l >>>= f & 7, f -= f & 7, r.mode = Vl;
            break;
          }
          for (; f < 3; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          switch (r.last = l & 1, l >>>= 1, f -= 1, l & 3) {
            case 0:
              r.mode = Fh;
              break;
            case 1:
              if (i8(r), r.mode = Os, e === Fs) {
                l >>>= 2, f -= 2;
                break e;
              }
              break;
            case 2:
              r.mode = Dh;
              break;
            case 3:
              t.msg = "invalid block type", r.mode = a0;
          }
          l >>>= 2, f -= 2;
          break;
        case Fh:
          for (l >>>= f & 7, f -= f & 7; f < 32; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if ((l & 65535) !== (l >>> 16 ^ 65535)) {
            t.msg = "invalid stored block lengths", r.mode = a0;
            break;
          }
          if (r.length = l & 65535, l = 0, f = 0, r.mode = ql, e === Fs)
            break e;
        case ql:
          r.mode = Oh;
        case Oh:
          if (d = r.length, d) {
            if (d > o && (d = o), d > c && (d = c), d === 0)
              break e;
            it.arraySet(n, i, a, d, s), o -= d, a += d, c -= d, s += d, r.length -= d;
            break;
          }
          r.mode = ur;
          break;
        case Dh:
          for (; f < 14; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if (r.nlen = (l & 31) + 257, l >>>= 5, f -= 5, r.ndist = (l & 31) + 1, l >>>= 5, f -= 5, r.ncode = (l & 15) + 4, l >>>= 4, f -= 4, r.nlen > 286 || r.ndist > 30) {
            t.msg = "too many length or distance symbols", r.mode = a0;
            break;
          }
          r.have = 0, r.mode = Bh;
        case Bh:
          for (; r.have < r.ncode; ) {
            for (; f < 3; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            r.lens[w[r.have++]] = l & 7, l >>>= 3, f -= 3;
          }
          for (; r.have < 19; )
            r.lens[w[r.have++]] = 0;
          if (r.lencode = r.lendyn, r.lenbits = 7, B = { bits: r.lenbits }, D = _a(Vm, r.lens, 0, 19, r.lencode, 0, r.work, B), r.lenbits = B.bits, D) {
            t.msg = "invalid code lengths set", r.mode = a0;
            break;
          }
          r.have = 0, r.mode = Ih;
        case Ih:
          for (; r.have < r.nlen + r.ndist; ) {
            for (; C = r.lencode[l & (1 << r.lenbits) - 1], A = C >>> 24, b = C >>> 16 & 255, x = C & 65535, !(A <= f); ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            if (x < 16)
              l >>>= A, f -= A, r.lens[r.have++] = x;
            else {
              if (x === 16) {
                for (I = A + 2; f < I; ) {
                  if (o === 0)
                    break e;
                  o--, l += i[a++] << f, f += 8;
                }
                if (l >>>= A, f -= A, r.have === 0) {
                  t.msg = "invalid bit length repeat", r.mode = a0;
                  break;
                }
                S = r.lens[r.have - 1], d = 3 + (l & 3), l >>>= 2, f -= 2;
              } else if (x === 17) {
                for (I = A + 3; f < I; ) {
                  if (o === 0)
                    break e;
                  o--, l += i[a++] << f, f += 8;
                }
                l >>>= A, f -= A, S = 0, d = 3 + (l & 7), l >>>= 3, f -= 3;
              } else {
                for (I = A + 7; f < I; ) {
                  if (o === 0)
                    break e;
                  o--, l += i[a++] << f, f += 8;
                }
                l >>>= A, f -= A, S = 0, d = 11 + (l & 127), l >>>= 7, f -= 7;
              }
              if (r.have + d > r.nlen + r.ndist) {
                t.msg = "invalid bit length repeat", r.mode = a0;
                break;
              }
              for (; d--; )
                r.lens[r.have++] = S;
            }
          }
          if (r.mode === a0)
            break;
          if (r.lens[256] === 0) {
            t.msg = "invalid code -- missing end-of-block", r.mode = a0;
            break;
          }
          if (r.lenbits = 9, B = { bits: r.lenbits }, D = _a(i4, r.lens, 0, r.nlen, r.lencode, 0, r.work, B), r.lenbits = B.bits, D) {
            t.msg = "invalid literal/lengths set", r.mode = a0;
            break;
          }
          if (r.distbits = 6, r.distcode = r.distdyn, B = { bits: r.distbits }, D = _a(n4, r.lens, r.nlen, r.ndist, r.distcode, 0, r.work, B), r.distbits = B.bits, D) {
            t.msg = "invalid distances set", r.mode = a0;
            break;
          }
          if (r.mode = Os, e === Fs)
            break e;
        case Os:
          r.mode = Ds;
        case Ds:
          if (o >= 6 && c >= 258) {
            t.next_out = s, t.avail_out = c, t.next_in = a, t.avail_in = o, r.hold = l, r.bits = f, qm(t, h), s = t.next_out, n = t.output, c = t.avail_out, a = t.next_in, i = t.input, o = t.avail_in, l = r.hold, f = r.bits, r.mode === ur && (r.back = -1);
            break;
          }
          for (r.back = 0; C = r.lencode[l & (1 << r.lenbits) - 1], A = C >>> 24, b = C >>> 16 & 255, x = C & 65535, !(A <= f); ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if (b && !(b & 240)) {
            for (_ = A, v = b, F = x; C = r.lencode[F + ((l & (1 << _ + v) - 1) >> _)], A = C >>> 24, b = C >>> 16 & 255, x = C & 65535, !(_ + A <= f); ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            l >>>= _, f -= _, r.back += _;
          }
          if (l >>>= A, f -= A, r.back += A, r.length = x, b === 0) {
            r.mode = Mh;
            break;
          }
          if (b & 32) {
            r.back = -1, r.mode = ur;
            break;
          }
          if (b & 64) {
            t.msg = "invalid literal/length code", r.mode = a0;
            break;
          }
          r.extra = b & 15, r.mode = Rh;
        case Rh:
          if (r.extra) {
            for (I = r.extra; f < I; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            r.length += l & (1 << r.extra) - 1, l >>>= r.extra, f -= r.extra, r.back += r.extra;
          }
          r.was = r.length, r.mode = Ph;
        case Ph:
          for (; C = r.distcode[l & (1 << r.distbits) - 1], A = C >>> 24, b = C >>> 16 & 255, x = C & 65535, !(A <= f); ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if (!(b & 240)) {
            for (_ = A, v = b, F = x; C = r.distcode[F + ((l & (1 << _ + v) - 1) >> _)], A = C >>> 24, b = C >>> 16 & 255, x = C & 65535, !(_ + A <= f); ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            l >>>= _, f -= _, r.back += _;
          }
          if (l >>>= A, f -= A, r.back += A, b & 64) {
            t.msg = "invalid distance code", r.mode = a0;
            break;
          }
          r.offset = x, r.extra = b & 15, r.mode = Lh;
        case Lh:
          if (r.extra) {
            for (I = r.extra; f < I; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            r.offset += l & (1 << r.extra) - 1, l >>>= r.extra, f -= r.extra, r.back += r.extra;
          }
          if (r.offset > r.dmax) {
            t.msg = "invalid distance too far back", r.mode = a0;
            break;
          }
          r.mode = Nh;
        case Nh:
          if (c === 0)
            break e;
          if (d = h - c, r.offset > d) {
            if (d = r.offset - d, d > r.whave && r.sane) {
              t.msg = "invalid distance too far back", r.mode = a0;
              break;
            }
            d > r.wnext ? (d -= r.wnext, p = r.wsize - d) : p = r.wnext - d, d > r.length && (d = r.length), m = r.window;
          } else
            m = n, p = s - r.offset, d = r.length;
          d > c && (d = c), c -= d, r.length -= d;
          do
            n[s++] = m[p++];
          while (--d);
          r.length === 0 && (r.mode = Ds);
          break;
        case Mh:
          if (c === 0)
            break e;
          n[s++] = r.length, c--, r.mode = Ds;
          break;
        case Vl:
          if (r.wrap) {
            for (; f < 32; ) {
              if (o === 0)
                break e;
              o--, l |= i[a++] << f, f += 8;
            }
            if (h -= c, t.total_out += h, r.total += h, h && (t.adler = r.check = /*UPDATE(state.check, put - _out, _out);*/
            r.flags ? Lt(r.check, n, h, s - h) : V1(r.check, n, h, s - h)), h = c, (r.flags ? l : zh(l)) !== r.check) {
              t.msg = "incorrect data check", r.mode = a0;
              break;
            }
            l = 0, f = 0;
          }
          r.mode = Uh;
        case Uh:
          if (r.wrap && r.flags) {
            for (; f < 32; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            if (l !== (r.total & 4294967295)) {
              t.msg = "incorrect length check", r.mode = a0;
              break;
            }
            l = 0, f = 0;
          }
          r.mode = $h;
        case $h:
          D = Gm;
          break e;
        case a0:
          D = a4;
          break e;
        case l4:
          return s4;
        case Xm:
        default:
          return vt;
      }
  return t.next_out = s, t.avail_out = c, t.next_in = a, t.avail_in = o, r.hold = l, r.bits = f, (r.wsize || h !== t.avail_out && r.mode < a0 && (r.mode < Vl || e !== bh)) && d4(t, t.output, t.next_out, h - t.avail_out), u -= t.avail_in, h -= t.avail_out, t.total_in += u, t.total_out += h, r.total += h, r.wrap && h && (t.adler = r.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
  r.flags ? Lt(r.check, n, h, t.next_out - h) : V1(r.check, n, h, t.next_out - h)), t.data_type = r.bits + (r.last ? 64 : 0) + (r.mode === ur ? 128 : 0) + (r.mode === Os || r.mode === ql ? 256 : 0), (u === 0 && h === 0 || e === bh) && D === Ni && (D = jm), D;
}
function a8(t) {
  if (!t || !t.state)
    return vt;
  var e = t.state;
  return e.window && (e.window = null), t.state = null, Ni;
}
function s8(t, e) {
  var r;
  return !t || !t.state || (r = t.state, !(r.wrap & 2)) ? vt : (r.head = e, e.done = !1, Ni);
}
function o8(t, e) {
  var r = e.length, i, n, a;
  return !t || !t.state || (i = t.state, i.wrap !== 0 && i.mode !== go) ? vt : i.mode === go && (n = 1, n = V1(n, e, r, 0), n !== i.check) ? a4 : (a = d4(t, e, r, r), a ? (i.mode = l4, s4) : (i.havedict = 1, Ni));
}
Bt.inflateReset = f4;
Bt.inflateReset2 = u4;
Bt.inflateResetKeep = c4;
Bt.inflateInit = r8;
Bt.inflateInit2 = h4;
Bt.inflate = n8;
Bt.inflateEnd = a8;
Bt.inflateGetHeader = s8;
Bt.inflateSetDictionary = o8;
Bt.inflateInfo = "pako inflate (from Nodeca project)";
var l8 = {
  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,
  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,
  /* The deflate compression method */
  Z_DEFLATED: 8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};
const c8 = /* @__PURE__ */ Dt(l8);
var g4 = { exports: {} };
function f8(t) {
  throw new Error('Could not dynamically require "' + t + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var Zl = { exports: {} };
const u8 = {}, h8 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: u8
}, Symbol.toStringTag, { value: "Module" })), d8 = /* @__PURE__ */ Fv(h8);
var Hh;
function $e() {
  return Hh || (Hh = 1, function(t, e) {
    (function(r, i) {
      t.exports = i();
    })(Pe, function() {
      var r = r || function(i, n) {
        var a;
        if (typeof window < "u" && window.crypto && (a = window.crypto), typeof self < "u" && self.crypto && (a = self.crypto), typeof globalThis < "u" && globalThis.crypto && (a = globalThis.crypto), !a && typeof window < "u" && window.msCrypto && (a = window.msCrypto), !a && typeof window < "u" && window.crypto && (a = window.crypto), !a && typeof f8 == "function")
          try {
            a = d8;
          } catch {
          }
        var s = function() {
          if (a) {
            if (typeof a.getRandomValues == "function")
              try {
                return a.getRandomValues(new Uint32Array(1))[0];
              } catch {
              }
            if (typeof a.randomBytes == "function")
              try {
                return a.randomBytes(4).readInt32LE();
              } catch {
              }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        }, o = Object.create || /* @__PURE__ */ function() {
          function b() {
          }
          return function(x) {
            var _;
            return b.prototype = x, _ = new b(), b.prototype = null, _;
          };
        }(), c = {}, l = c.lib = {}, f = l.Base = /* @__PURE__ */ function() {
          return {
            /**
             * Creates a new object that inherits from this object.
             *
             * @param {Object} overrides Properties to copy into the new object.
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         field: 'value',
             *
             *         method: function () {
             *         }
             *     });
             */
            extend: function(b) {
              var x = o(this);
              return b && x.mixIn(b), (!x.hasOwnProperty("init") || this.init === x.init) && (x.init = function() {
                x.$super.init.apply(this, arguments);
              }), x.init.prototype = x, x.$super = this, x;
            },
            /**
             * Extends this object and runs the init method.
             * Arguments to create() will be passed to init().
             *
             * @return {Object} The new object.
             *
             * @static
             *
             * @example
             *
             *     var instance = MyType.create();
             */
            create: function() {
              var b = this.extend();
              return b.init.apply(b, arguments), b;
            },
            /**
             * Initializes a newly created object.
             * Override this method to add some logic when your objects are created.
             *
             * @example
             *
             *     var MyType = CryptoJS.lib.Base.extend({
             *         init: function () {
             *             // ...
             *         }
             *     });
             */
            init: function() {
            },
            /**
             * Copies properties into this object.
             *
             * @param {Object} properties The properties to mix in.
             *
             * @example
             *
             *     MyType.mixIn({
             *         field: 'value'
             *     });
             */
            mixIn: function(b) {
              for (var x in b)
                b.hasOwnProperty(x) && (this[x] = b[x]);
              b.hasOwnProperty("toString") && (this.toString = b.toString);
            },
            /**
             * Creates a copy of this object.
             *
             * @return {Object} The clone.
             *
             * @example
             *
             *     var clone = instance.clone();
             */
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }(), u = l.WordArray = f.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of 32-bit words.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.create();
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
           *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
           */
          init: function(b, x) {
            b = this.words = b || [], x != n ? this.sigBytes = x : this.sigBytes = b.length * 4;
          },
          /**
           * Converts this word array to a string.
           *
           * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
           *
           * @return {string} The stringified word array.
           *
           * @example
           *
           *     var string = wordArray + '';
           *     var string = wordArray.toString();
           *     var string = wordArray.toString(CryptoJS.enc.Utf8);
           */
          toString: function(b) {
            return (b || d).stringify(this);
          },
          /**
           * Concatenates a word array to this word array.
           *
           * @param {WordArray} wordArray The word array to append.
           *
           * @return {WordArray} This word array.
           *
           * @example
           *
           *     wordArray1.concat(wordArray2);
           */
          concat: function(b) {
            var x = this.words, _ = b.words, v = this.sigBytes, F = b.sigBytes;
            if (this.clamp(), v % 4)
              for (var S = 0; S < F; S++) {
                var D = _[S >>> 2] >>> 24 - S % 4 * 8 & 255;
                x[v + S >>> 2] |= D << 24 - (v + S) % 4 * 8;
              }
            else
              for (var P = 0; P < F; P += 4)
                x[v + P >>> 2] = _[P >>> 2];
            return this.sigBytes += F, this;
          },
          /**
           * Removes insignificant bits.
           *
           * @example
           *
           *     wordArray.clamp();
           */
          clamp: function() {
            var b = this.words, x = this.sigBytes;
            b[x >>> 2] &= 4294967295 << 32 - x % 4 * 8, b.length = i.ceil(x / 4);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {WordArray} The clone.
           *
           * @example
           *
           *     var clone = wordArray.clone();
           */
          clone: function() {
            var b = f.clone.call(this);
            return b.words = this.words.slice(0), b;
          },
          /**
           * Creates a word array filled with random bytes.
           *
           * @param {number} nBytes The number of random bytes to generate.
           *
           * @return {WordArray} The random word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.lib.WordArray.random(16);
           */
          random: function(b) {
            for (var x = [], _ = 0; _ < b; _ += 4)
              x.push(s());
            return new u.init(x, b);
          }
        }), h = c.enc = {}, d = h.Hex = {
          /**
           * Converts a word array to a hex string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The hex string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
           */
          stringify: function(b) {
            for (var x = b.words, _ = b.sigBytes, v = [], F = 0; F < _; F++) {
              var S = x[F >>> 2] >>> 24 - F % 4 * 8 & 255;
              v.push((S >>> 4).toString(16)), v.push((S & 15).toString(16));
            }
            return v.join("");
          },
          /**
           * Converts a hex string to a word array.
           *
           * @param {string} hexStr The hex string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
           */
          parse: function(b) {
            for (var x = b.length, _ = [], v = 0; v < x; v += 2)
              _[v >>> 3] |= parseInt(b.substr(v, 2), 16) << 24 - v % 8 * 4;
            return new u.init(_, x / 2);
          }
        }, p = h.Latin1 = {
          /**
           * Converts a word array to a Latin1 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Latin1 string.
           *
           * @static
           *
           * @example
           *
           *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
           */
          stringify: function(b) {
            for (var x = b.words, _ = b.sigBytes, v = [], F = 0; F < _; F++) {
              var S = x[F >>> 2] >>> 24 - F % 4 * 8 & 255;
              v.push(String.fromCharCode(S));
            }
            return v.join("");
          },
          /**
           * Converts a Latin1 string to a word array.
           *
           * @param {string} latin1Str The Latin1 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
           */
          parse: function(b) {
            for (var x = b.length, _ = [], v = 0; v < x; v++)
              _[v >>> 2] |= (b.charCodeAt(v) & 255) << 24 - v % 4 * 8;
            return new u.init(_, x);
          }
        }, m = h.Utf8 = {
          /**
           * Converts a word array to a UTF-8 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-8 string.
           *
           * @static
           *
           * @example
           *
           *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
           */
          stringify: function(b) {
            try {
              return decodeURIComponent(escape(p.stringify(b)));
            } catch {
              throw new Error("Malformed UTF-8 data");
            }
          },
          /**
           * Converts a UTF-8 string to a word array.
           *
           * @param {string} utf8Str The UTF-8 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
           */
          parse: function(b) {
            return p.parse(unescape(encodeURIComponent(b)));
          }
        }, C = l.BufferedBlockAlgorithm = f.extend({
          /**
           * Resets this block algorithm's data buffer to its initial state.
           *
           * @example
           *
           *     bufferedBlockAlgorithm.reset();
           */
          reset: function() {
            this._data = new u.init(), this._nDataBytes = 0;
          },
          /**
           * Adds new data to this block algorithm's buffer.
           *
           * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
           *
           * @example
           *
           *     bufferedBlockAlgorithm._append('data');
           *     bufferedBlockAlgorithm._append(wordArray);
           */
          _append: function(b) {
            typeof b == "string" && (b = m.parse(b)), this._data.concat(b), this._nDataBytes += b.sigBytes;
          },
          /**
           * Processes available data blocks.
           *
           * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
           *
           * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
           *
           * @return {WordArray} The processed data.
           *
           * @example
           *
           *     var processedData = bufferedBlockAlgorithm._process();
           *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
           */
          _process: function(b) {
            var x, _ = this._data, v = _.words, F = _.sigBytes, S = this.blockSize, D = S * 4, P = F / D;
            b ? P = i.ceil(P) : P = i.max((P | 0) - this._minBufferSize, 0);
            var B = P * S, I = i.min(B * 4, F);
            if (B) {
              for (var w = 0; w < B; w += S)
                this._doProcessBlock(v, w);
              x = v.splice(0, B), _.sigBytes -= I;
            }
            return new u.init(x, I);
          },
          /**
           * Creates a copy of this object.
           *
           * @return {Object} The clone.
           *
           * @example
           *
           *     var clone = bufferedBlockAlgorithm.clone();
           */
          clone: function() {
            var b = f.clone.call(this);
            return b._data = this._data.clone(), b;
          },
          _minBufferSize: 0
        });
        l.Hasher = C.extend({
          /**
           * Configuration options.
           */
          cfg: f.extend(),
          /**
           * Initializes a newly created hasher.
           *
           * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
           *
           * @example
           *
           *     var hasher = CryptoJS.algo.SHA256.create();
           */
          init: function(b) {
            this.cfg = this.cfg.extend(b), this.reset();
          },
          /**
           * Resets this hasher to its initial state.
           *
           * @example
           *
           *     hasher.reset();
           */
          reset: function() {
            C.reset.call(this), this._doReset();
          },
          /**
           * Updates this hasher with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {Hasher} This hasher.
           *
           * @example
           *
           *     hasher.update('message');
           *     hasher.update(wordArray);
           */
          update: function(b) {
            return this._append(b), this._process(), this;
          },
          /**
           * Finalizes the hash computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The hash.
           *
           * @example
           *
           *     var hash = hasher.finalize();
           *     var hash = hasher.finalize('message');
           *     var hash = hasher.finalize(wordArray);
           */
          finalize: function(b) {
            b && this._append(b);
            var x = this._doFinalize();
            return x;
          },
          blockSize: 16,
          /**
           * Creates a shortcut function to a hasher's object interface.
           *
           * @param {Hasher} hasher The hasher to create a helper for.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
           */
          _createHelper: function(b) {
            return function(x, _) {
              return new b.init(_).finalize(x);
            };
          },
          /**
           * Creates a shortcut function to the HMAC's object interface.
           *
           * @param {Hasher} hasher The hasher to use in this HMAC helper.
           *
           * @return {Function} The shortcut function.
           *
           * @static
           *
           * @example
           *
           *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
           */
          _createHmacHelper: function(b) {
            return function(x, _) {
              return new A.HMAC.init(b, _).finalize(x);
            };
          }
        });
        var A = c.algo = {};
        return c;
      }(Math);
      return r;
    });
  }(Zl)), Zl.exports;
}
(function(t, e) {
  (function(r, i) {
    t.exports = i($e());
  })(Pe, function(r) {
    return function(i) {
      var n = r, a = n.lib, s = a.WordArray, o = a.Hasher, c = n.algo, l = [];
      (function() {
        for (var m = 0; m < 64; m++)
          l[m] = i.abs(i.sin(m + 1)) * 4294967296 | 0;
      })();
      var f = c.MD5 = o.extend({
        _doReset: function() {
          this._hash = new s.init([
            1732584193,
            4023233417,
            2562383102,
            271733878
          ]);
        },
        _doProcessBlock: function(m, C) {
          for (var A = 0; A < 16; A++) {
            var b = C + A, x = m[b];
            m[b] = (x << 8 | x >>> 24) & 16711935 | (x << 24 | x >>> 8) & 4278255360;
          }
          var _ = this._hash.words, v = m[C + 0], F = m[C + 1], S = m[C + 2], D = m[C + 3], P = m[C + 4], B = m[C + 5], I = m[C + 6], w = m[C + 7], k = m[C + 8], z = m[C + 9], H = m[C + 10], re = m[C + 11], ie = m[C + 12], X = m[C + 13], oe = m[C + 14], ae = m[C + 15], V = _[0], Q = _[1], ne = _[2], ee = _[3];
          V = u(V, Q, ne, ee, v, 7, l[0]), ee = u(ee, V, Q, ne, F, 12, l[1]), ne = u(ne, ee, V, Q, S, 17, l[2]), Q = u(Q, ne, ee, V, D, 22, l[3]), V = u(V, Q, ne, ee, P, 7, l[4]), ee = u(ee, V, Q, ne, B, 12, l[5]), ne = u(ne, ee, V, Q, I, 17, l[6]), Q = u(Q, ne, ee, V, w, 22, l[7]), V = u(V, Q, ne, ee, k, 7, l[8]), ee = u(ee, V, Q, ne, z, 12, l[9]), ne = u(ne, ee, V, Q, H, 17, l[10]), Q = u(Q, ne, ee, V, re, 22, l[11]), V = u(V, Q, ne, ee, ie, 7, l[12]), ee = u(ee, V, Q, ne, X, 12, l[13]), ne = u(ne, ee, V, Q, oe, 17, l[14]), Q = u(Q, ne, ee, V, ae, 22, l[15]), V = h(V, Q, ne, ee, F, 5, l[16]), ee = h(ee, V, Q, ne, I, 9, l[17]), ne = h(ne, ee, V, Q, re, 14, l[18]), Q = h(Q, ne, ee, V, v, 20, l[19]), V = h(V, Q, ne, ee, B, 5, l[20]), ee = h(ee, V, Q, ne, H, 9, l[21]), ne = h(ne, ee, V, Q, ae, 14, l[22]), Q = h(Q, ne, ee, V, P, 20, l[23]), V = h(V, Q, ne, ee, z, 5, l[24]), ee = h(ee, V, Q, ne, oe, 9, l[25]), ne = h(ne, ee, V, Q, D, 14, l[26]), Q = h(Q, ne, ee, V, k, 20, l[27]), V = h(V, Q, ne, ee, X, 5, l[28]), ee = h(ee, V, Q, ne, S, 9, l[29]), ne = h(ne, ee, V, Q, w, 14, l[30]), Q = h(Q, ne, ee, V, ie, 20, l[31]), V = d(V, Q, ne, ee, B, 4, l[32]), ee = d(ee, V, Q, ne, k, 11, l[33]), ne = d(ne, ee, V, Q, re, 16, l[34]), Q = d(Q, ne, ee, V, oe, 23, l[35]), V = d(V, Q, ne, ee, F, 4, l[36]), ee = d(ee, V, Q, ne, P, 11, l[37]), ne = d(ne, ee, V, Q, w, 16, l[38]), Q = d(Q, ne, ee, V, H, 23, l[39]), V = d(V, Q, ne, ee, X, 4, l[40]), ee = d(ee, V, Q, ne, v, 11, l[41]), ne = d(ne, ee, V, Q, D, 16, l[42]), Q = d(Q, ne, ee, V, I, 23, l[43]), V = d(V, Q, ne, ee, z, 4, l[44]), ee = d(ee, V, Q, ne, ie, 11, l[45]), ne = d(ne, ee, V, Q, ae, 16, l[46]), Q = d(Q, ne, ee, V, S, 23, l[47]), V = p(V, Q, ne, ee, v, 6, l[48]), ee = p(ee, V, Q, ne, w, 10, l[49]), ne = p(ne, ee, V, Q, oe, 15, l[50]), Q = p(Q, ne, ee, V, B, 21, l[51]), V = p(V, Q, ne, ee, ie, 6, l[52]), ee = p(ee, V, Q, ne, D, 10, l[53]), ne = p(ne, ee, V, Q, H, 15, l[54]), Q = p(Q, ne, ee, V, F, 21, l[55]), V = p(V, Q, ne, ee, k, 6, l[56]), ee = p(ee, V, Q, ne, ae, 10, l[57]), ne = p(ne, ee, V, Q, I, 15, l[58]), Q = p(Q, ne, ee, V, X, 21, l[59]), V = p(V, Q, ne, ee, P, 6, l[60]), ee = p(ee, V, Q, ne, re, 10, l[61]), ne = p(ne, ee, V, Q, S, 15, l[62]), Q = p(Q, ne, ee, V, z, 21, l[63]), _[0] = _[0] + V | 0, _[1] = _[1] + Q | 0, _[2] = _[2] + ne | 0, _[3] = _[3] + ee | 0;
        },
        _doFinalize: function() {
          var m = this._data, C = m.words, A = this._nDataBytes * 8, b = m.sigBytes * 8;
          C[b >>> 5] |= 128 << 24 - b % 32;
          var x = i.floor(A / 4294967296), _ = A;
          C[(b + 64 >>> 9 << 4) + 15] = (x << 8 | x >>> 24) & 16711935 | (x << 24 | x >>> 8) & 4278255360, C[(b + 64 >>> 9 << 4) + 14] = (_ << 8 | _ >>> 24) & 16711935 | (_ << 24 | _ >>> 8) & 4278255360, m.sigBytes = (C.length + 1) * 4, this._process();
          for (var v = this._hash, F = v.words, S = 0; S < 4; S++) {
            var D = F[S];
            F[S] = (D << 8 | D >>> 24) & 16711935 | (D << 24 | D >>> 8) & 4278255360;
          }
          return v;
        },
        clone: function() {
          var m = o.clone.call(this);
          return m._hash = this._hash.clone(), m;
        }
      });
      function u(m, C, A, b, x, _, v) {
        var F = m + (C & A | ~C & b) + x + v;
        return (F << _ | F >>> 32 - _) + C;
      }
      function h(m, C, A, b, x, _, v) {
        var F = m + (C & b | A & ~b) + x + v;
        return (F << _ | F >>> 32 - _) + C;
      }
      function d(m, C, A, b, x, _, v) {
        var F = m + (C ^ A ^ b) + x + v;
        return (F << _ | F >>> 32 - _) + C;
      }
      function p(m, C, A, b, x, _, v) {
        var F = m + (A ^ (C | ~b)) + x + v;
        return (F << _ | F >>> 32 - _) + C;
      }
      n.MD5 = o._createHelper(f), n.HmacMD5 = o._createHmacHelper(f);
    }(Math), r.MD5;
  });
})(g4);
var ii = g4.exports;
const g8 = /* @__PURE__ */ Dt(ii), p8 = {
  utf16le: "utf-16le",
  ucs2: "utf-16le",
  utf16be: "utf-16be"
};
class k0 {
  constructor(e) {
    this.buffer = e, this.view = new DataView(e.buffer, e.byteOffset, e.byteLength), this.pos = 0, this.length = this.buffer.length;
  }
  readString(e, r = "ascii") {
    r = p8[r] || r;
    let i = this.readBuffer(e);
    try {
      return new TextDecoder(r).decode(i);
    } catch {
      return i;
    }
  }
  readBuffer(e) {
    return this.buffer.slice(this.pos, this.pos += e);
  }
  readUInt24BE() {
    return (this.readUInt16BE() << 8) + this.readUInt8();
  }
  readUInt24LE() {
    return this.readUInt16LE() + (this.readUInt8() << 16);
  }
  readInt24BE() {
    return (this.readInt16BE() << 8) + this.readUInt8();
  }
  readInt24LE() {
    return this.readUInt16LE() + (this.readInt8() << 16);
  }
}
k0.TYPES = {
  UInt8: 1,
  UInt16: 2,
  UInt24: 3,
  UInt32: 4,
  Int8: 1,
  Int16: 2,
  Int24: 3,
  Int32: 4,
  Float: 4,
  Double: 8
};
for (let t of Object.getOwnPropertyNames(DataView.prototype))
  if (t.slice(0, 3) === "get") {
    let e = t.slice(3).replace("Ui", "UI");
    e === "Float32" ? e = "Float" : e === "Float64" && (e = "Double");
    let r = k0.TYPES[e];
    k0.prototype["read" + e + (r === 1 ? "" : "BE")] = function() {
      const i = this.view[t](this.pos, !1);
      return this.pos += r, i;
    }, r !== 1 && (k0.prototype["read" + e + "LE"] = function() {
      const i = this.view[t](this.pos, !0);
      return this.pos += r, i;
    });
  }
const v8 = new TextEncoder(), qh = new Uint8Array(new Uint16Array([4660]).buffer)[0] == 18;
class po {
  constructor(e) {
    this.buffer = e, this.view = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength), this.pos = 0;
  }
  writeBuffer(e) {
    this.buffer.set(e, this.pos), this.pos += e.length;
  }
  writeString(e, r = "ascii") {
    let i;
    switch (r) {
      case "utf16le":
      case "utf16-le":
      case "ucs2":
        i = Vh(e, qh);
        break;
      case "utf16be":
      case "utf16-be":
        i = Vh(e, !qh);
        break;
      case "utf8":
        i = v8.encode(e);
        break;
      case "ascii":
        i = m8(e);
        break;
      default:
        throw new Error(`Unsupported encoding: ${r}`);
    }
    this.writeBuffer(i);
  }
  writeUInt24BE(e) {
    this.buffer[this.pos++] = e >>> 16 & 255, this.buffer[this.pos++] = e >>> 8 & 255, this.buffer[this.pos++] = e & 255;
  }
  writeUInt24LE(e) {
    this.buffer[this.pos++] = e & 255, this.buffer[this.pos++] = e >>> 8 & 255, this.buffer[this.pos++] = e >>> 16 & 255;
  }
  writeInt24BE(e) {
    e >= 0 ? this.writeUInt24BE(e) : this.writeUInt24BE(e + 16777215 + 1);
  }
  writeInt24LE(e) {
    e >= 0 ? this.writeUInt24LE(e) : this.writeUInt24LE(e + 16777215 + 1);
  }
  fill(e, r) {
    if (r < this.buffer.length)
      this.buffer.fill(e, this.pos, this.pos + r), this.pos += r;
    else {
      const i = new Uint8Array(r);
      i.fill(e), this.writeBuffer(i);
    }
  }
}
function Vh(t, e) {
  let r = new Uint16Array(t.length);
  for (let i = 0; i < t.length; i++) {
    let n = t.charCodeAt(i);
    e && (n = n >> 8 | (n & 255) << 8), r[i] = n;
  }
  return new Uint8Array(r.buffer);
}
function m8(t) {
  let e = new Uint8Array(t.length);
  for (let r = 0; r < t.length; r++)
    e[r] = t.charCodeAt(r);
  return e;
}
for (let t of Object.getOwnPropertyNames(DataView.prototype))
  if (t.slice(0, 3) === "set") {
    let e = t.slice(3).replace("Ui", "UI");
    e === "Float32" ? e = "Float" : e === "Float64" && (e = "Double");
    let r = k0.TYPES[e];
    po.prototype["write" + e + (r === 1 ? "" : "BE")] = function(i) {
      this.view[t](this.pos, i, !1), this.pos += r;
    }, r !== 1 && (po.prototype["write" + e + "LE"] = function(i) {
      this.view[t](this.pos, i, !0), this.pos += r;
    });
  }
class Er {
  fromBuffer(e) {
    let r = new k0(e);
    return this.decode(r);
  }
  toBuffer(e) {
    let r = this.size(e), i = new Uint8Array(r), n = new po(i);
    return this.encode(n, e), i;
  }
}
class Ze extends Er {
  constructor(e, r = "BE") {
    super(), this.type = e, this.endian = r, this.fn = this.type, this.type[this.type.length - 1] !== "8" && (this.fn += this.endian);
  }
  size() {
    return k0.TYPES[this.type];
  }
  decode(e) {
    return e[`read${this.fn}`]();
  }
  encode(e, r) {
    return e[`write${this.fn}`](r);
  }
}
const se = new Ze("UInt8"), w0 = new Ze("UInt16", "BE"), g = w0, b8 = new Ze("UInt16", "LE"), x8 = new Ze("UInt24", "BE"), jr = x8;
new Ze("UInt24", "LE");
const p4 = new Ze("UInt32", "BE"), $ = p4, w8 = new Ze("UInt32", "LE"), m0 = new Ze("Int8"), y8 = new Ze("Int16", "BE"), te = y8;
new Ze("Int16", "LE");
new Ze("Int24", "BE");
new Ze("Int24", "LE");
const _8 = new Ze("Int32", "BE"), vi = _8;
new Ze("Int32", "LE");
new Ze("Float", "BE");
new Ze("Float", "LE");
new Ze("Double", "BE");
new Ze("Double", "LE");
class qi extends Ze {
  constructor(e, r, i = e >> 1) {
    super(`Int${e}`, r), this._point = 1 << i;
  }
  decode(e) {
    return super.decode(e) / this._point;
  }
  encode(e, r) {
    return super.encode(e, r * this._point | 0);
  }
}
const A8 = new qi(16, "BE"), E8 = A8;
new qi(16, "LE");
const C8 = new qi(32, "BE"), f0 = C8;
new qi(32, "LE");
function tr(t, e, r) {
  let i;
  if (typeof t == "number" ? i = t : typeof t == "function" ? i = t.call(r, r) : r && typeof t == "string" ? i = r[t] : e && t instanceof Ze && (i = t.decode(e)), isNaN(i))
    throw new Error("Not a fixed size");
  return i;
}
class Bf {
  constructor(e = {}) {
    this.enumerable = !0, this.configurable = !0;
    for (let r in e) {
      const i = e[r];
      this[r] = i;
    }
  }
}
class M extends Er {
  constructor(e, r, i = "count") {
    super(), this.type = e, this.length = r, this.lengthType = i;
  }
  decode(e, r) {
    let i;
    const { pos: n } = e, a = [];
    let s = r;
    if (this.length != null && (i = tr(this.length, e, r)), this.length instanceof Ze && (Object.defineProperties(a, {
      parent: { value: r },
      _startOffset: { value: n },
      _currentOffset: { value: 0, writable: !0 },
      _length: { value: i }
    }), s = a), i == null || this.lengthType === "bytes") {
      const o = i != null ? e.pos + i : r != null && r._length ? r._startOffset + r._length : e.length;
      for (; e.pos < o; )
        a.push(this.type.decode(e, s));
    } else
      for (let o = 0, c = i; o < c; o++)
        a.push(this.type.decode(e, s));
    return a;
  }
  size(e, r, i = !0) {
    if (!e)
      return this.type.size(null, r) * tr(this.length, null, r);
    let n = 0;
    this.length instanceof Ze && (n += this.length.size(), r = { parent: r, pointerSize: 0 });
    for (let a of e)
      n += this.type.size(a, r);
    return r && i && this.length instanceof Ze && (n += r.pointerSize), n;
  }
  encode(e, r, i) {
    let n = i;
    this.length instanceof Ze && (n = {
      pointers: [],
      startOffset: e.pos,
      parent: i
    }, n.pointerOffset = e.pos + this.size(r, n, !1), this.length.encode(e, r.length));
    for (let a of r)
      this.type.encode(e, a, n);
    if (this.length instanceof Ze) {
      let a = 0;
      for (; a < n.pointers.length; ) {
        const s = n.pointers[a++];
        s.type.encode(e, s.val, s.parent);
      }
    }
  }
}
class Je extends M {
  decode(e, r) {
    const { pos: i } = e, n = tr(this.length, e, r);
    this.length instanceof Ze && (r = {
      parent: r,
      _startOffset: i,
      _currentOffset: 0,
      _length: n
    });
    const a = new jl(this.type, n, e, r);
    return e.pos += n * this.type.size(null, r), a;
  }
  size(e, r) {
    return e instanceof jl && (e = e.toArray()), super.size(e, r);
  }
  encode(e, r, i) {
    return r instanceof jl && (r = r.toArray()), super.encode(e, r, i);
  }
}
class jl {
  constructor(e, r, i, n) {
    this.type = e, this.length = r, this.stream = i, this.ctx = n, this.base = this.stream.pos, this.items = [];
  }
  get(e) {
    if (!(e < 0 || e >= this.length)) {
      if (this.items[e] == null) {
        const { pos: r } = this.stream;
        this.stream.pos = this.base + this.type.size(null, this.ctx) * e, this.items[e] = this.type.decode(this.stream, this.ctx), this.stream.pos = r;
      }
      return this.items[e];
    }
  }
  toArray() {
    const e = [];
    for (let r = 0, i = this.length; r < i; r++)
      e.push(this.get(r));
    return e;
  }
}
class Tt extends Er {
  constructor(e, r = []) {
    super(), this.type = e, this.flags = r;
  }
  decode(e) {
    const r = this.type.decode(e), i = {};
    for (let n = 0; n < this.flags.length; n++) {
      const a = this.flags[n];
      a != null && (i[a] = !!(r & 1 << n));
    }
    return i;
  }
  size() {
    return this.type.size();
  }
  encode(e, r) {
    let i = 0;
    for (let n = 0; n < this.flags.length; n++) {
      const a = this.flags[n];
      a != null && r[a] && (i |= 1 << n);
    }
    return this.type.encode(e, i);
  }
}
class F0 extends Er {
  constructor(e) {
    super(), this.length = e;
  }
  decode(e, r) {
    const i = tr(this.length, e, r);
    return e.readBuffer(i);
  }
  size(e, r) {
    if (!e)
      return tr(this.length, null, r);
    let i = e.length;
    return this.length instanceof Ze && (i += this.length.size()), i;
  }
  encode(e, r, i) {
    return this.length instanceof Ze && this.length.encode(e, r.length), e.writeBuffer(r);
  }
}
class vo extends Er {
  constructor(e, r = !0) {
    super(), this.type = e, this.condition = r;
  }
  decode(e, r) {
    let { condition: i } = this;
    if (typeof i == "function" && (i = i.call(r, r)), i)
      return this.type.decode(e, r);
  }
  size(e, r) {
    let { condition: i } = this;
    return typeof i == "function" && (i = i.call(r, r)), i ? this.type.size(e, r) : 0;
  }
  encode(e, r, i) {
    let { condition: n } = this;
    if (typeof n == "function" && (n = n.call(i, i)), n)
      return this.type.encode(e, r, i);
  }
}
class r0 extends Er {
  constructor(e, r = 1) {
    super(), this.type = e, this.count = r;
  }
  decode(e, r) {
    e.pos += this.size(null, r);
  }
  size(e, r) {
    const i = tr(this.count, null, r);
    return this.type.size() * i;
  }
  encode(e, r, i) {
    return e.fill(0, this.size(r, i));
  }
}
class Ge extends Er {
  constructor(e, r = "ascii") {
    super(), this.length = e, this.encoding = r;
  }
  decode(e, r) {
    let i, n, { encoding: a } = this;
    typeof a == "function" && (a = a.call(r, r) || "ascii");
    let s = Xl(a);
    if (this.length != null)
      i = tr(this.length, e, r);
    else {
      let c;
      for ({ buffer: c, length: i, pos: n } = e; n < i - s + 1 && (c[n] !== 0 || s === 2 && c[n + 1] !== 0); )
        n += s;
      i = n - e.pos;
    }
    const o = e.readString(i, a);
    return this.length == null && e.pos < e.length && (e.pos += s), o;
  }
  size(e, r) {
    if (e == null)
      return tr(this.length, null, r);
    let { encoding: i } = this;
    typeof i == "function" && (i = i.call(r != null ? r.val : void 0, r != null ? r.val : void 0) || "ascii"), i === "utf16be" && (i = "utf16le");
    let n = Yh(e, i);
    return this.length instanceof Ze && (n += this.length.size()), this.length == null && (n += Xl(i)), n;
  }
  encode(e, r, i) {
    let { encoding: n } = this;
    if (typeof n == "function" && (n = n.call(i != null ? i.val : void 0, i != null ? i.val : void 0) || "ascii"), this.length instanceof Ze && this.length.encode(e, Yh(r, n)), e.writeString(r, n), this.length == null)
      return Xl(n) == 2 ? e.writeUInt16LE(0) : e.writeUInt8(0);
  }
}
function Xl(t) {
  switch (t) {
    case "ascii":
    case "utf8":
      return 1;
    case "utf16le":
    case "utf16-le":
    case "utf-16be":
    case "utf-16le":
    case "utf16be":
    case "utf16-be":
    case "ucs2":
      return 2;
    default:
      return 1;
  }
}
function Yh(t, e) {
  switch (e) {
    case "ascii":
      return t.length;
    case "utf8":
      let r = 0;
      for (let i = 0; i < t.length; i++) {
        let n = t.charCodeAt(i);
        if (n >= 55296 && n <= 56319 && i < t.length - 1) {
          let a = t.charCodeAt(++i);
          (a & 64512) === 56320 ? n = ((n & 1023) << 10) + (a & 1023) + 65536 : i--;
        }
        n & 4294967168 ? n & 4294965248 ? n & 4294901760 ? n & 4292870144 || (r += 4) : r += 3 : r += 2 : r++;
      }
      return r;
    case "utf16le":
    case "utf16-le":
    case "utf16be":
    case "utf16-be":
    case "ucs2":
      return t.length * 2;
    default:
      throw new Error("Unknown encoding " + e);
  }
}
class W extends Er {
  constructor(e = {}) {
    super(), this.fields = e;
  }
  decode(e, r, i = 0) {
    const n = this._setup(e, r, i);
    return this._parseFields(e, n, this.fields), this.process != null && this.process.call(n, e), n;
  }
  _setup(e, r, i) {
    const n = {};
    return Object.defineProperties(n, {
      parent: { value: r },
      _startOffset: { value: e.pos },
      _currentOffset: { value: 0, writable: !0 },
      _length: { value: i }
    }), n;
  }
  _parseFields(e, r, i) {
    for (let a in i) {
      var n;
      const s = i[a];
      typeof s == "function" ? n = s.call(r, r) : n = s.decode(e, r), n !== void 0 && (n instanceof Bf ? Object.defineProperty(r, a, n) : r[a] = n), r._currentOffset = e.pos - r._startOffset;
    }
  }
  size(e, r, i = !0) {
    e == null && (e = {});
    const n = {
      parent: r,
      val: e,
      pointerSize: 0
    };
    this.preEncode != null && this.preEncode.call(e);
    let a = 0;
    for (let s in this.fields) {
      const o = this.fields[s];
      o.size != null && (a += o.size(e[s], n));
    }
    return i && (a += n.pointerSize), a;
  }
  encode(e, r, i) {
    let n;
    this.preEncode != null && this.preEncode.call(r, e);
    const a = {
      pointers: [],
      startOffset: e.pos,
      parent: i,
      val: r,
      pointerSize: 0
    };
    a.pointerOffset = e.pos + this.size(r, a, !1);
    for (let o in this.fields)
      n = this.fields[o], n.encode != null && n.encode(e, r[o], a);
    let s = 0;
    for (; s < a.pointers.length; ) {
      const o = a.pointers[s++];
      o.type.encode(e, o.val, o.parent);
    }
  }
}
const S8 = (t, e) => e.reduce((r, i) => r && r[i], t);
class Te extends W {
  constructor(e, r = {}) {
    super(), this.type = e, this.versions = r, typeof e == "string" && (this.versionPath = e.split("."));
  }
  decode(e, r, i = 0) {
    const n = this._setup(e, r, i);
    typeof this.type == "string" ? n.version = S8(r, this.versionPath) : n.version = this.type.decode(e), this.versions.header && this._parseFields(e, n, this.versions.header);
    const a = this.versions[n.version];
    if (a == null)
      throw new Error(`Unknown version ${n.version}`);
    return a instanceof Te ? a.decode(e, r) : (this._parseFields(e, n, a), this.process != null && this.process.call(n, e), n);
  }
  size(e, r, i = !0) {
    let n, a;
    if (!e)
      throw new Error("Not a fixed size");
    this.preEncode != null && this.preEncode.call(e);
    const s = {
      parent: r,
      val: e,
      pointerSize: 0
    };
    let o = 0;
    if (typeof this.type != "string" && (o += this.type.size(e.version, s)), this.versions.header)
      for (n in this.versions.header)
        a = this.versions.header[n], a.size != null && (o += a.size(e[n], s));
    const c = this.versions[e.version];
    if (c == null)
      throw new Error(`Unknown version ${e.version}`);
    for (n in c)
      a = c[n], a.size != null && (o += a.size(e[n], s));
    return i && (o += s.pointerSize), o;
  }
  encode(e, r, i) {
    let n, a;
    this.preEncode != null && this.preEncode.call(r, e);
    const s = {
      pointers: [],
      startOffset: e.pos,
      parent: i,
      val: r,
      pointerSize: 0
    };
    if (s.pointerOffset = e.pos + this.size(r, s, !1), typeof this.type != "string" && this.type.encode(e, r.version), this.versions.header)
      for (n in this.versions.header)
        a = this.versions.header[n], a.encode != null && a.encode(e, r[n], s);
    const o = this.versions[r.version];
    for (n in o)
      a = o[n], a.encode != null && a.encode(e, r[n], s);
    let c = 0;
    for (; c < s.pointers.length; ) {
      const l = s.pointers[c++];
      l.type.encode(e, l.val, l.parent);
    }
  }
}
class U extends Er {
  constructor(e, r, i = {}) {
    if (super(), this.offsetType = e, this.type = r, this.options = i, this.type === "void" && (this.type = null), this.options.type == null && (this.options.type = "local"), this.options.allowNull == null && (this.options.allowNull = !0), this.options.nullValue == null && (this.options.nullValue = 0), this.options.lazy == null && (this.options.lazy = !1), this.options.relativeTo) {
      if (typeof this.options.relativeTo != "function")
        throw new Error("relativeTo option must be a function");
      this.relativeToGetter = i.relativeTo;
    }
  }
  decode(e, r) {
    const i = this.offsetType.decode(e, r);
    if (i === this.options.nullValue && this.options.allowNull)
      return null;
    let n;
    switch (this.options.type) {
      case "local":
        n = r._startOffset;
        break;
      case "immediate":
        n = e.pos - this.offsetType.size();
        break;
      case "parent":
        n = r.parent._startOffset;
        break;
      default:
        for (var a = r; a.parent; )
          a = a.parent;
        n = a._startOffset || 0;
    }
    this.options.relativeTo && (n += this.relativeToGetter(r));
    const s = i + n;
    if (this.type != null) {
      let o = null;
      const c = () => {
        if (o != null)
          return o;
        const { pos: l } = e;
        return e.pos = s, o = this.type.decode(e, r), e.pos = l, o;
      };
      return this.options.lazy ? new Bf({
        get: c
      }) : c();
    } else
      return s;
  }
  size(e, r) {
    const i = r;
    switch (this.options.type) {
      case "local":
      case "immediate":
        break;
      case "parent":
        r = r.parent;
        break;
      default:
        for (; r.parent; )
          r = r.parent;
    }
    let { type: n } = this;
    if (n == null) {
      if (!(e instanceof Y1))
        throw new Error("Must be a VoidPointer");
      ({ type: n } = e), e = e.value;
    }
    if (e && r) {
      let a = n.size(e, i);
      r.pointerSize += a;
    }
    return this.offsetType.size();
  }
  encode(e, r, i) {
    let n;
    const a = i;
    if (r == null) {
      this.offsetType.encode(e, this.options.nullValue);
      return;
    }
    switch (this.options.type) {
      case "local":
        n = i.startOffset;
        break;
      case "immediate":
        n = e.pos + this.offsetType.size(r, a);
        break;
      case "parent":
        i = i.parent, n = i.startOffset;
        break;
      default:
        for (n = 0; i.parent; )
          i = i.parent;
    }
    this.options.relativeTo && (n += this.relativeToGetter(a.val)), this.offsetType.encode(e, i.pointerOffset - n);
    let { type: s } = this;
    if (s == null) {
      if (!(r instanceof Y1))
        throw new Error("Must be a VoidPointer");
      ({ type: s } = r), r = r.value;
    }
    return i.pointers.push({
      type: s,
      val: r,
      parent: a
    }), i.pointerOffset += s.size(r, a);
  }
}
class Y1 {
  constructor(e, r) {
    this.type = e, this.value = r;
  }
}
function K0(t, e, r) {
  return e in t ? Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }) : t[e] = r, t;
}
function D0(t, e, r, i) {
  var n = arguments.length, a = n < 3 ? e : i === null ? i = Object.getOwnPropertyDescriptor(e, r) : i, s;
  if (typeof Reflect == "object" && typeof Reflect.decorate == "function") a = Reflect.decorate(t, e, r, i);
  else for (var o = t.length - 1; o >= 0; o--) (s = t[o]) && (a = (n < 3 ? s(a) : n > 3 ? s(e, r, a) : s(e, r)) || a);
  return n > 3 && a && Object.defineProperty(e, r, a), a;
}
var T8 = function t(e, r) {
  if (e === r) return !0;
  if (e && r && typeof e == "object" && typeof r == "object") {
    if (e.constructor !== r.constructor) return !1;
    var i, n, a;
    if (Array.isArray(e)) {
      if (i = e.length, i != r.length) return !1;
      for (n = i; n-- !== 0; )
        if (!t(e[n], r[n])) return !1;
      return !0;
    }
    if (e.constructor === RegExp) return e.source === r.source && e.flags === r.flags;
    if (e.valueOf !== Object.prototype.valueOf) return e.valueOf() === r.valueOf();
    if (e.toString !== Object.prototype.toString) return e.toString() === r.toString();
    if (a = Object.keys(e), i = a.length, i !== Object.keys(r).length) return !1;
    for (n = i; n-- !== 0; )
      if (!Object.prototype.hasOwnProperty.call(r, a[n])) return !1;
    for (n = i; n-- !== 0; ) {
      var s = a[n];
      if (!t(e[s], r[s])) return !1;
    }
    return !0;
  }
  return e !== e && r !== r;
};
const Gh = /* @__PURE__ */ Dt(T8);
var Qa = {};
Qa.byteLength = O8;
Qa.toByteArray = B8;
Qa.fromByteArray = P8;
var Yt = [], ct = [], k8 = typeof Uint8Array < "u" ? Uint8Array : Array, Kl = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var on = 0, F8 = Kl.length; on < F8; ++on)
  Yt[on] = Kl[on], ct[Kl.charCodeAt(on)] = on;
ct[45] = 62;
ct[95] = 63;
function v4(t) {
  var e = t.length;
  if (e % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var r = t.indexOf("=");
  r === -1 && (r = e);
  var i = r === e ? 0 : 4 - r % 4;
  return [r, i];
}
function O8(t) {
  var e = v4(t), r = e[0], i = e[1];
  return (r + i) * 3 / 4 - i;
}
function D8(t, e, r) {
  return (e + r) * 3 / 4 - r;
}
function B8(t) {
  var e, r = v4(t), i = r[0], n = r[1], a = new k8(D8(t, i, n)), s = 0, o = n > 0 ? i - 4 : i, c;
  for (c = 0; c < o; c += 4)
    e = ct[t.charCodeAt(c)] << 18 | ct[t.charCodeAt(c + 1)] << 12 | ct[t.charCodeAt(c + 2)] << 6 | ct[t.charCodeAt(c + 3)], a[s++] = e >> 16 & 255, a[s++] = e >> 8 & 255, a[s++] = e & 255;
  return n === 2 && (e = ct[t.charCodeAt(c)] << 2 | ct[t.charCodeAt(c + 1)] >> 4, a[s++] = e & 255), n === 1 && (e = ct[t.charCodeAt(c)] << 10 | ct[t.charCodeAt(c + 1)] << 4 | ct[t.charCodeAt(c + 2)] >> 2, a[s++] = e >> 8 & 255, a[s++] = e & 255), a;
}
function I8(t) {
  return Yt[t >> 18 & 63] + Yt[t >> 12 & 63] + Yt[t >> 6 & 63] + Yt[t & 63];
}
function R8(t, e, r) {
  for (var i, n = [], a = e; a < r; a += 3)
    i = (t[a] << 16 & 16711680) + (t[a + 1] << 8 & 65280) + (t[a + 2] & 255), n.push(I8(i));
  return n.join("");
}
function P8(t) {
  for (var e, r = t.length, i = r % 3, n = [], a = 16383, s = 0, o = r - i; s < o; s += a)
    n.push(R8(t, s, s + a > o ? o : s + a));
  return i === 1 ? (e = t[r - 1], n.push(
    Yt[e >> 2] + Yt[e << 4 & 63] + "=="
  )) : i === 2 && (e = (t[r - 2] << 8) + t[r - 1], n.push(
    Yt[e >> 10] + Yt[e >> 4 & 63] + Yt[e << 2 & 63] + "="
  )), n.join("");
}
var If = 0, m4 = -3;
function Ra() {
  this.table = new Uint16Array(16), this.trans = new Uint16Array(288);
}
function L8(t, e) {
  this.source = t, this.sourceIndex = 0, this.tag = 0, this.bitcount = 0, this.dest = e, this.destLen = 0, this.ltree = new Ra(), this.dtree = new Ra();
}
var b4 = new Ra(), x4 = new Ra(), Rf = new Uint8Array(30), Pf = new Uint16Array(30), w4 = new Uint8Array(30), y4 = new Uint16Array(30), N8 = new Uint8Array([
  16,
  17,
  18,
  0,
  8,
  7,
  9,
  6,
  10,
  5,
  11,
  4,
  12,
  3,
  13,
  2,
  14,
  1,
  15
]), Zh = new Ra(), Nt = new Uint8Array(320);
function _4(t, e, r, i) {
  var n, a;
  for (n = 0; n < r; ++n) t[n] = 0;
  for (n = 0; n < 30 - r; ++n) t[n + r] = n / r | 0;
  for (a = i, n = 0; n < 30; ++n)
    e[n] = a, a += 1 << t[n];
}
function M8(t, e) {
  var r;
  for (r = 0; r < 7; ++r) t.table[r] = 0;
  for (t.table[7] = 24, t.table[8] = 152, t.table[9] = 112, r = 0; r < 24; ++r) t.trans[r] = 256 + r;
  for (r = 0; r < 144; ++r) t.trans[24 + r] = r;
  for (r = 0; r < 8; ++r) t.trans[168 + r] = 280 + r;
  for (r = 0; r < 112; ++r) t.trans[176 + r] = 144 + r;
  for (r = 0; r < 5; ++r) e.table[r] = 0;
  for (e.table[5] = 32, r = 0; r < 32; ++r) e.trans[r] = r;
}
var jh = new Uint16Array(16);
function Jl(t, e, r, i) {
  var n, a;
  for (n = 0; n < 16; ++n) t.table[n] = 0;
  for (n = 0; n < i; ++n) t.table[e[r + n]]++;
  for (t.table[0] = 0, a = 0, n = 0; n < 16; ++n)
    jh[n] = a, a += t.table[n];
  for (n = 0; n < i; ++n)
    e[r + n] && (t.trans[jh[e[r + n]]++] = n);
}
function U8(t) {
  t.bitcount-- || (t.tag = t.source[t.sourceIndex++], t.bitcount = 7);
  var e = t.tag & 1;
  return t.tag >>>= 1, e;
}
function zt(t, e, r) {
  if (!e)
    return r;
  for (; t.bitcount < 24; )
    t.tag |= t.source[t.sourceIndex++] << t.bitcount, t.bitcount += 8;
  var i = t.tag & 65535 >>> 16 - e;
  return t.tag >>>= e, t.bitcount -= e, i + r;
}
function G1(t, e) {
  for (; t.bitcount < 24; )
    t.tag |= t.source[t.sourceIndex++] << t.bitcount, t.bitcount += 8;
  var r = 0, i = 0, n = 0, a = t.tag;
  do
    i = 2 * i + (a & 1), a >>>= 1, ++n, r += e.table[n], i -= e.table[n];
  while (i >= 0);
  return t.tag = a, t.bitcount -= n, e.trans[r + i];
}
function $8(t, e, r) {
  var i, n, a, s, o, c;
  for (i = zt(t, 5, 257), n = zt(t, 5, 1), a = zt(t, 4, 4), s = 0; s < 19; ++s) Nt[s] = 0;
  for (s = 0; s < a; ++s) {
    var l = zt(t, 3, 0);
    Nt[N8[s]] = l;
  }
  for (Jl(Zh, Nt, 0, 19), o = 0; o < i + n; ) {
    var f = G1(t, Zh);
    switch (f) {
      case 16:
        var u = Nt[o - 1];
        for (c = zt(t, 2, 3); c; --c)
          Nt[o++] = u;
        break;
      case 17:
        for (c = zt(t, 3, 3); c; --c)
          Nt[o++] = 0;
        break;
      case 18:
        for (c = zt(t, 7, 11); c; --c)
          Nt[o++] = 0;
        break;
      default:
        Nt[o++] = f;
        break;
    }
  }
  Jl(e, Nt, 0, i), Jl(r, Nt, i, n);
}
function Xh(t, e, r) {
  for (; ; ) {
    var i = G1(t, e);
    if (i === 256)
      return If;
    if (i < 256)
      t.dest[t.destLen++] = i;
    else {
      var n, a, s, o;
      for (i -= 257, n = zt(t, Rf[i], Pf[i]), a = G1(t, r), s = t.destLen - zt(t, w4[a], y4[a]), o = s; o < s + n; ++o)
        t.dest[t.destLen++] = t.dest[o];
    }
  }
}
function z8(t) {
  for (var e, r, i; t.bitcount > 8; )
    t.sourceIndex--, t.bitcount -= 8;
  if (e = t.source[t.sourceIndex + 1], e = 256 * e + t.source[t.sourceIndex], r = t.source[t.sourceIndex + 3], r = 256 * r + t.source[t.sourceIndex + 2], e !== (~r & 65535))
    return m4;
  for (t.sourceIndex += 4, i = e; i; --i)
    t.dest[t.destLen++] = t.source[t.sourceIndex++];
  return t.bitcount = 0, If;
}
function W8(t, e) {
  var r = new L8(t, e), i, n, a;
  do {
    switch (i = U8(r), n = zt(r, 2, 0), n) {
      case 0:
        a = z8(r);
        break;
      case 1:
        a = Xh(r, b4, x4);
        break;
      case 2:
        $8(r, r.ltree, r.dtree), a = Xh(r, r.ltree, r.dtree);
        break;
      default:
        a = m4;
    }
    if (a !== If)
      throw new Error("Data error");
  } while (!i);
  return r.destLen < r.dest.length ? typeof r.dest.slice == "function" ? r.dest.slice(0, r.destLen) : r.dest.subarray(0, r.destLen) : r.dest;
}
M8(b4, x4);
_4(Rf, Pf, 4, 3);
_4(w4, y4, 2, 1);
Rf[28] = 0;
Pf[28] = 258;
var A4 = W8;
const H8 = /* @__PURE__ */ Dt(A4), q8 = new Uint8Array(new Uint32Array([305419896]).buffer)[0] === 18, Kh = (t, e, r) => {
  let i = t[e];
  t[e] = t[r], t[r] = i;
}, V8 = (t) => {
  const e = t.length;
  for (let r = 0; r < e; r += 4)
    Kh(t, r, r + 3), Kh(t, r + 1, r + 2);
}, Y8 = (t) => {
  q8 && V8(t);
};
var G8 = {
  swap32LE: Y8
};
const Jh = A4, { swap32LE: Z8 } = G8, Lf = 11, Fi = 5, j8 = Lf - Fi, X8 = 65536 >> Lf, K8 = 1 << j8, J8 = K8 - 1, Ks = 2, Q8 = 1 << Fi, Ql = Q8 - 1, E4 = 65536 >> Fi, eb = 1024 >> Fi, tb = E4 + eb, rb = tb, ib = 32, nb = rb + ib, ab = 1 << Ks;
class sb {
  constructor(e) {
    const r = typeof e.readUInt32BE == "function" && typeof e.slice == "function";
    if (r || e instanceof Uint8Array) {
      let i;
      if (r)
        this.highStart = e.readUInt32LE(0), this.errorValue = e.readUInt32LE(4), i = e.readUInt32LE(8), e = e.slice(12);
      else {
        const n = new DataView(e.buffer);
        this.highStart = n.getUint32(0, !0), this.errorValue = n.getUint32(4, !0), i = n.getUint32(8, !0), e = e.subarray(12);
      }
      e = Jh(e, new Uint8Array(i)), e = Jh(e, new Uint8Array(i)), Z8(e), this.data = new Uint32Array(e.buffer);
    } else
      ({ data: this.data, highStart: this.highStart, errorValue: this.errorValue } = e);
  }
  get(e) {
    let r;
    return e < 0 || e > 1114111 ? this.errorValue : e < 55296 || e > 56319 && e <= 65535 ? (r = (this.data[e >> Fi] << Ks) + (e & Ql), this.data[r]) : e <= 65535 ? (r = (this.data[E4 + (e - 55296 >> Fi)] << Ks) + (e & Ql), this.data[r]) : e < this.highStart ? (r = this.data[nb - X8 + (e >> Lf)], r = this.data[r + (e >> Fi & J8)], r = (r << Ks) + (e & Ql), this.data[r]) : this.data[this.data.length - ab];
  }
}
var ob = sb;
const es = /* @__PURE__ */ Dt(ob);
function Vi(t) {
  return t && t.__esModule ? t.default : t;
}
var ni = {};
ni = JSON.parse('{"categories":["Cc","Zs","Po","Sc","Ps","Pe","Sm","Pd","Nd","Lu","Sk","Pc","Ll","So","Lo","Pi","Cf","No","Pf","Lt","Lm","Mn","Me","Mc","Nl","Zl","Zp","Cs","Co"],"combiningClasses":["Not_Reordered","Above","Above_Right","Below","Attached_Above_Right","Attached_Below","Overlay","Iota_Subscript","Double_Below","Double_Above","Below_Right","Above_Left","CCC10","CCC11","CCC12","CCC13","CCC14","CCC15","CCC16","CCC17","CCC18","CCC19","CCC20","CCC21","CCC22","CCC23","CCC24","CCC25","CCC30","CCC31","CCC32","CCC27","CCC28","CCC29","CCC33","CCC34","CCC35","CCC36","Nukta","Virama","CCC84","CCC91","CCC103","CCC107","CCC118","CCC122","CCC129","CCC130","CCC132","Attached_Above","Below_Left","Left","Kana_Voicing","CCC26","Right"],"scripts":["Common","Latin","Bopomofo","Inherited","Greek","Coptic","Cyrillic","Armenian","Hebrew","Arabic","Syriac","Thaana","Nko","Samaritan","Mandaic","Devanagari","Bengali","Gurmukhi","Gujarati","Oriya","Tamil","Telugu","Kannada","Malayalam","Sinhala","Thai","Lao","Tibetan","Myanmar","Georgian","Hangul","Ethiopic","Cherokee","Canadian_Aboriginal","Ogham","Runic","Tagalog","Hanunoo","Buhid","Tagbanwa","Khmer","Mongolian","Limbu","Tai_Le","New_Tai_Lue","Buginese","Tai_Tham","Balinese","Sundanese","Batak","Lepcha","Ol_Chiki","Braille","Glagolitic","Tifinagh","Han","Hiragana","Katakana","Yi","Lisu","Vai","Bamum","Syloti_Nagri","Phags_Pa","Saurashtra","Kayah_Li","Rejang","Javanese","Cham","Tai_Viet","Meetei_Mayek","null","Linear_B","Lycian","Carian","Old_Italic","Gothic","Old_Permic","Ugaritic","Old_Persian","Deseret","Shavian","Osmanya","Osage","Elbasan","Caucasian_Albanian","Linear_A","Cypriot","Imperial_Aramaic","Palmyrene","Nabataean","Hatran","Phoenician","Lydian","Meroitic_Hieroglyphs","Meroitic_Cursive","Kharoshthi","Old_South_Arabian","Old_North_Arabian","Manichaean","Avestan","Inscriptional_Parthian","Inscriptional_Pahlavi","Psalter_Pahlavi","Old_Turkic","Old_Hungarian","Hanifi_Rohingya","Old_Sogdian","Sogdian","Elymaic","Brahmi","Kaithi","Sora_Sompeng","Chakma","Mahajani","Sharada","Khojki","Multani","Khudawadi","Grantha","Newa","Tirhuta","Siddham","Modi","Takri","Ahom","Dogra","Warang_Citi","Nandinagari","Zanabazar_Square","Soyombo","Pau_Cin_Hau","Bhaiksuki","Marchen","Masaram_Gondi","Gunjala_Gondi","Makasar","Cuneiform","Egyptian_Hieroglyphs","Anatolian_Hieroglyphs","Mro","Bassa_Vah","Pahawh_Hmong","Medefaidrin","Miao","Tangut","Nushu","Duployan","SignWriting","Nyiakeng_Puachue_Hmong","Wancho","Mende_Kikakui","Adlam"],"eaw":["N","Na","A","W","H","F"]}');
const Nf = new es(Qa.toByteArray("")), lb = Math.log2 || ((t) => Math.log(t) / Math.LN2), Go = (t) => lb(t) + 1 | 0, cb = Go((/* @__PURE__ */ Vi(ni)).categories.length - 1), C4 = Go((/* @__PURE__ */ Vi(ni)).combiningClasses.length - 1), Mf = Go((/* @__PURE__ */ Vi(ni)).scripts.length - 1), Uf = Go((/* @__PURE__ */ Vi(ni)).eaw.length - 1), $f = 10, fb = C4 + Mf + Uf + $f, ub = Mf + Uf + $f, hb = Uf + $f, db = (1 << cb) - 1, gb = (1 << C4) - 1, pb = (1 << Mf) - 1;
function Zo(t) {
  const e = Nf.get(t);
  return (/* @__PURE__ */ Vi(ni)).categories[e >> fb & db];
}
function vb(t) {
  const e = Nf.get(t);
  return (/* @__PURE__ */ Vi(ni)).combiningClasses[e >> ub & gb];
}
function S4(t) {
  const e = Nf.get(t);
  return (/* @__PURE__ */ Vi(ni)).scripts[e >> hb & pb];
}
function Qh(t) {
  return Zo(t) === "Nd";
}
function T4(t) {
  const e = Zo(t);
  return e === "Mn" || e === "Me" || e === "Mc";
}
var ec = 1, tc = 0;
class mb {
  constructor(e) {
    this.stateTable = e.stateTable, this.accepting = e.accepting, this.tags = e.tags;
  }
  /**
   * Returns an iterable object that yields pattern matches over the input sequence.
   * Matches are of the form [startIndex, endIndex, tags].
   */
  match(e) {
    var r = this;
    return {
      *[Symbol.iterator]() {
        for (var i = ec, n = null, a = null, s = null, o = 0; o < e.length; o++) {
          var c = e[o];
          s = i, i = r.stateTable[i][c], i === tc && (n != null && a != null && a >= n && (yield [n, a, r.tags[s]]), i = r.stateTable[ec][c], n = null), i !== tc && n == null && (n = o), r.accepting[i] && (a = o), i === tc && (i = ec);
        }
        n != null && a != null && a >= n && (yield [n, a, r.tags[i]]);
      }
    };
  }
  /**
   * For each match over the input sequence, action functions matching
   * the tag definitions in the input pattern are called with the startIndex,
   * endIndex, and sub-match sequence.
   */
  apply(e, r) {
    for (var [i, n, a] of this.match(e))
      for (var s of a)
        typeof r[s] == "function" && r[s](i, n, e.slice(i, n + 1));
  }
}
var bb = mb;
const k4 = /* @__PURE__ */ Dt(bb);
var F4 = { exports: {} };
(function(t) {
  var e = function() {
    function r(h, d) {
      return d != null && h instanceof d;
    }
    var i;
    try {
      i = Map;
    } catch {
      i = function() {
      };
    }
    var n;
    try {
      n = Set;
    } catch {
      n = function() {
      };
    }
    var a;
    try {
      a = Promise;
    } catch {
      a = function() {
      };
    }
    function s(h, d, p, m, C) {
      typeof d == "object" && (p = d.depth, m = d.prototype, C = d.includeNonEnumerable, d = d.circular);
      var A = [], b = [], x = typeof Buffer < "u";
      typeof d > "u" && (d = !0), typeof p > "u" && (p = 1 / 0);
      function _(v, F) {
        if (v === null)
          return null;
        if (F === 0)
          return v;
        var S, D;
        if (typeof v != "object")
          return v;
        if (r(v, i))
          S = new i();
        else if (r(v, n))
          S = new n();
        else if (r(v, a))
          S = new a(function(ie, X) {
            v.then(function(oe) {
              ie(_(oe, F - 1));
            }, function(oe) {
              X(_(oe, F - 1));
            });
          });
        else if (s.__isArray(v))
          S = [];
        else if (s.__isRegExp(v))
          S = new RegExp(v.source, u(v)), v.lastIndex && (S.lastIndex = v.lastIndex);
        else if (s.__isDate(v))
          S = new Date(v.getTime());
        else {
          if (x && Buffer.isBuffer(v))
            return Buffer.allocUnsafe ? S = Buffer.allocUnsafe(v.length) : S = new Buffer(v.length), v.copy(S), S;
          r(v, Error) ? S = Object.create(v) : typeof m > "u" ? (D = Object.getPrototypeOf(v), S = Object.create(D)) : (S = Object.create(m), D = m);
        }
        if (d) {
          var P = A.indexOf(v);
          if (P != -1)
            return b[P];
          A.push(v), b.push(S);
        }
        r(v, i) && v.forEach(function(ie, X) {
          var oe = _(X, F - 1), ae = _(ie, F - 1);
          S.set(oe, ae);
        }), r(v, n) && v.forEach(function(ie) {
          var X = _(ie, F - 1);
          S.add(X);
        });
        for (var B in v) {
          var I;
          D && (I = Object.getOwnPropertyDescriptor(D, B)), !(I && I.set == null) && (S[B] = _(v[B], F - 1));
        }
        if (Object.getOwnPropertySymbols)
          for (var w = Object.getOwnPropertySymbols(v), B = 0; B < w.length; B++) {
            var k = w[B], z = Object.getOwnPropertyDescriptor(v, k);
            z && !z.enumerable && !C || (S[k] = _(v[k], F - 1), z.enumerable || Object.defineProperty(S, k, {
              enumerable: !1
            }));
          }
        if (C)
          for (var H = Object.getOwnPropertyNames(v), B = 0; B < H.length; B++) {
            var re = H[B], z = Object.getOwnPropertyDescriptor(v, re);
            z && z.enumerable || (S[re] = _(v[re], F - 1), Object.defineProperty(S, re, {
              enumerable: !1
            }));
          }
        return S;
      }
      return _(h, p);
    }
    s.clonePrototype = function(d) {
      if (d === null)
        return null;
      var p = function() {
      };
      return p.prototype = d, new p();
    };
    function o(h) {
      return Object.prototype.toString.call(h);
    }
    s.__objToStr = o;
    function c(h) {
      return typeof h == "object" && o(h) === "[object Date]";
    }
    s.__isDate = c;
    function l(h) {
      return typeof h == "object" && o(h) === "[object Array]";
    }
    s.__isArray = l;
    function f(h) {
      return typeof h == "object" && o(h) === "[object RegExp]";
    }
    s.__isRegExp = f;
    function u(h) {
      var d = "";
      return h.global && (d += "g"), h.ignoreCase && (d += "i"), h.multiline && (d += "m"), d;
    }
    return s.__getRegExpFlags = u, s;
  }();
  t.exports && (t.exports = e);
})(F4);
var xb = F4.exports;
const rc = /* @__PURE__ */ Dt(xb);
var fa = {}, mo = {};
function O4(t) {
  this.buffer = t, this.pos = 0;
}
O4.prototype.read = function(t, e, r) {
  this.pos + r > this.buffer.length && (r = this.buffer.length - this.pos);
  for (var i = 0; i < r; i++)
    t[e + i] = this.buffer[this.pos + i];
  return this.pos += r, r;
};
mo.BrotliInput = O4;
function D4(t) {
  this.buffer = t, this.pos = 0;
}
D4.prototype.write = function(t, e) {
  if (this.pos + e > this.buffer.length)
    throw new Error("Output buffer is not large enough");
  return this.buffer.set(t.subarray(0, e), this.pos), this.pos += e, e;
};
mo.BrotliOutput = D4;
var mi = 4096, wb = 2 * mi + 32, B4 = 2 * mi - 1, yb = new Uint32Array([
  0,
  1,
  3,
  7,
  15,
  31,
  63,
  127,
  255,
  511,
  1023,
  2047,
  4095,
  8191,
  16383,
  32767,
  65535,
  131071,
  262143,
  524287,
  1048575,
  2097151,
  4194303,
  8388607,
  16777215
]);
function Yi(t) {
  this.buf_ = new Uint8Array(wb), this.input_ = t, this.reset();
}
Yi.READ_SIZE = mi;
Yi.IBUF_MASK = B4;
Yi.prototype.reset = function() {
  this.buf_ptr_ = 0, this.val_ = 0, this.pos_ = 0, this.bit_pos_ = 0, this.bit_end_pos_ = 0, this.eos_ = 0, this.readMoreInput();
  for (var t = 0; t < 4; t++)
    this.val_ |= this.buf_[this.pos_] << 8 * t, ++this.pos_;
  return this.bit_end_pos_ > 0;
};
Yi.prototype.readMoreInput = function() {
  if (!(this.bit_end_pos_ > 256))
    if (this.eos_) {
      if (this.bit_pos_ > this.bit_end_pos_)
        throw new Error("Unexpected end of input " + this.bit_pos_ + " " + this.bit_end_pos_);
    } else {
      var t = this.buf_ptr_, e = this.input_.read(this.buf_, t, mi);
      if (e < 0)
        throw new Error("Unexpected end of input");
      if (e < mi) {
        this.eos_ = 1;
        for (var r = 0; r < 32; r++)
          this.buf_[t + e + r] = 0;
      }
      if (t === 0) {
        for (var r = 0; r < 32; r++)
          this.buf_[(mi << 1) + r] = this.buf_[r];
        this.buf_ptr_ = mi;
      } else
        this.buf_ptr_ = 0;
      this.bit_end_pos_ += e << 3;
    }
};
Yi.prototype.fillBitWindow = function() {
  for (; this.bit_pos_ >= 8; )
    this.val_ >>>= 8, this.val_ |= this.buf_[this.pos_ & B4] << 24, ++this.pos_, this.bit_pos_ = this.bit_pos_ - 8 >>> 0, this.bit_end_pos_ = this.bit_end_pos_ - 8 >>> 0;
};
Yi.prototype.readBits = function(t) {
  32 - this.bit_pos_ < t && this.fillBitWindow();
  var e = this.val_ >>> this.bit_pos_ & yb[t];
  return this.bit_pos_ += t, e;
};
var _b = Yi, kr = {}, ic = {}, nc, e5;
function Ab() {
  return e5 || (e5 = 1, nc = ""), nc;
}
var t5;
function Eb() {
  if (t5) return ic;
  t5 = 1;
  var t = Qa;
  return ic.init = function() {
    var e = R4().BrotliDecompressBuffer, r = t.toByteArray(Ab());
    return e(r);
  }, ic;
}
var r5;
function I4() {
  if (r5) return kr;
  r5 = 1;
  var t = Eb();
  return kr.init = function() {
    kr.dictionary = t.init();
  }, kr.offsetsByLength = new Uint32Array([
    0,
    0,
    0,
    0,
    0,
    4096,
    9216,
    21504,
    35840,
    44032,
    53248,
    63488,
    74752,
    87040,
    93696,
    100864,
    104704,
    106752,
    108928,
    113536,
    115968,
    118528,
    119872,
    121280,
    122016
  ]), kr.sizeBitsByLength = new Uint8Array([
    0,
    0,
    0,
    0,
    10,
    10,
    11,
    11,
    10,
    10,
    10,
    10,
    10,
    9,
    9,
    8,
    7,
    7,
    8,
    7,
    7,
    6,
    6,
    5,
    5
  ]), kr.minDictionaryWordLength = 4, kr.maxDictionaryWordLength = 24, kr;
}
var bo = {};
function mn(t, e) {
  this.bits = t, this.value = e;
}
bo.HuffmanCode = mn;
var hn = 15;
function i5(t, e) {
  for (var r = 1 << e - 1; t & r; )
    r >>= 1;
  return (t & r - 1) + r;
}
function n5(t, e, r, i, n) {
  do
    i -= r, t[e + i] = new mn(n.bits, n.value);
  while (i > 0);
}
function Cb(t, e, r) {
  for (var i = 1 << e - r; e < hn && (i -= t[e], !(i <= 0)); )
    ++e, i <<= 1;
  return e - r;
}
bo.BrotliBuildHuffmanTable = function(t, e, r, i, n) {
  var a = e, s, o, c, l, f, u, h, d, p, m, C, A = new Int32Array(hn + 1), b = new Int32Array(hn + 1);
  for (C = new Int32Array(n), c = 0; c < n; c++)
    A[i[c]]++;
  for (b[1] = 0, o = 1; o < hn; o++)
    b[o + 1] = b[o] + A[o];
  for (c = 0; c < n; c++)
    i[c] !== 0 && (C[b[i[c]]++] = c);
  if (d = r, p = 1 << d, m = p, b[hn] === 1) {
    for (l = 0; l < m; ++l)
      t[e + l] = new mn(0, C[0] & 65535);
    return m;
  }
  for (l = 0, c = 0, o = 1, f = 2; o <= r; ++o, f <<= 1)
    for (; A[o] > 0; --A[o])
      s = new mn(o & 255, C[c++] & 65535), n5(t, e + l, f, p, s), l = i5(l, o);
  for (h = m - 1, u = -1, o = r + 1, f = 2; o <= hn; ++o, f <<= 1)
    for (; A[o] > 0; --A[o])
      (l & h) !== u && (e += p, d = Cb(A, o, r), p = 1 << d, m += p, u = l & h, t[a + u] = new mn(d + r & 255, e - a - u & 65535)), s = new mn(o - r & 255, C[c++] & 65535), n5(t, e + (l >> r), f, p, s), l = i5(l, o);
  return m;
};
var zf = {};
zf.lookup = new Uint8Array([
  /* CONTEXT_UTF8, last byte. */
  /* ASCII range. */
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  4,
  4,
  0,
  0,
  4,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  8,
  12,
  16,
  12,
  12,
  20,
  12,
  16,
  24,
  28,
  12,
  12,
  32,
  12,
  36,
  12,
  44,
  44,
  44,
  44,
  44,
  44,
  44,
  44,
  44,
  44,
  32,
  32,
  24,
  40,
  28,
  12,
  12,
  48,
  52,
  52,
  52,
  48,
  52,
  52,
  52,
  48,
  52,
  52,
  52,
  52,
  52,
  48,
  52,
  52,
  52,
  52,
  52,
  48,
  52,
  52,
  52,
  52,
  52,
  24,
  12,
  28,
  12,
  12,
  12,
  56,
  60,
  60,
  60,
  56,
  60,
  60,
  60,
  56,
  60,
  60,
  60,
  60,
  60,
  56,
  60,
  60,
  60,
  60,
  60,
  56,
  60,
  60,
  60,
  60,
  60,
  24,
  12,
  28,
  12,
  0,
  /* UTF8 continuation byte range. */
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  0,
  1,
  /* UTF8 lead byte range. */
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  2,
  3,
  /* CONTEXT_UTF8 second last byte. */
  /* ASCII range. */
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  1,
  1,
  1,
  1,
  1,
  1,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  1,
  1,
  1,
  1,
  0,
  /* UTF8 continuation byte range. */
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  /* UTF8 lead byte range. */
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  /* CONTEXT_SIGNED, second last byte. */
  0,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  5,
  6,
  6,
  6,
  6,
  6,
  6,
  6,
  6,
  6,
  6,
  6,
  6,
  6,
  6,
  6,
  7,
  /* CONTEXT_SIGNED, last byte, same as the above values shifted by 3 bits. */
  0,
  8,
  8,
  8,
  8,
  8,
  8,
  8,
  8,
  8,
  8,
  8,
  8,
  8,
  8,
  8,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  24,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  32,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  48,
  56,
  /* CONTEXT_LSB6, last byte. */
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  /* CONTEXT_MSB6, last byte. */
  0,
  0,
  0,
  0,
  1,
  1,
  1,
  1,
  2,
  2,
  2,
  2,
  3,
  3,
  3,
  3,
  4,
  4,
  4,
  4,
  5,
  5,
  5,
  5,
  6,
  6,
  6,
  6,
  7,
  7,
  7,
  7,
  8,
  8,
  8,
  8,
  9,
  9,
  9,
  9,
  10,
  10,
  10,
  10,
  11,
  11,
  11,
  11,
  12,
  12,
  12,
  12,
  13,
  13,
  13,
  13,
  14,
  14,
  14,
  14,
  15,
  15,
  15,
  15,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  22,
  22,
  22,
  22,
  23,
  23,
  23,
  23,
  24,
  24,
  24,
  24,
  25,
  25,
  25,
  25,
  26,
  26,
  26,
  26,
  27,
  27,
  27,
  27,
  28,
  28,
  28,
  28,
  29,
  29,
  29,
  29,
  30,
  30,
  30,
  30,
  31,
  31,
  31,
  31,
  32,
  32,
  32,
  32,
  33,
  33,
  33,
  33,
  34,
  34,
  34,
  34,
  35,
  35,
  35,
  35,
  36,
  36,
  36,
  36,
  37,
  37,
  37,
  37,
  38,
  38,
  38,
  38,
  39,
  39,
  39,
  39,
  40,
  40,
  40,
  40,
  41,
  41,
  41,
  41,
  42,
  42,
  42,
  42,
  43,
  43,
  43,
  43,
  44,
  44,
  44,
  44,
  45,
  45,
  45,
  45,
  46,
  46,
  46,
  46,
  47,
  47,
  47,
  47,
  48,
  48,
  48,
  48,
  49,
  49,
  49,
  49,
  50,
  50,
  50,
  50,
  51,
  51,
  51,
  51,
  52,
  52,
  52,
  52,
  53,
  53,
  53,
  53,
  54,
  54,
  54,
  54,
  55,
  55,
  55,
  55,
  56,
  56,
  56,
  56,
  57,
  57,
  57,
  57,
  58,
  58,
  58,
  58,
  59,
  59,
  59,
  59,
  60,
  60,
  60,
  60,
  61,
  61,
  61,
  61,
  62,
  62,
  62,
  62,
  63,
  63,
  63,
  63,
  /* CONTEXT_{M,L}SB6, second last byte, */
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0
]);
zf.lookupOffsets = new Uint16Array([
  /* CONTEXT_LSB6 */
  1024,
  1536,
  /* CONTEXT_MSB6 */
  1280,
  1536,
  /* CONTEXT_UTF8 */
  0,
  256,
  /* CONTEXT_SIGNED */
  768,
  512
]);
var qn = {};
function ce(t, e) {
  this.offset = t, this.nbits = e;
}
qn.kBlockLengthPrefixCode = [
  new ce(1, 2),
  new ce(5, 2),
  new ce(9, 2),
  new ce(13, 2),
  new ce(17, 3),
  new ce(25, 3),
  new ce(33, 3),
  new ce(41, 3),
  new ce(49, 4),
  new ce(65, 4),
  new ce(81, 4),
  new ce(97, 4),
  new ce(113, 5),
  new ce(145, 5),
  new ce(177, 5),
  new ce(209, 5),
  new ce(241, 6),
  new ce(305, 6),
  new ce(369, 7),
  new ce(497, 8),
  new ce(753, 9),
  new ce(1265, 10),
  new ce(2289, 11),
  new ce(4337, 12),
  new ce(8433, 13),
  new ce(16625, 24)
];
qn.kInsertLengthPrefixCode = [
  new ce(0, 0),
  new ce(1, 0),
  new ce(2, 0),
  new ce(3, 0),
  new ce(4, 0),
  new ce(5, 0),
  new ce(6, 1),
  new ce(8, 1),
  new ce(10, 2),
  new ce(14, 2),
  new ce(18, 3),
  new ce(26, 3),
  new ce(34, 4),
  new ce(50, 4),
  new ce(66, 5),
  new ce(98, 5),
  new ce(130, 6),
  new ce(194, 7),
  new ce(322, 8),
  new ce(578, 9),
  new ce(1090, 10),
  new ce(2114, 12),
  new ce(6210, 14),
  new ce(22594, 24)
];
qn.kCopyLengthPrefixCode = [
  new ce(2, 0),
  new ce(3, 0),
  new ce(4, 0),
  new ce(5, 0),
  new ce(6, 0),
  new ce(7, 0),
  new ce(8, 0),
  new ce(9, 0),
  new ce(10, 1),
  new ce(12, 1),
  new ce(14, 2),
  new ce(18, 2),
  new ce(22, 3),
  new ce(30, 3),
  new ce(38, 4),
  new ce(54, 4),
  new ce(70, 5),
  new ce(102, 5),
  new ce(134, 6),
  new ce(198, 7),
  new ce(326, 8),
  new ce(582, 9),
  new ce(1094, 10),
  new ce(2118, 24)
];
qn.kInsertRangeLut = [
  0,
  0,
  8,
  8,
  0,
  16,
  8,
  16,
  16
];
qn.kCopyRangeLut = [
  0,
  8,
  0,
  8,
  16,
  0,
  16,
  8,
  16
];
var ua = {}, a5;
function Sb() {
  if (a5) return ua;
  a5 = 1;
  var t = I4(), e = 0, r = 1, i = 2, n = 3, a = 4, s = 5, o = 6, c = 7, l = 8, f = 9, u = 10, h = 11, d = 12, p = 13, m = 14, C = 15, A = 16, b = 17, x = 18, _ = 20;
  function v(D, P, B) {
    this.prefix = new Uint8Array(D.length), this.transform = P, this.suffix = new Uint8Array(B.length);
    for (var I = 0; I < D.length; I++)
      this.prefix[I] = D.charCodeAt(I);
    for (var I = 0; I < B.length; I++)
      this.suffix[I] = B.charCodeAt(I);
  }
  var F = [
    new v("", e, ""),
    new v("", e, " "),
    new v(" ", e, " "),
    new v("", d, ""),
    new v("", u, " "),
    new v("", e, " the "),
    new v(" ", e, ""),
    new v("s ", e, " "),
    new v("", e, " of "),
    new v("", u, ""),
    new v("", e, " and "),
    new v("", p, ""),
    new v("", r, ""),
    new v(", ", e, " "),
    new v("", e, ", "),
    new v(" ", u, " "),
    new v("", e, " in "),
    new v("", e, " to "),
    new v("e ", e, " "),
    new v("", e, '"'),
    new v("", e, "."),
    new v("", e, '">'),
    new v("", e, `
`),
    new v("", n, ""),
    new v("", e, "]"),
    new v("", e, " for "),
    new v("", m, ""),
    new v("", i, ""),
    new v("", e, " a "),
    new v("", e, " that "),
    new v(" ", u, ""),
    new v("", e, ". "),
    new v(".", e, ""),
    new v(" ", e, ", "),
    new v("", C, ""),
    new v("", e, " with "),
    new v("", e, "'"),
    new v("", e, " from "),
    new v("", e, " by "),
    new v("", A, ""),
    new v("", b, ""),
    new v(" the ", e, ""),
    new v("", a, ""),
    new v("", e, ". The "),
    new v("", h, ""),
    new v("", e, " on "),
    new v("", e, " as "),
    new v("", e, " is "),
    new v("", c, ""),
    new v("", r, "ing "),
    new v("", e, `
	`),
    new v("", e, ":"),
    new v(" ", e, ". "),
    new v("", e, "ed "),
    new v("", _, ""),
    new v("", x, ""),
    new v("", o, ""),
    new v("", e, "("),
    new v("", u, ", "),
    new v("", l, ""),
    new v("", e, " at "),
    new v("", e, "ly "),
    new v(" the ", e, " of "),
    new v("", s, ""),
    new v("", f, ""),
    new v(" ", u, ", "),
    new v("", u, '"'),
    new v(".", e, "("),
    new v("", h, " "),
    new v("", u, '">'),
    new v("", e, '="'),
    new v(" ", e, "."),
    new v(".com/", e, ""),
    new v(" the ", e, " of the "),
    new v("", u, "'"),
    new v("", e, ". This "),
    new v("", e, ","),
    new v(".", e, " "),
    new v("", u, "("),
    new v("", u, "."),
    new v("", e, " not "),
    new v(" ", e, '="'),
    new v("", e, "er "),
    new v(" ", h, " "),
    new v("", e, "al "),
    new v(" ", h, ""),
    new v("", e, "='"),
    new v("", h, '"'),
    new v("", u, ". "),
    new v(" ", e, "("),
    new v("", e, "ful "),
    new v(" ", u, ". "),
    new v("", e, "ive "),
    new v("", e, "less "),
    new v("", h, "'"),
    new v("", e, "est "),
    new v(" ", u, "."),
    new v("", h, '">'),
    new v(" ", e, "='"),
    new v("", u, ","),
    new v("", e, "ize "),
    new v("", h, "."),
    new v("Â ", e, ""),
    new v(" ", e, ","),
    new v("", u, '="'),
    new v("", h, '="'),
    new v("", e, "ous "),
    new v("", h, ", "),
    new v("", u, "='"),
    new v(" ", u, ","),
    new v(" ", h, '="'),
    new v(" ", h, ", "),
    new v("", h, ","),
    new v("", h, "("),
    new v("", h, ". "),
    new v(" ", h, "."),
    new v("", h, "='"),
    new v(" ", h, ". "),
    new v(" ", u, '="'),
    new v(" ", h, "='"),
    new v(" ", u, "='")
  ];
  ua.kTransforms = F, ua.kNumTransforms = F.length;
  function S(D, P) {
    return D[P] < 192 ? (D[P] >= 97 && D[P] <= 122 && (D[P] ^= 32), 1) : D[P] < 224 ? (D[P + 1] ^= 32, 2) : (D[P + 2] ^= 5, 3);
  }
  return ua.transformDictionaryWord = function(D, P, B, I, w) {
    var k = F[w].prefix, z = F[w].suffix, H = F[w].transform, re = H < d ? 0 : H - (d - 1), ie = 0, X = P, oe;
    re > I && (re = I);
    for (var ae = 0; ae < k.length; )
      D[P++] = k[ae++];
    for (B += re, I -= re, H <= f && (I -= H), ie = 0; ie < I; ie++)
      D[P++] = t.dictionary[B + ie];
    if (oe = P - I, H === u)
      S(D, oe);
    else if (H === h)
      for (; I > 0; ) {
        var V = S(D, oe);
        oe += V, I -= V;
      }
    for (var Q = 0; Q < z.length; )
      D[P++] = z[Q++];
    return P - X;
  }, ua;
}
var s5;
function R4() {
  if (s5) return fa;
  s5 = 1;
  var t = mo.BrotliInput, e = mo.BrotliOutput, r = _b, i = I4(), n = bo.HuffmanCode, a = bo.BrotliBuildHuffmanTable, s = zf, o = qn, c = Sb(), l = 8, f = 16, u = 256, h = 704, d = 26, p = 6, m = 2, C = 8, A = 255, b = 1080, x = 18, _ = new Uint8Array([
    1,
    2,
    3,
    4,
    0,
    5,
    17,
    6,
    16,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15
  ]), v = 16, F = new Uint8Array([
    3,
    2,
    1,
    0,
    3,
    3,
    3,
    3,
    3,
    3,
    2,
    2,
    2,
    2,
    2,
    2
  ]), S = new Int8Array([
    0,
    0,
    0,
    0,
    -1,
    1,
    -2,
    2,
    -3,
    3,
    -1,
    1,
    -2,
    2,
    -3,
    3
  ]), D = new Uint16Array([
    256,
    402,
    436,
    468,
    500,
    534,
    566,
    598,
    630,
    662,
    694,
    726,
    758,
    790,
    822,
    854,
    886,
    920,
    952,
    984,
    1016,
    1048,
    1080
  ]);
  function P(Z) {
    var K;
    return Z.readBits(1) === 0 ? 16 : (K = Z.readBits(3), K > 0 ? 17 + K : (K = Z.readBits(3), K > 0 ? 8 + K : 17));
  }
  function B(Z) {
    if (Z.readBits(1)) {
      var K = Z.readBits(3);
      return K === 0 ? 1 : Z.readBits(K) + (1 << K);
    }
    return 0;
  }
  function I() {
    this.meta_block_length = 0, this.input_end = 0, this.is_uncompressed = 0, this.is_metadata = !1;
  }
  function w(Z) {
    var K = new I(), G, Y, de;
    if (K.input_end = Z.readBits(1), K.input_end && Z.readBits(1))
      return K;
    if (G = Z.readBits(2) + 4, G === 7) {
      if (K.is_metadata = !0, Z.readBits(1) !== 0)
        throw new Error("Invalid reserved bit");
      if (Y = Z.readBits(2), Y === 0)
        return K;
      for (de = 0; de < Y; de++) {
        var he = Z.readBits(8);
        if (de + 1 === Y && Y > 1 && he === 0)
          throw new Error("Invalid size byte");
        K.meta_block_length |= he << de * 8;
      }
    } else
      for (de = 0; de < G; ++de) {
        var ue = Z.readBits(4);
        if (de + 1 === G && G > 4 && ue === 0)
          throw new Error("Invalid size nibble");
        K.meta_block_length |= ue << de * 4;
      }
    return ++K.meta_block_length, !K.input_end && !K.is_metadata && (K.is_uncompressed = Z.readBits(1)), K;
  }
  function k(Z, K, G) {
    var Y;
    return G.fillBitWindow(), K += G.val_ >>> G.bit_pos_ & A, Y = Z[K].bits - C, Y > 0 && (G.bit_pos_ += C, K += Z[K].value, K += G.val_ >>> G.bit_pos_ & (1 << Y) - 1), G.bit_pos_ += Z[K].bits, Z[K].value;
  }
  function z(Z, K, G, Y) {
    for (var de = 0, he = l, ue = 0, pe = 0, Ee = 32768, be = [], fe = 0; fe < 32; fe++)
      be.push(new n(0, 0));
    for (a(be, 0, 5, Z, x); de < K && Ee > 0; ) {
      var Ie = 0, o0;
      if (Y.readMoreInput(), Y.fillBitWindow(), Ie += Y.val_ >>> Y.bit_pos_ & 31, Y.bit_pos_ += be[Ie].bits, o0 = be[Ie].value & 255, o0 < f)
        ue = 0, G[de++] = o0, o0 !== 0 && (he = o0, Ee -= 32768 >> o0);
      else {
        var i0 = o0 - 14, Re, e0, n0 = 0;
        if (o0 === f && (n0 = he), pe !== n0 && (ue = 0, pe = n0), Re = ue, ue > 0 && (ue -= 2, ue <<= i0), ue += Y.readBits(i0) + 3, e0 = ue - Re, de + e0 > K)
          throw new Error("[ReadHuffmanCodeLengths] symbol + repeat_delta > num_symbols");
        for (var E0 = 0; E0 < e0; E0++)
          G[de + E0] = pe;
        de += e0, pe !== 0 && (Ee -= e0 << 15 - pe);
      }
    }
    if (Ee !== 0)
      throw new Error("[ReadHuffmanCodeLengths] space = " + Ee);
    for (; de < K; de++)
      G[de] = 0;
  }
  function H(Z, K, G, Y) {
    var de = 0, he, ue = new Uint8Array(Z);
    if (Y.readMoreInput(), he = Y.readBits(2), he === 1) {
      for (var pe, Ee = Z - 1, be = 0, fe = new Int32Array(4), Ie = Y.readBits(2) + 1; Ee; )
        Ee >>= 1, ++be;
      for (pe = 0; pe < Ie; ++pe)
        fe[pe] = Y.readBits(be) % Z, ue[fe[pe]] = 2;
      switch (ue[fe[0]] = 1, Ie) {
        case 1:
          break;
        case 3:
          if (fe[0] === fe[1] || fe[0] === fe[2] || fe[1] === fe[2])
            throw new Error("[ReadHuffmanCode] invalid symbols");
          break;
        case 2:
          if (fe[0] === fe[1])
            throw new Error("[ReadHuffmanCode] invalid symbols");
          ue[fe[1]] = 1;
          break;
        case 4:
          if (fe[0] === fe[1] || fe[0] === fe[2] || fe[0] === fe[3] || fe[1] === fe[2] || fe[1] === fe[3] || fe[2] === fe[3])
            throw new Error("[ReadHuffmanCode] invalid symbols");
          Y.readBits(1) ? (ue[fe[2]] = 3, ue[fe[3]] = 3) : ue[fe[0]] = 2;
          break;
      }
    } else {
      var pe, o0 = new Uint8Array(x), i0 = 32, Re = 0, e0 = [
        new n(2, 0),
        new n(2, 4),
        new n(2, 3),
        new n(3, 2),
        new n(2, 0),
        new n(2, 4),
        new n(2, 3),
        new n(4, 1),
        new n(2, 0),
        new n(2, 4),
        new n(2, 3),
        new n(3, 2),
        new n(2, 0),
        new n(2, 4),
        new n(2, 3),
        new n(4, 5)
      ];
      for (pe = he; pe < x && i0 > 0; ++pe) {
        var n0 = _[pe], E0 = 0, p0;
        Y.fillBitWindow(), E0 += Y.val_ >>> Y.bit_pos_ & 15, Y.bit_pos_ += e0[E0].bits, p0 = e0[E0].value, o0[n0] = p0, p0 !== 0 && (i0 -= 32 >> p0, ++Re);
      }
      if (!(Re === 1 || i0 === 0))
        throw new Error("[ReadHuffmanCode] invalid num_codes or space");
      z(o0, Z, ue, Y);
    }
    if (de = a(K, G, C, ue, Z), de === 0)
      throw new Error("[ReadHuffmanCode] BuildHuffmanTable failed: ");
    return de;
  }
  function re(Z, K, G) {
    var Y, de;
    return Y = k(Z, K, G), de = o.kBlockLengthPrefixCode[Y].nbits, o.kBlockLengthPrefixCode[Y].offset + G.readBits(de);
  }
  function ie(Z, K, G) {
    var Y;
    return Z < v ? (G += F[Z], G &= 3, Y = K[G] + S[Z]) : Y = Z - v + 1, Y;
  }
  function X(Z, K) {
    for (var G = Z[K], Y = K; Y; --Y) Z[Y] = Z[Y - 1];
    Z[0] = G;
  }
  function oe(Z, K) {
    var G = new Uint8Array(256), Y;
    for (Y = 0; Y < 256; ++Y)
      G[Y] = Y;
    for (Y = 0; Y < K; ++Y) {
      var de = Z[Y];
      Z[Y] = G[de], de && X(G, de);
    }
  }
  function ae(Z, K) {
    this.alphabet_size = Z, this.num_htrees = K, this.codes = new Array(K + K * D[Z + 31 >>> 5]), this.htrees = new Uint32Array(K);
  }
  ae.prototype.decode = function(Z) {
    var K, G, Y = 0;
    for (K = 0; K < this.num_htrees; ++K)
      this.htrees[K] = Y, G = H(this.alphabet_size, this.codes, Y, Z), Y += G;
  };
  function V(Z, K) {
    var G = { num_htrees: null, context_map: null }, Y, de = 0, he, ue;
    K.readMoreInput();
    var pe = G.num_htrees = B(K) + 1, Ee = G.context_map = new Uint8Array(Z);
    if (pe <= 1)
      return G;
    for (Y = K.readBits(1), Y && (de = K.readBits(4) + 1), he = [], ue = 0; ue < b; ue++)
      he[ue] = new n(0, 0);
    for (H(pe + de, he, 0, K), ue = 0; ue < Z; ) {
      var be;
      if (K.readMoreInput(), be = k(he, 0, K), be === 0)
        Ee[ue] = 0, ++ue;
      else if (be <= de)
        for (var fe = 1 + (1 << be) + K.readBits(be); --fe; ) {
          if (ue >= Z)
            throw new Error("[DecodeContextMap] i >= context_map_size");
          Ee[ue] = 0, ++ue;
        }
      else
        Ee[ue] = be - de, ++ue;
    }
    return K.readBits(1) && oe(Ee, Z), G;
  }
  function Q(Z, K, G, Y, de, he, ue) {
    var pe = G * 2, Ee = G, be = k(K, G * b, ue), fe;
    be === 0 ? fe = de[pe + (he[Ee] & 1)] : be === 1 ? fe = de[pe + (he[Ee] - 1 & 1)] + 1 : fe = be - 2, fe >= Z && (fe -= Z), Y[G] = fe, de[pe + (he[Ee] & 1)] = fe, ++he[Ee];
  }
  function ne(Z, K, G, Y, de, he) {
    var ue = de + 1, pe = G & de, Ee = he.pos_ & r.IBUF_MASK, be;
    if (K < 8 || he.bit_pos_ + (K << 3) < he.bit_end_pos_) {
      for (; K-- > 0; )
        he.readMoreInput(), Y[pe++] = he.readBits(8), pe === ue && (Z.write(Y, ue), pe = 0);
      return;
    }
    if (he.bit_end_pos_ < 32)
      throw new Error("[CopyUncompressedBlockToOutput] br.bit_end_pos_ < 32");
    for (; he.bit_pos_ < 32; )
      Y[pe] = he.val_ >>> he.bit_pos_, he.bit_pos_ += 8, ++pe, --K;
    if (be = he.bit_end_pos_ - he.bit_pos_ >> 3, Ee + be > r.IBUF_MASK) {
      for (var fe = r.IBUF_MASK + 1 - Ee, Ie = 0; Ie < fe; Ie++)
        Y[pe + Ie] = he.buf_[Ee + Ie];
      be -= fe, pe += fe, K -= fe, Ee = 0;
    }
    for (var Ie = 0; Ie < be; Ie++)
      Y[pe + Ie] = he.buf_[Ee + Ie];
    if (pe += be, K -= be, pe >= ue) {
      Z.write(Y, ue), pe -= ue;
      for (var Ie = 0; Ie < pe; Ie++)
        Y[Ie] = Y[ue + Ie];
    }
    for (; pe + K >= ue; ) {
      if (be = ue - pe, he.input_.read(Y, pe, be) < be)
        throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
      Z.write(Y, ue), K -= be, pe = 0;
    }
    if (he.input_.read(Y, pe, K) < K)
      throw new Error("[CopyUncompressedBlockToOutput] not enough bytes");
    he.reset();
  }
  function ee(Z) {
    var K = Z.bit_pos_ + 7 & -8, G = Z.readBits(K - Z.bit_pos_);
    return G == 0;
  }
  function Se(Z) {
    var K = new t(Z), G = new r(K);
    P(G);
    var Y = w(G);
    return Y.meta_block_length;
  }
  fa.BrotliDecompressedSize = Se;
  function Ae(Z, K) {
    var G = new t(Z);
    K == null && (K = Se(Z));
    var Y = new Uint8Array(K), de = new e(Y);
    return ze(G, de), de.pos < de.buffer.length && (de.buffer = de.buffer.subarray(0, de.pos)), de.buffer;
  }
  fa.BrotliDecompressBuffer = Ae;
  function ze(Z, K) {
    var G, Y = 0, de = 0, he = 0, ue, pe = 0, Ee, be, fe, Ie, o0 = [16, 15, 11, 4], i0 = 0, Re = 0, e0 = 0, n0 = [new ae(0, 0), new ae(0, 0), new ae(0, 0)], E0, p0, Ce, Fl = 128 + r.READ_SIZE;
    Ce = new r(Z), he = P(Ce), ue = (1 << he) - 16, Ee = 1 << he, be = Ee - 1, fe = new Uint8Array(Ee + Fl + i.maxDictionaryWordLength), Ie = Ee, E0 = [], p0 = [];
    for (var oi = 0; oi < 3 * b; oi++)
      E0[oi] = new n(0, 0), p0[oi] = new n(0, 0);
    for (; !de; ) {
      var g0 = 0, lr, I0 = [1 << 28, 1 << 28, 1 << 28], Rt = [0], V0 = [1, 1, 1], tn = [0, 1, 0, 1, 0, 1], rn = [0], Sr, Tr, bs, Jn, xs = null, li = null, ws, ys = null, _s, Qn = 0, ea = null, As = 0, ta = 0, ra = null, ia = 0, C0 = 0, lt = 0, cr, na;
      for (G = 0; G < 3; ++G)
        n0[G].codes = null, n0[G].htrees = null;
      Ce.readMoreInput();
      var Es = w(Ce);
      if (g0 = Es.meta_block_length, Y + g0 > K.buffer.length) {
        var ju = new Uint8Array(Y + g0);
        ju.set(K.buffer), K.buffer = ju;
      }
      if (de = Es.input_end, lr = Es.is_uncompressed, Es.is_metadata) {
        for (ee(Ce); g0 > 0; --g0)
          Ce.readMoreInput(), Ce.readBits(8);
        continue;
      }
      if (g0 !== 0) {
        if (lr) {
          Ce.bit_pos_ = Ce.bit_pos_ + 7 & -8, ne(
            K,
            g0,
            Y,
            fe,
            be,
            Ce
          ), Y += g0;
          continue;
        }
        for (G = 0; G < 3; ++G)
          V0[G] = B(Ce) + 1, V0[G] >= 2 && (H(V0[G] + 2, E0, G * b, Ce), H(d, p0, G * b, Ce), I0[G] = re(p0, G * b, Ce), rn[G] = 1);
        for (Ce.readMoreInput(), Sr = Ce.readBits(2), Tr = v + (Ce.readBits(4) << Sr), bs = (1 << Sr) - 1, Jn = Tr + (48 << Sr), li = new Uint8Array(V0[0]), G = 0; G < V0[0]; ++G)
          Ce.readMoreInput(), li[G] = Ce.readBits(2) << 1;
        var Xu = V(V0[0] << p, Ce);
        ws = Xu.num_htrees, xs = Xu.context_map;
        var Ku = V(V0[2] << m, Ce);
        for (_s = Ku.num_htrees, ys = Ku.context_map, n0[0] = new ae(u, ws), n0[1] = new ae(h, V0[1]), n0[2] = new ae(Jn, _s), G = 0; G < 3; ++G)
          n0[G].decode(Ce);
        for (ea = 0, ra = 0, cr = li[Rt[0]], C0 = s.lookupOffsets[cr], lt = s.lookupOffsets[cr + 1], na = n0[1].htrees[0]; g0 > 0; ) {
          var Cs, aa, Ol, Dl, Bl, Y0, et, fr, sa, nn, oa;
          for (Ce.readMoreInput(), I0[1] === 0 && (Q(
            V0[1],
            E0,
            1,
            Rt,
            tn,
            rn,
            Ce
          ), I0[1] = re(p0, b, Ce), na = n0[1].htrees[Rt[1]]), --I0[1], Cs = k(n0[1].codes, na, Ce), aa = Cs >> 6, aa >= 2 ? (aa -= 2, et = -1) : et = 0, Ol = o.kInsertRangeLut[aa] + (Cs >> 3 & 7), Dl = o.kCopyRangeLut[aa] + (Cs & 7), Bl = o.kInsertLengthPrefixCode[Ol].offset + Ce.readBits(o.kInsertLengthPrefixCode[Ol].nbits), Y0 = o.kCopyLengthPrefixCode[Dl].offset + Ce.readBits(o.kCopyLengthPrefixCode[Dl].nbits), Re = fe[Y - 1 & be], e0 = fe[Y - 2 & be], nn = 0; nn < Bl; ++nn)
            Ce.readMoreInput(), I0[0] === 0 && (Q(
              V0[0],
              E0,
              0,
              Rt,
              tn,
              rn,
              Ce
            ), I0[0] = re(p0, 0, Ce), Qn = Rt[0] << p, ea = Qn, cr = li[Rt[0]], C0 = s.lookupOffsets[cr], lt = s.lookupOffsets[cr + 1]), sa = s.lookup[C0 + Re] | s.lookup[lt + e0], As = xs[ea + sa], --I0[0], e0 = Re, Re = k(n0[0].codes, n0[0].htrees[As], Ce), fe[Y & be] = Re, (Y & be) === be && K.write(fe, Ee), ++Y;
          if (g0 -= Bl, g0 <= 0) break;
          if (et < 0) {
            var sa;
            if (Ce.readMoreInput(), I0[2] === 0 && (Q(
              V0[2],
              E0,
              2,
              Rt,
              tn,
              rn,
              Ce
            ), I0[2] = re(p0, 2 * b, Ce), ta = Rt[2] << m, ra = ta), --I0[2], sa = (Y0 > 4 ? 3 : Y0 - 2) & 255, ia = ys[ra + sa], et = k(n0[2].codes, n0[2].htrees[ia], Ce), et >= Tr) {
              var Il, Ju, la;
              et -= Tr, Ju = et & bs, et >>= Sr, Il = (et >> 1) + 1, la = (2 + (et & 1) << Il) - 4, et = Tr + (la + Ce.readBits(Il) << Sr) + Ju;
            }
          }
          if (fr = ie(et, o0, i0), fr < 0)
            throw new Error("[BrotliDecompress] invalid distance");
          if (Y < ue && pe !== ue ? pe = Y : pe = ue, oa = Y & be, fr > pe)
            if (Y0 >= i.minDictionaryWordLength && Y0 <= i.maxDictionaryWordLength) {
              var la = i.offsetsByLength[Y0], Qu = fr - pe - 1, eh = i.sizeBitsByLength[Y0], Tv = (1 << eh) - 1, kv = Qu & Tv, th = Qu >> eh;
              if (la += kv * Y0, th < c.kNumTransforms) {
                var Rl = c.transformDictionaryWord(fe, oa, la, Y0, th);
                if (oa += Rl, Y += Rl, g0 -= Rl, oa >= Ie) {
                  K.write(fe, Ee);
                  for (var Ss = 0; Ss < oa - Ie; Ss++)
                    fe[Ss] = fe[Ie + Ss];
                }
              } else
                throw new Error("Invalid backward reference. pos: " + Y + " distance: " + fr + " len: " + Y0 + " bytes left: " + g0);
            } else
              throw new Error("Invalid backward reference. pos: " + Y + " distance: " + fr + " len: " + Y0 + " bytes left: " + g0);
          else {
            if (et > 0 && (o0[i0 & 3] = fr, ++i0), Y0 > g0)
              throw new Error("Invalid backward reference. pos: " + Y + " distance: " + fr + " len: " + Y0 + " bytes left: " + g0);
            for (nn = 0; nn < Y0; ++nn)
              fe[Y & be] = fe[Y - fr & be], (Y & be) === be && K.write(fe, Ee), ++Y, --g0;
          }
          Re = fe[Y - 1 & be], e0 = fe[Y - 2 & be];
        }
        Y &= 1073741823;
      }
    }
    K.write(fe, Y & be);
  }
  return fa.BrotliDecompress = ze, i.init(), fa;
}
var Tb = R4().BrotliDecompressBuffer;
const kb = /* @__PURE__ */ Dt(Tb);
function ts(t, e, r, i) {
  Object.defineProperty(t, e, { get: r, set: i, enumerable: !0, configurable: !0 });
}
function jo(t) {
  return t && t.__esModule ? t.default : t;
}
var rs = {};
ts(rs, "logErrors", () => Fb);
ts(rs, "registerFormat", () => Vn);
ts(rs, "create", () => j1);
ts(rs, "defaultLanguage", () => xo);
ts(rs, "setDefaultLanguage", () => Ob);
let Fb = !1, Z1 = [];
function Vn(t) {
  Z1.push(t);
}
function j1(t, e) {
  for (let r = 0; r < Z1.length; r++) {
    let i = Z1[r];
    if (i.probe(t)) {
      let n = new i(new k0(t));
      return e ? n.getFont(e) : n;
    }
  }
  throw new Error("Unknown font format");
}
let xo = "en";
function Ob(t = "en") {
  xo = t;
}
function B0(t, e, r) {
  if (r.get) {
    let i = r.get;
    r.get = function() {
      let n = i.call(this);
      return Object.defineProperty(this, e, {
        value: n
      }), n;
    };
  } else if (typeof r.value == "function") {
    let i = r.value;
    return {
      get() {
        let n = /* @__PURE__ */ new Map();
        function a(...s) {
          let o = s.length > 0 ? s[0] : "value";
          if (n.has(o)) return n.get(o);
          let c = i.apply(this, s);
          return n.set(o, c), c;
        }
        return Object.defineProperty(this, e, {
          value: a
        }), a;
      }
    };
  }
}
let Db = new W({
  firstCode: g,
  entryCount: g,
  idDelta: te,
  idRangeOffset: g
}), ac = new W({
  startCharCode: $,
  endCharCode: $,
  glyphID: $
}), Bb = new W({
  startUnicodeValue: jr,
  additionalCount: se
}), Ib = new W({
  unicodeValue: jr,
  glyphID: g
}), Rb = new M(Bb, $), Pb = new M(Ib, $), Lb = new W({
  varSelector: jr,
  defaultUVS: new U($, Rb, {
    type: "parent"
  }),
  nonDefaultUVS: new U($, Pb, {
    type: "parent"
  })
}), Nb = new Te(g, {
  0: {
    length: g,
    language: g,
    codeMap: new Je(se, 256)
  },
  2: {
    length: g,
    language: g,
    subHeaderKeys: new M(g, 256),
    subHeaderCount: (t) => Math.max.apply(Math, t.subHeaderKeys),
    subHeaders: new Je(Db, "subHeaderCount"),
    glyphIndexArray: new Je(g, "subHeaderCount")
  },
  4: {
    length: g,
    language: g,
    segCountX2: g,
    segCount: (t) => t.segCountX2 >> 1,
    searchRange: g,
    entrySelector: g,
    rangeShift: g,
    endCode: new Je(g, "segCount"),
    reservedPad: new r0(g),
    startCode: new Je(g, "segCount"),
    idDelta: new Je(te, "segCount"),
    idRangeOffset: new Je(g, "segCount"),
    glyphIndexArray: new Je(g, (t) => (t.length - t._currentOffset) / 2)
  },
  6: {
    length: g,
    language: g,
    firstCode: g,
    entryCount: g,
    glyphIndices: new Je(g, "entryCount")
  },
  8: {
    reserved: new r0(g),
    length: $,
    language: g,
    is32: new Je(se, 8192),
    nGroups: $,
    groups: new Je(ac, "nGroups")
  },
  10: {
    reserved: new r0(g),
    length: $,
    language: $,
    firstCode: $,
    entryCount: $,
    glyphIndices: new Je(g, "numChars")
  },
  12: {
    reserved: new r0(g),
    length: $,
    language: $,
    nGroups: $,
    groups: new Je(ac, "nGroups")
  },
  13: {
    reserved: new r0(g),
    length: $,
    language: $,
    nGroups: $,
    groups: new Je(ac, "nGroups")
  },
  14: {
    length: $,
    numRecords: $,
    varSelectors: new Je(Lb, "numRecords")
  }
}), Mb = new W({
  platformID: g,
  encodingID: g,
  table: new U($, Nb, {
    type: "parent",
    lazy: !0
  })
});
var Ub = new W({
  version: g,
  numSubtables: g,
  tables: new M(Mb, "numSubtables")
}), $b = new W({
  version: vi,
  revision: vi,
  checkSumAdjustment: $,
  magicNumber: $,
  flags: g,
  unitsPerEm: g,
  created: new M(vi, 2),
  modified: new M(vi, 2),
  xMin: te,
  yMin: te,
  xMax: te,
  yMax: te,
  macStyle: new Tt(g, [
    "bold",
    "italic",
    "underline",
    "outline",
    "shadow",
    "condensed",
    "extended"
  ]),
  lowestRecPPEM: g,
  fontDirectionHint: te,
  indexToLocFormat: te,
  glyphDataFormat: te
  // 0 for current format
}), zb = new W({
  version: vi,
  ascent: te,
  descent: te,
  lineGap: te,
  advanceWidthMax: g,
  minLeftSideBearing: te,
  minRightSideBearing: te,
  xMaxExtent: te,
  caretSlopeRise: te,
  caretSlopeRun: te,
  caretOffset: te,
  reserved: new r0(te, 4),
  metricDataFormat: te,
  numberOfMetrics: g
  // Number of advance widths in 'hmtx' table
});
let Wb = new W({
  advance: g,
  bearing: te
});
var Hb = new W({
  metrics: new Je(Wb, (t) => t.parent.hhea.numberOfMetrics),
  bearings: new Je(te, (t) => t.parent.maxp.numGlyphs - t.parent.hhea.numberOfMetrics)
}), qb = new W({
  version: vi,
  numGlyphs: g,
  maxPoints: g,
  maxContours: g,
  maxComponentPoints: g,
  maxComponentContours: g,
  maxZones: g,
  maxTwilightPoints: g,
  maxStorage: g,
  maxFunctionDefs: g,
  maxInstructionDefs: g,
  maxStackElements: g,
  maxSizeOfInstructions: g,
  maxComponentElements: g,
  maxComponentDepth: g
  // Maximum levels of recursion; 1 for simple components
});
function P4(t, e, r = 0) {
  return t === 1 && o5[r] ? o5[r] : Zb[t][e];
}
const Vb = /* @__PURE__ */ new Set([
  "x-mac-roman",
  "x-mac-cyrillic",
  "iso-8859-6",
  "iso-8859-8"
]), Yb = {
  "x-mac-croatian": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ",
  "x-mac-gaelic": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ",
  "x-mac-greek": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­",
  "x-mac-icelandic": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ",
  "x-mac-inuit": "ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł",
  "x-mac-ce": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ",
  "x-mac-romanian": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ",
  "x-mac-turkish": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"
}, sc = /* @__PURE__ */ new Map();
function Gb(t) {
  let e = sc.get(t);
  if (e) return e;
  let r = Yb[t];
  if (r) {
    let i = /* @__PURE__ */ new Map();
    for (let n = 0; n < r.length; n++) i.set(r.charCodeAt(n), 128 + n);
    return sc.set(t, i), i;
  }
  if (Vb.has(t)) {
    let i = new TextDecoder(t), n = new Uint8Array(128);
    for (let o = 0; o < 128; o++) n[o] = 128 + o;
    let a = /* @__PURE__ */ new Map(), s = i.decode(n);
    for (let o = 0; o < 128; o++) a.set(s.charCodeAt(o), 128 + o);
    return sc.set(t, a), a;
  }
}
const Zb = [
  // unicode
  [
    "utf-16be",
    "utf-16be",
    "utf-16be",
    "utf-16be",
    "utf-16be",
    "utf-16be",
    "utf-16be"
  ],
  // macintosh
  // Mappings available at http://unicode.org/Public/MAPPINGS/VENDORS/APPLE/
  // 0	Roman                 17	Malayalam
  // 1	Japanese	            18	Sinhalese
  // 2	Traditional Chinese	  19	Burmese
  // 3	Korean	              20	Khmer
  // 4	Arabic	              21	Thai
  // 5	Hebrew	              22	Laotian
  // 6	Greek	                23	Georgian
  // 7	Russian	              24	Armenian
  // 8	RSymbol	              25	Simplified Chinese
  // 9	Devanagari	          26	Tibetan
  // 10	Gurmukhi	            27	Mongolian
  // 11	Gujarati	            28	Geez
  // 12	Oriya	                29	Slavic
  // 13	Bengali	              30	Vietnamese
  // 14	Tamil	                31	Sindhi
  // 15	Telugu	              32	(Uninterpreted)
  // 16	Kannada
  [
    "x-mac-roman",
    "shift-jis",
    "big5",
    "euc-kr",
    "iso-8859-6",
    "iso-8859-8",
    "x-mac-greek",
    "x-mac-cyrillic",
    "x-mac-symbol",
    "x-mac-devanagari",
    "x-mac-gurmukhi",
    "x-mac-gujarati",
    "Oriya",
    "Bengali",
    "Tamil",
    "Telugu",
    "Kannada",
    "Malayalam",
    "Sinhalese",
    "Burmese",
    "Khmer",
    "iso-8859-11",
    "Laotian",
    "Georgian",
    "Armenian",
    "gbk",
    "Tibetan",
    "Mongolian",
    "Geez",
    "x-mac-ce",
    "Vietnamese",
    "Sindhi"
  ],
  // ISO (deprecated)
  [
    "ascii",
    null,
    "iso-8859-1"
  ],
  // windows
  // Docs here: http://msdn.microsoft.com/en-us/library/system.text.encoding(v=vs.110).aspx
  [
    "symbol",
    "utf-16be",
    "shift-jis",
    "gb18030",
    "big5",
    "euc-kr",
    "johab",
    null,
    null,
    null,
    "utf-16be"
  ]
], o5 = {
  15: "x-mac-icelandic",
  17: "x-mac-turkish",
  18: "x-mac-croatian",
  24: "x-mac-ce",
  25: "x-mac-ce",
  26: "x-mac-ce",
  27: "x-mac-ce",
  28: "x-mac-ce",
  30: "x-mac-icelandic",
  37: "x-mac-romanian",
  38: "x-mac-ce",
  39: "x-mac-ce",
  40: "x-mac-ce",
  143: "x-mac-inuit",
  146: "x-mac-gaelic"
}, jb = [
  // unicode
  [],
  {
    0: "en",
    30: "fo",
    60: "ks",
    90: "rw",
    1: "fr",
    31: "fa",
    61: "ku",
    91: "rn",
    2: "de",
    32: "ru",
    62: "sd",
    92: "ny",
    3: "it",
    33: "zh",
    63: "bo",
    93: "mg",
    4: "nl",
    34: "nl-BE",
    64: "ne",
    94: "eo",
    5: "sv",
    35: "ga",
    65: "sa",
    128: "cy",
    6: "es",
    36: "sq",
    66: "mr",
    129: "eu",
    7: "da",
    37: "ro",
    67: "bn",
    130: "ca",
    8: "pt",
    38: "cz",
    68: "as",
    131: "la",
    9: "no",
    39: "sk",
    69: "gu",
    132: "qu",
    10: "he",
    40: "si",
    70: "pa",
    133: "gn",
    11: "ja",
    41: "yi",
    71: "or",
    134: "ay",
    12: "ar",
    42: "sr",
    72: "ml",
    135: "tt",
    13: "fi",
    43: "mk",
    73: "kn",
    136: "ug",
    14: "el",
    44: "bg",
    74: "ta",
    137: "dz",
    15: "is",
    45: "uk",
    75: "te",
    138: "jv",
    16: "mt",
    46: "be",
    76: "si",
    139: "su",
    17: "tr",
    47: "uz",
    77: "my",
    140: "gl",
    18: "hr",
    48: "kk",
    78: "km",
    141: "af",
    19: "zh-Hant",
    49: "az-Cyrl",
    79: "lo",
    142: "br",
    20: "ur",
    50: "az-Arab",
    80: "vi",
    143: "iu",
    21: "hi",
    51: "hy",
    81: "id",
    144: "gd",
    22: "th",
    52: "ka",
    82: "tl",
    145: "gv",
    23: "ko",
    53: "mo",
    83: "ms",
    146: "ga",
    24: "lt",
    54: "ky",
    84: "ms-Arab",
    147: "to",
    25: "pl",
    55: "tg",
    85: "am",
    148: "el-polyton",
    26: "hu",
    56: "tk",
    86: "ti",
    149: "kl",
    27: "es",
    57: "mn-CN",
    87: "om",
    150: "az",
    28: "lv",
    58: "mn",
    88: "so",
    151: "nn",
    29: "se",
    59: "ps",
    89: "sw"
  },
  // ISO (deprecated)
  [],
  {
    1078: "af",
    16393: "en-IN",
    1159: "rw",
    1074: "tn",
    1052: "sq",
    6153: "en-IE",
    1089: "sw",
    1115: "si",
    1156: "gsw",
    8201: "en-JM",
    1111: "kok",
    1051: "sk",
    1118: "am",
    17417: "en-MY",
    1042: "ko",
    1060: "sl",
    5121: "ar-DZ",
    5129: "en-NZ",
    1088: "ky",
    11274: "es-AR",
    15361: "ar-BH",
    13321: "en-PH",
    1108: "lo",
    16394: "es-BO",
    3073: "ar",
    18441: "en-SG",
    1062: "lv",
    13322: "es-CL",
    2049: "ar-IQ",
    7177: "en-ZA",
    1063: "lt",
    9226: "es-CO",
    11265: "ar-JO",
    11273: "en-TT",
    2094: "dsb",
    5130: "es-CR",
    13313: "ar-KW",
    2057: "en-GB",
    1134: "lb",
    7178: "es-DO",
    12289: "ar-LB",
    1033: "en",
    1071: "mk",
    12298: "es-EC",
    4097: "ar-LY",
    12297: "en-ZW",
    2110: "ms-BN",
    17418: "es-SV",
    6145: "ary",
    1061: "et",
    1086: "ms",
    4106: "es-GT",
    8193: "ar-OM",
    1080: "fo",
    1100: "ml",
    18442: "es-HN",
    16385: "ar-QA",
    1124: "fil",
    1082: "mt",
    2058: "es-MX",
    1025: "ar-SA",
    1035: "fi",
    1153: "mi",
    19466: "es-NI",
    10241: "ar-SY",
    2060: "fr-BE",
    1146: "arn",
    6154: "es-PA",
    7169: "aeb",
    3084: "fr-CA",
    1102: "mr",
    15370: "es-PY",
    14337: "ar-AE",
    1036: "fr",
    1148: "moh",
    10250: "es-PE",
    9217: "ar-YE",
    5132: "fr-LU",
    1104: "mn",
    20490: "es-PR",
    1067: "hy",
    6156: "fr-MC",
    2128: "mn-CN",
    3082: "es",
    1101: "as",
    4108: "fr-CH",
    1121: "ne",
    1034: "es",
    2092: "az-Cyrl",
    1122: "fy",
    1044: "nb",
    21514: "es-US",
    1068: "az",
    1110: "gl",
    2068: "nn",
    14346: "es-UY",
    1133: "ba",
    1079: "ka",
    1154: "oc",
    8202: "es-VE",
    1069: "eu",
    3079: "de-AT",
    1096: "or",
    2077: "sv-FI",
    1059: "be",
    1031: "de",
    1123: "ps",
    1053: "sv",
    2117: "bn",
    5127: "de-LI",
    1045: "pl",
    1114: "syr",
    1093: "bn-IN",
    4103: "de-LU",
    1046: "pt",
    1064: "tg",
    8218: "bs-Cyrl",
    2055: "de-CH",
    2070: "pt-PT",
    2143: "tzm",
    5146: "bs",
    1032: "el",
    1094: "pa",
    1097: "ta",
    1150: "br",
    1135: "kl",
    1131: "qu-BO",
    1092: "tt",
    1026: "bg",
    1095: "gu",
    2155: "qu-EC",
    1098: "te",
    1027: "ca",
    1128: "ha",
    3179: "qu",
    1054: "th",
    3076: "zh-HK",
    1037: "he",
    1048: "ro",
    1105: "bo",
    5124: "zh-MO",
    1081: "hi",
    1047: "rm",
    1055: "tr",
    2052: "zh",
    1038: "hu",
    1049: "ru",
    1090: "tk",
    4100: "zh-SG",
    1039: "is",
    9275: "smn",
    1152: "ug",
    1028: "zh-TW",
    1136: "ig",
    4155: "smj-NO",
    1058: "uk",
    1155: "co",
    1057: "id",
    5179: "smj",
    1070: "hsb",
    1050: "hr",
    1117: "iu",
    3131: "se-FI",
    1056: "ur",
    4122: "hr-BA",
    2141: "iu-Latn",
    1083: "se",
    2115: "uz-Cyrl",
    1029: "cs",
    2108: "ga",
    2107: "se-SE",
    1091: "uz",
    1030: "da",
    1076: "xh",
    8251: "sms",
    1066: "vi",
    1164: "prs",
    1077: "zu",
    6203: "sma-NO",
    1106: "cy",
    1125: "dv",
    1040: "it",
    7227: "sms",
    1160: "wo",
    2067: "nl-BE",
    2064: "it-CH",
    1103: "sa",
    1157: "sah",
    1043: "nl",
    1041: "ja",
    7194: "sr-Cyrl-BA",
    1144: "ii",
    3081: "en-AU",
    1099: "kn",
    3098: "sr",
    1130: "yo",
    10249: "en-BZ",
    1087: "kk",
    6170: "sr-Latn-BA",
    4105: "en-CA",
    1107: "km",
    2074: "sr-Latn",
    9225: "en-029",
    1158: "quc",
    1132: "nso"
  }
];
let l5 = new W({
  platformID: g,
  encodingID: g,
  languageID: g,
  nameID: g,
  length: g,
  string: new U(g, new Ge("length", (t) => P4(t.platformID, t.encodingID, t.languageID)), {
    type: "parent",
    relativeTo: (t) => t.parent.stringOffset,
    allowNull: !1
  })
}), Xb = new W({
  length: g,
  tag: new U(g, new Ge("length", "utf16be"), {
    type: "parent",
    relativeTo: (t) => t.stringOffset
  })
});
var wo = new Te(g, {
  0: {
    count: g,
    stringOffset: g,
    records: new M(l5, "count")
  },
  1: {
    count: g,
    stringOffset: g,
    records: new M(l5, "count"),
    langTagCount: g,
    langTags: new M(Xb, "langTagCount")
  }
}), Kb = wo;
const X1 = [
  "copyright",
  "fontFamily",
  "fontSubfamily",
  "uniqueSubfamily",
  "fullName",
  "version",
  "postscriptName",
  "trademark",
  "manufacturer",
  "designer",
  "description",
  "vendorURL",
  "designerURL",
  "license",
  "licenseURL",
  null,
  "preferredFamily",
  "preferredSubfamily",
  "compatibleFull",
  "sampleText",
  "postscriptCIDFontName",
  "wwsFamilyName",
  "wwsSubfamilyName"
];
wo.process = function(t) {
  var e = {};
  for (let r of this.records) {
    let i = jb[r.platformID][r.languageID];
    i == null && this.langTags != null && r.languageID >= 32768 && (i = this.langTags[r.languageID - 32768].tag), i == null && (i = r.platformID + "-" + r.languageID);
    let n = r.nameID >= 256 ? "fontFeatures" : X1[r.nameID] || r.nameID;
    e[n] == null && (e[n] = {});
    let a = e[n];
    r.nameID >= 256 && (a = a[r.nameID] || (a[r.nameID] = {})), (typeof r.string == "string" || typeof a[i] != "string") && (a[i] = r.string);
  }
  this.records = e;
};
wo.preEncode = function() {
  if (Array.isArray(this.records)) return;
  this.version = 0;
  let t = [];
  for (let e in this.records) {
    let r = this.records[e];
    e !== "fontFeatures" && (t.push({
      platformID: 3,
      encodingID: 1,
      languageID: 1033,
      nameID: X1.indexOf(e),
      length: r.en.length * 2,
      string: r.en
    }), e === "postscriptName" && t.push({
      platformID: 1,
      encodingID: 0,
      languageID: 0,
      nameID: X1.indexOf(e),
      length: r.en.length,
      string: r.en
    }));
  }
  this.records = t, this.count = t.length, this.stringOffset = wo.size(this, null, !1);
};
var L4 = new Te(g, {
  header: {
    xAvgCharWidth: te,
    usWeightClass: g,
    usWidthClass: g,
    fsType: new Tt(g, [
      null,
      "noEmbedding",
      "viewOnly",
      "editable",
      null,
      null,
      null,
      null,
      "noSubsetting",
      "bitmapOnly"
    ]),
    ySubscriptXSize: te,
    ySubscriptYSize: te,
    ySubscriptXOffset: te,
    ySubscriptYOffset: te,
    ySuperscriptXSize: te,
    ySuperscriptYSize: te,
    ySuperscriptXOffset: te,
    ySuperscriptYOffset: te,
    yStrikeoutSize: te,
    yStrikeoutPosition: te,
    sFamilyClass: te,
    panose: new M(se, 10),
    ulCharRange: new M($, 4),
    vendorID: new Ge(4),
    fsSelection: new Tt(g, [
      "italic",
      "underscore",
      "negative",
      "outlined",
      "strikeout",
      "bold",
      "regular",
      "useTypoMetrics",
      "wws",
      "oblique"
    ]),
    usFirstCharIndex: g,
    usLastCharIndex: g
    // The maximum Unicode index in this font
  },
  // The Apple version of this table ends here, but the Microsoft one continues on...
  0: {},
  1: {
    typoAscender: te,
    typoDescender: te,
    typoLineGap: te,
    winAscent: g,
    winDescent: g,
    codePageRange: new M($, 2)
  },
  2: {
    // these should be common with version 1 somehow
    typoAscender: te,
    typoDescender: te,
    typoLineGap: te,
    winAscent: g,
    winDescent: g,
    codePageRange: new M($, 2),
    xHeight: te,
    capHeight: te,
    defaultChar: g,
    breakChar: g,
    maxContent: g
  },
  5: {
    typoAscender: te,
    typoDescender: te,
    typoLineGap: te,
    winAscent: g,
    winDescent: g,
    codePageRange: new M($, 2),
    xHeight: te,
    capHeight: te,
    defaultChar: g,
    breakChar: g,
    maxContent: g,
    usLowerOpticalPointSize: g,
    usUpperOpticalPointSize: g
  }
});
let oc = L4.versions;
oc[3] = oc[4] = oc[2];
var Jb = L4, Qb = new Te(f0, {
  header: {
    italicAngle: f0,
    underlinePosition: te,
    underlineThickness: te,
    isFixedPitch: $,
    minMemType42: $,
    maxMemType42: $,
    minMemType1: $,
    maxMemType1: $
    // Maximum memory usage when a TrueType font is downloaded as a Type 1 font
  },
  1: {},
  2: {
    numberOfGlyphs: g,
    glyphNameIndex: new M(g, "numberOfGlyphs"),
    names: new M(new Ge(se))
  },
  2.5: {
    numberOfGlyphs: g,
    offsets: new M(se, "numberOfGlyphs")
  },
  3: {},
  4: {
    map: new M($, (t) => t.parent.maxp.numGlyphs)
  }
}), e7 = new W({
  controlValues: new M(te)
}), t7 = new W({
  instructions: new M(se)
});
let Wf = new Te("head.indexToLocFormat", {
  0: {
    offsets: new M(g)
  },
  1: {
    offsets: new M($)
  }
});
Wf.process = function() {
  if (this.version === 0 && !this._processed) {
    for (let t = 0; t < this.offsets.length; t++) this.offsets[t] <<= 1;
    this._processed = !0;
  }
};
Wf.preEncode = function() {
  if (this.version === 0 && this._processed !== !1) {
    for (let t = 0; t < this.offsets.length; t++) this.offsets[t] >>>= 1;
    this._processed = !1;
  }
};
var r7 = Wf, i7 = new W({
  controlValueProgram: new M(se)
}), n7 = new M(new F0());
class Gt {
  getCFFVersion(e) {
    for (; e && !e.hdrSize; ) e = e.parent;
    return e ? e.version : -1;
  }
  decode(e, r) {
    let n = this.getCFFVersion(r) >= 2 ? e.readUInt32BE() : e.readUInt16BE();
    if (n === 0) return [];
    let a = e.readUInt8(), s;
    if (a === 1) s = se;
    else if (a === 2) s = g;
    else if (a === 3) s = jr;
    else if (a === 4) s = $;
    else throw new Error(`Bad offset size in CFFIndex: ${a} ${e.pos}`);
    let o = [], c = e.pos + (n + 1) * a - 1, l = s.decode(e);
    for (let f = 0; f < n; f++) {
      let u = s.decode(e);
      if (this.type != null) {
        let h = e.pos;
        e.pos = c + l, r.length = u - l, o.push(this.type.decode(e, r)), e.pos = h;
      } else o.push({
        offset: c + l,
        length: u - l
      });
      l = u;
    }
    return e.pos = c + l, o;
  }
  size(e, r) {
    let i = 2;
    if (e.length === 0) return i;
    let n = this.type || new F0(), a = 1;
    for (let o = 0; o < e.length; o++) {
      let c = e[o];
      a += n.size(c, r);
    }
    let s;
    if (a <= 255) s = se;
    else if (a <= 65535) s = g;
    else if (a <= 16777215) s = jr;
    else if (a <= 4294967295) s = $;
    else throw new Error("Bad offset in CFFIndex");
    return i += 1 + s.size() * (e.length + 1), i += a - 1, i;
  }
  encode(e, r, i) {
    if (e.writeUInt16BE(r.length), r.length === 0) return;
    let n = this.type || new F0(), a = [], s = 1;
    for (let c of r) {
      let l = n.size(c, i);
      a.push(l), s += l;
    }
    let o;
    if (s <= 255) o = se;
    else if (s <= 65535) o = g;
    else if (s <= 16777215) o = jr;
    else if (s <= 4294967295) o = $;
    else throw new Error("Bad offset in CFFIndex");
    e.writeUInt8(o.size()), s = 1, o.encode(e, s);
    for (let c of a)
      s += c, o.encode(e, s);
    for (let c of r) n.encode(e, c, i);
  }
  constructor(e) {
    this.type = e;
  }
}
const ha = 15, c5 = [
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  ".",
  "E",
  "E-",
  null,
  "-"
], f5 = {
  ".": 10,
  E: 11,
  "E-": 12,
  "-": 14
};
class lc {
  static decode(e, r) {
    if (32 <= r && r <= 246) return r - 139;
    if (247 <= r && r <= 250) return (r - 247) * 256 + e.readUInt8() + 108;
    if (251 <= r && r <= 254) return -(r - 251) * 256 - e.readUInt8() - 108;
    if (r === 28) return e.readInt16BE();
    if (r === 29) return e.readInt32BE();
    if (r === 30) {
      let i = "";
      for (; ; ) {
        let n = e.readUInt8(), a = n >> 4;
        if (a === ha) break;
        i += c5[a];
        let s = n & 15;
        if (s === ha) break;
        i += c5[s];
      }
      return parseFloat(i);
    }
    return null;
  }
  static size(e) {
    if (e.forceLarge && (e = 32768), (e | 0) !== e) {
      let r = "" + e;
      return 1 + Math.ceil((r.length + 1) / 2);
    } else return -107 <= e && e <= 107 ? 1 : 108 <= e && e <= 1131 || -1131 <= e && e <= -108 ? 2 : -32768 <= e && e <= 32767 ? 3 : 5;
  }
  static encode(e, r) {
    let i = Number(r);
    if (r.forceLarge)
      return e.writeUInt8(29), e.writeInt32BE(i);
    if ((i | 0) !== i) {
      e.writeUInt8(30);
      let a = "" + i;
      for (let s = 0; s < a.length; s += 2) {
        let o = a[s], c = f5[o] || +o;
        if (s === a.length - 1) var n = ha;
        else {
          let l = a[s + 1];
          var n = f5[l] || +l;
        }
        e.writeUInt8(c << 4 | n & 15);
      }
      if (n !== ha) return e.writeUInt8(ha << 4);
    } else return -107 <= i && i <= 107 ? e.writeUInt8(i + 139) : 108 <= i && i <= 1131 ? (i -= 108, e.writeUInt8((i >> 8) + 247), e.writeUInt8(i & 255)) : -1131 <= i && i <= -108 ? (i = -i - 108, e.writeUInt8((i >> 8) + 251), e.writeUInt8(i & 255)) : -32768 <= i && i <= 32767 ? (e.writeUInt8(28), e.writeInt16BE(i)) : (e.writeUInt8(29), e.writeInt32BE(i));
  }
}
class Xo {
  decodeOperands(e, r, i, n) {
    if (Array.isArray(e)) return n.map((a, s) => this.decodeOperands(e[s], r, i, [
      a
    ]));
    if (e.decode != null) return e.decode(r, i, n);
    switch (e) {
      case "number":
      case "offset":
      case "sid":
        return n[0];
      case "boolean":
        return !!n[0];
      default:
        return n;
    }
  }
  encodeOperands(e, r, i, n) {
    return Array.isArray(e) ? n.map((a, s) => this.encodeOperands(e[s], r, i, a)[0]) : e.encode != null ? e.encode(r, n, i) : typeof n == "number" ? [
      n
    ] : typeof n == "boolean" ? [
      +n
    ] : Array.isArray(n) ? n : [
      n
    ];
  }
  decode(e, r) {
    let i = e.pos + r.length, n = {}, a = [];
    Object.defineProperties(n, {
      parent: {
        value: r
      },
      _startOffset: {
        value: e.pos
      }
    });
    for (let s in this.fields) {
      let o = this.fields[s];
      n[o[1]] = o[3];
    }
    for (; e.pos < i; ) {
      let s = e.readUInt8();
      if (s < 28) {
        s === 12 && (s = s << 8 | e.readUInt8());
        let o = this.fields[s];
        if (!o) throw new Error(`Unknown operator ${s}`);
        let c = this.decodeOperands(o[2], e, n, a);
        c != null && (c instanceof Bf ? Object.defineProperty(n, o[1], c) : n[o[1]] = c), a = [];
      } else a.push(lc.decode(e, s));
    }
    return n;
  }
  size(e, r, i = !0) {
    let n = {
      parent: r,
      val: e,
      pointerSize: 0,
      startOffset: r.startOffset || 0
    }, a = 0;
    for (let s in this.fields) {
      let o = this.fields[s], c = e[o[1]];
      if (c == null || Gh(c, o[3])) continue;
      let l = this.encodeOperands(o[2], null, n, c);
      for (let u of l) a += lc.size(u);
      let f = Array.isArray(o[0]) ? o[0] : [
        o[0]
      ];
      a += f.length;
    }
    return i && (a += n.pointerSize), a;
  }
  encode(e, r, i) {
    let n = {
      pointers: [],
      startOffset: e.pos,
      parent: i,
      val: r,
      pointerSize: 0
    };
    n.pointerOffset = e.pos + this.size(r, n, !1);
    for (let s of this.ops) {
      let o = r[s[1]];
      if (o == null || Gh(o, s[3])) continue;
      let c = this.encodeOperands(s[2], e, n, o);
      for (let f of c) lc.encode(e, f);
      let l = Array.isArray(s[0]) ? s[0] : [
        s[0]
      ];
      for (let f of l) e.writeUInt8(f);
    }
    let a = 0;
    for (; a < n.pointers.length; ) {
      let s = n.pointers[a++];
      s.type.encode(e, s.val, s.parent);
    }
  }
  constructor(e = []) {
    this.ops = e, this.fields = {};
    for (let r of e) {
      let i = Array.isArray(r[0]) ? r[0][0] << 8 | r[0][1] : r[0];
      this.fields[i] = r;
    }
  }
}
class yt extends U {
  decode(e, r, i) {
    return this.offsetType = {
      decode: () => i[0]
    }, super.decode(e, r, i);
  }
  encode(e, r, i) {
    if (!e)
      return this.offsetType = {
        size: () => 0
      }, this.size(r, i), [
        new u5(0)
      ];
    let n = null;
    return this.offsetType = {
      encode: (a, s) => n = s
    }, super.encode(e, r, i), [
      new u5(n)
    ];
  }
  constructor(e, r = {}) {
    r.type == null && (r.type = "global"), super(null, e, r);
  }
}
class u5 {
  valueOf() {
    return this.val;
  }
  constructor(e) {
    this.val = e, this.forceLarge = !0;
  }
}
class a7 {
  static decode(e, r, i) {
    let n = i.pop();
    for (; i.length > n; ) i.pop();
  }
}
var K1 = new Xo([
  // key       name                    type                                          default
  [
    6,
    "BlueValues",
    "delta",
    null
  ],
  [
    7,
    "OtherBlues",
    "delta",
    null
  ],
  [
    8,
    "FamilyBlues",
    "delta",
    null
  ],
  [
    9,
    "FamilyOtherBlues",
    "delta",
    null
  ],
  [
    [
      12,
      9
    ],
    "BlueScale",
    "number",
    0.039625
  ],
  [
    [
      12,
      10
    ],
    "BlueShift",
    "number",
    7
  ],
  [
    [
      12,
      11
    ],
    "BlueFuzz",
    "number",
    1
  ],
  [
    10,
    "StdHW",
    "number",
    null
  ],
  [
    11,
    "StdVW",
    "number",
    null
  ],
  [
    [
      12,
      12
    ],
    "StemSnapH",
    "delta",
    null
  ],
  [
    [
      12,
      13
    ],
    "StemSnapV",
    "delta",
    null
  ],
  [
    [
      12,
      14
    ],
    "ForceBold",
    "boolean",
    !1
  ],
  [
    [
      12,
      17
    ],
    "LanguageGroup",
    "number",
    0
  ],
  [
    [
      12,
      18
    ],
    "ExpansionFactor",
    "number",
    0.06
  ],
  [
    [
      12,
      19
    ],
    "initialRandomSeed",
    "number",
    0
  ],
  [
    20,
    "defaultWidthX",
    "number",
    0
  ],
  [
    21,
    "nominalWidthX",
    "number",
    0
  ],
  [
    22,
    "vsindex",
    "number",
    0
  ],
  [
    23,
    "blend",
    a7,
    null
  ],
  [
    19,
    "Subrs",
    new yt(new Gt(), {
      type: "local"
    }),
    null
  ]
]), Js = [
  ".notdef",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quoteright",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "quoteleft",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "exclamdown",
  "cent",
  "sterling",
  "fraction",
  "yen",
  "florin",
  "section",
  "currency",
  "quotesingle",
  "quotedblleft",
  "guillemotleft",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "endash",
  "dagger",
  "daggerdbl",
  "periodcentered",
  "paragraph",
  "bullet",
  "quotesinglbase",
  "quotedblbase",
  "quotedblright",
  "guillemotright",
  "ellipsis",
  "perthousand",
  "questiondown",
  "grave",
  "acute",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "dieresis",
  "ring",
  "cedilla",
  "hungarumlaut",
  "ogonek",
  "caron",
  "emdash",
  "AE",
  "ordfeminine",
  "Lslash",
  "Oslash",
  "OE",
  "ordmasculine",
  "ae",
  "dotlessi",
  "lslash",
  "oslash",
  "oe",
  "germandbls",
  "onesuperior",
  "logicalnot",
  "mu",
  "trademark",
  "Eth",
  "onehalf",
  "plusminus",
  "Thorn",
  "onequarter",
  "divide",
  "brokenbar",
  "degree",
  "thorn",
  "threequarters",
  "twosuperior",
  "registered",
  "minus",
  "eth",
  "multiply",
  "threesuperior",
  "copyright",
  "Aacute",
  "Acircumflex",
  "Adieresis",
  "Agrave",
  "Aring",
  "Atilde",
  "Ccedilla",
  "Eacute",
  "Ecircumflex",
  "Edieresis",
  "Egrave",
  "Iacute",
  "Icircumflex",
  "Idieresis",
  "Igrave",
  "Ntilde",
  "Oacute",
  "Ocircumflex",
  "Odieresis",
  "Ograve",
  "Otilde",
  "Scaron",
  "Uacute",
  "Ucircumflex",
  "Udieresis",
  "Ugrave",
  "Yacute",
  "Ydieresis",
  "Zcaron",
  "aacute",
  "acircumflex",
  "adieresis",
  "agrave",
  "aring",
  "atilde",
  "ccedilla",
  "eacute",
  "ecircumflex",
  "edieresis",
  "egrave",
  "iacute",
  "icircumflex",
  "idieresis",
  "igrave",
  "ntilde",
  "oacute",
  "ocircumflex",
  "odieresis",
  "ograve",
  "otilde",
  "scaron",
  "uacute",
  "ucircumflex",
  "udieresis",
  "ugrave",
  "yacute",
  "ydieresis",
  "zcaron",
  "exclamsmall",
  "Hungarumlautsmall",
  "dollaroldstyle",
  "dollarsuperior",
  "ampersandsmall",
  "Acutesmall",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "questionsmall",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "isuperior",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "ff",
  "ffi",
  "ffl",
  "parenleftinferior",
  "parenrightinferior",
  "Circumflexsmall",
  "hyphensuperior",
  "Gravesmall",
  "Asmall",
  "Bsmall",
  "Csmall",
  "Dsmall",
  "Esmall",
  "Fsmall",
  "Gsmall",
  "Hsmall",
  "Ismall",
  "Jsmall",
  "Ksmall",
  "Lsmall",
  "Msmall",
  "Nsmall",
  "Osmall",
  "Psmall",
  "Qsmall",
  "Rsmall",
  "Ssmall",
  "Tsmall",
  "Usmall",
  "Vsmall",
  "Wsmall",
  "Xsmall",
  "Ysmall",
  "Zsmall",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "Tildesmall",
  "exclamdownsmall",
  "centoldstyle",
  "Lslashsmall",
  "Scaronsmall",
  "Zcaronsmall",
  "Dieresissmall",
  "Brevesmall",
  "Caronsmall",
  "Dotaccentsmall",
  "Macronsmall",
  "figuredash",
  "hypheninferior",
  "Ogoneksmall",
  "Ringsmall",
  "Cedillasmall",
  "questiondownsmall",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "zerosuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior",
  "Agravesmall",
  "Aacutesmall",
  "Acircumflexsmall",
  "Atildesmall",
  "Adieresissmall",
  "Aringsmall",
  "AEsmall",
  "Ccedillasmall",
  "Egravesmall",
  "Eacutesmall",
  "Ecircumflexsmall",
  "Edieresissmall",
  "Igravesmall",
  "Iacutesmall",
  "Icircumflexsmall",
  "Idieresissmall",
  "Ethsmall",
  "Ntildesmall",
  "Ogravesmall",
  "Oacutesmall",
  "Ocircumflexsmall",
  "Otildesmall",
  "Odieresissmall",
  "OEsmall",
  "Oslashsmall",
  "Ugravesmall",
  "Uacutesmall",
  "Ucircumflexsmall",
  "Udieresissmall",
  "Yacutesmall",
  "Thornsmall",
  "Ydieresissmall",
  "001.000",
  "001.001",
  "001.002",
  "001.003",
  "Black",
  "Bold",
  "Book",
  "Light",
  "Medium",
  "Regular",
  "Roman",
  "Semibold"
];
let N4 = [
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quoteright",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "quoteleft",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "exclamdown",
  "cent",
  "sterling",
  "fraction",
  "yen",
  "florin",
  "section",
  "currency",
  "quotesingle",
  "quotedblleft",
  "guillemotleft",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "",
  "endash",
  "dagger",
  "daggerdbl",
  "periodcentered",
  "",
  "paragraph",
  "bullet",
  "quotesinglbase",
  "quotedblbase",
  "quotedblright",
  "guillemotright",
  "ellipsis",
  "perthousand",
  "",
  "questiondown",
  "",
  "grave",
  "acute",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "dieresis",
  "",
  "ring",
  "cedilla",
  "",
  "hungarumlaut",
  "ogonek",
  "caron",
  "emdash",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "AE",
  "",
  "ordfeminine",
  "",
  "",
  "",
  "",
  "Lslash",
  "Oslash",
  "OE",
  "ordmasculine",
  "",
  "",
  "",
  "",
  "",
  "ae",
  "",
  "",
  "",
  "dotlessi",
  "",
  "",
  "lslash",
  "oslash",
  "oe",
  "germandbls"
], s7 = [
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "space",
  "exclamsmall",
  "Hungarumlautsmall",
  "",
  "dollaroldstyle",
  "dollarsuperior",
  "ampersandsmall",
  "Acutesmall",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "comma",
  "hyphen",
  "period",
  "fraction",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "colon",
  "semicolon",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "questionsmall",
  "",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "",
  "",
  "isuperior",
  "",
  "",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "",
  "",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "",
  "ff",
  "fi",
  "fl",
  "ffi",
  "ffl",
  "parenleftinferior",
  "",
  "parenrightinferior",
  "Circumflexsmall",
  "hyphensuperior",
  "Gravesmall",
  "Asmall",
  "Bsmall",
  "Csmall",
  "Dsmall",
  "Esmall",
  "Fsmall",
  "Gsmall",
  "Hsmall",
  "Ismall",
  "Jsmall",
  "Ksmall",
  "Lsmall",
  "Msmall",
  "Nsmall",
  "Osmall",
  "Psmall",
  "Qsmall",
  "Rsmall",
  "Ssmall",
  "Tsmall",
  "Usmall",
  "Vsmall",
  "Wsmall",
  "Xsmall",
  "Ysmall",
  "Zsmall",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "Tildesmall",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "",
  "exclamdownsmall",
  "centoldstyle",
  "Lslashsmall",
  "",
  "",
  "Scaronsmall",
  "Zcaronsmall",
  "Dieresissmall",
  "Brevesmall",
  "Caronsmall",
  "",
  "Dotaccentsmall",
  "",
  "",
  "Macronsmall",
  "",
  "",
  "figuredash",
  "hypheninferior",
  "",
  "",
  "Ogoneksmall",
  "Ringsmall",
  "Cedillasmall",
  "",
  "",
  "",
  "onequarter",
  "onehalf",
  "threequarters",
  "questiondownsmall",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "",
  "",
  "zerosuperior",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior",
  "Agravesmall",
  "Aacutesmall",
  "Acircumflexsmall",
  "Atildesmall",
  "Adieresissmall",
  "Aringsmall",
  "AEsmall",
  "Ccedillasmall",
  "Egravesmall",
  "Eacutesmall",
  "Ecircumflexsmall",
  "Edieresissmall",
  "Igravesmall",
  "Iacutesmall",
  "Icircumflexsmall",
  "Idieresissmall",
  "Ethsmall",
  "Ntildesmall",
  "Ogravesmall",
  "Oacutesmall",
  "Ocircumflexsmall",
  "Otildesmall",
  "Odieresissmall",
  "OEsmall",
  "Oslashsmall",
  "Ugravesmall",
  "Uacutesmall",
  "Ucircumflexsmall",
  "Udieresissmall",
  "Yacutesmall",
  "Thornsmall",
  "Ydieresissmall"
], M4 = [
  ".notdef",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quoteright",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "quoteleft",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "exclamdown",
  "cent",
  "sterling",
  "fraction",
  "yen",
  "florin",
  "section",
  "currency",
  "quotesingle",
  "quotedblleft",
  "guillemotleft",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "endash",
  "dagger",
  "daggerdbl",
  "periodcentered",
  "paragraph",
  "bullet",
  "quotesinglbase",
  "quotedblbase",
  "quotedblright",
  "guillemotright",
  "ellipsis",
  "perthousand",
  "questiondown",
  "grave",
  "acute",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "dieresis",
  "ring",
  "cedilla",
  "hungarumlaut",
  "ogonek",
  "caron",
  "emdash",
  "AE",
  "ordfeminine",
  "Lslash",
  "Oslash",
  "OE",
  "ordmasculine",
  "ae",
  "dotlessi",
  "lslash",
  "oslash",
  "oe",
  "germandbls",
  "onesuperior",
  "logicalnot",
  "mu",
  "trademark",
  "Eth",
  "onehalf",
  "plusminus",
  "Thorn",
  "onequarter",
  "divide",
  "brokenbar",
  "degree",
  "thorn",
  "threequarters",
  "twosuperior",
  "registered",
  "minus",
  "eth",
  "multiply",
  "threesuperior",
  "copyright",
  "Aacute",
  "Acircumflex",
  "Adieresis",
  "Agrave",
  "Aring",
  "Atilde",
  "Ccedilla",
  "Eacute",
  "Ecircumflex",
  "Edieresis",
  "Egrave",
  "Iacute",
  "Icircumflex",
  "Idieresis",
  "Igrave",
  "Ntilde",
  "Oacute",
  "Ocircumflex",
  "Odieresis",
  "Ograve",
  "Otilde",
  "Scaron",
  "Uacute",
  "Ucircumflex",
  "Udieresis",
  "Ugrave",
  "Yacute",
  "Ydieresis",
  "Zcaron",
  "aacute",
  "acircumflex",
  "adieresis",
  "agrave",
  "aring",
  "atilde",
  "ccedilla",
  "eacute",
  "ecircumflex",
  "edieresis",
  "egrave",
  "iacute",
  "icircumflex",
  "idieresis",
  "igrave",
  "ntilde",
  "oacute",
  "ocircumflex",
  "odieresis",
  "ograve",
  "otilde",
  "scaron",
  "uacute",
  "ucircumflex",
  "udieresis",
  "ugrave",
  "yacute",
  "ydieresis",
  "zcaron"
], o7 = [
  ".notdef",
  "space",
  "exclamsmall",
  "Hungarumlautsmall",
  "dollaroldstyle",
  "dollarsuperior",
  "ampersandsmall",
  "Acutesmall",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "comma",
  "hyphen",
  "period",
  "fraction",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "colon",
  "semicolon",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "questionsmall",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "isuperior",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "ff",
  "fi",
  "fl",
  "ffi",
  "ffl",
  "parenleftinferior",
  "parenrightinferior",
  "Circumflexsmall",
  "hyphensuperior",
  "Gravesmall",
  "Asmall",
  "Bsmall",
  "Csmall",
  "Dsmall",
  "Esmall",
  "Fsmall",
  "Gsmall",
  "Hsmall",
  "Ismall",
  "Jsmall",
  "Ksmall",
  "Lsmall",
  "Msmall",
  "Nsmall",
  "Osmall",
  "Psmall",
  "Qsmall",
  "Rsmall",
  "Ssmall",
  "Tsmall",
  "Usmall",
  "Vsmall",
  "Wsmall",
  "Xsmall",
  "Ysmall",
  "Zsmall",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "Tildesmall",
  "exclamdownsmall",
  "centoldstyle",
  "Lslashsmall",
  "Scaronsmall",
  "Zcaronsmall",
  "Dieresissmall",
  "Brevesmall",
  "Caronsmall",
  "Dotaccentsmall",
  "Macronsmall",
  "figuredash",
  "hypheninferior",
  "Ogoneksmall",
  "Ringsmall",
  "Cedillasmall",
  "onequarter",
  "onehalf",
  "threequarters",
  "questiondownsmall",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "zerosuperior",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior",
  "Agravesmall",
  "Aacutesmall",
  "Acircumflexsmall",
  "Atildesmall",
  "Adieresissmall",
  "Aringsmall",
  "AEsmall",
  "Ccedillasmall",
  "Egravesmall",
  "Eacutesmall",
  "Ecircumflexsmall",
  "Edieresissmall",
  "Igravesmall",
  "Iacutesmall",
  "Icircumflexsmall",
  "Idieresissmall",
  "Ethsmall",
  "Ntildesmall",
  "Ogravesmall",
  "Oacutesmall",
  "Ocircumflexsmall",
  "Otildesmall",
  "Odieresissmall",
  "OEsmall",
  "Oslashsmall",
  "Ugravesmall",
  "Uacutesmall",
  "Ucircumflexsmall",
  "Udieresissmall",
  "Yacutesmall",
  "Thornsmall",
  "Ydieresissmall"
], l7 = [
  ".notdef",
  "space",
  "dollaroldstyle",
  "dollarsuperior",
  "parenleftsuperior",
  "parenrightsuperior",
  "twodotenleader",
  "onedotenleader",
  "comma",
  "hyphen",
  "period",
  "fraction",
  "zerooldstyle",
  "oneoldstyle",
  "twooldstyle",
  "threeoldstyle",
  "fouroldstyle",
  "fiveoldstyle",
  "sixoldstyle",
  "sevenoldstyle",
  "eightoldstyle",
  "nineoldstyle",
  "colon",
  "semicolon",
  "commasuperior",
  "threequartersemdash",
  "periodsuperior",
  "asuperior",
  "bsuperior",
  "centsuperior",
  "dsuperior",
  "esuperior",
  "isuperior",
  "lsuperior",
  "msuperior",
  "nsuperior",
  "osuperior",
  "rsuperior",
  "ssuperior",
  "tsuperior",
  "ff",
  "fi",
  "fl",
  "ffi",
  "ffl",
  "parenleftinferior",
  "parenrightinferior",
  "hyphensuperior",
  "colonmonetary",
  "onefitted",
  "rupiah",
  "centoldstyle",
  "figuredash",
  "hypheninferior",
  "onequarter",
  "onehalf",
  "threequarters",
  "oneeighth",
  "threeeighths",
  "fiveeighths",
  "seveneighths",
  "onethird",
  "twothirds",
  "zerosuperior",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "foursuperior",
  "fivesuperior",
  "sixsuperior",
  "sevensuperior",
  "eightsuperior",
  "ninesuperior",
  "zeroinferior",
  "oneinferior",
  "twoinferior",
  "threeinferior",
  "fourinferior",
  "fiveinferior",
  "sixinferior",
  "seveninferior",
  "eightinferior",
  "nineinferior",
  "centinferior",
  "dollarinferior",
  "periodinferior",
  "commainferior"
], U4 = new W({
  reserved: new r0(g),
  reqFeatureIndex: g,
  featureCount: g,
  featureIndexes: new M(g, "featureCount")
}), c7 = new W({
  tag: new Ge(4),
  langSys: new U(g, U4, {
    type: "parent"
  })
}), f7 = new W({
  defaultLangSys: new U(g, U4),
  count: g,
  langSysRecords: new M(c7, "count")
}), u7 = new W({
  tag: new Ge(4),
  script: new U(g, f7, {
    type: "parent"
  })
}), $4 = new M(u7, g), h7 = new W({
  version: g,
  nameID: g
}), z4 = new W({
  featureParams: new U(g, h7),
  lookupCount: g,
  lookupListIndexes: new M(g, "lookupCount")
}), d7 = new W({
  tag: new Ge(4),
  feature: new U(g, z4, {
    type: "parent"
  })
}), W4 = new M(d7, g), g7 = new W({
  markAttachmentType: se,
  flags: new Tt(se, [
    "rightToLeft",
    "ignoreBaseGlyphs",
    "ignoreLigatures",
    "ignoreMarks",
    "useMarkFilteringSet"
  ])
});
function yo(t) {
  let e = new W({
    lookupType: g,
    flags: g7,
    subTableCount: g,
    subTables: new M(new U(g, t), "subTableCount"),
    markFilteringSet: new vo(g, (r) => r.flags.flags.useMarkFilteringSet)
  });
  return new Je(new U(g, e), g);
}
let p7 = new W({
  start: g,
  end: g,
  startCoverageIndex: g
}), je = new Te(g, {
  1: {
    glyphCount: g,
    glyphs: new M(g, "glyphCount")
  },
  2: {
    rangeCount: g,
    rangeRecords: new M(p7, "rangeCount")
  }
}), v7 = new W({
  start: g,
  end: g,
  class: g
}), Xr = new Te(g, {
  1: {
    startGlyph: g,
    glyphCount: g,
    classValueArray: new M(g, "glyphCount")
  },
  2: {
    classRangeCount: g,
    classRangeRecord: new M(v7, "classRangeCount")
  }
}), Vr = new W({
  a: g,
  b: g,
  deltaFormat: g
}), is = new W({
  sequenceIndex: g,
  lookupListIndex: g
}), m7 = new W({
  glyphCount: g,
  lookupCount: g,
  input: new M(g, (t) => t.glyphCount - 1),
  lookupRecords: new M(is, "lookupCount")
}), b7 = new M(new U(g, m7), g), x7 = new W({
  glyphCount: g,
  lookupCount: g,
  classes: new M(g, (t) => t.glyphCount - 1),
  lookupRecords: new M(is, "lookupCount")
}), w7 = new M(new U(g, x7), g), H4 = new Te(g, {
  1: {
    coverage: new U(g, je),
    ruleSetCount: g,
    ruleSets: new M(new U(g, b7), "ruleSetCount")
  },
  2: {
    coverage: new U(g, je),
    classDef: new U(g, Xr),
    classSetCnt: g,
    classSet: new M(new U(g, w7), "classSetCnt")
  },
  3: {
    glyphCount: g,
    lookupCount: g,
    coverages: new M(new U(g, je), "glyphCount"),
    lookupRecords: new M(is, "lookupCount")
  }
}), y7 = new W({
  backtrackGlyphCount: g,
  backtrack: new M(g, "backtrackGlyphCount"),
  inputGlyphCount: g,
  input: new M(g, (t) => t.inputGlyphCount - 1),
  lookaheadGlyphCount: g,
  lookahead: new M(g, "lookaheadGlyphCount"),
  lookupCount: g,
  lookupRecords: new M(is, "lookupCount")
}), h5 = new M(new U(g, y7), g), q4 = new Te(g, {
  1: {
    coverage: new U(g, je),
    chainCount: g,
    chainRuleSets: new M(new U(g, h5), "chainCount")
  },
  2: {
    coverage: new U(g, je),
    backtrackClassDef: new U(g, Xr),
    inputClassDef: new U(g, Xr),
    lookaheadClassDef: new U(g, Xr),
    chainCount: g,
    chainClassSet: new M(new U(g, h5), "chainCount")
  },
  3: {
    backtrackGlyphCount: g,
    backtrackCoverage: new M(new U(g, je), "backtrackGlyphCount"),
    inputGlyphCount: g,
    inputCoverage: new M(new U(g, je), "inputGlyphCount"),
    lookaheadGlyphCount: g,
    lookaheadCoverage: new M(new U(g, je), "lookaheadGlyphCount"),
    lookupCount: g,
    lookupRecords: new M(is, "lookupCount")
  }
}), Aa = new qi(16, "BE", 14), _7 = new W({
  startCoord: Aa,
  peakCoord: Aa,
  endCoord: Aa
}), A7 = new W({
  axisCount: g,
  regionCount: g,
  variationRegions: new M(new M(_7, "axisCount"), "regionCount")
}), E7 = new W({
  shortDeltas: new M(te, (t) => t.parent.shortDeltaCount),
  regionDeltas: new M(m0, (t) => t.parent.regionIndexCount - t.parent.shortDeltaCount),
  deltas: (t) => t.shortDeltas.concat(t.regionDeltas)
}), C7 = new W({
  itemCount: g,
  shortDeltaCount: g,
  regionIndexCount: g,
  regionIndexes: new M(g, "regionIndexCount"),
  deltaSets: new M(E7, "itemCount")
}), Ko = new W({
  format: g,
  variationRegionList: new U($, A7),
  variationDataCount: g,
  itemVariationData: new M(new U($, C7), "variationDataCount")
}), S7 = new Te(g, {
  1: {
    axisIndex: g,
    axisIndex: g,
    filterRangeMinValue: Aa,
    filterRangeMaxValue: Aa
  }
}), T7 = new W({
  conditionCount: g,
  conditionTable: new M(new U($, S7), "conditionCount")
}), k7 = new W({
  featureIndex: g,
  alternateFeatureTable: new U($, z4, {
    type: "parent"
  })
}), F7 = new W({
  version: f0,
  substitutionCount: g,
  substitutions: new M(k7, "substitutionCount")
}), O7 = new W({
  conditionSet: new U($, T7, {
    type: "parent"
  }),
  featureTableSubstitution: new U($, F7, {
    type: "parent"
  })
}), V4 = new W({
  majorVersion: g,
  minorVersion: g,
  featureVariationRecordCount: $,
  featureVariationRecords: new M(O7, "featureVariationRecordCount")
});
class Y4 {
  decode(e, r, i) {
    return this.predefinedOps[i[0]] ? this.predefinedOps[i[0]] : this.type.decode(e, r, i);
  }
  size(e, r) {
    return this.type.size(e, r);
  }
  encode(e, r, i) {
    let n = this.predefinedOps.indexOf(r);
    return n !== -1 ? n : this.type.encode(e, r, i);
  }
  constructor(e, r) {
    this.predefinedOps = e, this.type = r;
  }
}
class D7 extends Ze {
  decode(e) {
    return se.decode(e) & 127;
  }
  constructor() {
    super("UInt8");
  }
}
let G4 = new W({
  first: g,
  nLeft: se
}), B7 = new W({
  first: g,
  nLeft: g
}), I7 = new Te(new D7(), {
  0: {
    nCodes: se,
    codes: new M(se, "nCodes")
  },
  1: {
    nRanges: se,
    ranges: new M(G4, "nRanges")
  }
}), R7 = new Y4([
  N4,
  s7
], new yt(I7, {
  lazy: !0
}));
class d5 extends M {
  decode(e, r) {
    let i = tr(this.length, e, r), n = 0, a = [];
    for (; n < i; ) {
      let s = this.type.decode(e, r);
      s.offset = n, n += s.nLeft + 1, a.push(s);
    }
    return a;
  }
}
let P7 = new Te(se, {
  0: {
    glyphs: new M(g, (t) => t.parent.CharStrings.length - 1)
  },
  1: {
    ranges: new d5(G4, (t) => t.parent.CharStrings.length - 1)
  },
  2: {
    ranges: new d5(B7, (t) => t.parent.CharStrings.length - 1)
  }
}), L7 = new Y4([
  M4,
  o7,
  l7
], new yt(P7, {
  lazy: !0
})), N7 = new W({
  first: g,
  fd: se
}), M7 = new W({
  first: $,
  fd: g
}), Z4 = new Te(se, {
  0: {
    fds: new M(se, (t) => t.parent.CharStrings.length)
  },
  3: {
    nRanges: g,
    ranges: new M(N7, "nRanges"),
    sentinel: g
  },
  4: {
    nRanges: $,
    ranges: new M(M7, "nRanges"),
    sentinel: $
  }
}), cc = new yt(K1);
class j4 {
  decode(e, r, i) {
    return r.length = i[0], cc.decode(e, r, [
      i[1]
    ]);
  }
  size(e, r) {
    return [
      K1.size(e, r, !1),
      cc.size(e, r)[0]
    ];
  }
  encode(e, r, i) {
    return [
      K1.size(r, i, !1),
      cc.encode(e, r, i)[0]
    ];
  }
}
let X4 = new Xo([
  // key       name                   type(s)                                 default
  [
    18,
    "Private",
    new j4(),
    null
  ],
  [
    [
      12,
      38
    ],
    "FontName",
    "sid",
    null
  ],
  [
    [
      12,
      7
    ],
    "FontMatrix",
    "array",
    [
      1e-3,
      0,
      0,
      1e-3,
      0,
      0
    ]
  ],
  [
    [
      12,
      5
    ],
    "PaintType",
    "number",
    0
  ]
]), U7 = new Xo([
  // key       name                   type(s)                                 default
  [
    [
      12,
      30
    ],
    "ROS",
    [
      "sid",
      "sid",
      "number"
    ],
    null
  ],
  [
    0,
    "version",
    "sid",
    null
  ],
  [
    1,
    "Notice",
    "sid",
    null
  ],
  [
    [
      12,
      0
    ],
    "Copyright",
    "sid",
    null
  ],
  [
    2,
    "FullName",
    "sid",
    null
  ],
  [
    3,
    "FamilyName",
    "sid",
    null
  ],
  [
    4,
    "Weight",
    "sid",
    null
  ],
  [
    [
      12,
      1
    ],
    "isFixedPitch",
    "boolean",
    !1
  ],
  [
    [
      12,
      2
    ],
    "ItalicAngle",
    "number",
    0
  ],
  [
    [
      12,
      3
    ],
    "UnderlinePosition",
    "number",
    -100
  ],
  [
    [
      12,
      4
    ],
    "UnderlineThickness",
    "number",
    50
  ],
  [
    [
      12,
      5
    ],
    "PaintType",
    "number",
    0
  ],
  [
    [
      12,
      6
    ],
    "CharstringType",
    "number",
    2
  ],
  [
    [
      12,
      7
    ],
    "FontMatrix",
    "array",
    [
      1e-3,
      0,
      0,
      1e-3,
      0,
      0
    ]
  ],
  [
    13,
    "UniqueID",
    "number",
    null
  ],
  [
    5,
    "FontBBox",
    "array",
    [
      0,
      0,
      0,
      0
    ]
  ],
  [
    [
      12,
      8
    ],
    "StrokeWidth",
    "number",
    0
  ],
  [
    14,
    "XUID",
    "array",
    null
  ],
  [
    15,
    "charset",
    L7,
    M4
  ],
  [
    16,
    "Encoding",
    R7,
    N4
  ],
  [
    17,
    "CharStrings",
    new yt(new Gt()),
    null
  ],
  [
    18,
    "Private",
    new j4(),
    null
  ],
  [
    [
      12,
      20
    ],
    "SyntheticBase",
    "number",
    null
  ],
  [
    [
      12,
      21
    ],
    "PostScript",
    "sid",
    null
  ],
  [
    [
      12,
      22
    ],
    "BaseFontName",
    "sid",
    null
  ],
  [
    [
      12,
      23
    ],
    "BaseFontBlend",
    "delta",
    null
  ],
  // CID font specific
  [
    [
      12,
      31
    ],
    "CIDFontVersion",
    "number",
    0
  ],
  [
    [
      12,
      32
    ],
    "CIDFontRevision",
    "number",
    0
  ],
  [
    [
      12,
      33
    ],
    "CIDFontType",
    "number",
    0
  ],
  [
    [
      12,
      34
    ],
    "CIDCount",
    "number",
    8720
  ],
  [
    [
      12,
      35
    ],
    "UIDBase",
    "number",
    null
  ],
  [
    [
      12,
      37
    ],
    "FDSelect",
    new yt(Z4),
    null
  ],
  [
    [
      12,
      36
    ],
    "FDArray",
    new yt(new Gt(X4)),
    null
  ],
  [
    [
      12,
      38
    ],
    "FontName",
    "sid",
    null
  ]
]), $7 = new W({
  length: g,
  itemVariationStore: Ko
}), z7 = new Xo([
  [
    [
      12,
      7
    ],
    "FontMatrix",
    "array",
    [
      1e-3,
      0,
      0,
      1e-3,
      0,
      0
    ]
  ],
  [
    17,
    "CharStrings",
    new yt(new Gt()),
    null
  ],
  [
    [
      12,
      37
    ],
    "FDSelect",
    new yt(Z4),
    null
  ],
  [
    [
      12,
      36
    ],
    "FDArray",
    new yt(new Gt(X4)),
    null
  ],
  [
    24,
    "vstore",
    new yt($7),
    null
  ],
  [
    25,
    "maxstack",
    "number",
    193
  ]
]), W7 = new Te(E8, {
  1: {
    hdrSize: se,
    offSize: se,
    nameIndex: new Gt(new Ge("length")),
    topDictIndex: new Gt(U7),
    stringIndex: new Gt(new Ge("length")),
    globalSubrIndex: new Gt()
  },
  2: {
    hdrSize: se,
    length: g,
    topDict: z7,
    globalSubrIndex: new Gt()
  }
});
var K4 = W7;
class Hf {
  static decode(e) {
    return new Hf(e);
  }
  decode() {
    this.stream.pos;
    let e = K4.decode(this.stream);
    for (let r in e) {
      let i = e[r];
      this[r] = i;
    }
    if (this.version < 2) {
      if (this.topDictIndex.length !== 1) throw new Error("Only a single font is allowed in CFF");
      this.topDict = this.topDictIndex[0];
    }
    return this.isCIDFont = this.topDict.ROS != null, this;
  }
  string(e) {
    return this.version >= 2 ? null : e < Js.length ? Js[e] : this.stringIndex[e - Js.length];
  }
  get postscriptName() {
    return this.version < 2 ? this.nameIndex[0] : null;
  }
  get fullName() {
    return this.string(this.topDict.FullName);
  }
  get familyName() {
    return this.string(this.topDict.FamilyName);
  }
  getCharString(e) {
    return this.stream.pos = this.topDict.CharStrings[e].offset, this.stream.readBuffer(this.topDict.CharStrings[e].length);
  }
  getGlyphName(e) {
    if (this.version >= 2 || this.isCIDFont) return null;
    let { charset: r } = this.topDict;
    if (Array.isArray(r)) return r[e];
    if (e === 0) return ".notdef";
    switch (e -= 1, r.version) {
      case 0:
        return this.string(r.glyphs[e]);
      case 1:
      case 2:
        for (let i = 0; i < r.ranges.length; i++) {
          let n = r.ranges[i];
          if (n.offset <= e && e <= n.offset + n.nLeft) return this.string(n.first + (e - n.offset));
        }
        break;
    }
    return null;
  }
  fdForGlyph(e) {
    if (!this.topDict.FDSelect) return null;
    switch (this.topDict.FDSelect.version) {
      case 0:
        return this.topDict.FDSelect.fds[e];
      case 3:
      case 4:
        let { ranges: r } = this.topDict.FDSelect, i = 0, n = r.length - 1;
        for (; i <= n; ) {
          let a = i + n >> 1;
          if (e < r[a].first) n = a - 1;
          else if (a < n && e >= r[a + 1].first) i = a + 1;
          else return r[a].fd;
        }
      default:
        throw new Error(`Unknown FDSelect version: ${this.topDict.FDSelect.version}`);
    }
  }
  privateDictForGlyph(e) {
    if (this.topDict.FDSelect) {
      let r = this.fdForGlyph(e);
      return this.topDict.FDArray[r] ? this.topDict.FDArray[r].Private : null;
    }
    return this.version < 2 ? this.topDict.Private : this.topDict.FDArray[0].Private;
  }
  constructor(e) {
    this.stream = e, this.decode();
  }
}
var J4 = Hf;
let H7 = new W({
  glyphIndex: g,
  vertOriginY: te
});
var q7 = new W({
  majorVersion: g,
  minorVersion: g,
  defaultVertOriginY: te,
  numVertOriginYMetrics: g,
  metrics: new M(H7, "numVertOriginYMetrics")
});
let bn = new W({
  height: se,
  width: se,
  horiBearingX: m0,
  horiBearingY: m0,
  horiAdvance: se,
  vertBearingX: m0,
  vertBearingY: m0,
  vertAdvance: se
}), Bs = new W({
  height: se,
  width: se,
  bearingX: m0,
  bearingY: m0,
  advance: se
}), g5 = new W({
  glyph: g,
  xOffset: m0,
  yOffset: m0
});
class p5 {
}
class fc {
}
new Te("version", {
  1: {
    metrics: Bs,
    data: p5
  },
  2: {
    metrics: Bs,
    data: fc
  },
  // format 3 is deprecated
  // format 4 is not supported by Microsoft
  5: {
    data: fc
  },
  6: {
    metrics: bn,
    data: p5
  },
  7: {
    metrics: bn,
    data: fc
  },
  8: {
    metrics: Bs,
    pad: new r0(se),
    numComponents: g,
    components: new M(g5, "numComponents")
  },
  9: {
    metrics: bn,
    pad: new r0(se),
    numComponents: g,
    components: new M(g5, "numComponents")
  },
  17: {
    metrics: Bs,
    dataLen: $,
    data: new F0("dataLen")
  },
  18: {
    metrics: bn,
    dataLen: $,
    data: new F0("dataLen")
  },
  19: {
    dataLen: $,
    data: new F0("dataLen")
  }
});
let v5 = new W({
  ascender: m0,
  descender: m0,
  widthMax: se,
  caretSlopeNumerator: m0,
  caretSlopeDenominator: m0,
  caretOffset: m0,
  minOriginSB: m0,
  minAdvanceSB: m0,
  maxBeforeBL: m0,
  minAfterBL: m0,
  pad: new r0(m0, 2)
}), V7 = new W({
  glyphCode: g,
  offset: g
}), Y7 = new Te(g, {
  header: {
    imageFormat: g,
    imageDataOffset: $
  },
  1: {
    offsetArray: new M($, (t) => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)
  },
  2: {
    imageSize: $,
    bigMetrics: bn
  },
  3: {
    offsetArray: new M(g, (t) => t.parent.lastGlyphIndex - t.parent.firstGlyphIndex + 1)
  },
  4: {
    numGlyphs: $,
    glyphArray: new M(V7, (t) => t.numGlyphs + 1)
  },
  5: {
    imageSize: $,
    bigMetrics: bn,
    numGlyphs: $,
    glyphCodeArray: new M(g, "numGlyphs")
  }
}), G7 = new W({
  firstGlyphIndex: g,
  lastGlyphIndex: g,
  subtable: new U($, Y7)
}), Z7 = new W({
  indexSubTableArray: new U($, new M(G7, 1), {
    type: "parent"
  }),
  indexTablesSize: $,
  numberOfIndexSubTables: $,
  colorRef: $,
  hori: v5,
  vert: v5,
  startGlyphIndex: g,
  endGlyphIndex: g,
  ppemX: se,
  ppemY: se,
  bitDepth: se,
  flags: new Tt(se, [
    "horizontal",
    "vertical"
  ])
});
var j7 = new W({
  version: $,
  numSizes: $,
  sizes: new M(Z7, "numSizes")
});
let X7 = new W({
  ppem: g,
  resolution: g,
  imageOffsets: new M(new U($, "void"), (t) => t.parent.parent.maxp.numGlyphs + 1)
});
var K7 = new W({
  version: g,
  flags: new Tt(g, [
    "renderOutlines"
  ]),
  numImgTables: $,
  imageTables: new M(new U($, X7), "numImgTables")
});
let J7 = new W({
  gid: g,
  paletteIndex: g
  // Index value to use in the appropriate palette. This value must
}), Q7 = new W({
  gid: g,
  // and is not rendered for color.
  firstLayerIndex: g,
  // There will be numLayers consecutive entries for this base glyph.
  numLayers: g
});
var ex = new W({
  version: g,
  numBaseGlyphRecords: g,
  baseGlyphRecord: new U($, new M(Q7, "numBaseGlyphRecords")),
  layerRecords: new U($, new M(J7, "numLayerRecords"), {
    lazy: !0
  }),
  numLayerRecords: g
});
let tx = new W({
  blue: se,
  green: se,
  red: se,
  alpha: se
});
var rx = new Te(g, {
  header: {
    numPaletteEntries: g,
    numPalettes: g,
    numColorRecords: g,
    colorRecords: new U($, new M(tx, "numColorRecords")),
    colorRecordIndices: new M(g, "numPalettes")
  },
  0: {},
  1: {
    offsetPaletteTypeArray: new U($, new M($, "numPalettes")),
    offsetPaletteLabelArray: new U($, new M(g, "numPalettes")),
    offsetPaletteEntryLabelArray: new U($, new M(g, "numPaletteEntries"))
  }
});
let Pa = new Te(g, {
  1: {
    coordinate: te
    // X or Y value, in design units
  },
  2: {
    coordinate: te,
    referenceGlyph: g,
    baseCoordPoint: g
    // Index of contour point on the referenceGlyph
  },
  3: {
    coordinate: te,
    deviceTable: new U(g, Vr)
    // Device table for X or Y value
  }
}), ix = new W({
  defaultIndex: g,
  baseCoordCount: g,
  baseCoords: new M(new U(g, Pa), "baseCoordCount")
}), nx = new W({
  tag: new Ge(4),
  minCoord: new U(g, Pa, {
    type: "parent"
  }),
  maxCoord: new U(g, Pa, {
    type: "parent"
  })
  // May be NULL
}), Q4 = new W({
  minCoord: new U(g, Pa),
  maxCoord: new U(g, Pa),
  featMinMaxCount: g,
  featMinMaxRecords: new M(nx, "featMinMaxCount")
  // In alphabetical order
}), ax = new W({
  tag: new Ge(4),
  minMax: new U(g, Q4, {
    type: "parent"
  })
}), sx = new W({
  baseValues: new U(g, ix),
  defaultMinMax: new U(g, Q4),
  baseLangSysCount: g,
  baseLangSysRecords: new M(ax, "baseLangSysCount")
  // in alphabetical order by BaseLangSysTag
}), ox = new W({
  tag: new Ge(4),
  script: new U(g, sx, {
    type: "parent"
  })
}), lx = new M(ox, g), cx = new M(new Ge(4), g), m5 = new W({
  baseTagList: new U(g, cx),
  baseScriptList: new U(g, lx)
});
var fx = new Te($, {
  header: {
    horizAxis: new U(g, m5),
    vertAxis: new U(g, m5)
    // May be NULL
  },
  65536: {},
  65537: {
    itemVariationStore: new U($, Ko)
  }
});
let ux = new M(g, g), hx = new W({
  coverage: new U(g, je),
  glyphCount: g,
  attachPoints: new M(new U(g, ux), "glyphCount")
}), dx = new Te(g, {
  1: {
    coordinate: te
  },
  2: {
    caretValuePoint: g
  },
  3: {
    coordinate: te,
    deviceTable: new U(g, Vr)
  }
}), gx = new M(new U(g, dx), g), px = new W({
  coverage: new U(g, je),
  ligGlyphCount: g,
  ligGlyphs: new M(new U(g, gx), "ligGlyphCount")
}), b5 = new W({
  markSetTableFormat: g,
  markSetCount: g,
  coverage: new M(new U($, je), "markSetCount")
});
var vx = new Te($, {
  header: {
    glyphClassDef: new U(g, Xr),
    attachList: new U(g, hx),
    ligCaretList: new U(g, px),
    markAttachClassDef: new U(g, Xr)
  },
  65536: {},
  65538: {
    markGlyphSetsDef: new U(g, b5)
  },
  65539: {
    markGlyphSetsDef: new U(g, b5),
    itemVariationStore: new U($, Ko)
  }
});
let ln = new Tt(g, [
  "xPlacement",
  "yPlacement",
  "xAdvance",
  "yAdvance",
  "xPlaDevice",
  "yPlaDevice",
  "xAdvDevice",
  "yAdvDevice"
]), mx = {
  xPlacement: te,
  yPlacement: te,
  xAdvance: te,
  yAdvance: te,
  xPlaDevice: new U(g, Vr, {
    type: "global",
    relativeTo: (t) => t.rel
  }),
  yPlaDevice: new U(g, Vr, {
    type: "global",
    relativeTo: (t) => t.rel
  }),
  xAdvDevice: new U(g, Vr, {
    type: "global",
    relativeTo: (t) => t.rel
  }),
  yAdvDevice: new U(g, Vr, {
    type: "global",
    relativeTo: (t) => t.rel
  })
};
class Dn {
  buildStruct(e) {
    let r = e;
    for (; !r[this.key] && r.parent; ) r = r.parent;
    if (!r[this.key]) return;
    let i = {};
    i.rel = () => r._startOffset;
    let n = r[this.key];
    for (let a in n) n[a] && (i[a] = mx[a]);
    return new W(i);
  }
  size(e, r) {
    return this.buildStruct(r).size(e, r);
  }
  decode(e, r) {
    let i = this.buildStruct(r).decode(e, r);
    return delete i.rel, i;
  }
  constructor(e = "valueFormat") {
    this.key = e;
  }
}
let bx = new W({
  secondGlyph: g,
  value1: new Dn("valueFormat1"),
  value2: new Dn("valueFormat2")
}), xx = new M(bx, g), wx = new W({
  value1: new Dn("valueFormat1"),
  value2: new Dn("valueFormat2")
}), La = new Te(g, {
  1: {
    xCoordinate: te,
    yCoordinate: te
  },
  2: {
    xCoordinate: te,
    yCoordinate: te,
    anchorPoint: g
  },
  3: {
    xCoordinate: te,
    yCoordinate: te,
    xDeviceTable: new U(g, Vr),
    yDeviceTable: new U(g, Vr)
  }
}), yx = new W({
  entryAnchor: new U(g, La, {
    type: "parent"
  }),
  exitAnchor: new U(g, La, {
    type: "parent"
  })
}), _x = new W({
  class: g,
  markAnchor: new U(g, La, {
    type: "parent"
  })
}), uc = new M(_x, g), Ax = new M(new U(g, La), (t) => t.parent.classCount), x5 = new M(Ax, g), Ex = new M(new U(g, La), (t) => t.parent.parent.classCount), Cx = new M(Ex, g), Sx = new M(new U(g, Cx), g), Na = new Te("lookupType", {
  1: new Te(g, {
    1: {
      coverage: new U(g, je),
      valueFormat: ln,
      value: new Dn()
    },
    2: {
      coverage: new U(g, je),
      valueFormat: ln,
      valueCount: g,
      values: new Je(new Dn(), "valueCount")
    }
  }),
  2: new Te(g, {
    1: {
      coverage: new U(g, je),
      valueFormat1: ln,
      valueFormat2: ln,
      pairSetCount: g,
      pairSets: new Je(new U(g, xx), "pairSetCount")
    },
    2: {
      coverage: new U(g, je),
      valueFormat1: ln,
      valueFormat2: ln,
      classDef1: new U(g, Xr),
      classDef2: new U(g, Xr),
      class1Count: g,
      class2Count: g,
      classRecords: new Je(new Je(wx, "class2Count"), "class1Count")
    }
  }),
  3: {
    format: g,
    coverage: new U(g, je),
    entryExitCount: g,
    entryExitRecords: new M(yx, "entryExitCount")
  },
  4: {
    format: g,
    markCoverage: new U(g, je),
    baseCoverage: new U(g, je),
    classCount: g,
    markArray: new U(g, uc),
    baseArray: new U(g, x5)
  },
  5: {
    format: g,
    markCoverage: new U(g, je),
    ligatureCoverage: new U(g, je),
    classCount: g,
    markArray: new U(g, uc),
    ligatureArray: new U(g, Sx)
  },
  6: {
    format: g,
    mark1Coverage: new U(g, je),
    mark2Coverage: new U(g, je),
    classCount: g,
    mark1Array: new U(g, uc),
    mark2Array: new U(g, x5)
  },
  7: H4,
  8: q4,
  9: {
    posFormat: g,
    lookupType: g,
    extension: new U($, null)
  }
});
Na.versions[9].extension.type = Na;
var Tx = new Te($, {
  header: {
    scriptList: new U(g, $4),
    featureList: new U(g, W4),
    lookupList: new U(g, new yo(Na))
  },
  65536: {},
  65537: {
    featureVariations: new U($, V4)
  }
});
let eg = new M(g, g), kx = eg, Fx = new W({
  glyph: g,
  compCount: g,
  components: new M(g, (t) => t.compCount - 1)
}), Ox = new M(new U(g, Fx), g), J1 = new Te("lookupType", {
  1: new Te(g, {
    1: {
      coverage: new U(g, je),
      deltaGlyphID: te
    },
    2: {
      coverage: new U(g, je),
      glyphCount: g,
      substitute: new Je(g, "glyphCount")
    }
  }),
  2: {
    substFormat: g,
    coverage: new U(g, je),
    count: g,
    sequences: new Je(new U(g, eg), "count")
  },
  3: {
    substFormat: g,
    coverage: new U(g, je),
    count: g,
    alternateSet: new Je(new U(g, kx), "count")
  },
  4: {
    substFormat: g,
    coverage: new U(g, je),
    count: g,
    ligatureSets: new Je(new U(g, Ox), "count")
  },
  5: H4,
  6: q4,
  7: {
    substFormat: g,
    lookupType: g,
    extension: new U($, null)
  },
  8: {
    substFormat: g,
    coverage: new U(g, je),
    backtrackCoverage: new M(new U(g, je), "backtrackGlyphCount"),
    lookaheadGlyphCount: g,
    lookaheadCoverage: new M(new U(g, je), "lookaheadGlyphCount"),
    glyphCount: g,
    substitutes: new M(g, "glyphCount")
  }
});
J1.versions[7].extension.type = J1;
var Dx = new Te($, {
  header: {
    scriptList: new U(g, $4),
    featureList: new U(g, W4),
    lookupList: new U(g, new yo(J1))
  },
  65536: {},
  65537: {
    featureVariations: new U($, V4)
  }
});
let Fr = new M(g, g), Bx = new W({
  shrinkageEnableGSUB: new U(g, Fr),
  shrinkageDisableGSUB: new U(g, Fr),
  shrinkageEnableGPOS: new U(g, Fr),
  shrinkageDisableGPOS: new U(g, Fr),
  shrinkageJstfMax: new U(g, new yo(Na)),
  extensionEnableGSUB: new U(g, Fr),
  extensionDisableGSUB: new U(g, Fr),
  extensionEnableGPOS: new U(g, Fr),
  extensionDisableGPOS: new U(g, Fr),
  extensionJstfMax: new U(g, new yo(Na))
}), tg = new M(new U(g, Bx), g), Ix = new W({
  tag: new Ge(4),
  jstfLangSys: new U(g, tg)
}), Rx = new W({
  extenderGlyphs: new U(g, new M(g, g)),
  defaultLangSys: new U(g, tg),
  langSysCount: g,
  langSysRecords: new M(Ix, "langSysCount")
}), Px = new W({
  tag: new Ge(4),
  script: new U(g, Rx, {
    type: "parent"
  })
});
var Lx = new W({
  version: $,
  scriptCount: g,
  scriptList: new M(Px, "scriptCount")
});
class Nx {
  decode(e, r) {
    switch (this.size(0, r)) {
      case 1:
        return e.readUInt8();
      case 2:
        return e.readUInt16BE();
      case 3:
        return e.readUInt24BE();
      case 4:
        return e.readUInt32BE();
    }
  }
  size(e, r) {
    return tr(this._size, null, r);
  }
  constructor(e) {
    this._size = e;
  }
}
let Mx = new W({
  entry: new Nx((t) => ((t.parent.entryFormat & 48) >> 4) + 1),
  outerIndex: (t) => t.entry >> (t.parent.entryFormat & 15) + 1,
  innerIndex: (t) => t.entry & (1 << (t.parent.entryFormat & 15) + 1) - 1
}), hc = new W({
  entryFormat: g,
  mapCount: g,
  mapData: new M(Mx, "mapCount")
});
var Ux = new W({
  majorVersion: g,
  minorVersion: g,
  itemVariationStore: new U($, Ko),
  advanceWidthMapping: new U($, hc),
  LSBMapping: new U($, hc),
  RSBMapping: new U($, hc)
});
let $x = new W({
  format: $,
  length: $,
  offset: $
}), zx = new W({
  reserved: new r0(g, 2),
  cbSignature: $,
  signature: new F0("cbSignature")
});
var Wx = new W({
  ulVersion: $,
  usNumSigs: g,
  usFlag: g,
  signatures: new M($x, "usNumSigs"),
  signatureBlocks: new M(zx, "usNumSigs")
});
let Hx = new W({
  rangeMaxPPEM: g,
  rangeGaspBehavior: new Tt(g, [
    "grayscale",
    "gridfit",
    "symmetricSmoothing",
    "symmetricGridfit"
    // only in version 1, for ClearType
  ])
});
var qx = new W({
  version: g,
  numRanges: g,
  gaspRanges: new M(Hx, "numRanges")
  // Sorted by ppem
});
let Vx = new W({
  pixelSize: se,
  maximumWidth: se,
  widths: new M(se, (t) => t.parent.parent.maxp.numGlyphs)
});
var Yx = new W({
  version: g,
  numRecords: te,
  sizeDeviceRecord: vi,
  records: new M(Vx, "numRecords")
});
let Gx = new W({
  left: g,
  right: g,
  value: te
}), w5 = new W({
  firstGlyph: g,
  nGlyphs: g,
  offsets: new M(g, "nGlyphs"),
  max: (t) => t.offsets.length && Math.max.apply(Math, t.offsets)
}), Zx = new W({
  off: (t) => t._startOffset - t.parent.parent._startOffset,
  len: (t) => ((t.parent.leftTable.max - t.off) / t.parent.rowWidth + 1) * (t.parent.rowWidth / 2),
  values: new Je(te, "len")
}), y5 = new Te("format", {
  0: {
    nPairs: g,
    searchRange: g,
    entrySelector: g,
    rangeShift: g,
    pairs: new M(Gx, "nPairs")
  },
  2: {
    rowWidth: g,
    leftTable: new U(g, w5, {
      type: "parent"
    }),
    rightTable: new U(g, w5, {
      type: "parent"
    }),
    array: new U(g, Zx, {
      type: "parent"
    })
  },
  3: {
    glyphCount: g,
    kernValueCount: se,
    leftClassCount: se,
    rightClassCount: se,
    flags: se,
    kernValue: new M(te, "kernValueCount"),
    leftClass: new M(se, "glyphCount"),
    rightClass: new M(se, "glyphCount"),
    kernIndex: new M(se, (t) => t.leftClassCount * t.rightClassCount)
  }
}), _5 = new Te("version", {
  0: {
    subVersion: g,
    length: g,
    format: se,
    coverage: new Tt(se, [
      "horizontal",
      "minimum",
      "crossStream",
      "override"
      // If set to 1 the value in this table replaces the accumulated value
    ]),
    subtable: y5,
    padding: new r0(se, (t) => t.length - t._currentOffset)
  },
  1: {
    length: $,
    coverage: new Tt(se, [
      null,
      null,
      null,
      null,
      null,
      "variation",
      "crossStream",
      "vertical"
      // Set if table has vertical kerning values
    ]),
    format: se,
    tupleIndex: g,
    subtable: y5,
    padding: new r0(se, (t) => t.length - t._currentOffset)
  }
});
var jx = new Te(g, {
  0: {
    nTables: g,
    tables: new M(_5, "nTables")
  },
  1: {
    reserved: new r0(g),
    nTables: $,
    tables: new M(_5, "nTables")
  }
}), Xx = new W({
  version: g,
  numGlyphs: g,
  yPels: new M(se, "numGlyphs")
}), Kx = new W({
  version: g,
  fontNumber: $,
  pitch: g,
  xHeight: g,
  style: g,
  typeFamily: g,
  capHeight: g,
  symbolSet: g,
  typeface: new Ge(16),
  characterComplement: new Ge(8),
  fileName: new Ge(6),
  strokeWeight: new Ge(1),
  widthType: new Ge(1),
  serifStyle: se,
  reserved: new r0(se)
});
let Jx = new W({
  bCharSet: se,
  xRatio: se,
  yStartRatio: se,
  yEndRatio: se
  // Ending y-Ratio value
}), Qx = new W({
  yPelHeight: g,
  yMax: te,
  yMin: te
  // Minimum value (in pels) for this yPelHeight
}), e9 = new W({
  recs: g,
  startsz: se,
  endsz: se,
  entries: new M(Qx, "recs")
  // The VDMX records
});
var t9 = new W({
  version: g,
  numRecs: g,
  numRatios: g,
  ratioRanges: new M(Jx, "numRatios"),
  offsets: new M(g, "numRatios"),
  groups: new M(e9, "numRecs")
  // The actual VDMX groupings
}), r9 = new W({
  version: g,
  ascent: te,
  descent: te,
  lineGap: te,
  advanceHeightMax: te,
  minTopSideBearing: te,
  minBottomSideBearing: te,
  yMaxExtent: te,
  caretSlopeRise: te,
  caretSlopeRun: te,
  caretOffset: te,
  reserved: new r0(te, 4),
  metricDataFormat: te,
  numberOfMetrics: g
  // Number of advance heights in the Vertical Metrics table
});
let i9 = new W({
  advance: g,
  bearing: te
  // The top sidebearing of the glyph
});
var n9 = new W({
  metrics: new Je(i9, (t) => t.parent.vhea.numberOfMetrics),
  bearings: new Je(te, (t) => t.parent.maxp.numGlyphs - t.parent.vhea.numberOfMetrics)
});
let A5 = new qi(16, "BE", 14), a9 = new W({
  fromCoord: A5,
  toCoord: A5
}), s9 = new W({
  pairCount: g,
  correspondence: new M(a9, "pairCount")
});
var o9 = new W({
  version: f0,
  axisCount: $,
  segment: new M(s9, "axisCount")
});
class l9 {
  getItem(e) {
    if (this._items[e] == null) {
      let r = this.stream.pos;
      this.stream.pos = this.base + this.type.size(null, this.parent) * e, this._items[e] = this.type.decode(this.stream, this.parent), this.stream.pos = r;
    }
    return this._items[e];
  }
  inspect() {
    return `[UnboundedArray ${this.type.constructor.name}]`;
  }
  constructor(e, r, i) {
    this.type = e, this.stream = r, this.parent = i, this.base = this.stream.pos, this._items = [];
  }
}
class Jt extends M {
  decode(e, r) {
    return new l9(this.type, e, r);
  }
  constructor(e) {
    super(e, 0);
  }
}
let ei = function(t = g) {
  class e {
    decode(o, c) {
      return c = c.parent.parent, this.type.decode(o, c);
    }
    size(o, c) {
      return c = c.parent.parent, this.type.size(o, c);
    }
    encode(o, c, l) {
      return l = l.parent.parent, this.type.encode(o, c, l);
    }
    constructor(o) {
      this.type = o;
    }
  }
  t = new e(t);
  let r = new W({
    unitSize: g,
    nUnits: g,
    searchRange: g,
    entrySelector: g,
    rangeShift: g
  }), i = new W({
    lastGlyph: g,
    firstGlyph: g,
    value: t
  }), n = new W({
    lastGlyph: g,
    firstGlyph: g,
    values: new U(g, new M(t, (s) => s.lastGlyph - s.firstGlyph + 1), {
      type: "parent"
    })
  }), a = new W({
    glyph: g,
    value: t
  });
  return new Te(g, {
    0: {
      values: new Jt(t)
      // length == number of glyphs maybe?
    },
    2: {
      binarySearchHeader: r,
      segments: new M(i, (s) => s.binarySearchHeader.nUnits)
    },
    4: {
      binarySearchHeader: r,
      segments: new M(n, (s) => s.binarySearchHeader.nUnits)
    },
    6: {
      binarySearchHeader: r,
      segments: new M(a, (s) => s.binarySearchHeader.nUnits)
    },
    8: {
      firstGlyph: g,
      count: g,
      values: new M(t, "count")
    }
  });
};
function Is(t = {}, e = g) {
  let r = Object.assign({
    newState: g,
    flags: g
  }, t), i = new W(r), n = new Jt(new M(g, (s) => s.nClasses));
  return new W({
    nClasses: $,
    classTable: new U($, new ei(e)),
    stateArray: new U($, n),
    entryTable: new U($, new Jt(i))
  });
}
function c9(t = {}, e = g) {
  let r = new W({
    version() {
      return 8;
    },
    firstGlyph: g,
    values: new M(se, g)
  }), i = Object.assign({
    newStateOffset: g,
    // convert offset to stateArray index
    newState: (o) => (o.newStateOffset - (o.parent.stateArray.base - o.parent._startOffset)) / o.parent.nClasses,
    flags: g
  }, t), n = new W(i), a = new Jt(new M(se, (o) => o.nClasses));
  return new W({
    nClasses: g,
    classTable: new U(g, r),
    stateArray: new U(g, a),
    entryTable: new U(g, new Jt(n))
  });
}
let f9 = new Te("format", {
  0: {
    deltas: new M(te, 32)
  },
  1: {
    deltas: new M(te, 32),
    mappingData: new ei(g)
  },
  2: {
    standardGlyph: g,
    controlPoints: new M(g, 32)
  },
  3: {
    standardGlyph: g,
    controlPoints: new M(g, 32),
    mappingData: new ei(g)
  }
});
var u9 = new W({
  version: f0,
  format: g,
  defaultBaseline: g,
  subtable: f9
});
let h9 = new W({
  setting: g,
  nameIndex: te,
  name: (t) => t.parent.parent.parent.name.records.fontFeatures[t.nameIndex]
}), d9 = new W({
  feature: g,
  nSettings: g,
  settingTable: new U($, new M(h9, "nSettings"), {
    type: "parent"
  }),
  featureFlags: new Tt(se, [
    null,
    null,
    null,
    null,
    null,
    null,
    "hasDefault",
    "exclusive"
  ]),
  defaultSetting: se,
  nameIndex: te,
  name: (t) => t.parent.parent.name.records.fontFeatures[t.nameIndex]
});
var g9 = new W({
  version: f0,
  featureNameCount: g,
  reserved1: new r0(g),
  reserved2: new r0($),
  featureNames: new M(d9, "featureNameCount")
});
let p9 = new W({
  axisTag: new Ge(4),
  minValue: f0,
  defaultValue: f0,
  maxValue: f0,
  flags: g,
  nameID: g,
  name: (t) => t.parent.parent.name.records.fontFeatures[t.nameID]
}), v9 = new W({
  nameID: g,
  name: (t) => t.parent.parent.name.records.fontFeatures[t.nameID],
  flags: g,
  coord: new M(f0, (t) => t.parent.axisCount),
  postscriptNameID: new vo(g, (t) => t.parent.instanceSize - t._currentOffset > 0)
});
var m9 = new W({
  version: f0,
  offsetToData: g,
  countSizePairs: g,
  axisCount: g,
  axisSize: g,
  instanceCount: g,
  instanceSize: g,
  axis: new M(p9, "axisCount"),
  instance: new M(v9, "instanceCount")
});
let b9 = new qi(16, "BE", 14);
class x9 {
  static decode(e, r) {
    return r.flags ? e.readUInt32BE() : e.readUInt16BE() * 2;
  }
}
let w9 = new W({
  version: g,
  reserved: new r0(g),
  axisCount: g,
  globalCoordCount: g,
  globalCoords: new U($, new M(new M(b9, "axisCount"), "globalCoordCount")),
  glyphCount: g,
  flags: g,
  offsetToData: $,
  offsets: new M(new U(x9, "void", {
    relativeTo: (t) => t.offsetToData,
    allowNull: !1
  }), (t) => t.glyphCount + 1)
});
var y9 = w9;
let _9 = new W({
  length: g,
  coverage: g,
  subFeatureFlags: $,
  stateTable: new c9()
}), A9 = new W({
  justClass: $,
  beforeGrowLimit: f0,
  beforeShrinkLimit: f0,
  afterGrowLimit: f0,
  afterShrinkLimit: f0,
  growFlags: g,
  shrinkFlags: g
}), E9 = new M(A9, $), C9 = new Te("actionType", {
  0: {
    lowerLimit: f0,
    upperLimit: f0,
    order: g,
    glyphs: new M(g, g)
  },
  1: {
    addGlyph: g
  },
  2: {
    substThreshold: f0,
    addGlyph: g,
    substGlyph: g
  },
  3: {},
  4: {
    variationAxis: $,
    minimumLimit: f0,
    noStretchValue: f0,
    maximumLimit: f0
  },
  5: {
    flags: g,
    glyph: g
  }
}), S9 = new W({
  actionClass: g,
  actionType: g,
  actionLength: $,
  actionData: C9,
  padding: new r0(se, (t) => t.actionLength - t._currentOffset)
}), T9 = new M(S9, $), k9 = new W({
  lookupTable: new ei(new U(g, T9))
}), E5 = new W({
  classTable: new U(g, _9, {
    type: "parent"
  }),
  wdcOffset: g,
  postCompensationTable: new U(g, k9, {
    type: "parent"
  }),
  widthDeltaClusters: new ei(new U(g, E9, {
    type: "parent",
    relativeTo: (t) => t.wdcOffset
  }))
});
var F9 = new W({
  version: $,
  format: g,
  horizontal: new U(g, E5),
  vertical: new U(g, E5)
});
let O9 = {
  action: g
}, D9 = {
  markIndex: g,
  currentIndex: g
}, B9 = {
  currentInsertIndex: g,
  markedInsertIndex: g
}, I9 = new W({
  items: new Jt(new U($, new ei()))
}), R9 = new Te("type", {
  0: {
    stateTable: new Is()
  },
  1: {
    stateTable: new Is(D9),
    substitutionTable: new U($, I9)
  },
  2: {
    stateTable: new Is(O9),
    ligatureActions: new U($, new Jt($)),
    components: new U($, new Jt(g)),
    ligatureList: new U($, new Jt(g))
  },
  4: {
    lookupTable: new ei()
  },
  5: {
    stateTable: new Is(B9),
    insertionActions: new U($, new Jt(g))
  }
}), P9 = new W({
  length: $,
  coverage: jr,
  type: se,
  subFeatureFlags: $,
  table: R9,
  padding: new r0(se, (t) => t.length - t._currentOffset)
}), L9 = new W({
  featureType: g,
  featureSetting: g,
  enableFlags: $,
  disableFlags: $
}), N9 = new W({
  defaultFlags: $,
  chainLength: $,
  nFeatureEntries: $,
  nSubtables: $,
  features: new M(L9, "nFeatureEntries"),
  subtables: new M(P9, "nSubtables")
});
var M9 = new W({
  version: g,
  unused: new r0(g),
  nChains: $,
  chains: new M(N9, "nChains")
});
let U9 = new W({
  left: te,
  top: te,
  right: te,
  bottom: te
});
var $9 = new W({
  version: f0,
  format: g,
  lookupTable: new ei(U9)
});
let _e = {};
var _o = _e;
_e.cmap = Ub;
_e.head = $b;
_e.hhea = zb;
_e.hmtx = Hb;
_e.maxp = qb;
_e.name = Kb;
_e["OS/2"] = Jb;
_e.post = Qb;
_e.fpgm = t7;
_e.loca = r7;
_e.prep = i7;
_e["cvt "] = e7;
_e.glyf = n7;
_e["CFF "] = J4;
_e.CFF2 = J4;
_e.VORG = q7;
_e.EBLC = j7;
_e.CBLC = _e.EBLC;
_e.sbix = K7;
_e.COLR = ex;
_e.CPAL = rx;
_e.BASE = fx;
_e.GDEF = vx;
_e.GPOS = Tx;
_e.GSUB = Dx;
_e.JSTF = Lx;
_e.HVAR = Ux;
_e.DSIG = Wx;
_e.gasp = qx;
_e.hdmx = Yx;
_e.kern = jx;
_e.LTSH = Xx;
_e.PCLT = Kx;
_e.VDMX = t9;
_e.vhea = r9;
_e.vmtx = n9;
_e.avar = o9;
_e.bsln = u9;
_e.feat = g9;
_e.fvar = m9;
_e.gvar = y9;
_e.just = F9;
_e.morx = M9;
_e.opbd = $9;
let z9 = new W({
  tag: new Ge(4),
  checkSum: $,
  offset: new U($, "void", {
    type: "global"
  }),
  length: $
}), qf = new W({
  tag: new Ge(4),
  numTables: g,
  searchRange: g,
  entrySelector: g,
  rangeShift: g,
  tables: new M(z9, "numTables")
});
qf.process = function() {
  let t = {};
  for (let e of this.tables) t[e.tag] = e;
  this.tables = t;
};
qf.preEncode = function() {
  if (!Array.isArray(this.tables)) {
    let r = [];
    for (let i in this.tables) {
      let n = this.tables[i];
      n && r.push({
        tag: i,
        checkSum: 0,
        offset: new Y1(_o[i], n),
        length: _o[i].size(n)
      });
    }
    this.tables = r;
  }
  this.tag = "true", this.numTables = this.tables.length;
  let t = Math.floor(Math.log(this.numTables) / Math.LN2), e = Math.pow(2, t);
  this.searchRange = e * 16, this.entrySelector = Math.log(e) / Math.LN2, this.rangeShift = this.numTables * 16 - this.searchRange;
};
var rg = qf;
function Qs(t, e) {
  let r = 0, i = t.length - 1;
  for (; r <= i; ) {
    let n = r + i >> 1, a = e(t[n]);
    if (a < 0) i = n - 1;
    else if (a > 0) r = n + 1;
    else return n;
  }
  return -1;
}
function dn(t, e) {
  let r = [];
  for (; t < e; ) r.push(t++);
  return r;
}
const Jo = new TextDecoder("ascii"), C5 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", ma = new Uint8Array(256);
for (let t = 0; t < C5.length; t++) ma[C5.charCodeAt(t)] = t;
function Vf(t) {
  let e = t.length * 0.75;
  t[t.length - 1] === "=" && (e--, t[t.length - 2] === "=" && e--);
  let r = new Uint8Array(e), i = 0;
  for (let n = 0, a = t.length; n < a; n += 4) {
    let s = ma[t.charCodeAt(n)], o = ma[t.charCodeAt(n + 1)], c = ma[t.charCodeAt(n + 2)], l = ma[t.charCodeAt(n + 3)];
    r[i++] = s << 2 | o >> 4, r[i++] = (o & 15) << 4 | c >> 2, r[i++] = (c & 3) << 6 | l & 63;
  }
  return r;
}
class Yf {
  findSubtable(e, r) {
    for (let [i, n] of r) for (let a of e.tables)
      if (a.platformID === i && a.encodingID === n) return a.table;
    return null;
  }
  lookup(e, r) {
    if (this.encoding) e = this.encoding.get(e) || e;
    else if (r) {
      let n = this.getVariationSelector(e, r);
      if (n) return n;
    }
    let i = this.cmap;
    switch (i.version) {
      case 0:
        return i.codeMap.get(e) || 0;
      case 4: {
        let n = 0, a = i.segCount - 1;
        for (; n <= a; ) {
          let s = n + a >> 1;
          if (e < i.startCode.get(s)) a = s - 1;
          else if (e > i.endCode.get(s)) n = s + 1;
          else {
            let o = i.idRangeOffset.get(s), c;
            if (o === 0) c = e + i.idDelta.get(s);
            else {
              let l = o / 2 + (e - i.startCode.get(s)) - (i.segCount - s);
              c = i.glyphIndexArray.get(l) || 0, c !== 0 && (c += i.idDelta.get(s));
            }
            return c & 65535;
          }
        }
        return 0;
      }
      case 8:
        throw new Error("TODO: cmap format 8");
      case 6:
      case 10:
        return i.glyphIndices.get(e - i.firstCode) || 0;
      case 12:
      case 13: {
        let n = 0, a = i.nGroups - 1;
        for (; n <= a; ) {
          let s = n + a >> 1, o = i.groups.get(s);
          if (e < o.startCharCode) a = s - 1;
          else if (e > o.endCharCode) n = s + 1;
          else
            return i.version === 12 ? o.glyphID + (e - o.startCharCode) : o.glyphID;
        }
        return 0;
      }
      case 14:
        throw new Error("TODO: cmap format 14");
      default:
        throw new Error(`Unknown cmap format ${i.version}`);
    }
  }
  getVariationSelector(e, r) {
    if (!this.uvs) return 0;
    let i = this.uvs.varSelectors.toArray(), n = Qs(i, (s) => r - s.varSelector), a = i[n];
    return n !== -1 && a.defaultUVS && (n = Qs(a.defaultUVS, (s) => e < s.startUnicodeValue ? -1 : e > s.startUnicodeValue + s.additionalCount ? 1 : 0)), n !== -1 && a.nonDefaultUVS && (n = Qs(a.nonDefaultUVS, (s) => e - s.unicodeValue), n !== -1) ? a.nonDefaultUVS[n].glyphID : 0;
  }
  getCharacterSet() {
    let e = this.cmap;
    switch (e.version) {
      case 0:
        return dn(0, e.codeMap.length);
      case 4: {
        let r = [], i = e.endCode.toArray();
        for (let n = 0; n < i.length; n++) {
          let a = i[n] + 1, s = e.startCode.get(n);
          r.push(...dn(s, a));
        }
        return r;
      }
      case 8:
        throw new Error("TODO: cmap format 8");
      case 6:
      case 10:
        return dn(e.firstCode, e.firstCode + e.glyphIndices.length);
      case 12:
      case 13: {
        let r = [];
        for (let i of e.groups.toArray()) r.push(...dn(i.startCharCode, i.endCharCode + 1));
        return r;
      }
      case 14:
        throw new Error("TODO: cmap format 14");
      default:
        throw new Error(`Unknown cmap format ${e.version}`);
    }
  }
  codePointsForGlyph(e) {
    let r = this.cmap;
    switch (r.version) {
      case 0: {
        let n = [];
        for (let a = 0; a < 256; a++) r.codeMap.get(a) === e && n.push(a);
        return n;
      }
      case 4: {
        let n = [];
        for (let a = 0; a < r.segCount; a++) {
          let s = r.endCode.get(a), o = r.startCode.get(a), c = r.idRangeOffset.get(a), l = r.idDelta.get(a);
          for (var i = o; i <= s; i++) {
            let f = 0;
            if (c === 0) f = i + l;
            else {
              let u = c / 2 + (i - o) - (r.segCount - a);
              f = r.glyphIndexArray.get(u) || 0, f !== 0 && (f += l);
            }
            f === e && n.push(i);
          }
        }
        return n;
      }
      case 12: {
        let n = [];
        for (let a of r.groups.toArray()) e >= a.glyphID && e <= a.glyphID + (a.endCharCode - a.startCharCode) && n.push(a.startCharCode + (e - a.glyphID));
        return n;
      }
      case 13: {
        let n = [];
        for (let a of r.groups.toArray()) e === a.glyphID && n.push(...dn(a.startCharCode, a.endCharCode + 1));
        return n;
      }
      default:
        throw new Error(`Unknown cmap format ${r.version}`);
    }
  }
  constructor(e) {
    if (this.encoding = null, this.cmap = this.findSubtable(e, [
      // 32-bit subtables
      [
        3,
        10
      ],
      [
        0,
        6
      ],
      [
        0,
        4
      ],
      // 16-bit subtables
      [
        3,
        1
      ],
      [
        0,
        3
      ],
      [
        0,
        2
      ],
      [
        0,
        1
      ],
      [
        0,
        0
      ]
    ]), !this.cmap) for (let r of e.tables) {
      let i = P4(r.platformID, r.encodingID, r.table.language - 1), n = Gb(i);
      n && (this.cmap = r.table, this.encoding = n);
    }
    if (!this.cmap) throw new Error("Could not find a supported cmap table");
    this.uvs = this.findSubtable(e, [
      [
        0,
        5
      ]
    ]), this.uvs && this.uvs.version !== 14 && (this.uvs = null);
  }
}
D0([
  B0
], Yf.prototype, "getCharacterSet", null);
D0([
  B0
], Yf.prototype, "codePointsForGlyph", null);
class W9 {
  process(e, r) {
    for (let i = 0; i < e.length - 1; i++) {
      let n = e[i].id, a = e[i + 1].id;
      r[i].xAdvance += this.getKerning(n, a);
    }
  }
  getKerning(e, r) {
    let i = 0;
    for (let n of this.kern.tables) {
      if (n.coverage.crossStream) continue;
      switch (n.version) {
        case 0:
          if (!n.coverage.horizontal) continue;
          break;
        case 1:
          if (n.coverage.vertical || n.coverage.variation) continue;
          break;
        default:
          throw new Error(`Unsupported kerning table version ${n.version}`);
      }
      let a = 0, s = n.subtable;
      switch (n.format) {
        case 0:
          let o = Qs(s.pairs, function(u) {
            return e - u.left || r - u.right;
          });
          o >= 0 && (a = s.pairs[o].value);
          break;
        case 2:
          let c = 0, l = 0;
          e >= s.leftTable.firstGlyph && e < s.leftTable.firstGlyph + s.leftTable.nGlyphs ? c = s.leftTable.offsets[e - s.leftTable.firstGlyph] : c = s.array.off, r >= s.rightTable.firstGlyph && r < s.rightTable.firstGlyph + s.rightTable.nGlyphs && (l = s.rightTable.offsets[r - s.rightTable.firstGlyph]);
          let f = (c + l - s.array.off) / 2;
          a = s.array.values.get(f);
          break;
        case 3:
          if (e >= s.glyphCount || r >= s.glyphCount) return 0;
          a = s.kernValue[s.kernIndex[s.leftClass[e] * s.rightClassCount + s.rightClass[r]]];
          break;
        default:
          throw new Error(`Unsupported kerning sub-table format ${n.format}`);
      }
      n.coverage.override ? i = a : i += a;
    }
    return i;
  }
  constructor(e) {
    this.kern = e.kern;
  }
}
class H9 {
  positionGlyphs(e, r) {
    let i = 0, n = 0;
    for (let a = 0; a < e.length; a++)
      e[a].isMark ? n = a : (i !== n && this.positionCluster(e, r, i, n), i = n = a);
    return i !== n && this.positionCluster(e, r, i, n), r;
  }
  positionCluster(e, r, i, n) {
    let a = e[i], s = a.cbox.copy();
    a.codePoints.length > 1 && (s.minX += (a.codePoints.length - 1) * s.width / a.codePoints.length);
    let o = -r[i].xAdvance, c = 0, l = this.font.unitsPerEm / 16;
    for (let f = i + 1; f <= n; f++) {
      let u = e[f], h = u.cbox, d = r[f], p = this.getCombiningClass(u.codePoints[0]);
      if (p !== "Not_Reordered") {
        switch (d.xOffset = d.yOffset = 0, p) {
          case "Double_Above":
          case "Double_Below":
            d.xOffset += s.minX - h.width / 2 - h.minX;
            break;
          case "Attached_Below_Left":
          case "Below_Left":
          case "Above_Left":
            d.xOffset += s.minX - h.minX;
            break;
          case "Attached_Above_Right":
          case "Below_Right":
          case "Above_Right":
            d.xOffset += s.maxX - h.width - h.minX;
            break;
          default:
            d.xOffset += s.minX + (s.width - h.width) / 2 - h.minX;
        }
        switch (p) {
          case "Double_Below":
          case "Below_Left":
          case "Below":
          case "Below_Right":
          case "Attached_Below_Left":
          case "Attached_Below":
            (p === "Attached_Below_Left" || p === "Attached_Below") && (s.minY += l), d.yOffset = -s.minY - h.maxY, s.minY += h.height;
            break;
          case "Double_Above":
          case "Above_Left":
          case "Above":
          case "Above_Right":
          case "Attached_Above":
          case "Attached_Above_Right":
            (p === "Attached_Above" || p === "Attached_Above_Right") && (s.maxY += l), d.yOffset = s.maxY - h.minY, s.maxY += h.height;
            break;
        }
        d.xAdvance = d.yAdvance = 0, d.xOffset += o, d.yOffset += c;
      } else
        o -= d.xAdvance, c -= d.yAdvance;
    }
  }
  getCombiningClass(e) {
    let r = vb(e);
    if ((e & -256) === 3584) {
      if (r === "Not_Reordered") switch (e) {
        case 3633:
        case 3636:
        case 3637:
        case 3638:
        case 3639:
        case 3655:
        case 3660:
        case 3645:
        case 3662:
          return "Above_Right";
        case 3761:
        case 3764:
        case 3765:
        case 3766:
        case 3767:
        case 3771:
        case 3788:
        case 3789:
          return "Above";
        case 3772:
          return "Below";
      }
      else if (e === 3642) return "Below_Right";
    }
    switch (r) {
      case "CCC10":
      case "CCC11":
      case "CCC12":
      case "CCC13":
      case "CCC14":
      case "CCC15":
      case "CCC16":
      case "CCC17":
      case "CCC18":
      case "CCC20":
      case "CCC22":
        return "Below";
      case "CCC23":
        return "Attached_Above";
      case "CCC24":
        return "Above_Right";
      case "CCC25":
      case "CCC19":
        return "Above_Left";
      case "CCC26":
        return "Above";
      case "CCC21":
        break;
      case "CCC27":
      case "CCC28":
      case "CCC30":
      case "CCC31":
      case "CCC33":
      case "CCC34":
      case "CCC35":
      case "CCC36":
        return "Above";
      case "CCC29":
      case "CCC32":
        return "Below";
      case "CCC103":
        return "Below_Right";
      case "CCC107":
        return "Above_Right";
      case "CCC118":
        return "Below";
      case "CCC122":
        return "Above";
      case "CCC129":
      case "CCC132":
        return "Below";
      case "CCC130":
        return "Above";
    }
    return r;
  }
  constructor(e) {
    this.font = e;
  }
}
class ti {
  /**
  * The width of the bounding box
  * @type {number}
  */
  get width() {
    return this.maxX - this.minX;
  }
  /**
  * The height of the bounding box
  * @type {number}
  */
  get height() {
    return this.maxY - this.minY;
  }
  addPoint(e, r) {
    Math.abs(e) !== 1 / 0 && (e < this.minX && (this.minX = e), e > this.maxX && (this.maxX = e)), Math.abs(r) !== 1 / 0 && (r < this.minY && (this.minY = r), r > this.maxY && (this.maxY = r));
  }
  copy() {
    return new ti(this.minX, this.minY, this.maxX, this.maxY);
  }
  constructor(e = 1 / 0, r = 1 / 0, i = -1 / 0, n = -1 / 0) {
    this.minX = e, this.minY = r, this.maxX = i, this.maxY = n;
  }
}
const Bn = {
  Caucasian_Albanian: "aghb",
  Arabic: "arab",
  Imperial_Aramaic: "armi",
  Armenian: "armn",
  Avestan: "avst",
  Balinese: "bali",
  Bamum: "bamu",
  Bassa_Vah: "bass",
  Batak: "batk",
  Bengali: [
    "bng2",
    "beng"
  ],
  Bopomofo: "bopo",
  Brahmi: "brah",
  Braille: "brai",
  Buginese: "bugi",
  Buhid: "buhd",
  Chakma: "cakm",
  Canadian_Aboriginal: "cans",
  Carian: "cari",
  Cham: "cham",
  Cherokee: "cher",
  Coptic: "copt",
  Cypriot: "cprt",
  Cyrillic: "cyrl",
  Devanagari: [
    "dev2",
    "deva"
  ],
  Deseret: "dsrt",
  Duployan: "dupl",
  Egyptian_Hieroglyphs: "egyp",
  Elbasan: "elba",
  Ethiopic: "ethi",
  Georgian: "geor",
  Glagolitic: "glag",
  Gothic: "goth",
  Grantha: "gran",
  Greek: "grek",
  Gujarati: [
    "gjr2",
    "gujr"
  ],
  Gurmukhi: [
    "gur2",
    "guru"
  ],
  Hangul: "hang",
  Han: "hani",
  Hanunoo: "hano",
  Hebrew: "hebr",
  Hiragana: "hira",
  Pahawh_Hmong: "hmng",
  Katakana_Or_Hiragana: "hrkt",
  Old_Italic: "ital",
  Javanese: "java",
  Kayah_Li: "kali",
  Katakana: "kana",
  Kharoshthi: "khar",
  Khmer: "khmr",
  Khojki: "khoj",
  Kannada: [
    "knd2",
    "knda"
  ],
  Kaithi: "kthi",
  Tai_Tham: "lana",
  Lao: "lao ",
  Latin: "latn",
  Lepcha: "lepc",
  Limbu: "limb",
  Linear_A: "lina",
  Linear_B: "linb",
  Lisu: "lisu",
  Lycian: "lyci",
  Lydian: "lydi",
  Mahajani: "mahj",
  Mandaic: "mand",
  Manichaean: "mani",
  Mende_Kikakui: "mend",
  Meroitic_Cursive: "merc",
  Meroitic_Hieroglyphs: "mero",
  Malayalam: [
    "mlm2",
    "mlym"
  ],
  Modi: "modi",
  Mongolian: "mong",
  Mro: "mroo",
  Meetei_Mayek: "mtei",
  Myanmar: [
    "mym2",
    "mymr"
  ],
  Old_North_Arabian: "narb",
  Nabataean: "nbat",
  Nko: "nko ",
  Ogham: "ogam",
  Ol_Chiki: "olck",
  Old_Turkic: "orkh",
  Oriya: [
    "ory2",
    "orya"
  ],
  Osmanya: "osma",
  Palmyrene: "palm",
  Pau_Cin_Hau: "pauc",
  Old_Permic: "perm",
  Phags_Pa: "phag",
  Inscriptional_Pahlavi: "phli",
  Psalter_Pahlavi: "phlp",
  Phoenician: "phnx",
  Miao: "plrd",
  Inscriptional_Parthian: "prti",
  Rejang: "rjng",
  Runic: "runr",
  Samaritan: "samr",
  Old_South_Arabian: "sarb",
  Saurashtra: "saur",
  Shavian: "shaw",
  Sharada: "shrd",
  Siddham: "sidd",
  Khudawadi: "sind",
  Sinhala: "sinh",
  Sora_Sompeng: "sora",
  Sundanese: "sund",
  Syloti_Nagri: "sylo",
  Syriac: "syrc",
  Tagbanwa: "tagb",
  Takri: "takr",
  Tai_Le: "tale",
  New_Tai_Lue: "talu",
  Tamil: [
    "tml2",
    "taml"
  ],
  Tai_Viet: "tavt",
  Telugu: [
    "tel2",
    "telu"
  ],
  Tifinagh: "tfng",
  Tagalog: "tglg",
  Thaana: "thaa",
  Thai: "thai",
  Tibetan: "tibt",
  Tirhuta: "tirh",
  Ugaritic: "ugar",
  Vai: "vai ",
  Warang_Citi: "wara",
  Old_Persian: "xpeo",
  Cuneiform: "xsux",
  Yi: "yi  ",
  Inherited: "zinh",
  Common: "zyyy",
  Unknown: "zzzz"
}, Q1 = {};
for (let t in Bn) {
  let e = Bn[t];
  if (Array.isArray(e)) for (let r of e) Q1[r] = t;
  else Q1[e] = t;
}
function q9(t) {
  return Q1[t];
}
function V9(t) {
  let e = t.length, r = 0;
  for (; r < e; ) {
    let i = t.charCodeAt(r++);
    if (55296 <= i && i <= 56319 && r < e) {
      let a = t.charCodeAt(r);
      56320 <= a && a <= 57343 && (r++, i = ((i & 1023) << 10) + (a & 1023) + 65536);
    }
    let n = S4(i);
    if (n !== "Common" && n !== "Inherited" && n !== "Unknown") return Bn[n];
  }
  return Bn.Unknown;
}
function Y9(t) {
  for (let e = 0; e < t.length; e++) {
    let r = t[e], i = S4(r);
    if (i !== "Common" && i !== "Inherited" && i !== "Unknown") return Bn[i];
  }
  return Bn.Unknown;
}
const G9 = {
  arab: !0,
  hebr: !0,
  syrc: !0,
  thaa: !0,
  cprt: !0,
  khar: !0,
  phnx: !0,
  "nko ": !0,
  lydi: !0,
  avst: !0,
  armi: !0,
  phli: !0,
  prti: !0,
  sarb: !0,
  orkh: !0,
  samr: !0,
  mand: !0,
  merc: !0,
  mero: !0,
  // Unicode 7.0 (not listed on http://www.microsoft.com/typography/otspec/scripttags.htm)
  mani: !0,
  mend: !0,
  nbat: !0,
  narb: !0,
  palm: !0,
  phlp: !0
  // Psalter Pahlavi
};
function ig(t) {
  return G9[t] ? "rtl" : "ltr";
}
class Z9 {
  /**
  * The total advance width of the run.
  * @type {number}
  */
  get advanceWidth() {
    let e = 0;
    for (let r of this.positions) e += r.xAdvance;
    return e;
  }
  /**
  * The total advance height of the run.
  * @type {number}
  */
  get advanceHeight() {
    let e = 0;
    for (let r of this.positions) e += r.yAdvance;
    return e;
  }
  /**
  * The bounding box containing all glyphs in the run.
  * @type {BBox}
  */
  get bbox() {
    let e = new ti(), r = 0, i = 0;
    for (let n = 0; n < this.glyphs.length; n++) {
      let a = this.glyphs[n], s = this.positions[n], o = a.bbox;
      e.addPoint(o.minX + r + s.xOffset, o.minY + i + s.yOffset), e.addPoint(o.maxX + r + s.xOffset, o.maxY + i + s.yOffset), r += s.xAdvance, i += s.yAdvance;
    }
    return e;
  }
  constructor(e, r, i, n, a) {
    if (this.glyphs = e, this.positions = null, this.script = i, this.language = n || null, this.direction = a || ig(i), this.features = {}, Array.isArray(r)) for (let s of r) this.features[s] = !0;
    else typeof r == "object" && (this.features = r);
  }
}
class j9 {
  constructor(e = 0, r = 0, i = 0, n = 0) {
    this.xAdvance = e, this.yAdvance = r, this.xOffset = i, this.yOffset = n;
  }
}
const bi = {
  allTypographicFeatures: {
    code: 0,
    exclusive: !1,
    allTypeFeatures: 0
  },
  ligatures: {
    code: 1,
    exclusive: !1,
    requiredLigatures: 0,
    commonLigatures: 2,
    rareLigatures: 4,
    // logos: 6
    rebusPictures: 8,
    diphthongLigatures: 10,
    squaredLigatures: 12,
    abbrevSquaredLigatures: 14,
    symbolLigatures: 16,
    contextualLigatures: 18,
    historicalLigatures: 20
  },
  cursiveConnection: {
    code: 2,
    exclusive: !0,
    unconnected: 0,
    partiallyConnected: 1,
    cursive: 2
  },
  letterCase: {
    code: 3,
    exclusive: !0
  },
  // upperAndLowerCase: 0          # deprecated
  // allCaps: 1                    # deprecated
  // allLowerCase: 2               # deprecated
  // smallCaps: 3                  # deprecated
  // initialCaps: 4                # deprecated
  // initialCapsAndSmallCaps: 5    # deprecated
  verticalSubstitution: {
    code: 4,
    exclusive: !1,
    substituteVerticalForms: 0
  },
  linguisticRearrangement: {
    code: 5,
    exclusive: !1,
    linguisticRearrangement: 0
  },
  numberSpacing: {
    code: 6,
    exclusive: !0,
    monospacedNumbers: 0,
    proportionalNumbers: 1,
    thirdWidthNumbers: 2,
    quarterWidthNumbers: 3
  },
  smartSwash: {
    code: 8,
    exclusive: !1,
    wordInitialSwashes: 0,
    wordFinalSwashes: 2,
    // lineInitialSwashes: 4
    // lineFinalSwashes: 6
    nonFinalSwashes: 8
  },
  diacritics: {
    code: 9,
    exclusive: !0,
    showDiacritics: 0,
    hideDiacritics: 1,
    decomposeDiacritics: 2
  },
  verticalPosition: {
    code: 10,
    exclusive: !0,
    normalPosition: 0,
    superiors: 1,
    inferiors: 2,
    ordinals: 3,
    scientificInferiors: 4
  },
  fractions: {
    code: 11,
    exclusive: !0,
    noFractions: 0,
    verticalFractions: 1,
    diagonalFractions: 2
  },
  overlappingCharacters: {
    code: 13,
    exclusive: !1,
    preventOverlap: 0
  },
  typographicExtras: {
    code: 14,
    exclusive: !1,
    // hyphensToEmDash: 0
    // hyphenToEnDash: 2
    slashedZero: 4
  },
  // formInterrobang: 6
  // smartQuotes: 8
  // periodsToEllipsis: 10
  mathematicalExtras: {
    code: 15,
    exclusive: !1,
    // hyphenToMinus: 0
    // asteristoMultiply: 2
    // slashToDivide: 4
    // inequalityLigatures: 6
    // exponents: 8
    mathematicalGreek: 10
  },
  ornamentSets: {
    code: 16,
    exclusive: !0,
    noOrnaments: 0,
    dingbats: 1,
    piCharacters: 2,
    fleurons: 3,
    decorativeBorders: 4,
    internationalSymbols: 5,
    mathSymbols: 6
  },
  characterAlternatives: {
    code: 17,
    exclusive: !0,
    noAlternates: 0
  },
  // user defined options
  designComplexity: {
    code: 18,
    exclusive: !0,
    designLevel1: 0,
    designLevel2: 1,
    designLevel3: 2,
    designLevel4: 3,
    designLevel5: 4
  },
  styleOptions: {
    code: 19,
    exclusive: !0,
    noStyleOptions: 0,
    displayText: 1,
    engravedText: 2,
    illuminatedCaps: 3,
    titlingCaps: 4,
    tallCaps: 5
  },
  characterShape: {
    code: 20,
    exclusive: !0,
    traditionalCharacters: 0,
    simplifiedCharacters: 1,
    JIS1978Characters: 2,
    JIS1983Characters: 3,
    JIS1990Characters: 4,
    traditionalAltOne: 5,
    traditionalAltTwo: 6,
    traditionalAltThree: 7,
    traditionalAltFour: 8,
    traditionalAltFive: 9,
    expertCharacters: 10,
    JIS2004Characters: 11,
    hojoCharacters: 12,
    NLCCharacters: 13,
    traditionalNamesCharacters: 14
  },
  numberCase: {
    code: 21,
    exclusive: !0,
    lowerCaseNumbers: 0,
    upperCaseNumbers: 1
  },
  textSpacing: {
    code: 22,
    exclusive: !0,
    proportionalText: 0,
    monospacedText: 1,
    halfWidthText: 2,
    thirdWidthText: 3,
    quarterWidthText: 4,
    altProportionalText: 5,
    altHalfWidthText: 6
  },
  transliteration: {
    code: 23,
    exclusive: !0,
    noTransliteration: 0
  },
  // hanjaToHangul: 1
  // hiraganaToKatakana: 2
  // katakanaToHiragana: 3
  // kanaToRomanization: 4
  // romanizationToHiragana: 5
  // romanizationToKatakana: 6
  // hanjaToHangulAltOne: 7
  // hanjaToHangulAltTwo: 8
  // hanjaToHangulAltThree: 9
  annotation: {
    code: 24,
    exclusive: !0,
    noAnnotation: 0,
    boxAnnotation: 1,
    roundedBoxAnnotation: 2,
    circleAnnotation: 3,
    invertedCircleAnnotation: 4,
    parenthesisAnnotation: 5,
    periodAnnotation: 6,
    romanNumeralAnnotation: 7,
    diamondAnnotation: 8,
    invertedBoxAnnotation: 9,
    invertedRoundedBoxAnnotation: 10
  },
  kanaSpacing: {
    code: 25,
    exclusive: !0,
    fullWidthKana: 0,
    proportionalKana: 1
  },
  ideographicSpacing: {
    code: 26,
    exclusive: !0,
    fullWidthIdeographs: 0,
    proportionalIdeographs: 1,
    halfWidthIdeographs: 2
  },
  unicodeDecomposition: {
    code: 27,
    exclusive: !1,
    canonicalComposition: 0,
    compatibilityComposition: 2,
    transcodingComposition: 4
  },
  rubyKana: {
    code: 28,
    exclusive: !1,
    // noRubyKana: 0     # deprecated - use rubyKanaOff instead
    // rubyKana: 1     # deprecated - use rubyKanaOn instead
    rubyKana: 2
  },
  CJKSymbolAlternatives: {
    code: 29,
    exclusive: !0,
    noCJKSymbolAlternatives: 0,
    CJKSymbolAltOne: 1,
    CJKSymbolAltTwo: 2,
    CJKSymbolAltThree: 3,
    CJKSymbolAltFour: 4,
    CJKSymbolAltFive: 5
  },
  ideographicAlternatives: {
    code: 30,
    exclusive: !0,
    noIdeographicAlternatives: 0,
    ideographicAltOne: 1,
    ideographicAltTwo: 2,
    ideographicAltThree: 3,
    ideographicAltFour: 4,
    ideographicAltFive: 5
  },
  CJKVerticalRomanPlacement: {
    code: 31,
    exclusive: !0,
    CJKVerticalRomanCentered: 0,
    CJKVerticalRomanHBaseline: 1
  },
  italicCJKRoman: {
    code: 32,
    exclusive: !1,
    // noCJKItalicRoman: 0     # deprecated - use CJKItalicRomanOff instead
    // CJKItalicRoman: 1     # deprecated - use CJKItalicRomanOn instead
    CJKItalicRoman: 2
  },
  caseSensitiveLayout: {
    code: 33,
    exclusive: !1,
    caseSensitiveLayout: 0,
    caseSensitiveSpacing: 2
  },
  alternateKana: {
    code: 34,
    exclusive: !1,
    alternateHorizKana: 0,
    alternateVertKana: 2
  },
  stylisticAlternatives: {
    code: 35,
    exclusive: !1,
    noStylisticAlternates: 0,
    stylisticAltOne: 2,
    stylisticAltTwo: 4,
    stylisticAltThree: 6,
    stylisticAltFour: 8,
    stylisticAltFive: 10,
    stylisticAltSix: 12,
    stylisticAltSeven: 14,
    stylisticAltEight: 16,
    stylisticAltNine: 18,
    stylisticAltTen: 20,
    stylisticAltEleven: 22,
    stylisticAltTwelve: 24,
    stylisticAltThirteen: 26,
    stylisticAltFourteen: 28,
    stylisticAltFifteen: 30,
    stylisticAltSixteen: 32,
    stylisticAltSeventeen: 34,
    stylisticAltEighteen: 36,
    stylisticAltNineteen: 38,
    stylisticAltTwenty: 40
  },
  contextualAlternates: {
    code: 36,
    exclusive: !1,
    contextualAlternates: 0,
    swashAlternates: 2,
    contextualSwashAlternates: 4
  },
  lowerCase: {
    code: 37,
    exclusive: !0,
    defaultLowerCase: 0,
    lowerCaseSmallCaps: 1,
    lowerCasePetiteCaps: 2
  },
  upperCase: {
    code: 38,
    exclusive: !0,
    defaultUpperCase: 0,
    upperCaseSmallCaps: 1,
    upperCasePetiteCaps: 2
  },
  languageTag: {
    code: 39,
    exclusive: !0
  },
  CJKRomanSpacing: {
    code: 103,
    exclusive: !0,
    halfWidthCJKRoman: 0,
    proportionalCJKRoman: 1,
    defaultCJKRoman: 2,
    fullWidthCJKRoman: 3
  }
}, le = (t, e) => [
  bi[t].code,
  bi[t][e]
], Ao = {
  rlig: le("ligatures", "requiredLigatures"),
  clig: le("ligatures", "contextualLigatures"),
  dlig: le("ligatures", "rareLigatures"),
  hlig: le("ligatures", "historicalLigatures"),
  liga: le("ligatures", "commonLigatures"),
  hist: le("ligatures", "historicalLigatures"),
  smcp: le("lowerCase", "lowerCaseSmallCaps"),
  pcap: le("lowerCase", "lowerCasePetiteCaps"),
  frac: le("fractions", "diagonalFractions"),
  dnom: le("fractions", "diagonalFractions"),
  numr: le("fractions", "diagonalFractions"),
  afrc: le("fractions", "verticalFractions"),
  // aalt
  // abvf, abvm, abvs, akhn, blwf, blwm, blws, cfar, cjct, cpsp, falt, isol, jalt, ljmo, mset?
  // ltra, ltrm, nukt, pref, pres, pstf, psts, rand, rkrf, rphf, rtla, rtlm, size, tjmo, tnum?
  // unic, vatu, vhal, vjmo, vpal, vrt2
  // dist -> trak table?
  // kern, vkrn -> kern table
  // lfbd + opbd + rtbd -> opbd table?
  // mark, mkmk -> acnt table?
  // locl -> languageTag + ltag table
  case: le("caseSensitiveLayout", "caseSensitiveLayout"),
  ccmp: le("unicodeDecomposition", "canonicalComposition"),
  cpct: le("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
  valt: le("CJKVerticalRomanPlacement", "CJKVerticalRomanCentered"),
  swsh: le("contextualAlternates", "swashAlternates"),
  cswh: le("contextualAlternates", "contextualSwashAlternates"),
  curs: le("cursiveConnection", "cursive"),
  c2pc: le("upperCase", "upperCasePetiteCaps"),
  c2sc: le("upperCase", "upperCaseSmallCaps"),
  init: le("smartSwash", "wordInitialSwashes"),
  fin2: le("smartSwash", "wordFinalSwashes"),
  medi: le("smartSwash", "nonFinalSwashes"),
  med2: le("smartSwash", "nonFinalSwashes"),
  fin3: le("smartSwash", "wordFinalSwashes"),
  fina: le("smartSwash", "wordFinalSwashes"),
  pkna: le("kanaSpacing", "proportionalKana"),
  half: le("textSpacing", "halfWidthText"),
  halt: le("textSpacing", "altHalfWidthText"),
  hkna: le("alternateKana", "alternateHorizKana"),
  vkna: le("alternateKana", "alternateVertKana"),
  // hngl: feature 'transliteration', 'hanjaToHangulSelector' # deprecated
  ital: le("italicCJKRoman", "CJKItalicRoman"),
  lnum: le("numberCase", "upperCaseNumbers"),
  onum: le("numberCase", "lowerCaseNumbers"),
  mgrk: le("mathematicalExtras", "mathematicalGreek"),
  // nalt: not enough info. what type of annotation?
  // ornm: ditto, which ornament style?
  calt: le("contextualAlternates", "contextualAlternates"),
  vrt2: le("verticalSubstitution", "substituteVerticalForms"),
  vert: le("verticalSubstitution", "substituteVerticalForms"),
  tnum: le("numberSpacing", "monospacedNumbers"),
  pnum: le("numberSpacing", "proportionalNumbers"),
  sups: le("verticalPosition", "superiors"),
  subs: le("verticalPosition", "inferiors"),
  ordn: le("verticalPosition", "ordinals"),
  pwid: le("textSpacing", "proportionalText"),
  hwid: le("textSpacing", "halfWidthText"),
  qwid: le("textSpacing", "quarterWidthText"),
  twid: le("textSpacing", "thirdWidthText"),
  fwid: le("textSpacing", "proportionalText"),
  palt: le("textSpacing", "altProportionalText"),
  trad: le("characterShape", "traditionalCharacters"),
  smpl: le("characterShape", "simplifiedCharacters"),
  jp78: le("characterShape", "JIS1978Characters"),
  jp83: le("characterShape", "JIS1983Characters"),
  jp90: le("characterShape", "JIS1990Characters"),
  jp04: le("characterShape", "JIS2004Characters"),
  expt: le("characterShape", "expertCharacters"),
  hojo: le("characterShape", "hojoCharacters"),
  nlck: le("characterShape", "NLCCharacters"),
  tnam: le("characterShape", "traditionalNamesCharacters"),
  ruby: le("rubyKana", "rubyKana"),
  titl: le("styleOptions", "titlingCaps"),
  zero: le("typographicExtras", "slashedZero"),
  ss01: le("stylisticAlternatives", "stylisticAltOne"),
  ss02: le("stylisticAlternatives", "stylisticAltTwo"),
  ss03: le("stylisticAlternatives", "stylisticAltThree"),
  ss04: le("stylisticAlternatives", "stylisticAltFour"),
  ss05: le("stylisticAlternatives", "stylisticAltFive"),
  ss06: le("stylisticAlternatives", "stylisticAltSix"),
  ss07: le("stylisticAlternatives", "stylisticAltSeven"),
  ss08: le("stylisticAlternatives", "stylisticAltEight"),
  ss09: le("stylisticAlternatives", "stylisticAltNine"),
  ss10: le("stylisticAlternatives", "stylisticAltTen"),
  ss11: le("stylisticAlternatives", "stylisticAltEleven"),
  ss12: le("stylisticAlternatives", "stylisticAltTwelve"),
  ss13: le("stylisticAlternatives", "stylisticAltThirteen"),
  ss14: le("stylisticAlternatives", "stylisticAltFourteen"),
  ss15: le("stylisticAlternatives", "stylisticAltFifteen"),
  ss16: le("stylisticAlternatives", "stylisticAltSixteen"),
  ss17: le("stylisticAlternatives", "stylisticAltSeventeen"),
  ss18: le("stylisticAlternatives", "stylisticAltEighteen"),
  ss19: le("stylisticAlternatives", "stylisticAltNineteen"),
  ss20: le("stylisticAlternatives", "stylisticAltTwenty")
};
for (let t = 1; t <= 99; t++) Ao[`cv${`00${t}`.slice(-2)}`] = [
  bi.characterAlternatives.code,
  t
];
let xi = {};
for (let t in Ao) {
  let e = Ao[t];
  xi[e[0]] == null && (xi[e[0]] = {}), xi[e[0]][e[1]] = t;
}
function X9(t) {
  let e = {};
  for (let r in t) {
    let i;
    (i = Ao[r]) && (e[i[0]] == null && (e[i[0]] = {}), e[i[0]][i[1]] = t[r]);
  }
  return e;
}
function S5(t) {
  let [e, r] = t;
  if (isNaN(e)) var i = bi[e] && bi[e].code;
  else var i = e;
  if (isNaN(r)) var n = bi[e] && bi[e][r];
  else var n = r;
  return [
    i,
    n
  ];
}
function K9(t) {
  let e = {};
  if (Array.isArray(t)) for (let r = 0; r < t.length; r++) {
    let i, n = S5(t[r]);
    (i = xi[n[0]] && xi[n[0]][n[1]]) && (e[i] = !0);
  }
  else if (typeof t == "object") for (let r in t) {
    let i = t[r];
    for (let n in i) {
      let a, s = S5([
        r,
        n
      ]);
      i[n] && (a = xi[s[0]] && xi[s[0]][s[1]]) && (e[a] = !0);
    }
  }
  return Object.keys(e);
}
class Ea {
  lookup(e) {
    switch (this.table.version) {
      case 0:
        return this.table.values.getItem(e);
      case 2:
      case 4: {
        let n = 0, a = this.table.binarySearchHeader.nUnits - 1;
        for (; n <= a; ) {
          var r = n + a >> 1, i = this.table.segments[r];
          if (i.firstGlyph === 65535) return null;
          if (e < i.firstGlyph) a = r - 1;
          else if (e > i.lastGlyph) n = r + 1;
          else
            return this.table.version === 2 ? i.value : i.values[e - i.firstGlyph];
        }
        return null;
      }
      case 6: {
        let n = 0, a = this.table.binarySearchHeader.nUnits - 1;
        for (; n <= a; ) {
          var r = n + a >> 1, i = this.table.segments[r];
          if (i.glyph === 65535) return null;
          if (e < i.glyph) a = r - 1;
          else if (e > i.glyph) n = r + 1;
          else return i.value;
        }
        return null;
      }
      case 8:
        return this.table.values[e - this.table.firstGlyph];
      default:
        throw new Error(`Unknown lookup table format: ${this.table.version}`);
    }
  }
  glyphsForValue(e) {
    let r = [];
    switch (this.table.version) {
      case 2:
      case 4:
        for (let i of this.table.segments) if (this.table.version === 2 && i.value === e) r.push(...dn(i.firstGlyph, i.lastGlyph + 1));
        else
          for (let n = 0; n < i.values.length; n++) i.values[n] === e && r.push(i.firstGlyph + n);
        break;
      case 6:
        for (let i of this.table.segments) i.value === e && r.push(i.glyph);
        break;
      case 8:
        for (let i = 0; i < this.table.values.length; i++) this.table.values[i] === e && r.push(this.table.firstGlyph + i);
        break;
      default:
        throw new Error(`Unknown lookup table format: ${this.table.version}`);
    }
    return r;
  }
  constructor(e) {
    this.table = e;
  }
}
D0([
  B0
], Ea.prototype, "glyphsForValue", null);
const J9 = 0, T5 = 0, k5 = 1, F5 = 2, Q9 = 16384;
class ew {
  process(e, r, i) {
    let n = J9, a = r ? e.length - 1 : 0, s = r ? -1 : 1;
    for (; s === 1 && a <= e.length || s === -1 && a >= -1; ) {
      let o = null, c = k5, l = !0;
      a === e.length || a === -1 ? c = T5 : (o = e[a], o.id === 65535 ? c = F5 : (c = this.lookupTable.lookup(o.id), c == null && (c = k5)));
      let u = this.stateTable.stateArray.getItem(n)[c], h = this.stateTable.entryTable.getItem(u);
      c !== T5 && c !== F5 && (i(o, h, a), l = !(h.flags & Q9)), n = h.newState, l && (a += s);
    }
    return e;
  }
  /**
  * Performs a depth-first traversal of the glyph strings
  * represented by the state machine.
  */
  traverse(e, r = 0, i = /* @__PURE__ */ new Set()) {
    if (i.has(r)) return;
    i.add(r);
    let { nClasses: n, stateArray: a, entryTable: s } = this.stateTable, o = a.getItem(r);
    for (let c = 4; c < n; c++) {
      let l = o[c], f = s.getItem(l);
      for (let u of this.lookupTable.glyphsForValue(c))
        e.enter && e.enter(u, f), f.newState !== 0 && this.traverse(e, f.newState, i), e.exit && e.exit(u, f);
    }
  }
  constructor(e) {
    this.stateTable = e, this.lookupTable = new Ea(e.classTable);
  }
}
const tw = 32768, rw = 8192, iw = 15, O5 = 32768, nw = 32768, aw = 8192, sw = 2147483648, ow = 1073741824, lw = 1073741823, D5 = 4194304, cw = 2048, fw = 1024, uw = 992, hw = 31;
class ng {
  // Processes an array of glyphs and applies the specified features
  // Features should be in the form of {featureType:{featureSetting:boolean}}
  process(e, r = {}) {
    for (let n of this.morx.chains) {
      let a = n.defaultFlags;
      for (let s of n.features) {
        let o;
        (o = r[s.featureType]) && (o[s.featureSetting] ? (a &= s.disableFlags, a |= s.enableFlags) : o[s.featureSetting] === !1 && (a |= ~s.disableFlags, a &= ~s.enableFlags));
      }
      for (let s of n.subtables) s.subFeatureFlags & a && this.processSubtable(s, e);
    }
    let i = e.length - 1;
    for (; i >= 0; )
      e[i].id === 65535 && e.splice(i, 1), i--;
    return e;
  }
  processSubtable(e, r) {
    if (this.subtable = e, this.glyphs = r, this.subtable.type === 4) {
      this.processNoncontextualSubstitutions(this.subtable, this.glyphs);
      return;
    }
    this.ligatureStack = [], this.markedGlyph = null, this.firstGlyph = null, this.lastGlyph = null, this.markedIndex = null;
    let i = this.getStateMachine(e), n = this.getProcessor(), a = !!(this.subtable.coverage & D5);
    return i.process(this.glyphs, a, n);
  }
  getStateMachine(e) {
    return new ew(e.table.stateTable);
  }
  getProcessor() {
    switch (this.subtable.type) {
      case 0:
        return this.processIndicRearragement;
      case 1:
        return this.processContextualSubstitution;
      case 2:
        return this.processLigature;
      case 4:
        return this.processNoncontextualSubstitutions;
      case 5:
        return this.processGlyphInsertion;
      default:
        throw new Error(`Invalid morx subtable type: ${this.subtable.type}`);
    }
  }
  processIndicRearragement(e, r, i) {
    r.flags & tw && (this.firstGlyph = i), r.flags & rw && (this.lastGlyph = i), dw(this.glyphs, r.flags & iw, this.firstGlyph, this.lastGlyph);
  }
  processContextualSubstitution(e, r, i) {
    let n = this.subtable.table.substitutionTable.items;
    if (r.markIndex !== 65535) {
      let s = n.getItem(r.markIndex), o = new Ea(s);
      e = this.glyphs[this.markedGlyph];
      var a = o.lookup(e.id);
      a && (this.glyphs[this.markedGlyph] = this.font.getGlyph(a, e.codePoints));
    }
    if (r.currentIndex !== 65535) {
      let s = n.getItem(r.currentIndex), o = new Ea(s);
      e = this.glyphs[i];
      var a = o.lookup(e.id);
      a && (this.glyphs[i] = this.font.getGlyph(a, e.codePoints));
    }
    r.flags & O5 && (this.markedGlyph = i);
  }
  processLigature(e, r, i) {
    if (r.flags & nw && this.ligatureStack.push(i), r.flags & aw) {
      let n = this.subtable.table.ligatureActions, a = this.subtable.table.components, s = this.subtable.table.ligatureList, o = r.action, c = !1, l = 0, f = [], u = [];
      for (; !c; ) {
        let h = this.ligatureStack.pop();
        f.unshift(...this.glyphs[h].codePoints);
        let d = n.getItem(o++);
        c = !!(d & sw);
        let p = !!(d & ow), m = (d & lw) << 2 >> 2;
        m += this.glyphs[h].id;
        let C = a.getItem(m);
        if (l += C, c || p) {
          let A = s.getItem(l);
          this.glyphs[h] = this.font.getGlyph(A, f), u.push(h), l = 0, f = [];
        } else this.glyphs[h] = this.font.getGlyph(65535);
      }
      this.ligatureStack.push(...u);
    }
  }
  processNoncontextualSubstitutions(e, r, i) {
    let n = new Ea(e.table.lookupTable);
    for (i = 0; i < r.length; i++) {
      let a = r[i];
      if (a.id !== 65535) {
        let s = n.lookup(a.id);
        s && (r[i] = this.font.getGlyph(s, a.codePoints));
      }
    }
  }
  _insertGlyphs(e, r, i, n) {
    let a = [];
    for (; i--; ) {
      let s = this.subtable.table.insertionActions.getItem(r++);
      a.push(this.font.getGlyph(s));
    }
    n || e++, this.glyphs.splice(e, 0, ...a);
  }
  processGlyphInsertion(e, r, i) {
    if (r.flags & O5 && (this.markedIndex = i), r.markedInsertIndex !== 65535) {
      let n = (r.flags & hw) >>> 5, a = !!(r.flags & fw);
      this._insertGlyphs(this.markedIndex, r.markedInsertIndex, n, a);
    }
    if (r.currentInsertIndex !== 65535) {
      let n = (r.flags & uw) >>> 5, a = !!(r.flags & cw);
      this._insertGlyphs(i, r.currentInsertIndex, n, a);
    }
  }
  getSupportedFeatures() {
    let e = [];
    for (let r of this.morx.chains) for (let i of r.features) e.push([
      i.featureType,
      i.featureSetting
    ]);
    return e;
  }
  generateInputs(e) {
    return this.inputCache || this.generateInputCache(), this.inputCache[e] || [];
  }
  generateInputCache() {
    this.inputCache = {};
    for (let e of this.morx.chains) {
      let r = e.defaultFlags;
      for (let i of e.subtables) i.subFeatureFlags & r && this.generateInputsForSubtable(i);
    }
  }
  generateInputsForSubtable(e) {
    if (e.type !== 2) return;
    if (!!(e.coverage & D5)) throw new Error("Reverse subtable, not supported.");
    this.subtable = e, this.ligatureStack = [];
    let i = this.getStateMachine(e), n = this.getProcessor(), a = [], s = [];
    this.glyphs = [], i.traverse({
      enter: (o, c) => {
        let l = this.glyphs;
        s.push({
          glyphs: l.slice(),
          ligatureStack: this.ligatureStack.slice()
        });
        let f = this.font.getGlyph(o);
        a.push(f), l.push(a[a.length - 1]), n(l[l.length - 1], c, l.length - 1);
        let u = 0, h = 0;
        for (let d = 0; d < l.length && u <= 1; d++) l[d].id !== 65535 && (u++, h = l[d].id);
        if (u === 1) {
          let d = a.map((m) => m.id), p = this.inputCache[h];
          p ? p.push(d) : this.inputCache[h] = [
            d
          ];
        }
      },
      exit: () => {
        ({ glyphs: this.glyphs, ligatureStack: this.ligatureStack } = s.pop()), a.pop();
      }
    });
  }
  constructor(e) {
    this.processIndicRearragement = this.processIndicRearragement.bind(this), this.processContextualSubstitution = this.processContextualSubstitution.bind(this), this.processLigature = this.processLigature.bind(this), this.processNoncontextualSubstitutions = this.processNoncontextualSubstitutions.bind(this), this.processGlyphInsertion = this.processGlyphInsertion.bind(this), this.font = e, this.morx = e.morx, this.inputCache = null;
  }
}
D0([
  B0
], ng.prototype, "getStateMachine", null);
function L0(t, e, r, i = !1, n = !1) {
  let a = t.splice(r[0] - (r[1] - 1), r[1]);
  n && a.reverse();
  let s = t.splice(e[0], e[1], ...a);
  return i && s.reverse(), t.splice(r[0] - (e[1] - 1), 0, ...s), t;
}
function dw(t, e, r, i) {
  switch (e) {
    case 0:
      return t;
    case 1:
      return L0(t, [
        r,
        1
      ], [
        i,
        0
      ]);
    case 2:
      return L0(t, [
        r,
        0
      ], [
        i,
        1
      ]);
    case 3:
      return L0(t, [
        r,
        1
      ], [
        i,
        1
      ]);
    case 4:
      return L0(t, [
        r,
        2
      ], [
        i,
        0
      ]);
    case 5:
      return L0(t, [
        r,
        2
      ], [
        i,
        0
      ], !0, !1);
    case 6:
      return L0(t, [
        r,
        0
      ], [
        i,
        2
      ]);
    case 7:
      return L0(t, [
        r,
        0
      ], [
        i,
        2
      ], !1, !0);
    case 8:
      return L0(t, [
        r,
        1
      ], [
        i,
        2
      ]);
    case 9:
      return L0(t, [
        r,
        1
      ], [
        i,
        2
      ], !1, !0);
    case 10:
      return L0(t, [
        r,
        2
      ], [
        i,
        1
      ]);
    case 11:
      return L0(t, [
        r,
        2
      ], [
        i,
        1
      ], !0, !1);
    case 12:
      return L0(t, [
        r,
        2
      ], [
        i,
        2
      ]);
    case 13:
      return L0(t, [
        r,
        2
      ], [
        i,
        2
      ], !0, !1);
    case 14:
      return L0(t, [
        r,
        2
      ], [
        i,
        2
      ], !1, !0);
    case 15:
      return L0(t, [
        r,
        2
      ], [
        i,
        2
      ], !0, !0);
    default:
      throw new Error(`Unknown verb: ${e}`);
  }
}
class gw {
  substitute(e) {
    e.direction === "rtl" && e.glyphs.reverse(), this.morxProcessor.process(e.glyphs, X9(e.features));
  }
  getAvailableFeatures(e, r) {
    return K9(this.morxProcessor.getSupportedFeatures());
  }
  stringsForGlyph(e) {
    let r = this.morxProcessor.generateInputs(e), i = /* @__PURE__ */ new Set();
    for (let n of r) this._addStrings(n, 0, i, "");
    return i;
  }
  _addStrings(e, r, i, n) {
    let a = this.font._cmapProcessor.codePointsForGlyph(e[r]);
    for (let s of a) {
      let o = n + String.fromCodePoint(s);
      r < e.length - 1 ? this._addStrings(e, r + 1, i, o) : i.add(o);
    }
  }
  constructor(e) {
    this.font = e, this.morxProcessor = new ng(e), this.fallbackPosition = !1;
  }
}
class pw {
  /**
  * Adds the given features to the last stage.
  * Ignores features that have already been applied.
  */
  _addFeatures(e, r) {
    let i = this.stages.length - 1, n = this.stages[i];
    for (let a of e) this.allFeatures[a] == null && (n.push(a), this.allFeatures[a] = i, r && (this.globalFeatures[a] = !0));
  }
  /**
  * Add features to the last stage
  */
  add(e, r = !0) {
    if (this.stages.length === 0 && this.stages.push([]), typeof e == "string" && (e = [
      e
    ]), Array.isArray(e)) this._addFeatures(e, r);
    else if (typeof e == "object")
      this._addFeatures(e.global || [], !0), this._addFeatures(e.local || [], !1);
    else throw new Error("Unsupported argument to ShapingPlan#add");
  }
  /**
  * Add a new stage
  */
  addStage(e, r) {
    typeof e == "function" ? this.stages.push(e, []) : (this.stages.push([]), this.add(e, r));
  }
  setFeatureOverrides(e) {
    if (Array.isArray(e)) this.add(e);
    else if (typeof e == "object") {
      for (let r in e)
        if (e[r]) this.add(r);
        else if (this.allFeatures[r] != null) {
          let i = this.stages[this.allFeatures[r]];
          i.splice(i.indexOf(r), 1), delete this.allFeatures[r], delete this.globalFeatures[r];
        }
    }
  }
  /**
  * Assigns the global features to the given glyphs
  */
  assignGlobalFeatures(e) {
    for (let r of e) for (let i in this.globalFeatures) r.features[i] = !0;
  }
  /**
  * Executes the planned stages using the given OTProcessor
  */
  process(e, r, i) {
    for (let n of this.stages)
      typeof n == "function" ? i || n(this.font, r, this) : n.length > 0 && e.applyFeatures(n, r, i);
  }
  constructor(e, r, i) {
    this.font = e, this.script = r, this.direction = i, this.stages = [], this.globalFeatures = {}, this.allFeatures = {};
  }
}
const vw = [
  "rvrn"
], mw = [
  "ccmp",
  "locl",
  "rlig",
  "mark",
  "mkmk"
], bw = [
  "frac",
  "numr",
  "dnom"
], xw = [
  "calt",
  "clig",
  "liga",
  "rclt",
  "curs",
  "kern"
], ww = {
  ltr: [
    "ltra",
    "ltrm"
  ],
  rtl: [
    "rtla",
    "rtlm"
  ]
};
class ri {
  static plan(e, r, i) {
    this.planPreprocessing(e), this.planFeatures(e), this.planPostprocessing(e, i), e.assignGlobalFeatures(r), this.assignFeatures(e, r);
  }
  static planPreprocessing(e) {
    e.add({
      global: [
        ...vw,
        ...ww[e.direction]
      ],
      local: bw
    });
  }
  static planFeatures(e) {
  }
  static planPostprocessing(e, r) {
    e.add([
      ...mw,
      ...xw
    ]), e.setFeatureOverrides(r);
  }
  static assignFeatures(e, r) {
    for (let i = 0; i < r.length; i++) {
      let n = r[i];
      if (n.codePoints[0] === 8260) {
        let a = i, s = i + 1;
        for (; a > 0 && Qh(r[a - 1].codePoints[0]); )
          r[a - 1].features.numr = !0, r[a - 1].features.frac = !0, a--;
        for (; s < r.length && Qh(r[s].codePoints[0]); )
          r[s].features.dnom = !0, r[s].features.frac = !0, s++;
        n.features.frac = !0, i = s - 1;
      }
    }
  }
}
K0(ri, "zeroMarkWidths", "AFTER_GPOS");
const yw = new es(Vf("APABAAAAAAAAOAAAAf0BAv7tmi1MxDAUx7vtvjhAgcDgkEgEAnmXEBIMCYaEcygEiqBQ4FAkCE4ikUgMiiBJSAgSiUQSDMn9L9eSl6bddddug9t7yS/trevre+3r27pcNxZiG+yCfdCVv/9LeQxOwRm4AJegD27ALbgD9+ABPJF+z+BN/h7yDj5k/VOWX6SdmU5+wLWknggxDxaS8u0qiiX4uiz9XamQ3wzDMAzDMAzDMAzDVI/h959V/v7BMAzDMAzDMLlyNTNiMSdewVxbiA44B4/guz1qW58VYlMI0WsJ0W+N6kXw0spvPtdwhtkwnGM6uLaV4Xyzg3v3PM9DPfQ/sOg4xPWjipy31P8LTqbU304c/cLCUmWJLNB2Uz2U1KTeRKNmKHVMfbJC+/0loTZRH/W5cvEvBJPMbREkWt3FD1NcqXZBSpuE2Ad0PBehPtNrPtIEdYP+hiRt/V1jIiE69X4NT/uVZI3PUHE9bm5M7ePGdZWy951v7Nn6j8v1WWKP3mt6ttnsigx6VN7Vc0VomSSGqW2mGNP1muZPl7LfjNUaKNFtDGVf2fvE9O7VlBS5j333c5p/eeoOqcs1R/hIqDWLJ7TTlksirVT1SI7l8k4Yp+g3jafGcrU1RM6l9th80XOpnlN97bDNY4i4s61B0Si/ipa0uHMl6zqEjlFfCZm/TM8KmzQDjmuTAQ==")), B5 = [
  "isol",
  "fina",
  "fin2",
  "fin3",
  "medi",
  "med2",
  "init"
], ef = {
  Non_Joining: 0,
  Transparent: 6
}, t0 = "isol", Or = "fina", dc = "fin2", _w = "fin3", Rs = "medi", Ps = "med2", Ls = "init", Le = null, Aw = [
  //   Non_Joining,        Left_Joining,       Right_Joining,     Dual_Joining,           ALAPH,            DALATH RISH
  // State 0: prev was U,  not willing to join.
  [
    [
      Le,
      Le,
      0
    ],
    [
      Le,
      t0,
      2
    ],
    [
      Le,
      t0,
      1
    ],
    [
      Le,
      t0,
      2
    ],
    [
      Le,
      t0,
      1
    ],
    [
      Le,
      t0,
      6
    ]
  ],
  // State 1: prev was R or ISOL/ALAPH,  not willing to join.
  [
    [
      Le,
      Le,
      0
    ],
    [
      Le,
      t0,
      2
    ],
    [
      Le,
      t0,
      1
    ],
    [
      Le,
      t0,
      2
    ],
    [
      Le,
      dc,
      5
    ],
    [
      Le,
      t0,
      6
    ]
  ],
  // State 2: prev was D/L in ISOL form,  willing to join.
  [
    [
      Le,
      Le,
      0
    ],
    [
      Le,
      t0,
      2
    ],
    [
      Ls,
      Or,
      1
    ],
    [
      Ls,
      Or,
      3
    ],
    [
      Ls,
      Or,
      4
    ],
    [
      Ls,
      Or,
      6
    ]
  ],
  // State 3: prev was D in FINA form,  willing to join.
  [
    [
      Le,
      Le,
      0
    ],
    [
      Le,
      t0,
      2
    ],
    [
      Rs,
      Or,
      1
    ],
    [
      Rs,
      Or,
      3
    ],
    [
      Rs,
      Or,
      4
    ],
    [
      Rs,
      Or,
      6
    ]
  ],
  // State 4: prev was FINA ALAPH,  not willing to join.
  [
    [
      Le,
      Le,
      0
    ],
    [
      Le,
      t0,
      2
    ],
    [
      Ps,
      t0,
      1
    ],
    [
      Ps,
      t0,
      2
    ],
    [
      Ps,
      dc,
      5
    ],
    [
      Ps,
      t0,
      6
    ]
  ],
  // State 5: prev was FIN2/FIN3 ALAPH,  not willing to join.
  [
    [
      Le,
      Le,
      0
    ],
    [
      Le,
      t0,
      2
    ],
    [
      t0,
      t0,
      1
    ],
    [
      t0,
      t0,
      2
    ],
    [
      t0,
      dc,
      5
    ],
    [
      t0,
      t0,
      6
    ]
  ],
  // State 6: prev was DALATH/RISH,  not willing to join.
  [
    [
      Le,
      Le,
      0
    ],
    [
      Le,
      t0,
      2
    ],
    [
      Le,
      t0,
      1
    ],
    [
      Le,
      t0,
      2
    ],
    [
      Le,
      _w,
      5
    ],
    [
      Le,
      t0,
      6
    ]
  ]
];
class Dr extends ri {
  static planFeatures(e) {
    e.add([
      "ccmp",
      "locl"
    ]);
    for (let r = 0; r < B5.length; r++) {
      let i = B5[r];
      e.addStage(i, !1);
    }
    e.addStage("mset");
  }
  static assignFeatures(e, r) {
    super.assignFeatures(e, r);
    let i = -1, n = 0, a = [];
    for (let o = 0; o < r.length; o++) {
      let c, l;
      var s = r[o];
      let f = Ew(s.codePoints[0]);
      if (f === ef.Transparent) {
        a[o] = Le;
        continue;
      }
      [l, c, n] = Aw[n][f], l !== Le && i !== -1 && (a[i] = l), a[o] = c, i = o;
    }
    for (let o = 0; o < r.length; o++) {
      let c;
      var s = r[o];
      (c = a[o]) && (s.features[c] = !0);
    }
  }
}
function Ew(t) {
  let e = yw.get(t);
  if (e) return e - 1;
  let r = Zo(t);
  return r === "Mn" || r === "Me" || r === "Cf" ? ef.Transparent : ef.Non_Joining;
}
class Cw {
  reset(e = {}, r = 0) {
    this.options = e, this.flags = e.flags || {}, this.markAttachmentType = e.markAttachmentType || 0, this.index = r;
  }
  get cur() {
    return this.glyphs[this.index] || null;
  }
  shouldIgnore(e) {
    return this.flags.ignoreMarks && e.isMark || this.flags.ignoreBaseGlyphs && e.isBase || this.flags.ignoreLigatures && e.isLigature || this.markAttachmentType && e.isMark && e.markAttachmentType !== this.markAttachmentType;
  }
  move(e) {
    for (this.index += e; 0 <= this.index && this.index < this.glyphs.length && this.shouldIgnore(this.glyphs[this.index]); ) this.index += e;
    return 0 > this.index || this.index >= this.glyphs.length ? null : this.glyphs[this.index];
  }
  next() {
    return this.move(1);
  }
  prev() {
    return this.move(-1);
  }
  peek(e = 1) {
    let r = this.index, i = this.increment(e);
    return this.index = r, i;
  }
  peekIndex(e = 1) {
    let r = this.index;
    this.increment(e);
    let i = this.index;
    return this.index = r, i;
  }
  increment(e = 1) {
    let r = e < 0 ? -1 : 1;
    for (e = Math.abs(e); e--; ) this.move(r);
    return this.glyphs[this.index];
  }
  constructor(e, r) {
    this.glyphs = e, this.reset(r);
  }
}
const Sw = [
  "DFLT",
  "dflt",
  "latn"
];
class Eo {
  findScript(e) {
    if (this.table.scriptList == null) return null;
    Array.isArray(e) || (e = [
      e
    ]);
    for (let r of e) for (let i of this.table.scriptList)
      if (i.tag === r) return i;
    return null;
  }
  selectScript(e, r, i) {
    let n = !1, a;
    if (!this.script || e !== this.scriptTag) {
      if (a = this.findScript(e), a || (a = this.findScript(Sw)), !a) return this.scriptTag;
      this.scriptTag = a.tag, this.script = a.script, this.language = null, this.languageTag = null, n = !0;
    }
    if ((!i || i !== this.direction) && (this.direction = i || ig(e)), r && r.length < 4 && (r += " ".repeat(4 - r.length)), !r || r !== this.languageTag) {
      this.language = null;
      for (let s of this.script.langSysRecords) if (s.tag === r) {
        this.language = s.langSys, this.languageTag = s.tag;
        break;
      }
      this.language || (this.language = this.script.defaultLangSys, this.languageTag = null), n = !0;
    }
    if (n && (this.features = {}, this.language))
      for (let s of this.language.featureIndexes) {
        let o = this.table.featureList[s], c = this.substituteFeatureForVariations(s);
        this.features[o.tag] = c || o.feature;
      }
    return this.scriptTag;
  }
  lookupsForFeatures(e = [], r) {
    let i = [];
    for (let n of e) {
      let a = this.features[n];
      if (a)
        for (let s of a.lookupListIndexes)
          r && r.indexOf(s) !== -1 || i.push({
            feature: n,
            index: s,
            lookup: this.table.lookupList.get(s)
          });
    }
    return i.sort((n, a) => n.index - a.index), i;
  }
  substituteFeatureForVariations(e) {
    if (this.variationsIndex === -1) return null;
    let i = this.table.featureVariations.featureVariationRecords[this.variationsIndex].featureTableSubstitution.substitutions;
    for (let n of i)
      if (n.featureIndex === e) return n.alternateFeatureTable;
    return null;
  }
  findVariationsIndex(e) {
    let r = this.table.featureVariations;
    if (!r) return -1;
    let i = r.featureVariationRecords;
    for (let n = 0; n < i.length; n++) {
      let a = i[n].conditionSet.conditionTable;
      if (this.variationConditionsMatch(a, e)) return n;
    }
    return -1;
  }
  variationConditionsMatch(e, r) {
    return e.every((i) => {
      let n = i.axisIndex < r.length ? r[i.axisIndex] : 0;
      return i.filterRangeMinValue <= n && n <= i.filterRangeMaxValue;
    });
  }
  applyFeatures(e, r, i) {
    let n = this.lookupsForFeatures(e);
    this.applyLookups(n, r, i);
  }
  applyLookups(e, r, i) {
    this.glyphs = r, this.positions = i, this.glyphIterator = new Cw(r);
    for (let { feature: n, lookup: a } of e)
      for (this.currentFeature = n, this.glyphIterator.reset(a.flags); this.glyphIterator.index < r.length; ) {
        if (!(n in this.glyphIterator.cur.features)) {
          this.glyphIterator.next();
          continue;
        }
        for (let s of a.subTables)
          if (this.applyLookup(a.lookupType, s)) break;
        this.glyphIterator.next();
      }
  }
  applyLookup(e, r) {
    throw new Error("applyLookup must be implemented by subclasses");
  }
  applyLookupList(e) {
    let r = this.glyphIterator.options, i = this.glyphIterator.index;
    for (let n of e) {
      this.glyphIterator.reset(r, i), this.glyphIterator.increment(n.sequenceIndex);
      let a = this.table.lookupList.get(n.lookupListIndex);
      this.glyphIterator.reset(a.flags, this.glyphIterator.index);
      for (let s of a.subTables)
        if (this.applyLookup(a.lookupType, s)) break;
    }
    return this.glyphIterator.reset(r, i), !0;
  }
  coverageIndex(e, r) {
    switch (r == null && (r = this.glyphIterator.cur.id), e.version) {
      case 1:
        return e.glyphs.indexOf(r);
      case 2:
        for (let i of e.rangeRecords)
          if (i.start <= r && r <= i.end) return i.startCoverageIndex + r - i.start;
        break;
    }
    return -1;
  }
  match(e, r, i, n) {
    let a = this.glyphIterator.index, s = this.glyphIterator.increment(e), o = 0;
    for (; o < r.length && s && i(r[o], s); )
      n && n.push(this.glyphIterator.index), o++, s = this.glyphIterator.next();
    return this.glyphIterator.index = a, o < r.length ? !1 : n || !0;
  }
  sequenceMatches(e, r) {
    return this.match(e, r, (i, n) => i === n.id);
  }
  sequenceMatchIndices(e, r) {
    return this.match(e, r, (i, n) => this.currentFeature in n.features ? i === n.id : !1, []);
  }
  coverageSequenceMatches(e, r) {
    return this.match(e, r, (i, n) => this.coverageIndex(i, n.id) >= 0);
  }
  getClassID(e, r) {
    switch (r.version) {
      case 1:
        let i = e - r.startGlyph;
        if (i >= 0 && i < r.classValueArray.length) return r.classValueArray[i];
        break;
      case 2:
        for (let n of r.classRangeRecord)
          if (n.start <= e && e <= n.end) return n.class;
        break;
    }
    return 0;
  }
  classSequenceMatches(e, r, i) {
    return this.match(e, r, (n, a) => n === this.getClassID(a.id, i));
  }
  applyContext(e) {
    let r, i;
    switch (e.version) {
      case 1:
        if (r = this.coverageIndex(e.coverage), r === -1) return !1;
        i = e.ruleSets[r];
        for (let n of i)
          if (this.sequenceMatches(1, n.input)) return this.applyLookupList(n.lookupRecords);
        break;
      case 2:
        if (this.coverageIndex(e.coverage) === -1 || (r = this.getClassID(this.glyphIterator.cur.id, e.classDef), r === -1)) return !1;
        i = e.classSet[r];
        for (let n of i)
          if (this.classSequenceMatches(1, n.classes, e.classDef)) return this.applyLookupList(n.lookupRecords);
        break;
      case 3:
        if (this.coverageSequenceMatches(0, e.coverages)) return this.applyLookupList(e.lookupRecords);
        break;
    }
    return !1;
  }
  applyChainingContext(e) {
    let r;
    switch (e.version) {
      case 1:
        if (r = this.coverageIndex(e.coverage), r === -1) return !1;
        let i = e.chainRuleSets[r];
        for (let a of i)
          if (this.sequenceMatches(-a.backtrack.length, a.backtrack) && this.sequenceMatches(1, a.input) && this.sequenceMatches(1 + a.input.length, a.lookahead)) return this.applyLookupList(a.lookupRecords);
        break;
      case 2:
        if (this.coverageIndex(e.coverage) === -1) return !1;
        r = this.getClassID(this.glyphIterator.cur.id, e.inputClassDef);
        let n = e.chainClassSet[r];
        if (!n) return !1;
        for (let a of n)
          if (this.classSequenceMatches(-a.backtrack.length, a.backtrack, e.backtrackClassDef) && this.classSequenceMatches(1, a.input, e.inputClassDef) && this.classSequenceMatches(1 + a.input.length, a.lookahead, e.lookaheadClassDef)) return this.applyLookupList(a.lookupRecords);
        break;
      case 3:
        if (this.coverageSequenceMatches(-e.backtrackGlyphCount, e.backtrackCoverage) && this.coverageSequenceMatches(0, e.inputCoverage) && this.coverageSequenceMatches(e.inputGlyphCount, e.lookaheadCoverage)) return this.applyLookupList(e.lookupRecords);
        break;
    }
    return !1;
  }
  constructor(e, r) {
    this.font = e, this.table = r, this.script = null, this.scriptTag = null, this.language = null, this.languageTag = null, this.features = {}, this.lookups = {}, this.variationsIndex = e._variationProcessor ? this.findVariationsIndex(e._variationProcessor.normalizedCoords) : -1, this.selectScript(), this.glyphs = [], this.positions = [], this.ligatureID = 1, this.currentFeature = null;
  }
}
class kt {
  get id() {
    return this._id;
  }
  set id(e) {
    this._id = e, this.substituted = !0;
    let r = this._font.GDEF;
    if (r && r.glyphClassDef) {
      let i = Eo.prototype.getClassID(e, r.glyphClassDef);
      this.isBase = i === 1, this.isLigature = i === 2, this.isMark = i === 3, this.markAttachmentType = r.markAttachClassDef ? Eo.prototype.getClassID(e, r.markAttachClassDef) : 0;
    } else
      this.isMark = this.codePoints.length > 0 && this.codePoints.every(T4), this.isBase = !this.isMark, this.isLigature = this.codePoints.length > 1, this.markAttachmentType = 0;
  }
  copy() {
    return new kt(this._font, this.id, this.codePoints, this.features);
  }
  constructor(e, r, i = [], n) {
    if (this._font = e, this.codePoints = i, this.id = r, this.features = {}, Array.isArray(n)) for (let a = 0; a < n.length; a++) {
      let s = n[a];
      this.features[s] = !0;
    }
    else typeof n == "object" && Object.assign(this.features, n);
    this.ligatureID = null, this.ligatureComponent = null, this.isLigated = !1, this.cursiveAttachment = null, this.markAttachment = null, this.shaperInfo = null, this.substituted = !1, this.isMultiplied = !1;
  }
}
class ag extends ri {
  static planFeatures(e) {
    e.add([
      "ljmo",
      "vjmo",
      "tjmo"
    ], !1);
  }
  static assignFeatures(e, r) {
    let i = 0, n = 0;
    for (; n < r.length; ) {
      let a, o = r[n].codePoints[0], c = ko(o);
      switch ([a, i] = qw[i][c], a) {
        case pr:
          e.font.hasGlyphForCodePoint(o) || (n = lg(r, n, e.font));
          break;
        case tf:
          n = Vw(r, n, e.font);
          break;
        case rf:
          Gw(r, n, e.font);
          break;
        case nf:
          n = Zw(r, n, e.font);
          break;
      }
      n++;
    }
  }
}
K0(ag, "zeroMarkWidths", "NONE");
const In = 44032, sg = 55204, Tw = sg - In + 1, Qo = 4352, el = 4449, Oi = 4519, kw = 19, Co = 21, Ma = 28, Fw = Qo + kw - 1, Ow = el + Co - 1, Dw = Oi + Ma - 1, I5 = 9676, Bw = (t) => 4352 <= t && t <= 4447 || 43360 <= t && t <= 43388, Iw = (t) => 4448 <= t && t <= 4519 || 55216 <= t && t <= 55238, Rw = (t) => 4520 <= t && t <= 4607 || 55243 <= t && t <= 55291, Pw = (t) => 12334 <= t && t <= 12335, Lw = (t) => In <= t && t <= sg, Nw = (t) => t - In < Tw && (t - In) % Ma === 0, Mw = (t) => Qo <= t && t <= Fw, Uw = (t) => el <= t && t <= Ow, $w = (t) => 1 <= t && t <= Dw, zw = 0, Ww = 1, So = 2, Gf = 3, To = 4, og = 5, Hw = 6;
function ko(t) {
  return Bw(t) ? Ww : Iw(t) ? So : Rw(t) ? Gf : Nw(t) ? To : Lw(t) ? og : Pw(t) ? Hw : zw;
}
const G0 = 0, pr = 1, tf = 2, rf = 4, nf = 5, qw = [
  //       X                 L                 V                T                  LV                LVT               M
  // State 0: start state
  [
    [
      G0,
      0
    ],
    [
      G0,
      1
    ],
    [
      G0,
      0
    ],
    [
      G0,
      0
    ],
    [
      pr,
      2
    ],
    [
      pr,
      3
    ],
    [
      nf,
      0
    ]
  ],
  // State 1: <L>
  [
    [
      G0,
      0
    ],
    [
      G0,
      1
    ],
    [
      tf,
      2
    ],
    [
      G0,
      0
    ],
    [
      pr,
      2
    ],
    [
      pr,
      3
    ],
    [
      nf,
      0
    ]
  ],
  // State 2: <L,V> or <LV>
  [
    [
      G0,
      0
    ],
    [
      G0,
      1
    ],
    [
      G0,
      0
    ],
    [
      tf,
      3
    ],
    [
      pr,
      2
    ],
    [
      pr,
      3
    ],
    [
      rf,
      0
    ]
  ],
  // State 3: <L,V,T> or <LVT>
  [
    [
      G0,
      0
    ],
    [
      G0,
      1
    ],
    [
      G0,
      0
    ],
    [
      G0,
      0
    ],
    [
      pr,
      2
    ],
    [
      pr,
      3
    ],
    [
      rf,
      0
    ]
  ]
];
function Ca(t, e, r) {
  return new kt(t, t.glyphForCodePoint(e).id, [
    e
  ], r);
}
function lg(t, e, r) {
  let i = t[e], a = i.codePoints[0] - In, s = Oi + a % Ma;
  a = a / Ma | 0;
  let o = Qo + a / Co | 0, c = el + a % Co;
  if (!r.hasGlyphForCodePoint(o) || !r.hasGlyphForCodePoint(c) || s !== Oi && !r.hasGlyphForCodePoint(s)) return e;
  let l = Ca(r, o, i.features);
  l.features.ljmo = !0;
  let f = Ca(r, c, i.features);
  f.features.vjmo = !0;
  let u = [
    l,
    f
  ];
  if (s > Oi) {
    let h = Ca(r, s, i.features);
    h.features.tjmo = !0, u.push(h);
  }
  return t.splice(e, 1, ...u), e + u.length - 1;
}
function Vw(t, e, r) {
  let i = t[e], n = t[e].codePoints[0], a = ko(n), s = t[e - 1].codePoints[0], o = ko(s), c, l, f, u;
  if (o === To && a === Gf)
    c = s, u = i;
  else {
    a === So ? (l = t[e - 1], f = i) : (l = t[e - 2], f = t[e - 1], u = i);
    let d = l.codePoints[0], p = f.codePoints[0];
    Mw(d) && Uw(p) && (c = In + ((d - Qo) * Co + (p - el)) * Ma);
  }
  let h = u && u.codePoints[0] || Oi;
  if (c != null && (h === Oi || $w(h))) {
    let d = c + (h - Oi);
    if (r.hasGlyphForCodePoint(d)) {
      let p = o === So ? 3 : 2;
      return t.splice(e - p + 1, p, Ca(r, d, i.features)), e - p + 1;
    }
  }
  return l && (l.features.ljmo = !0), f && (f.features.vjmo = !0), u && (u.features.tjmo = !0), o === To ? (lg(t, e - 1, r), e + 1) : e;
}
function Yw(t) {
  switch (ko(t)) {
    case To:
    case og:
      return 1;
    case So:
      return 2;
    case Gf:
      return 3;
  }
}
function Gw(t, e, r) {
  let i = t[e], n = t[e].codePoints[0];
  if (r.glyphForCodePoint(n).advanceWidth === 0) return;
  let a = t[e - 1].codePoints[0], s = Yw(a);
  return t.splice(e, 1), t.splice(e - s, 0, i);
}
function Zw(t, e, r) {
  let i = t[e], n = t[e].codePoints[0];
  if (r.hasGlyphForCodePoint(I5)) {
    let a = Ca(r, I5, i.features), s = r.glyphForCodePoint(n).advanceWidth === 0 ? e : e + 1;
    t.splice(s, 0, a), e++;
  }
  return e;
}
var cg = {};
cg = JSON.parse('{"stateTable":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,14,15,16,17],[0,0,0,18,19,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,28,29,30,31,32,33,0,34,0,0,35,36,0,0,37,0],[0,0,0,38,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,39,0,0,0,40,41,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,12,43,0,0,0,0],[0,0,0,0,43,44,44,8,9,0,0,0,0,0,43,0,0,0,0],[0,0,0,45,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,50,0,0,51,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,0],[0,0,0,53,54,55,56,57,58,0,59,0,0,60,61,0,0,62,0],[0,0,0,4,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,63,64,0,0,40,41,0,9,0,10,0,0,0,42,0,63,0,0],[0,2,3,4,5,6,7,8,9,0,10,11,11,12,13,0,2,16,0],[0,0,0,18,65,20,21,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,0,0],[0,0,0,69,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,73,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,75,0,0,0,76,77,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,25,79,0,0,0,0],[0,0,0,18,19,20,74,22,23,0,24,0,0,25,26,0,0,27,0],[0,0,0,81,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,86,0,0,87,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,88,0,0,0,0,0,0,0,0],[0,0,0,18,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,89,90,0,0,76,77,0,23,0,24,0,0,0,78,0,89,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,0,0],[0,0,0,94,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,96,0,0,0,97,98,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,35,100,0,0,0,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,102,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,107,0,0,108,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,0],[0,0,0,28,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,110,111,0,0,97,98,0,33,0,34,0,0,0,99,0,110,0,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,0,0],[0,0,0,0,5,7,7,8,9,0,10,0,0,0,13,0,0,16,0],[0,0,0,115,116,117,118,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,39,0,122,0,123,123,8,9,0,10,0,0,0,42,0,39,0,0],[0,124,64,0,0,0,0,0,0,0,0,0,0,0,0,0,124,0,0],[0,39,0,0,0,121,125,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,126,126,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,46,47,48,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,47,47,49,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,128,127,127,49,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,129,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,50,0,0,0,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,134,0,0,0,0,0,0,0,0],[0,0,0,135,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,136,0,0,0,137,138,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,60,140,0,0,0,0],[0,0,0,0,140,141,141,57,58,0,0,0,0,0,140,0,0,0,0],[0,0,0,142,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,147,0,0,148,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,149,0,0,0,0,0,0,0,0],[0,0,0,53,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,150,151,0,0,137,138,0,58,0,59,0,0,0,139,0,150,0,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,0,0],[0,0,0,155,116,156,157,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,0,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,75,3,4,5,159,160,8,161,0,162,0,11,12,163,0,75,16,0],[0,0,0,0,0,40,164,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,0,165,0,0,0,0],[0,124,64,0,0,40,164,0,9,0,10,0,0,0,42,0,124,0,0],[0,0,0,0,0,70,70,0,71,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,71,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,167,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,168,0,0,0,0,0,0,0,0],[0,0,0,0,19,74,74,22,23,0,24,0,0,0,26,0,0,27,0],[0,0,0,0,79,80,80,22,23,0,0,0,0,0,79,0,0,0,0],[0,0,0,169,170,171,172,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,75,0,176,0,177,177,22,23,0,24,0,0,0,78,0,75,0,0],[0,178,90,0,0,0,0,0,0,0,0,0,0,0,0,0,178,0,0],[0,75,0,0,0,175,179,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,180,180,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,82,83,84,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,83,83,85,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,182,181,181,85,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,183,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,86,0,0,0,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,188,0,0,0,0,0,0,0,0],[0,0,0,189,170,190,191,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,0,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,76,193,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,0,194,0,0,0,0],[0,178,90,0,0,76,193,0,23,0,24,0,0,0,78,0,178,0,0],[0,0,0,0,29,95,31,32,33,0,34,0,0,0,36,0,0,37,0],[0,0,0,0,100,101,101,32,33,0,0,0,0,0,100,0,0,0,0],[0,0,0,195,196,197,198,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,96,0,202,0,203,203,32,33,0,34,0,0,0,99,0,96,0,0],[0,204,111,0,0,0,0,0,0,0,0,0,0,0,0,0,204,0,0],[0,96,0,0,0,201,205,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,206,206,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,103,104,105,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,104,104,106,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,208,207,207,106,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,209,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,107,0,0,0,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,214,0,0,0,0,0,0,0,0],[0,0,0,215,196,216,217,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,0,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,97,219,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,0,220,0,0,0,0],[0,204,111,0,0,97,219,0,33,0,34,0,0,0,99,0,204,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,223,0,0,0,40,224,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,119,225,0,0,0,0],[0,0,0,115,116,117,222,8,9,0,10,0,0,119,120,0,0,16,0],[0,0,0,115,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,226,64,0,0,40,224,0,9,0,10,0,0,0,42,0,226,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,39,0,0,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,44,44,8,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,227,0,228,229,0,9,0,10,0,0,230,0,0,0,0,0],[0,39,0,122,0,121,121,0,9,0,10,0,0,0,42,0,39,0,0],[0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,231,231,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,130,131,132,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,131,131,133,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,234,233,233,133,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,235,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,54,56,56,57,58,0,59,0,0,0,61,0,0,62,0],[0,0,0,240,241,242,243,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,136,0,247,0,248,248,57,58,0,59,0,0,0,139,0,136,0,0],[0,249,151,0,0,0,0,0,0,0,0,0,0,0,0,0,249,0,0],[0,136,0,0,0,246,250,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,251,251,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,143,144,145,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,144,144,146,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,253,252,252,146,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,254,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,147,0,0,0,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,259,0,0,0,0,0,0,0,0],[0,0,0,260,241,261,262,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,0,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,137,264,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,0,265,0,0,0,0],[0,249,151,0,0,137,264,0,58,0,59,0,0,0,139,0,249,0,0],[0,0,0,221,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,158,225,0,0,0,0],[0,0,0,155,116,156,222,8,9,0,10,0,0,158,120,0,0,16,0],[0,0,0,155,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,43,266,266,8,161,0,24,0,0,12,267,0,0,0,0],[0,75,0,176,43,268,268,269,161,0,24,0,0,0,267,0,75,0,0],[0,0,0,0,0,270,0,0,271,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,272,0,0,0,0,0,0,0,0],[0,273,274,0,0,40,41,0,9,0,10,0,0,0,42,0,273,0,0],[0,0,0,40,0,123,123,8,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,121,275,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,166,0,0,0,0,72,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,276,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,279,0,0,0,76,280,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,173,281,0,0,0,0],[0,0,0,169,170,171,278,22,23,0,24,0,0,173,174,0,0,27,0],[0,0,0,169,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,282,90,0,0,76,280,0,23,0,24,0,0,0,78,0,282,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,75,0,0,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,80,80,22,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,283,0,284,285,0,23,0,24,0,0,286,0,0,0,0,0],[0,75,0,176,0,175,175,0,23,0,24,0,0,0,78,0,75,0,0],[0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,287,287,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,288,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,184,185,186,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,185,185,187,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,290,289,289,187,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,291,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,277,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,192,281,0,0,0,0],[0,0,0,189,170,190,278,22,23,0,24,0,0,192,174,0,0,27,0],[0,0,0,189,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,76,0,177,177,22,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,175,296,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,299,0,0,0,97,300,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,199,301,0,0,0,0],[0,0,0,195,196,197,298,32,33,0,34,0,0,199,200,0,0,37,0],[0,0,0,195,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,302,111,0,0,97,300,0,33,0,34,0,0,0,99,0,302,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,96,0,0,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,101,101,32,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,303,0,304,305,0,33,0,34,0,0,306,0,0,0,0,0],[0,96,0,202,0,201,201,0,33,0,34,0,0,0,99,0,96,0,0],[0,0,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,307,307,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,308,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,210,211,212,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,211,211,213,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,310,309,309,213,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,311,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,297,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,218,301,0,0,0,0],[0,0,0,215,196,216,298,32,33,0,34,0,0,218,200,0,0,37,0],[0,0,0,215,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,97,0,203,203,32,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,201,316,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,116,222,222,8,9,0,10,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,9,0,0,0,0,0,225,0,0,0,0],[0,0,0,317,318,319,320,8,9,0,10,0,0,321,322,0,0,16,0],[0,223,0,323,0,123,123,8,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,0,0,121,324,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,325,318,326,327,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,64,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,9,0,0,0,0,230,0,0,0,0,0],[0,0,0,227,0,228,121,0,9,0,10,0,0,230,0,0,0,0,0],[0,0,0,227,0,121,121,0,9,0,10,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,0],[0,0,0,0,0,329,329,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,330,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,236,237,238,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,237,237,239,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,332,331,331,239,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,333,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,337,0,0,0,137,338,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,244,339,0,0,0,0],[0,0,0,240,241,242,336,57,58,0,59,0,0,244,245,0,0,62,0],[0,0,0,240,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,340,151,0,0,137,338,0,58,0,59,0,0,0,139,0,340,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,136,0,0,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,141,141,57,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,341,0,342,343,0,58,0,59,0,0,344,0,0,0,0,0],[0,136,0,247,0,246,246,0,58,0,59,0,0,0,139,0,136,0,0],[0,0,0,0,0,0,0,57,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,345,345,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,346,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,255,256,257,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,256,256,258,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,348,347,347,258,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,349,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,335,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,263,339,0,0,0,0],[0,0,0,260,241,261,336,57,58,0,59,0,0,263,245,0,0,62,0],[0,0,0,260,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,137,0,248,248,57,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,246,354,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,126,126,8,23,0,0,0,0,0,0,0,0,0,0],[0,355,90,0,0,121,125,0,9,0,10,0,0,0,42,0,355,0,0],[0,0,0,0,0,356,356,269,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,357,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,270,0,0,0,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0],[0,0,0,364,116,365,366,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,40,0,121,121,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,170,278,278,22,23,0,24,0,0,0,174,0,0,27,0],[0,0,0,0,281,80,80,22,23,0,0,0,0,0,281,0,0,0,0],[0,0,0,369,370,371,372,22,23,0,24,0,0,373,374,0,0,27,0],[0,279,0,375,0,177,177,22,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,0,0,175,376,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,377,370,378,379,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,90,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,23,0,0,0,0,286,0,0,0,0,0],[0,0,0,283,0,284,175,0,23,0,24,0,0,286,0,0,0,0,0],[0,0,0,283,0,175,175,0,23,0,24,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,85,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,0,0],[0,0,0,0,0,381,381,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,382,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,292,293,294,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,293,293,295,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,0,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,384,383,383,295,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,385,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,76,0,175,175,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,196,298,298,32,33,0,34,0,0,0,200,0,0,37,0],[0,0,0,0,301,101,101,32,33,0,0,0,0,0,301,0,0,0,0],[0,0,0,387,388,389,390,32,33,0,34,0,0,391,392,0,0,37,0],[0,299,0,393,0,203,203,32,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,0,0,201,394,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,395,388,396,397,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,111,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,33,0,0,0,0,306,0,0,0,0,0],[0,0,0,303,0,304,201,0,33,0,34,0,0,306,0,0,0,0,0],[0,0,0,303,0,201,201,0,33,0,34,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,103,0,0],[0,0,0,0,0,399,399,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,400,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,312,313,314,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,313,313,315,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,0,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,402,401,401,315,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,403,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,97,0,201,201,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,407,0,0,0,40,408,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,321,409,0,0,0,0],[0,0,0,317,318,319,406,8,9,0,10,0,0,321,322,0,0,16,0],[0,0,0,317,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,410,64,0,0,40,408,0,9,0,10,0,0,0,42,0,410,0,0],[0,223,0,0,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,223,0,323,0,121,121,0,9,0,10,0,0,0,42,0,223,0,0],[0,0,0,405,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,328,409,0,0,0,0],[0,0,0,325,318,326,406,8,9,0,10,0,0,328,322,0,0,16,0],[0,0,0,325,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,0,0,0,133,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,130,0,0],[0,0,0,0,0,411,411,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,412,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,40,121,334,0,9,0,10,0,0,0,42,0,0,0,0],[0,0,0,0,413,0,0,0,9,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,241,336,336,57,58,0,59,0,0,0,245,0,0,62,0],[0,0,0,0,339,141,141,57,58,0,0,0,0,0,339,0,0,0,0],[0,0,0,414,415,416,417,57,58,0,59,0,0,418,419,0,0,62,0],[0,337,0,420,0,248,248,57,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,0,0,246,421,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,422,415,423,424,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,151,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,58,0,0,0,0,344,0,0,0,0,0],[0,0,0,341,0,342,246,0,58,0,59,0,0,344,0,0,0,0,0],[0,0,0,341,0,246,246,0,58,0,59,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,146,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,143,0,0],[0,0,0,0,0,426,426,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,427,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,350,351,352,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,351,351,353,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,0,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,429,428,428,353,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,430,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,137,0,246,246,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,432,116,433,434,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,0,0,180,180,269,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,358,359,360,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,359,359,361,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,437,436,436,361,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,438,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,443,274,0,0,0,0,0,0,0,0,0,0,0,0,0,443,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,367,225,0,0,0,0],[0,0,0,364,116,365,445,8,161,0,162,0,0,367,120,0,0,16,0],[0,0,0,364,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,448,0,0,0,76,449,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,373,450,0,0,0,0],[0,0,0,369,370,371,447,22,23,0,24,0,0,373,374,0,0,27,0],[0,0,0,369,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,451,90,0,0,76,449,0,23,0,24,0,0,0,78,0,451,0,0],[0,279,0,0,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,279,0,375,0,175,175,0,23,0,24,0,0,0,78,0,279,0,0],[0,0,0,446,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,380,450,0,0,0,0],[0,0,0,377,370,378,447,22,23,0,24,0,0,380,374,0,0,27,0],[0,0,0,377,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,0,0,0,187,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,0,0],[0,0,0,0,0,452,452,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,76,175,386,0,23,0,24,0,0,0,78,0,0,0,0],[0,0,0,0,454,0,0,0,23,0,0,0,0,0,0,0,0,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,457,0,0,0,97,458,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,391,459,0,0,0,0],[0,0,0,387,388,389,456,32,33,0,34,0,0,391,392,0,0,37,0],[0,0,0,387,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,460,111,0,0,97,458,0,33,0,34,0,0,0,99,0,460,0,0],[0,299,0,0,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,299,0,393,0,201,201,0,33,0,34,0,0,0,99,0,299,0,0],[0,0,0,455,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,398,459,0,0,0,0],[0,0,0,395,388,396,456,32,33,0,34,0,0,398,392,0,0,37,0],[0,0,0,395,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,0,0,0,213,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,210,0,0],[0,0,0,0,0,461,461,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,462,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,97,201,404,0,33,0,34,0,0,0,99,0,0,0,0],[0,0,0,0,463,0,0,0,33,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,318,406,406,8,9,0,10,0,0,0,322,0,0,16,0],[0,0,0,0,409,44,44,8,9,0,0,0,0,0,409,0,0,0,0],[0,0,0,464,465,466,467,8,9,0,10,0,0,468,469,0,0,16,0],[0,407,0,470,0,123,123,8,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,0,0,121,471,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,472,465,473,474,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,0,0,0,0,239,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,236,0,0],[0,0,0,0,0,0,476,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,479,0,0,0,137,480,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,418,481,0,0,0,0],[0,0,0,414,415,416,478,57,58,0,59,0,0,418,419,0,0,62,0],[0,0,0,414,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,482,151,0,0,137,480,0,58,0,59,0,0,0,139,0,482,0,0],[0,337,0,0,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,337,0,420,0,246,246,0,58,0,59,0,0,0,139,0,337,0,0],[0,0,0,477,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,425,481,0,0,0,0],[0,0,0,422,415,423,478,57,58,0,59,0,0,425,419,0,0,62,0],[0,0,0,422,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,0,0,0,258,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,0],[0,0,0,0,0,483,483,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,484,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,137,246,431,0,58,0,59,0,0,0,139,0,0,0,0],[0,0,0,0,485,0,0,0,58,0,0,0,0,0,0,0,0,0,0],[0,0,0,444,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,435,225,0,0,0,0],[0,0,0,432,116,433,445,8,161,0,162,0,0,435,120,0,0,16,0],[0,0,0,432,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,0,486,486,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,487,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,439,440,441,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,440,440,442,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,489,488,488,442,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,490,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,495,0,496,497,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,0,116,445,445,8,161,0,162,0,0,0,120,0,0,16,0],[0,0,0,0,225,44,44,8,161,0,0,0,0,0,225,0,0,0,0],[0,0,0,0,370,447,447,22,23,0,24,0,0,0,374,0,0,27,0],[0,0,0,0,450,80,80,22,23,0,0,0,0,0,450,0,0,0,0],[0,0,0,499,500,501,502,22,23,0,24,0,0,503,504,0,0,27,0],[0,448,0,505,0,177,177,22,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,0,0,175,506,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,507,500,508,509,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,0,0,0,0,295,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,292,0,0],[0,0,0,0,0,0,511,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,388,456,456,32,33,0,34,0,0,0,392,0,0,37,0],[0,0,0,0,459,101,101,32,33,0,0,0,0,0,459,0,0,0,0],[0,0,0,512,513,514,515,32,33,0,34,0,0,516,517,0,0,37,0],[0,457,0,518,0,203,203,32,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,0,0,201,519,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,520,513,521,522,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,0,0,0,0,315,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,312,0,0],[0,0,0,0,0,0,524,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,527,0,0,0,40,528,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,468,529,0,0,0,0],[0,0,0,464,465,466,526,8,9,0,10,0,0,468,469,0,0,16,0],[0,0,0,464,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,530,64,0,0,40,528,0,9,0,10,0,0,0,42,0,530,0,0],[0,407,0,0,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,407,0,470,0,121,121,0,9,0,10,0,0,0,42,0,407,0,0],[0,0,0,525,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,475,529,0,0,0,0],[0,0,0,472,465,473,526,8,9,0,10,0,0,475,469,0,0,16,0],[0,0,0,472,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,0,0],[0,0,0,0,415,478,478,57,58,0,59,0,0,0,419,0,0,62,0],[0,0,0,0,481,141,141,57,58,0,0,0,0,0,481,0,0,0,0],[0,0,0,531,532,533,534,57,58,0,59,0,0,535,536,0,0,62,0],[0,479,0,537,0,248,248,57,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,0,0,246,538,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,539,532,540,541,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,0,0,0,0,353,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,350,0,0],[0,0,0,0,0,0,543,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,361,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,358,0,0],[0,0,0,0,0,544,544,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,545,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,491,492,493,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,492,492,494,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,547,546,546,494,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,548,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,274,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,161,0,0,0,0,498,0,0,0,0,0],[0,0,0,495,0,496,368,0,161,0,162,0,0,498,0,0,0,0,0],[0,0,0,495,0,368,368,0,161,0,162,0,0,0,0,0,0,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,553,0,0,0,76,554,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,503,555,0,0,0,0],[0,0,0,499,500,501,552,22,23,0,24,0,0,503,504,0,0,27,0],[0,0,0,499,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,556,90,0,0,76,554,0,23,0,24,0,0,0,78,0,556,0,0],[0,448,0,0,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,448,0,505,0,175,175,0,23,0,24,0,0,0,78,0,448,0,0],[0,0,0,551,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,510,555,0,0,0,0],[0,0,0,507,500,508,552,22,23,0,24,0,0,510,504,0,0,27,0],[0,0,0,507,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,559,0,0,0,97,560,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,516,561,0,0,0,0],[0,0,0,512,513,514,558,32,33,0,34,0,0,516,517,0,0,37,0],[0,0,0,512,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,562,111,0,0,97,560,0,33,0,34,0,0,0,99,0,562,0,0],[0,457,0,0,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,457,0,518,0,201,201,0,33,0,34,0,0,0,99,0,457,0,0],[0,0,0,557,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,523,561,0,0,0,0],[0,0,0,520,513,521,558,32,33,0,34,0,0,523,517,0,0,37,0],[0,0,0,520,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,0,0],[0,0,0,0,465,526,526,8,9,0,10,0,0,0,469,0,0,16,0],[0,0,0,0,529,44,44,8,9,0,0,0,0,0,529,0,0,0,0],[0,0,0,563,66,564,565,8,9,0,10,0,0,566,68,0,0,16,0],[0,527,0,567,0,123,123,8,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,0,0,121,568,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,569,66,570,571,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,575,0,0,0,137,576,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,535,577,0,0,0,0],[0,0,0,531,532,533,574,57,58,0,59,0,0,535,536,0,0,62,0],[0,0,0,531,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,578,151,0,0,137,576,0,58,0,59,0,0,0,139,0,578,0,0],[0,479,0,0,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,479,0,537,0,246,246,0,58,0,59,0,0,0,139,0,479,0,0],[0,0,0,573,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,542,577,0,0,0,0],[0,0,0,539,532,540,574,57,58,0,59,0,0,542,536,0,0,62,0],[0,0,0,539,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,137,0,0],[0,0,0,0,0,0,0,442,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,439,0,0],[0,0,0,0,0,579,579,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,580,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,549,368,550,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,0,368,368,0,161,0,162,0,0,0,362,0,0,0,0],[0,0,0,0,581,0,0,0,161,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,500,552,552,22,23,0,24,0,0,0,504,0,0,27,0],[0,0,0,0,555,80,80,22,23,0,0,0,0,0,555,0,0,0,0],[0,0,0,582,91,583,584,22,23,0,24,0,0,585,93,0,0,27,0],[0,553,0,586,0,177,177,22,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,0,0,175,587,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,588,91,589,590,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,0,513,558,558,32,33,0,34,0,0,0,517,0,0,37,0],[0,0,0,0,561,101,101,32,33,0,0,0,0,0,561,0,0,0,0],[0,0,0,592,112,593,594,32,33,0,34,0,0,595,114,0,0,37,0],[0,559,0,596,0,203,203,32,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,0,0,201,597,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,598,112,599,600,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,566,165,0,0,0,0],[0,0,0,563,66,564,67,8,9,0,10,0,0,566,68,0,0,16,0],[0,0,0,563,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,527,0,0,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,527,0,567,0,121,121,0,9,0,10,0,0,0,42,0,527,0,0],[0,0,0,602,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,165,44,44,8,9,0,0,0,0,572,165,0,0,0,0],[0,0,0,569,66,570,67,8,9,0,10,0,0,572,68,0,0,16,0],[0,0,0,569,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,0,532,574,574,57,58,0,59,0,0,0,536,0,0,62,0],[0,0,0,0,577,141,141,57,58,0,0,0,0,0,577,0,0,0,0],[0,0,0,603,152,604,605,57,58,0,59,0,0,606,154,0,0,62,0],[0,575,0,607,0,248,248,57,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,0,0,246,608,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,609,152,610,611,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,0,0,0,0,494,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,491,0,0],[0,0,0,0,0,0,613,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,585,194,0,0,0,0],[0,0,0,582,91,583,92,22,23,0,24,0,0,585,93,0,0,27,0],[0,0,0,582,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,553,0,0,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,553,0,586,0,175,175,0,23,0,24,0,0,0,78,0,553,0,0],[0,0,0,614,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,194,80,80,22,23,0,0,0,0,591,194,0,0,0,0],[0,0,0,588,91,589,92,22,23,0,24,0,0,591,93,0,0,27,0],[0,0,0,588,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,595,220,0,0,0,0],[0,0,0,592,112,593,113,32,33,0,34,0,0,595,114,0,0,37,0],[0,0,0,592,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,559,0,0,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,559,0,596,0,201,201,0,33,0,34,0,0,0,99,0,559,0,0],[0,0,0,615,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,220,101,101,32,33,0,0,0,0,601,220,0,0,0,0],[0,0,0,598,112,599,113,32,33,0,34,0,0,601,114,0,0,37,0],[0,0,0,598,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,66,67,67,8,9,0,10,0,0,0,68,0,0,16,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,606,265,0,0,0,0],[0,0,0,603,152,604,153,57,58,0,59,0,0,606,154,0,0,62,0],[0,0,0,603,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,575,0,0,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,575,0,607,0,246,246,0,58,0,59,0,0,0,139,0,575,0,0],[0,0,0,616,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,265,141,141,57,58,0,0,0,0,612,265,0,0,0,0],[0,0,0,609,152,610,153,57,58,0,59,0,0,612,154,0,0,62,0],[0,0,0,609,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,549,0,0],[0,0,0,0,91,92,92,22,23,0,24,0,0,0,93,0,0,27,0],[0,0,0,0,112,113,113,32,33,0,34,0,0,0,114,0,0,37,0],[0,0,0,0,152,153,153,57,58,0,59,0,0,0,154,0,0,62,0]],"accepting":[false,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,false,false,true,true,true,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,true,true,true,false,true,false,true,true,false,false,true,true,true,true,true,true,true,false,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,false,true,false,true,true,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,false,true,false,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,true,false,true,true,false,false,false,false,true,true,false,false,true,true,true,false,true,true,false,false,true,false,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,true,false,true,false,true,true,false,false,true,true,false,false,true,true,true,false,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,false,false,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,false,false,false,false,false,false,false,true,true,false,false,true,true,false,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,true,true,false,true,true,true,true,true,true,false,true,true,false,true,false,true,true,true,true,true,true,false,true,true,true,true,true,true,false,true,true,false,false,false,false,false,true,true,false,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,false,false,false,true,false,true,true,true,true,true,false,true,true,true,false,true,true,true,true,true,false,true,true,true,true,false,true,true,true,true,true,false,true,true,false,true,true,true],"tags":[[],["broken_cluster"],["consonant_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["consonant_syllable"],["broken_cluster"],["symbol_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["broken_cluster"],["broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],[],["broken_cluster"],["symbol_cluster"],[],["symbol_cluster"],["symbol_cluster"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["symbol_cluster"],["symbol_cluster"],["symbol_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],[],["broken_cluster"],["broken_cluster"],[],[],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["broken_cluster"],["symbol_cluster"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],[],["consonant_syllable"],["consonant_syllable"],[],[],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],[],["vowel_syllable"],["vowel_syllable"],[],[],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],[],[],[],["broken_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],["standalone_cluster"],["standalone_cluster"],[],[],["standalone_cluster"],["standalone_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],[],[],[],["consonant_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],[],[],[],["vowel_syllable"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],[],[],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],["standalone_cluster"],[],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],[],[],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],[],[],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],[],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],[],[],[],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],[],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],[],[],[],[],["consonant_syllable","broken_cluster"],["consonant_syllable","broken_cluster"],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],[],[],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],["consonant_syllable"],[],["consonant_syllable"],["consonant_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],["vowel_syllable"],[],["vowel_syllable"],["vowel_syllable"],["broken_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],["standalone_cluster"],[],["standalone_cluster"],["standalone_cluster"],[],["consonant_syllable"],["vowel_syllable"],["standalone_cluster"]]}');
var tl = {};
tl = JSON.parse('{"categories":["O","IND","S","GB","B","FM","CGJ","VMAbv","VMPst","VAbv","VPst","CMBlw","VPre","VBlw","H","VMBlw","CMAbv","MBlw","CS","R","SUB","MPst","MPre","FAbv","FPst","FBlw","null","SMAbv","SMBlw","VMPre","ZWNJ","ZWJ","WJ","M","VS","N","HN","MAbv"],"decompositions":{"2507":[2503,2494],"2508":[2503,2519],"2888":[2887,2902],"2891":[2887,2878],"2892":[2887,2903],"3018":[3014,3006],"3019":[3015,3006],"3020":[3014,3031],"3144":[3142,3158],"3264":[3263,3285],"3271":[3270,3285],"3272":[3270,3286],"3274":[3270,3266],"3275":[3270,3266,3285],"3402":[3398,3390],"3403":[3399,3390],"3404":[3398,3415],"3546":[3545,3530],"3548":[3545,3535],"3549":[3545,3535,3530],"3550":[3545,3551],"3635":[3661,3634],"3763":[3789,3762],"3955":[3953,3954],"3957":[3953,3956],"3958":[4018,3968],"3959":[4018,3953,3968],"3960":[4019,3968],"3961":[4019,3953,3968],"3969":[3953,3968],"6971":[6970,6965],"6973":[6972,6965],"6976":[6974,6965],"6977":[6975,6965],"6979":[6978,6965],"69934":[69937,69927],"69935":[69938,69927],"70475":[70471,70462],"70476":[70471,70487],"70843":[70841,70842],"70844":[70841,70832],"70846":[70841,70845],"71098":[71096,71087],"71099":[71097,71087]},"stateTable":[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[2,2,3,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,17,18,11,19,20,21,22,0,0,0,23,0,0,2,0,0,24,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,27,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,39,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,9,0,0,12,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,0,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,4,4,5,0,6,7,8,9,10,11,12,13,14,15,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,49,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,22,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,0,0,0,0,0,0,14,0,0,0,0,0,0,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0],[0,0,0,0,0,5,0,6,7,8,9,0,11,12,0,14,0,16,0,0,0,11,0,20,21,22,0,0,0,23,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,28,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,33,0,0,36,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,41,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,34,35,36,37,38,39,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,0,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,53,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44,45,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,0,0,0,0,0,0,38,0,0,0,0,0,0,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,29,0,30,31,32,33,0,35,36,0,38,0,40,0,0,0,35,0,43,44,45,0,0,0,46,0,0,0,0,0,0,0,0],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,0,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,5,0,6,7,8,9,48,11,12,13,14,48,16,0,0,18,11,19,20,21,22,0,0,0,23,0,0,0,0,0,0,0,25],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,0,0],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,0,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,29,0,30,31,32,33,52,35,36,37,38,52,40,0,0,41,35,42,43,44,45,0,0,0,46,0,0,0,0,0,0,0,47],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,51,0]],"accepting":[false,true,true,true,true,true,true,true,true,true,true,true,true,false,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true],"tags":[[],["broken_cluster"],["independent_cluster"],["symbol_cluster"],["standard_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],[],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["broken_cluster"],["numeral_cluster"],["broken_cluster"],["independent_cluster"],["symbol_cluster"],["symbol_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["virama_terminated_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["standard_cluster"],["broken_cluster"],["broken_cluster"],["numeral_cluster"],["number_joiner_terminated_cluster"],["standard_cluster"],["standard_cluster"],["numeral_cluster"]]}');
const Fe = {
  X: 1,
  C: 2,
  V: 4,
  N: 8,
  H: 16,
  ZWNJ: 32,
  ZWJ: 64,
  M: 128,
  Placeholder: 2048,
  Dotted_Circle: 4096,
  RS: 8192,
  Coeng: 16384,
  Repha: 32768,
  Ra: 65536,
  CM: 131072
}, we = {
  Start: 1,
  Ra_To_Become_Reph: 2,
  Pre_M: 4,
  Pre_C: 8,
  Base_C: 16,
  After_Main: 32,
  Before_Sub: 128,
  Below_C: 256,
  After_Sub: 512,
  Before_Post: 1024,
  Post_C: 2048,
  After_Post: 4096,
  Final_C: 8192,
  SMVD: 16384,
  End: 32768
}, jw = Fe.C | Fe.Ra | Fe.CM | Fe.V | Fe.Placeholder | Fe.Dotted_Circle, fg = Fe.ZWJ | Fe.ZWNJ, Sa = Fe.H | Fe.Coeng, R5 = {
  Default: {
    hasOldSpec: !1,
    virama: 0,
    basePos: "Last",
    rephPos: we.Before_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Devanagari: {
    hasOldSpec: !0,
    virama: 2381,
    basePos: "Last",
    rephPos: we.Before_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Bengali: {
    hasOldSpec: !0,
    virama: 2509,
    basePos: "Last",
    rephPos: we.After_Sub,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Gurmukhi: {
    hasOldSpec: !0,
    virama: 2637,
    basePos: "Last",
    rephPos: we.Before_Sub,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Gujarati: {
    hasOldSpec: !0,
    virama: 2765,
    basePos: "Last",
    rephPos: we.Before_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Oriya: {
    hasOldSpec: !0,
    virama: 2893,
    basePos: "Last",
    rephPos: we.After_Main,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Tamil: {
    hasOldSpec: !0,
    virama: 3021,
    basePos: "Last",
    rephPos: we.After_Post,
    rephMode: "Implicit",
    blwfMode: "Pre_And_Post"
  },
  Telugu: {
    hasOldSpec: !0,
    virama: 3149,
    basePos: "Last",
    rephPos: we.After_Post,
    rephMode: "Explicit",
    blwfMode: "Post_Only"
  },
  Kannada: {
    hasOldSpec: !0,
    virama: 3277,
    basePos: "Last",
    rephPos: we.After_Post,
    rephMode: "Implicit",
    blwfMode: "Post_Only"
  },
  Malayalam: {
    hasOldSpec: !0,
    virama: 3405,
    basePos: "Last",
    rephPos: we.After_Main,
    rephMode: "Log_Repha",
    blwfMode: "Pre_And_Post"
  },
  // Handled by UniversalShaper
  // Sinhala: {
  //   hasOldSpec: false,
  //   virama: 0x0DCA,
  //   basePos: 'Last_Sinhala',
  //   rephPos: POSITIONS.After_Main,
  //   rephMode: 'Explicit',
  //   blwfMode: 'Pre_And_Post'
  // },
  Khmer: {
    hasOldSpec: !1,
    virama: 6098,
    basePos: "First",
    rephPos: we.Ra_To_Become_Reph,
    rephMode: "Vis_Repha",
    blwfMode: "Pre_And_Post"
  }
}, Xw = {
  // Khmer
  6078: [
    6081,
    6078
  ],
  6079: [
    6081,
    6079
  ],
  6080: [
    6081,
    6080
  ],
  6084: [
    6081,
    6084
  ],
  6085: [
    6081,
    6085
  ]
}, { decompositions: Kw } = /* @__PURE__ */ jo(tl), ug = new es(Vf("AAARAAAAAABg2AAAAWYPmfDtnXuMXFUdx+/uzs7M7szudAtECGJRIMRQbUAithQWkGAKiVhNpFVRRAmIQVCDkDYICGotIA9BTCz8IeUviv7BQ2PBtBIRLBBQIWAUsKg1BKxRAqIgfs/cc+aeOXPej3tnZX7JJ/dxzj3nd36/8753Z5fUsuxgsAwcAU4Gp4BPgM+Cd4P3RjieDs4GXwLrHJ5bDy4DG8A14LvgZrAZbAF3gns0z18ALgY/B78C94NHwBPgabAE/AX8DbwM5sF/QX0yD5vFcU/wVnAgWAoOAyvAceBE8CGwBpwGzgJfAF8BXwXfAFeC68EmsBlsAXeCreA+8CB4DDwF/gh2gd3gFfAGmKxn2QzYC+wHDgRLweFgJTgWrKrnuq/GcQ04jV6fheN54EJwEbgcXAG+Q8O/j+Mt4DZwB9haz8t9Hz3a8iCN/xiOvwRP0evH6fE68AzOH+Ke2eWYhw3PcGnuxvkr4A3QaGRZB7wFLAEHg2XgiEZ/fHKcp/ceBh/A+cngFPCpRm6vM3E8l8a5gN67GMdvgqsbeX2ap9yI601gM7gN3AG20mfuo8cdOP6GpvdUg9oKxz839GV90RDO2/glxN1B790NXsN1rZll7WYRdw+c70uvTwIHNAfTO0RyL5TDmnnbc3lmRQI9UnM0dD5eovfz4FpJ/BNpXNYWV+N6Lfg0hY97JK1vn+Pur9DoQur2F7m436bHDUK8C5t5/8vruo4+97WmXG+GLmzEiBF+PDwEOowYMWLEiBEjRoxYeBw5BDqIPEfXut9yWN+vVNxfrnnmWqR/PdgENoMt4E5wD9gOHgCPgifBs2BXM99b2o3jP8F/wMRUlrXAHNgHvH0q3895J46HguXgWHAGLctmLv9VuL96qnp7jxgxYsSbCbJvuRZ97/tqxT59VVRtixEjRsThBG7OSt5zzoPT0M+cBc4T5noXOs79TqLHeZrHUeCSqeJ96gacXy2kecNU8V6Hh7yXuQlhtw7B/PO1RTkr52Aj8JNFZjYg3gOKuC/g/v6Ls2wNuAY8urg//PcIb+6RZXuDNeCS6SzbBrJWlh0DLiFHco8ed9IjzzvaWfa9sZzTcf6D9mCcnbg3PlNcH4fzS8F2MDaLdQG4dLZIJxbbaZqv4ri8k58f3+mPs66T6/TTzqDeI0aMGDGiHP5dcR8ce/xxYcWi6vOfr725uRzcjnngXVOD61Hync+9uL+Nmyfej/NHpvL56A5Jeuz7uyfo+pqcPz2Vf1NH0ttJ03pekt8SmuY/EPYy9zzbN319ym/9TL6ZIt9MHCXRdxJtoAkWTRdz472n87D9cTwYLJvuz++I6WIePo/zE8AHp4v8WLyP0nufnM6/+zoDx8+DL08P6r9+urheRtO+jD6/cdrsx3mqu8w+xH4PScKIXa5D2jeCm8Et4DbwI/BjcC/4BXgI/Bb8DuwEu8Bu8Ap4A9RaRZptnO8J9gUHgEPAoWA5OLY1qMO90GEV7q+mYWtxPBWcIYnL4p+DsPNbxfVFOP86uAr8DNc34HgTDb8Vx9sVaRFI/LtagzYjnCqpb908EX87eBA8Bh4Hf2jle/9/wvGFVv787rrZZy8h7qtgDOuFOmiBuXYRvg/O9wMHgXeB97SLspk4sq0OI/q9v13+ek+sh3zYSRp9jrYorw9ll1/GRzR+KotYZSHf8laVP2lvpA/8OGdPMk59hqtXZ+L8nHbxvWwqO65ryu+fT3VZz+l4dET7L0R072ljsMyzTpaJqQxsbL8M9WajY789DO85XMp/Dcp3Qztdn+9qf/a97ZWK8PXc3G+TpC/nv8Mncy7ZvICF302P5O+aNiOtLdTXd+D4Q7DVwfcvWvx9zTEJ/o5iG3R8YAjGNFseha5PGuZKz7b7xxXbOrXMcu5eJSo//rXdH/73Enz6L1q/X+fyIu8wZGtNBmkjkzNZNgP2AvuBg2bysKUzduXn/66JtNeN4PCZvO0/x7Ujdn4VnYOvRJzjZ/I+9sQZeftX2Tc1RPcPz/Tf4/si0g+t5Mq+kfZjZL34Mc5ul3PPnE7TOxvHK2qDaZ+L++db2HyYqMo/qVnb/P8uH8/rmnFxR0k6DCu/rjj/RxT7KGUSWgbd+LMQuEgYB1zsk2qtvJD8v5AhdfdttbEunSxbcJD9Zf7chqp1Hlbe7FK1/aPVTfp7FgtC1yGGiSncFK/DhZvi+epZta0WWjlsfDZMyPRdSPrryqSSKnXx1bkq/Ye9TlRpk7Lrjq1UrfdC9X+MtKqwP6+3a/4pJFUZF0pZZpv91MYjMBaRRXbxpho5zQmUY3F+Pt4o7rvQrBXPdm00TaE24uMadaM2meLSI7iu071t3er3b6ZLi8JEde3qw+6zGv+ycF5kaRBh/m1T/7Yl/mMyTuMwadP4xL9ifjJpNwbvDZRJ8G8vnqV/Wf12aa/kyOdl69+BspTsXzGueE6E+JfZnvmXIfNPW+FfXkjb1YmqPNpnLP3b61fHCj/X5tzGANf2y3yqvC7Jv7btV4TVbdammI9l/g0dS5lNxLrk2j9r8xjjxhBQnygg0lgg/bOrfyct+udJi/Yrk0lFnxC7f+5kRbsNmcexfrubt0X/rGvLqrGSnYv3ZPHEe8r7lvMvUfi2LOu/2dg8LrRtQt2yfcv8r5IU70VkIs6nbebUXf0M/o7Znl39Sdoz+X1oEb5N8ffF67qhPfPP6eoUbxf+GRf/6sRnvaSdmw+Bf1VxmbD+2sa//DU7t/Gv2PfKpKdrBP92Ojk+IvqX16ks/2qxbL8EZnc2HqsgYuqPuzZV+I3RbujbDm+T0PmWCVO/5jqftp1zy+wSA6s0JWtp2z5e1oZV+yMsjB3ZXolsv0Ulrv01v3/iKrF94Qtbt9siCnmeb6fjjf59KnLk1xaEbvtvFnFirGvEOqmycQrbm/IMsXd3P28uh4nM3swXRER717OiX8kc7K2qqyn2p3maFGU/aruP5VCv+PraoTYU8yUmmbDwcYo6pusnM486xdoga4dkPCb1pK7Sfc6ebvkd4qeAtQcd/N63bB3lU3dlUnUf38VyvqCqK7JxlNSd7lydrDlm+/uqHiRvl30Nrp/n9zpkZRjoJ3V1diyP05rIYXHYs+w+D5+WMS8b5gZtKcuX0KT5d/WwtB97VnyvY6rjMukI56HI0rFJPwt8PjT/1OXzSbcMeEmdh294qvKK4rNu7j4n3LNZg8TKXwafv025U+XvKjHsT8Q7/7LGaJt9lAh7Asz3uv0XEX6t0duDoWN/93wmh92XpUHmCKb9GALbG+rZP3AfNbQPKKv/jpF/bP0JXfuW1QYk7dhljcyvk5mw+933Hpo1g26PQ2ZP6zVmTJt47P25jncD9vPwGS+q9QS/V6RaY8j8K8LmvUr9HfYCpH5OWL9lZY+Sv6pesHCJHbtrf9k6etZvf0G1L0ja4cAe1UT/s3zdCe3/Q5/n372wMc97/E1Qh0Tbmfwh3m/V9On72tNnrCF1sJkVe1EyXMdBa7+lHMsk44zMF6St9e2djNnbm8ybpHkq+gbbemMaH0UZmD8obKGrk7r+nt+3bE7o83YZp/vqOKdv6PzJNN6mTJsI/51XR7i2ZrGA5B6zFwnjzxmqPjaGfW3tZNrz1eljq29mOOqeCfF/irRt87PNw0uXSVAvrmOMNT569MptsYaV0sic/wbY13e8hPrb9K2ySUJ0j6G/Lu0U4qpTrR23jMp6m5hU+YTaWCeh9aIsm/rqUHV4bFv42kgnZdfH1PUj1D7DVH9d8khRN1zFRl/+/TW//qxL1uH83+mk3H+SvRtS2TDU90nX2TpM6/1xzZpZtoYdK763dqlz0f6uNeFehcs+H/nbGP77MpX06n/ofpzP+tVmTUvRtVuX/cjS67OE5kRBrxyJ+w/dPo7r+9cO1160e3gqu0S2uW7PjN/L6ns/UfMf10Lai87frJ+3KndAfc8yTf1M3T4s6qm4/yh7/2GSkG8UMw//DvRLgbYZSEOxr0LCWvRdjfh9XGzfqN4NivfZd7rsmFp08zmbssrKJEuTfVMZopdpbuwSrhNv3/N2s+0PDG3KNB6RMrFvJHv6B85HXObAoWsd3zm3i+6uZYytv+5+pohbpo6+tpZJFfmGlrcMf4c8b1Pe2OUIsaXJrinCTfaxtZOt+NYnU3hIfQlN20Z/1+dt7JaqLsbIzycNWZmrlNg2Dc2/LJ1T+T6WrrYSml4Ku7ik7yIx2opJD51vU9UfVRmrqL8u/olZj0PyCLV5irxcdKoi/6rKb8qTrHsnhW9jyZH/nSpeWDzxd9769uQ016lgUuf2pAfKPhu2FpfZL2Yb9snLNl/fNIepXaUsj4vNXCXUZ75px8ojNP8UPvAta2g6fb+F1ckZuneshv1vGXXDeyRRrN/bBPS1Jul+l+7zW86R7Wv63WXyDpt/RxraRjvC+TC3O61/Sqj/prag8x372yQivn+XwudrI2X2E2KdtJEov52e0L+uv4FO3p/rvssgsL8F4d/z9PzlWS94m8fqS3361Fi+6qaVYHwi9Yz4iH2fobIj+45cpz/TUaarr/4+z+vaWtVtyAX2d1LG8W9C3f+F1mnf36/k4w3YPrLv+XBVXCJs3cr+n4MKJuLv/fN9GhNdXVP5pJMN9vFi3rpv3/r8Ywg3SYp66zNOsO8QGcxPpnmRS/1mvmJjju3v7absI2xspQrvs1dNbjOj/wP7h1RlZyKGy8occ408UL8En4v6xfC/K3z52XzJd62T8vuZGGsxo/6O46ntmNqqFb/jps2/hHV4rPKH0svT4pstU7t2tZ9u/ZdqbJL1MwP6O86Fyt4jYaIrGz9mjEt8lFL4PtVE6votG2P6fpdf/GZRse7s3bf4BtSl/DIbKMctx++Z+8o6K6z9FPOwKsRmXiaNl7C+6NYRpjlbqG1j72f49qsuY4brd/amb4ZVc8TQ+sSH985LrEe8iPWJnfPrJRbWbb+dwn4x6o+r/aS2S7w3qWt//LnYz2ntE0vH1uDcyKatx1rH+EiMPEN1SZG/iz6+9o01Rob6O7Q+xLZ1jHobK61U+pWVvo2EpuWqzzD6Poa+pvhli0wn8Zq/72Mzm2d90o5VN1x9ZKuzbTgvqWwUIin8FSpl1CXXvFRxU0iozVPYJDRtF3uFphn6XAyJUUdD7SjTJ8v6n9fVbVObkKWp001lc9VRlqdOf5v0ZM+bymdbfp1NfG0bq27Y5JMyfxeJkU6o/inKH8O2Zfgidb6h/g3VJ7QcVbWL0Pxt6rlrPqa4KfQ25a2zl4/E8GdM/4fK/wA=")), Jw = new k4(/* @__PURE__ */ jo(cg));
class h0 extends ri {
  static planFeatures(e) {
    e.addStage(Qw), e.addStage([
      "locl",
      "ccmp"
    ]), e.addStage(ty), e.addStage("nukt"), e.addStage("akhn"), e.addStage("rphf", !1), e.addStage("rkrf"), e.addStage("pref", !1), e.addStage("blwf", !1), e.addStage("abvf", !1), e.addStage("half", !1), e.addStage("pstf", !1), e.addStage("vatu"), e.addStage("cjct"), e.addStage("cfar", !1), e.addStage(ry), e.addStage({
      local: [
        "init"
      ],
      global: [
        "pres",
        "abvs",
        "blws",
        "psts",
        "haln",
        "dist",
        "abvm",
        "blwm",
        "calt",
        "clig"
      ]
    }), e.unicodeScript = q9(e.script), e.indicConfig = R5[e.unicodeScript] || R5.Default, e.isOldSpec = e.indicConfig.hasOldSpec && e.script[e.script.length - 1] !== "2";
  }
  static assignFeatures(e, r) {
    for (let i = r.length - 1; i >= 0; i--) {
      let n = r[i].codePoints[0], a = Xw[n] || Kw[n];
      if (a) {
        let s = a.map((o) => {
          let c = e.font.glyphForCodePoint(o);
          return new kt(e.font, c.id, [
            o
          ], r[i].features);
        });
        r.splice(i, 1, ...s);
      }
    }
  }
}
K0(h0, "zeroMarkWidths", "NONE");
function af(t) {
  return ug.get(t.codePoints[0]) >> 8;
}
function hg(t) {
  return 1 << (ug.get(t.codePoints[0]) & 255);
}
class eo {
  constructor(e, r, i, n) {
    this.category = e, this.position = r, this.syllableType = i, this.syllable = n;
  }
}
function Qw(t, e) {
  let r = 0, i = 0;
  for (let [n, a, s] of Jw.match(e.map(af))) {
    if (n > i) {
      ++r;
      for (let o = i; o < n; o++) e[o].shaperInfo = new eo(Fe.X, we.End, "non_indic_cluster", r);
    }
    ++r;
    for (let o = n; o <= a; o++) e[o].shaperInfo = new eo(1 << af(e[o]), hg(e[o]), s[0], r);
    i = a + 1;
  }
  if (i < e.length) {
    ++r;
    for (let n = i; n < e.length; n++) e[n].shaperInfo = new eo(Fe.X, we.End, "non_indic_cluster", r);
  }
}
function fi(t) {
  return t.shaperInfo.category & jw;
}
function Ht(t) {
  return t.shaperInfo.category & fg;
}
function hr(t) {
  return t.shaperInfo.category & Sa;
}
function mr(t, e) {
  for (let i of t) i.features = {
    [e]: !0
  };
  return t[0]._font._layoutEngine.engine.GSUBProcessor.applyFeatures([
    e
  ], t), t.length === 1;
}
function ey(t, e, r) {
  let i = [
    r,
    e,
    r
  ];
  return mr(i.slice(0, 2), "blwf") || mr(i.slice(1, 3), "blwf") ? we.Below_C : mr(i.slice(0, 2), "pstf") || mr(i.slice(1, 3), "pstf") || mr(i.slice(0, 2), "pref") || mr(i.slice(1, 3), "pref") ? we.Post_C : we.Base_C;
}
function ty(t, e, r) {
  let i = r.indicConfig, n = t._layoutEngine.engine.GSUBProcessor.features, a = t.glyphForCodePoint(9676).id, s = t.glyphForCodePoint(i.virama).id;
  if (s) {
    let o = new kt(t, s, [
      i.virama
    ]);
    for (let c = 0; c < e.length; c++) e[c].shaperInfo.position === we.Base_C && (e[c].shaperInfo.position = ey(t, e[c].copy(), o));
  }
  for (let o = 0, c = Fo(e, 0); o < e.length; o = c, c = Fo(e, o)) {
    let { category: l, syllableType: f } = e[o].shaperInfo;
    if (f === "symbol_cluster" || f === "non_indic_cluster") continue;
    if (f === "broken_cluster" && a) {
      let x = new kt(t, a, [
        9676
      ]);
      x.shaperInfo = new eo(1 << af(x), hg(x), e[o].shaperInfo.syllableType, e[o].shaperInfo.syllable);
      let _ = o;
      for (; _ < c && e[_].shaperInfo.category === Fe.Repha; ) _++;
      e.splice(_++, 0, x), c++;
    }
    let u = c, h = o, d = !1;
    if (i.rephPos !== we.Ra_To_Become_Reph && n.rphf && o + 3 <= c && (i.rephMode === "Implicit" && !Ht(e[o + 2]) || i.rephMode === "Explicit" && e[o + 2].shaperInfo.category === Fe.ZWJ)) {
      let x = [
        e[o].copy(),
        e[o + 1].copy(),
        e[o + 2].copy()
      ];
      if (mr(x.slice(0, 2), "rphf") || i.rephMode === "Explicit" && mr(x, "rphf")) {
        for (h += 2; h < c && Ht(e[h]); ) h++;
        u = o, d = !0;
      }
    } else if (i.rephMode === "Log_Repha" && e[o].shaperInfo.category === Fe.Repha) {
      for (h++; h < c && Ht(e[h]); ) h++;
      u = o, d = !0;
    }
    switch (i.basePos) {
      case "Last": {
        let x = c, _ = !1;
        do {
          let v = e[--x].shaperInfo;
          if (fi(e[x])) {
            if (v.position !== we.Below_C && (v.position !== we.Post_C || _)) {
              u = x;
              break;
            }
            v.position === we.Below_C && (_ = !0), u = x;
          } else if (o < x && v.category === Fe.ZWJ && e[x - 1].shaperInfo.category === Fe.H) break;
        } while (x > h);
        break;
      }
      case "First":
        u = o;
        for (let x = u + 1; x < c; x++) fi(e[x]) && (e[x].shaperInfo.position = we.Below_C);
    }
    d && u === o && h - u <= 2 && (d = !1);
    for (let x = o; x < u; x++) {
      let _ = e[x].shaperInfo;
      _.position = Math.min(we.Pre_C, _.position);
    }
    u < c && (e[u].shaperInfo.position = we.Base_C);
    for (let x = u + 1; x < c; x++) if (e[x].shaperInfo.category === Fe.M) {
      for (let _ = x + 1; _ < c; _++) if (fi(e[_])) {
        e[_].shaperInfo.position = we.Final_C;
        break;
      }
      break;
    }
    if (d && (e[o].shaperInfo.position = we.Ra_To_Become_Reph), r.isOldSpec) {
      let x = r.unicodeScript !== "Malayalam";
      for (let _ = u + 1; _ < c; _++) if (e[_].shaperInfo.category === Fe.H) {
        let v;
        for (v = c - 1; v > _ && !(fi(e[v]) || x && e[v].shaperInfo.category === Fe.H); v--)
          ;
        if (e[v].shaperInfo.category !== Fe.H && v > _) {
          let F = e[_];
          e.splice(_, 0, ...e.splice(_ + 1, v - _)), e[v] = F;
        }
        break;
      }
    }
    let p = we.Start;
    for (let x = o; x < c; x++) {
      let _ = e[x].shaperInfo;
      if (_.category & (fg | Fe.N | Fe.RS | Fe.CM | Sa & _.category)) {
        if (_.position = p, _.category === Fe.H && _.position === we.Pre_M) {
          for (let v = x; v > o; v--) if (e[v - 1].shaperInfo.position !== we.Pre_M) {
            _.position = e[v - 1].shaperInfo.position;
            break;
          }
        }
      } else _.position !== we.SMVD && (p = _.position);
    }
    let m = u;
    for (let x = u + 1; x < c; x++)
      if (fi(e[x])) {
        for (let _ = m + 1; _ < x; _++) e[_].shaperInfo.position < we.SMVD && (e[_].shaperInfo.position = e[x].shaperInfo.position);
        m = x;
      } else e[x].shaperInfo.category === Fe.M && (m = x);
    let C = e.slice(o, c);
    C.sort((x, _) => x.shaperInfo.position - _.shaperInfo.position), e.splice(o, C.length, ...C);
    for (let x = o; x < c; x++) if (e[x].shaperInfo.position === we.Base_C) {
      u = x;
      break;
    }
    for (let x = o; x < c && e[x].shaperInfo.position === we.Ra_To_Become_Reph; x++) e[x].features.rphf = !0;
    let A = !r.isOldSpec && i.blwfMode === "Pre_And_Post";
    for (let x = o; x < u; x++)
      e[x].features.half = !0, A && (e[x].features.blwf = !0);
    for (let x = u + 1; x < c; x++)
      e[x].features.abvf = !0, e[x].features.pstf = !0, e[x].features.blwf = !0;
    if (r.isOldSpec && r.unicodeScript === "Devanagari")
      for (let x = o; x + 1 < u; x++) e[x].shaperInfo.category === Fe.Ra && e[x + 1].shaperInfo.category === Fe.H && (x + 1 === u || e[x + 2].shaperInfo.category === Fe.ZWJ) && (e[x].features.blwf = !0, e[x + 1].features.blwf = !0);
    let b = 2;
    if (n.pref && u + b < c)
      for (let x = u + 1; x + b - 1 < c; x++) {
        let _ = [
          e[x].copy(),
          e[x + 1].copy()
        ];
        if (mr(_, "pref")) {
          for (let v = 0; v < b; v++) e[x++].features.pref = !0;
          if (n.cfar) for (; x < c; x++) e[x].features.cfar = !0;
          break;
        }
      }
    for (let x = o + 1; x < c; x++) if (Ht(e[x])) {
      let _ = e[x].shaperInfo.category === Fe.ZWNJ, v = x;
      do
        v--, _ && delete e[v].features.half;
      while (v > o && !fi(e[v]));
    }
  }
}
function ry(t, e, r) {
  let i = r.indicConfig, n = t._layoutEngine.engine.GSUBProcessor.features;
  for (let a = 0, s = Fo(e, 0); a < e.length; a = s, s = Fo(e, a)) {
    let o = !!n.pref, c = a;
    for (; c < s; c++) if (e[c].shaperInfo.position >= we.Base_C) {
      if (o && c + 1 < s) {
        for (let l = c + 1; l < s; l++) if (e[l].features.pref) {
          if (!(e[l].substituted && e[l].isLigated && !e[l].isMultiplied)) {
            for (c = l; c < s && hr(e[c]); ) c++;
            e[c].shaperInfo.position = we.BASE_C, o = !1;
          }
          break;
        }
      }
      if (r.unicodeScript === "Malayalam") for (let l = c + 1; l < s; l++) {
        for (; l < s && Ht(e[l]); ) l++;
        if (l === s || !hr(e[l])) break;
        for (l++; l < s && Ht(e[l]); ) l++;
        l < s && fi(e[l]) && e[l].shaperInfo.position === we.Below_C && (c = l, e[c].shaperInfo.position = we.Base_C);
      }
      a < c && e[c].shaperInfo.position > we.Base_C && c--;
      break;
    }
    if (c === s && a < c && e[c - 1].shaperInfo.category === Fe.ZWJ && c--, c < s) for (; a < c && e[c].shaperInfo.category & (Fe.N | Sa); ) c--;
    if (a + 1 < s && a < c) {
      let l = c === s ? c - 2 : c - 1;
      if (r.unicodeScript !== "Malayalam" && r.unicodeScript !== "Tamil") {
        for (; l > a && !(e[l].shaperInfo.category & (Fe.M | Sa)); ) l--;
        hr(e[l]) && e[l].shaperInfo.position !== we.Pre_M ? l + 1 < s && Ht(e[l + 1]) && l++ : l = a;
      }
      if (a < l && e[l].shaperInfo.position !== we.Pre_M) {
        for (let f = l; f > a; f--) if (e[f - 1].shaperInfo.position === we.Pre_M) {
          let u = f - 1;
          u < c && c <= l && c--;
          let h = e[u];
          e.splice(u, 0, ...e.splice(u + 1, l - u)), e[l] = h, l--;
        }
      }
    }
    if (a + 1 < s && e[a].shaperInfo.position === we.Ra_To_Become_Reph && e[a].shaperInfo.category === Fe.Repha !== (e[a].isLigated && !e[a].isMultiplied)) {
      let l, f = i.rephPos, u = !1;
      if (f !== we.After_Post) {
        for (l = a + 1; l < c && !hr(e[l]); ) l++;
        if (l < c && hr(e[l]) && (l + 1 < c && Ht(e[l + 1]) && l++, u = !0), !u && f === we.After_Main) {
          for (l = c; l + 1 < s && e[l + 1].shaperInfo.position <= we.After_Main; ) l++;
          u = l < s;
        }
        if (!u && f === we.After_Sub) {
          for (l = c; l + 1 < s && !(e[l + 1].shaperInfo.position & (we.Post_C | we.After_Post | we.SMVD)); ) l++;
          u = l < s;
        }
      }
      if (!u) {
        for (l = a + 1; l < c && !hr(e[l]); ) l++;
        l < c && hr(e[l]) && (l + 1 < c && Ht(e[l + 1]) && l++, u = !0);
      }
      if (!u) {
        for (l = s - 1; l > a && e[l].shaperInfo.position === we.SMVD; ) l--;
        if (hr(e[l]))
          for (let d = c + 1; d < l; d++) e[d].shaperInfo.category === Fe.M && l--;
      }
      let h = e[a];
      e.splice(a, 0, ...e.splice(a + 1, l - a)), e[l] = h, a < c && c <= l && c--;
    }
    if (o && c + 1 < s) {
      for (let l = c + 1; l < s; l++) if (e[l].features.pref) {
        if (e[l].isLigated && !e[l].isMultiplied) {
          let f = c;
          if (r.unicodeScript !== "Malayalam" && r.unicodeScript !== "Tamil") {
            for (; f > a && !(e[f - 1].shaperInfo.category & (Fe.M | Sa)); ) f--;
            if (f > a && e[f - 1].shaperInfo.category === Fe.M) {
              let d = l;
              for (let p = c + 1; p < d; p++) if (e[p].shaperInfo.category === Fe.M) {
                f--;
                break;
              }
            }
          }
          f > a && hr(e[f - 1]) && f < s && Ht(e[f]) && f++;
          let u = l, h = e[u];
          e.splice(f + 1, 0, ...e.splice(f, u - f)), e[f] = h, f <= c && c < u && c++;
        }
        break;
      }
    }
    e[a].shaperInfo.position === we.Pre_M && (!a || !/Cf|Mn/.test(Zo(e[a - 1].codePoints[0]))) && (e[a].features.init = !0);
  }
}
function Fo(t, e) {
  if (e >= t.length) return e;
  let r = t[e].shaperInfo.syllable;
  for (; ++e < t.length && t[e].shaperInfo.syllable === r; ) ;
  return e;
}
const { categories: iy, decompositions: P5 } = /* @__PURE__ */ jo(tl), ny = new es(Vf("AAACAAAAAAAQugAAAQUO+vHtnHuMX0UVx2d3u/t7bXe7FlqgvB+mpQhFmhikMRAg0ZQmakMU+cPWBzZisEGNjUpoiIYCEgmGUGOEGqOVNPUZUGNA+QNIBU2KREEFFSMBUYRISMXE+B3vnPzOzp553tcWfif5ZO5jnufMzJ2ZO/eumlDqFLAWnAMuBBvBZnC5uXZeBe4WsA1sBzs8/naCXcL1G8GtYDfYA74NvgfuAfcZHmT+fwEeBb8DTwvxPQWeAavACyZvq8z9VYxXwCGglijVBcvACnA8eCM4E6wHG8BF4BLwbvA+8AHwUbAd7AA7wS5wC9gN7gR7wX5wN7gXPAAeBr8Gvwd/Ac+CF8EhoCaV6oBZsBKcAE4FZ0wWeV8P9zxwoTnfCHczuBxsAdvAx8Gnzf1r4X4B3AxuA1+bHJb9m5PzdVGW/Yjv+xXHyfmxFfd9OH8Q/Ar8Bjw1WZT3GfACeAX8N5CfqSmlZsAKsGqqCH8K3DXgbHCuuXYB3HeAd4HLpgrdarbi+EPgY+CT4HPg8ybMTcb9MtyvghtYut/A+b4pf95+ELgfw08Qx/3gADgInjDl0veehPtX8A/wsrn2KtzxDuogWNoJx38k/BzXKeI8Ee5qcBZYD9aZtDbg+AwT19uMX83F7JizCdcvBZdZ97c6/BMfMWmfzfTm88/95aLj+DDSvApcDXZ04uPfaen3TMHPLvi5BezuFPVtD4t/qUcfe3FvP7gb3Ouwo9T+H+gMy/UIjh8DfwBPm7T08d/M8WMBe1Sh3xEjXo+M2s+IESNGjBgxYsSI1wLrOsM1gRsi/P+TzV3/Zc1jvxgR/j8IM9Et1mEGcJeDFeA4cJq5/ia467uF/w1wzwdvB+80998LdwvYZs63w90Bdnbd6Wp/uzz3R4wYMWJEvZzTMm2Xf8SIEfVQd/v+EsaPt3eL90J3wP2WMJ78Trd4t6+P77Hu37cIxp9/ny6YXqrUJeCR6TA74e/nll81MzxejeMtYA94HBwy91bPYow+O/S3A8d7oIM/gRN7CAP29Iqx/B1ThfuwOecM+vA3NmRjf6Gfm3BtH7v+PI7XDpS6EuwDz4O10+0/f9om1F4ehO4OmHp6EO7jxl56nvhsN/15ut+4Z0b657yYkZ7UJ0jhX0bcr3bn+6P87vekN4762QNzvWHZtL+jcH5srzg/uTf0f3pvfj5i+6tYW7rK9+aefO+tuL4BXAQ2gs3gPeBJc//9OL4CXAWuNvc/A64DN4Jbwe0s7jtxvBfsAz8EPwX3gwPgoJAHPQ9/Atf/bO7p/TTP4fglwS/5/zfujfWH5z0cz4Gj+8X5Sf1ib4m+vwbHZ/fdOtP+z+3LOnPp/QL4vxhsApeCy8BWk/a2ftFmYu22Hf4/Ba4B14Hrwc0sP7fh+Cvg6+Au8F1WthA/8pT7UeTxZ/12njkuXT8UyM9i6iur1EEb6f+yPz/eg0b3v4X7x365fMaW42lPu7PTv6vi8i/G+lWF/cvUk7bLl1r+5/rN5tu3j2qvWTd/qV+4h+AqjDGnBsX59GDo94iBXDa6v6Yjl6vu+h8itJcsZq/ZykHhHg/3tMHhUe9s/Yfuny7YNxTvQ8LYdrER2+/c0GBezhrMv3ZNRv7PmYirh7oOv4W1Y72/cwPOzx8U7X8d2295sfE3MPnbBPfSQbHv9nK4HxTqiK/trI7Yy5mLzvuVg/nX+N7V51A3r+gMy/4J434W7l2dYf5PZWGuNX6uh3uzEPetuLY7sZ20zTETY2oxyBhj3DrnfsidYPeXRGLHpxzX6pbFofGRkFBdGhcgW40L4cYtd9JAElO36q4LEzXHX7VMtZ2BEhJjy9dT25fazOtJxhwsBrHzwfu8w12kMYN9fLhIbp2RxlI59rX1dzjpsKl2Fxt3iu6rbofc9q5+KcRrXVzzDn6/Crvk6p/y1GFgGhs9/6maHjBLgv8/18fTxl1q0bPoW8ywsFTGWaazHosrNn/kP2eeqEroZYLZphsZl7L82eephMIqNT8dyT9JjH1Jpg32ubZvTB/SF665ymSnnaqjUHum+1Qn+NyOtz9f2r6y5OQ51b6hYy0D40r2tYXar30+Y/mbVX6JqY+hMC60XZapoh3S/HdOpT3DYu3rs0lKnquyb277JZvyPlqp+f1zVVK2/dJYNpQGf04uYyh1+PTPqfalZ2tO/xwSu+3bOrDzmWvfcTW/fLmibRx6lkvlcOlc8qsE/y5/rnSk67F1iAu1VT6+4jKt5tufn8e2b+n57JKcckhrsKG1Cd6Wu+Y8tf2l5DenPafqQZ/7xstKLeyr+XnInjSelvRgS9n27JPQM5n6Am7jmLG8VK6m7OvyS2L313XYV2r/tth5LWPfNxhyhI+1Up7HVbe/HMgeZE8brtNQ/7tcyX0cn//H2LTO9kpir5VI6yYp9szJW9W2jI1Tqfl5ic2v1GZ5XaG6RDZbyvxMO/DVh1SdUj5y1vraaHs+2/TYNXvtSRoXk4wrf9w6fEctnFt0zL2y+xFsfSrLza2zOTqMiZv8xOpbn8+xsL5ykdj6VsxNKb/Lvxb7nX8u48y1x6yuMW3V9tNxTlouzXslibVxndjC14xda8g2NIbg5x01XAP2lfeIBFSi/zrQEporTXru8fCueiy1CUnqrhspSM9SzbSS64tep9R1ZsZcOxKsUEUfNZeYtr0vjY5DeXW915hT8/PRV8MxlR1HV4DHZZc9R7dzajgWoXikdLtGr0uEfPigsGS/NvYjSHW87XejoXZehZ74XrcqpQ4d5T5f7Gu8f6g7fQmefoqOqk4/VarQv2o4/VDetPDnhjR2dc3BCBp/9NVw7KGfwStVMf6aZNAajj6224j9HCZbpZa/LvH1gU30i/q5WnUdSNEprxv2eIOwx2pcjjLMsmObo008k0J4u69P3d9QdbspW/dy080Nb8PXqcrmj0vsc7tu6qwD1A5oLYr3U3XWSxqj6/a10nCMkudJMyxvrvbK55jUrqU+Xlr/Iai98jY7mVAml5QNHxq31j2m5TrSdmp6z5p+9kpzQntdQbI1Pafr6I9C60gxrALHGtdF6tyhLTtxeBuW+hhqyzPMX931xl6rJ5f6n5h3blpsW7vKbvdBfL1gpYfjDLrvob1drrRT+mcuMf1OrJSdW/P+RfufdUB+pOtdTzhpL5t0jfKr46P3obQfQdPGt1jS+DEkx4MT2PmEg1j72OthqfZNWX+JuZ4at/2sTAmn5cSIMqZIjk0pnD0+aUI6YS9ekdaspWsp8cWEC62dS66UTkq+ypajyvXSlPz4xhQhm/ns6wpXBVI560jHN9aKkdT46spvWT916rONdHNsGSNtl6Hp8oakTVukpF9n3U3Jx0TNefbp3R4jltVfFfpvQkJpNaH/puyco++qbZPz7sE1L3DFGVovc4XPLUPO3ELyrzLiSpmPhaTJfqeJ+t60PiTh9snNW2656upDQ+Wtyg6ueJquB7HSVPspW9a28lDWJouhb6iyv7XjTfVL67j2vjDpvUfMt1Vl4GvctMaeq/vYcFWXIfV5Ku3XaxK951H6dsWFrhcxa3pU/pz3C1xc71tTcaXjGjtJbYIj7UHm7wxSyx+D/d7SfpfJ3wPpfSQp32tS2dt8V2tD7+Bce3rpPa3eC6Dr8Ulq+K+J3HFvbn312Zv2RdStr9g0pP0P/B04XbP3Q8cIT2dlRF6orkrhY/Rv27FqHfL1DP480ffo/V6V7aTHXLKDbTdXOOrnyG1ScvSv6xqve30lPzdpj36M8Pilb+L5vr0xE3dd30nWIfZ45uSSxK4x+CRmTUK6F/LrSsfnj+aOdYyvpXyMK7/OpHWjlDTsa0rJum5K7Ppnj7F9c+0q0qtr7pQji2X9oMwcVrJfmblwU2V2SV3rEk3YuO46XXf8MfrQz077G2zftyDkj/ZqhcZr9nldkOg5ykAt3GunJbR3NGYsUfWafd3ts853C4dLHppOM6WcfM5C+xSbaC/2HMa1H9v1vXdoXm/LKSVpYh5wqmr/X67SfwHtPc9a97p/k8bt0hpbW0j1Svr2m+7Rd98qIQ1pvSF273dKOjHYNmk6fd8/JX3tWIddblBqoU5p7zrZKnd9TppjVq0DSitWqkwz12b2exb7vwjaRvS/TFd/S+8AYvIo+Suri5TwvvZRdV1IQevQ1/8SA+UeH5eto7n/X1Oe86ptaafl8kPjcF7P7W93eD9d5n+oSvn7fFe7I/G9q1IBfylSR71N6fft94ZU18hOXKR+JqUO8f4+5dvLsmWlMQb/Vov+CUDlpTGUndeQlG3fdZWdRPoPgl3mmDlsLnaey/4X3tVuU+o6L3/Pym+qlLV/jk6rlBRd8394hZ6JdnuqIv2ykOh3pfq96Wkq/E8qu2xl88/tOJ4R3tfmpbGi3c5T859bzqr7MbsN03iI5itUNj5eaEKWqIX/KJCQ/iFWNZMmHXs8ovWk53JzFq5vPul6zDjLV36pX7bzvNzB0YlQOZephWtRS5T7eeSq8030R77/HvC1d7tN83Zt9yltrDdwSR0XxsZd5l+MvvvU1/M9jSnj+Nh6FPJbBld/w6XHXH5MZeXrOfS/65g9RTl1JCa8chzX2RZ9/3lXSh4/VqWfEBNq4b82Ytp6m+9Qqxir1jX+rfPdT1vvsWhM6bPbmON6E1LnPCZW7L0qqXswmtqf0MQelZj4myrzYtzvIYmURlvtqapyx+gzRfd0XPfahVSOquMoG+dibBdl46iyfdbV1qvUW9m8+KTudMvkzZe/pqTJ+pWTflX5zw1fVfox6ZTVc8hvHflOSb+OuG1JsZ0kufXAJf8D")), ay = new k4(/* @__PURE__ */ jo(tl));
class ke extends ri {
  static planFeatures(e) {
    e.addStage(oy), e.addStage([
      "locl",
      "ccmp",
      "nukt",
      "akhn"
    ]), e.addStage(N5), e.addStage([
      "rphf"
    ], !1), e.addStage(ly), e.addStage(N5), e.addStage([
      "pref"
    ]), e.addStage(cy), e.addStage([
      "rkrf",
      "abvf",
      "blwf",
      "half",
      "pstf",
      "vatu",
      "cjct"
    ]), e.addStage(fy), e.addStage([
      "abvs",
      "blws",
      "pres",
      "psts",
      "dist",
      "abvm",
      "blwm"
    ]);
  }
  static assignFeatures(e, r) {
    for (let i = r.length - 1; i >= 0; i--) {
      let n = r[i].codePoints[0];
      if (P5[n]) {
        let a = P5[n].map((s) => {
          let o = e.font.glyphForCodePoint(s);
          return new kt(e.font, o.id, [
            s
          ], r[i].features);
        });
        r.splice(i, 1, ...a);
      }
    }
  }
}
K0(ke, "zeroMarkWidths", "BEFORE_GPOS");
function L5(t) {
  return ny.get(t.codePoints[0]);
}
class sy {
  constructor(e, r, i) {
    this.category = e, this.syllableType = r, this.syllable = i;
  }
}
function oy(t, e) {
  let r = 0;
  for (let [i, n, a] of ay.match(e.map(L5))) {
    ++r;
    for (let o = i; o <= n; o++) e[o].shaperInfo = new sy(iy[L5(e[o])], a[0], r);
    let s = e[i].shaperInfo.category === "R" ? 1 : Math.min(3, n - i);
    for (let o = i; o < i + s; o++) e[o].features.rphf = !0;
  }
}
function N5(t, e) {
  for (let r of e) r.substituted = !1;
}
function ly(t, e) {
  for (let r of e) r.substituted && r.features.rphf && (r.shaperInfo.category = "R");
}
function cy(t, e) {
  for (let r of e) r.substituted && (r.shaperInfo.category = "VPre");
}
function fy(t, e) {
  let r = t.glyphForCodePoint(9676).id;
  for (let i = 0, n = M5(e, 0); i < e.length; i = n, n = M5(e, i)) {
    let a, s, o = e[i].shaperInfo, c = o.syllableType;
    if (!(c !== "virama_terminated_cluster" && c !== "standard_cluster" && c !== "broken_cluster")) {
      if (c === "broken_cluster" && r) {
        let l = new kt(t, r, [
          9676
        ]);
        for (l.shaperInfo = o, a = i; a < n && e[a].shaperInfo.category === "R"; a++) ;
        e.splice(++a, 0, l), n++;
      }
      if (o.category === "R" && n - i > 1) {
        for (a = i + 1; a < n; a++)
          if (o = e[a].shaperInfo, U5(o) || Ns(e[a])) {
            Ns(e[a]) && a--, e.splice(i, 0, ...e.splice(i + 1, a - i), e[a]);
            break;
          }
      }
      for (a = i, s = n; a < n; a++)
        o = e[a].shaperInfo, U5(o) || Ns(e[a]) ? s = Ns(e[a]) ? a + 1 : a : (o.category === "VPre" || o.category === "VMPre") && s < a && e.splice(s, 1, e[a], ...e.splice(s, a - s));
    }
  }
}
function M5(t, e) {
  if (e >= t.length) return e;
  let r = t[e].shaperInfo.syllable;
  for (; ++e < t.length && t[e].shaperInfo.syllable === r; ) ;
  return e;
}
function Ns(t) {
  return t.shaperInfo.category === "H" && !t.isLigated;
}
function U5(t) {
  return t.category === "B" || t.category === "GB";
}
const uy = {
  arab: Dr,
  mong: Dr,
  syrc: Dr,
  "nko ": Dr,
  phag: Dr,
  mand: Dr,
  mani: Dr,
  phlp: Dr,
  hang: ag,
  bng2: h0,
  beng: h0,
  dev2: h0,
  deva: h0,
  gjr2: h0,
  gujr: h0,
  guru: h0,
  gur2: h0,
  knda: h0,
  knd2: h0,
  mlm2: h0,
  mlym: h0,
  ory2: h0,
  orya: h0,
  taml: h0,
  tml2: h0,
  telu: h0,
  tel2: h0,
  khmr: h0,
  bali: ke,
  batk: ke,
  brah: ke,
  bugi: ke,
  buhd: ke,
  cakm: ke,
  cham: ke,
  dupl: ke,
  egyp: ke,
  gran: ke,
  hano: ke,
  java: ke,
  kthi: ke,
  kali: ke,
  khar: ke,
  khoj: ke,
  sind: ke,
  lepc: ke,
  limb: ke,
  mahj: ke,
  // mand: UniversalShaper, // Mandaic
  // mani: UniversalShaper, // Manichaean
  mtei: ke,
  modi: ke,
  // mong: UniversalShaper, // Mongolian
  // 'nko ': UniversalShaper, // N’Ko
  hmng: ke,
  // phag: UniversalShaper, // Phags-pa
  // phlp: UniversalShaper, // Psalter Pahlavi
  rjng: ke,
  saur: ke,
  shrd: ke,
  sidd: ke,
  sinh: h0,
  sund: ke,
  sylo: ke,
  tglg: ke,
  tagb: ke,
  tale: ke,
  lana: ke,
  tavt: ke,
  takr: ke,
  tibt: ke,
  tfng: ke,
  tirh: ke,
  latn: ri,
  DFLT: ri
};
function hy(t) {
  Array.isArray(t) || (t = [
    t
  ]);
  for (let e of t) {
    let r = uy[e];
    if (r) return r;
  }
  return ri;
}
class dy extends Eo {
  applyLookup(e, r) {
    switch (e) {
      case 1: {
        let n = this.coverageIndex(r.coverage);
        if (n === -1) return !1;
        let a = this.glyphIterator.cur;
        switch (r.version) {
          case 1:
            a.id = a.id + r.deltaGlyphID & 65535;
            break;
          case 2:
            a.id = r.substitute.get(n);
            break;
        }
        return !0;
      }
      case 2: {
        let n = this.coverageIndex(r.coverage);
        if (n !== -1) {
          let a = r.sequences.get(n);
          if (a.length === 0)
            return this.glyphs.splice(this.glyphIterator.index, 1), !0;
          this.glyphIterator.cur.id = a[0], this.glyphIterator.cur.ligatureComponent = 0;
          let s = this.glyphIterator.cur.features, o = this.glyphIterator.cur, c = a.slice(1).map((l, f) => {
            let u = new kt(this.font, l, void 0, s);
            return u.shaperInfo = o.shaperInfo, u.isLigated = o.isLigated, u.ligatureComponent = f + 1, u.substituted = !0, u.isMultiplied = !0, u;
          });
          return this.glyphs.splice(this.glyphIterator.index + 1, 0, ...c), !0;
        }
        return !1;
      }
      case 3: {
        let n = this.coverageIndex(r.coverage);
        if (n !== -1) {
          let a = 0;
          return this.glyphIterator.cur.id = r.alternateSet.get(n)[a], !0;
        }
        return !1;
      }
      case 4: {
        let n = this.coverageIndex(r.coverage);
        if (n === -1) return !1;
        for (let a of r.ligatureSets.get(n)) {
          let s = this.sequenceMatchIndices(1, a.components);
          if (!s) continue;
          let o = this.glyphIterator.cur, c = o.codePoints.slice();
          for (let m of s) c.push(...this.glyphs[m].codePoints);
          let l = new kt(this.font, a.glyph, c, o.features);
          l.shaperInfo = o.shaperInfo, l.isLigated = !0, l.substituted = !0;
          let f = o.isMark;
          for (let m = 0; m < s.length && f; m++) f = this.glyphs[s[m]].isMark;
          l.ligatureID = f ? null : this.ligatureID++;
          let u = o.ligatureID, h = o.codePoints.length, d = h, p = this.glyphIterator.index + 1;
          for (let m of s) {
            if (f) p = m;
            else for (; p < m; ) {
              var i = d - h + Math.min(this.glyphs[p].ligatureComponent || 1, h);
              this.glyphs[p].ligatureID = l.ligatureID, this.glyphs[p].ligatureComponent = i, p++;
            }
            u = this.glyphs[p].ligatureID, h = this.glyphs[p].codePoints.length, d += h, p++;
          }
          if (u && !f) for (let m = p; m < this.glyphs.length && this.glyphs[m].ligatureID === u; m++) {
            var i = d - h + Math.min(this.glyphs[m].ligatureComponent || 1, h);
            this.glyphs[m].ligatureComponent = i;
          }
          for (let m = s.length - 1; m >= 0; m--) this.glyphs.splice(s[m], 1);
          return this.glyphs[this.glyphIterator.index] = l, !0;
        }
        return !1;
      }
      case 5:
        return this.applyContext(r);
      case 6:
        return this.applyChainingContext(r);
      case 7:
        return this.applyLookup(r.lookupType, r.extension);
      default:
        throw new Error(`GSUB lookupType ${e} is not supported`);
    }
  }
}
class gy extends Eo {
  applyPositionValue(e, r) {
    let i = this.positions[this.glyphIterator.peekIndex(e)];
    r.xAdvance != null && (i.xAdvance += r.xAdvance), r.yAdvance != null && (i.yAdvance += r.yAdvance), r.xPlacement != null && (i.xOffset += r.xPlacement), r.yPlacement != null && (i.yOffset += r.yPlacement);
    let n = this.font._variationProcessor, a = this.font.GDEF && this.font.GDEF.itemVariationStore;
    n && a && (r.xPlaDevice && (i.xOffset += n.getDelta(a, r.xPlaDevice.a, r.xPlaDevice.b)), r.yPlaDevice && (i.yOffset += n.getDelta(a, r.yPlaDevice.a, r.yPlaDevice.b)), r.xAdvDevice && (i.xAdvance += n.getDelta(a, r.xAdvDevice.a, r.xAdvDevice.b)), r.yAdvDevice && (i.yAdvance += n.getDelta(a, r.yAdvDevice.a, r.yAdvDevice.b)));
  }
  applyLookup(e, r) {
    switch (e) {
      case 1: {
        let n = this.coverageIndex(r.coverage);
        if (n === -1) return !1;
        switch (r.version) {
          case 1:
            this.applyPositionValue(0, r.value);
            break;
          case 2:
            this.applyPositionValue(0, r.values.get(n));
            break;
        }
        return !0;
      }
      case 2: {
        let n = this.glyphIterator.peek();
        if (!n) return !1;
        let a = this.coverageIndex(r.coverage);
        if (a === -1) return !1;
        switch (r.version) {
          case 1:
            let s = r.pairSets.get(a);
            for (let l of s) if (l.secondGlyph === n.id)
              return this.applyPositionValue(0, l.value1), this.applyPositionValue(1, l.value2), !0;
            return !1;
          case 2:
            let o = this.getClassID(this.glyphIterator.cur.id, r.classDef1), c = this.getClassID(n.id, r.classDef2);
            if (o === -1 || c === -1) return !1;
            var i = r.classRecords.get(o).get(c);
            return this.applyPositionValue(0, i.value1), this.applyPositionValue(1, i.value2), !0;
        }
      }
      case 3: {
        let n = this.glyphIterator.peekIndex(), a = this.glyphs[n];
        if (!a) return !1;
        let s = r.entryExitRecords[this.coverageIndex(r.coverage)];
        if (!s || !s.exitAnchor) return !1;
        let o = r.entryExitRecords[this.coverageIndex(r.coverage, a.id)];
        if (!o || !o.entryAnchor) return !1;
        let c = this.getAnchor(o.entryAnchor), l = this.getAnchor(s.exitAnchor), f = this.positions[this.glyphIterator.index], u = this.positions[n], h;
        switch (this.direction) {
          case "ltr":
            f.xAdvance = l.x + f.xOffset, h = c.x + u.xOffset, u.xAdvance -= h, u.xOffset -= h;
            break;
          case "rtl":
            h = l.x + f.xOffset, f.xAdvance -= h, f.xOffset -= h, u.xAdvance = c.x + u.xOffset;
            break;
        }
        return this.glyphIterator.flags.rightToLeft ? (this.glyphIterator.cur.cursiveAttachment = n, f.yOffset = c.y - l.y) : (a.cursiveAttachment = this.glyphIterator.index, f.yOffset = l.y - c.y), !0;
      }
      case 4: {
        let n = this.coverageIndex(r.markCoverage);
        if (n === -1) return !1;
        let a = this.glyphIterator.index;
        for (; --a >= 0 && (this.glyphs[a].isMark || this.glyphs[a].ligatureComponent > 0); ) ;
        if (a < 0) return !1;
        let s = this.coverageIndex(r.baseCoverage, this.glyphs[a].id);
        if (s === -1) return !1;
        let o = r.markArray[n], c = r.baseArray[s][o.class];
        return this.applyAnchor(o, c, a), !0;
      }
      case 5: {
        let n = this.coverageIndex(r.markCoverage);
        if (n === -1) return !1;
        let a = this.glyphIterator.index;
        for (; --a >= 0 && this.glyphs[a].isMark; ) ;
        if (a < 0) return !1;
        let s = this.coverageIndex(r.ligatureCoverage, this.glyphs[a].id);
        if (s === -1) return !1;
        let o = r.ligatureArray[s], c = this.glyphIterator.cur, l = this.glyphs[a], f = l.ligatureID && l.ligatureID === c.ligatureID && c.ligatureComponent > 0 ? Math.min(c.ligatureComponent, l.codePoints.length) - 1 : l.codePoints.length - 1, u = r.markArray[n], h = o[f][u.class];
        return this.applyAnchor(u, h, a), !0;
      }
      case 6: {
        let n = this.coverageIndex(r.mark1Coverage);
        if (n === -1) return !1;
        let a = this.glyphIterator.peekIndex(-1), s = this.glyphs[a];
        if (!s || !s.isMark) return !1;
        let o = this.glyphIterator.cur, c = !1;
        if (o.ligatureID === s.ligatureID ? o.ligatureID ? o.ligatureComponent === s.ligatureComponent && (c = !0) : c = !0 : (o.ligatureID && !o.ligatureComponent || s.ligatureID && !s.ligatureComponent) && (c = !0), !c) return !1;
        let l = this.coverageIndex(r.mark2Coverage, s.id);
        if (l === -1) return !1;
        let f = r.mark1Array[n], u = r.mark2Array[l][f.class];
        return this.applyAnchor(f, u, a), !0;
      }
      case 7:
        return this.applyContext(r);
      case 8:
        return this.applyChainingContext(r);
      case 9:
        return this.applyLookup(r.lookupType, r.extension);
      default:
        throw new Error(`Unsupported GPOS table: ${e}`);
    }
  }
  applyAnchor(e, r, i) {
    let n = this.getAnchor(r), a = this.getAnchor(e.markAnchor);
    this.positions[i];
    let s = this.positions[this.glyphIterator.index];
    s.xOffset = n.x - a.x, s.yOffset = n.y - a.y, this.glyphIterator.cur.markAttachment = i;
  }
  getAnchor(e) {
    let r = e.xCoordinate, i = e.yCoordinate, n = this.font._variationProcessor, a = this.font.GDEF && this.font.GDEF.itemVariationStore;
    return n && a && (e.xDeviceTable && (r += n.getDelta(a, e.xDeviceTable.a, e.xDeviceTable.b)), e.yDeviceTable && (i += n.getDelta(a, e.yDeviceTable.a, e.yDeviceTable.b))), {
      x: r,
      y: i
    };
  }
  applyFeatures(e, r, i) {
    super.applyFeatures(e, r, i);
    for (var n = 0; n < this.glyphs.length; n++) this.fixCursiveAttachment(n);
    this.fixMarkAttachment();
  }
  fixCursiveAttachment(e) {
    let r = this.glyphs[e];
    if (r.cursiveAttachment != null) {
      let i = r.cursiveAttachment;
      r.cursiveAttachment = null, this.fixCursiveAttachment(i), this.positions[e].yOffset += this.positions[i].yOffset;
    }
  }
  fixMarkAttachment() {
    for (let e = 0; e < this.glyphs.length; e++) {
      let r = this.glyphs[e];
      if (r.markAttachment != null) {
        let i = r.markAttachment;
        if (this.positions[e].xOffset += this.positions[i].xOffset, this.positions[e].yOffset += this.positions[i].yOffset, this.direction === "ltr") for (let n = i; n < e; n++)
          this.positions[e].xOffset -= this.positions[n].xAdvance, this.positions[e].yOffset -= this.positions[n].yAdvance;
        else for (let n = i + 1; n < e + 1; n++)
          this.positions[e].xOffset += this.positions[n].xAdvance, this.positions[e].yOffset += this.positions[n].yAdvance;
      }
    }
  }
}
class py {
  setup(e) {
    this.glyphInfos = e.glyphs.map((i) => new kt(this.font, i.id, [
      ...i.codePoints
    ]));
    let r = null;
    this.GPOSProcessor && (r = this.GPOSProcessor.selectScript(e.script, e.language, e.direction)), this.GSUBProcessor && (r = this.GSUBProcessor.selectScript(e.script, e.language, e.direction)), this.shaper = hy(r), this.plan = new pw(this.font, r, e.direction), this.shaper.plan(this.plan, this.glyphInfos, e.features);
    for (let i in this.plan.allFeatures) e.features[i] = !0;
  }
  substitute(e) {
    this.GSUBProcessor && (this.plan.process(this.GSUBProcessor, this.glyphInfos), e.glyphs = this.glyphInfos.map((r) => this.font.getGlyph(r.id, r.codePoints)));
  }
  position(e) {
    return this.shaper.zeroMarkWidths === "BEFORE_GPOS" && this.zeroMarkAdvances(e.positions), this.GPOSProcessor && this.plan.process(this.GPOSProcessor, this.glyphInfos, e.positions), this.shaper.zeroMarkWidths === "AFTER_GPOS" && this.zeroMarkAdvances(e.positions), e.direction === "rtl" && (e.glyphs.reverse(), e.positions.reverse()), this.GPOSProcessor && this.GPOSProcessor.features;
  }
  zeroMarkAdvances(e) {
    for (let r = 0; r < this.glyphInfos.length; r++) this.glyphInfos[r].isMark && (e[r].xAdvance = 0, e[r].yAdvance = 0);
  }
  cleanup() {
    this.glyphInfos = null, this.plan = null, this.shaper = null;
  }
  getAvailableFeatures(e, r) {
    let i = [];
    return this.GSUBProcessor && (this.GSUBProcessor.selectScript(e, r), i.push(...Object.keys(this.GSUBProcessor.features))), this.GPOSProcessor && (this.GPOSProcessor.selectScript(e, r), i.push(...Object.keys(this.GPOSProcessor.features))), i;
  }
  constructor(e) {
    this.font = e, this.glyphInfos = null, this.plan = null, this.GSUBProcessor = null, this.GPOSProcessor = null, this.fallbackPosition = !0, e.GSUB && (this.GSUBProcessor = new dy(e, e.GSUB)), e.GPOS && (this.GPOSProcessor = new gy(e, e.GPOS));
  }
}
class vy {
  layout(e, r, i, n, a) {
    if (typeof r == "string" && (a = n, n = i, i = r, r = []), typeof e == "string") {
      i == null && (i = V9(e));
      var s = this.font.glyphsForString(e);
    } else {
      if (i == null) {
        let l = [];
        for (let f of e) l.push(...f.codePoints);
        i = Y9(l);
      }
      var s = e;
    }
    let o = new Z9(s, r, i, n, a);
    return s.length === 0 ? (o.positions = [], o) : (this.engine && this.engine.setup && this.engine.setup(o), this.substitute(o), this.position(o), this.hideDefaultIgnorables(o.glyphs, o.positions), this.engine && this.engine.cleanup && this.engine.cleanup(), o);
  }
  substitute(e) {
    this.engine && this.engine.substitute && this.engine.substitute(e);
  }
  position(e) {
    e.positions = e.glyphs.map((i) => new j9(i.advanceWidth));
    let r = null;
    this.engine && this.engine.position && (r = this.engine.position(e)), !r && (!this.engine || this.engine.fallbackPosition) && (this.unicodeLayoutEngine || (this.unicodeLayoutEngine = new H9(this.font)), this.unicodeLayoutEngine.positionGlyphs(e.glyphs, e.positions)), (!r || !r.kern) && e.features.kern !== !1 && this.font.kern && (this.kernProcessor || (this.kernProcessor = new W9(this.font)), this.kernProcessor.process(e.glyphs, e.positions), e.features.kern = !0);
  }
  hideDefaultIgnorables(e, r) {
    let i = this.font.glyphForCodePoint(32);
    for (let n = 0; n < e.length; n++) this.isDefaultIgnorable(e[n].codePoints[0]) && (e[n] = i, r[n].xAdvance = 0, r[n].yAdvance = 0);
  }
  isDefaultIgnorable(e) {
    let r = e >> 16;
    if (r === 0)
      switch (e >> 8) {
        case 0:
          return e === 173;
        case 3:
          return e === 847;
        case 6:
          return e === 1564;
        case 23:
          return 6068 <= e && e <= 6069;
        case 24:
          return 6155 <= e && e <= 6158;
        case 32:
          return 8203 <= e && e <= 8207 || 8234 <= e && e <= 8238 || 8288 <= e && e <= 8303;
        case 254:
          return 65024 <= e && e <= 65039 || e === 65279;
        case 255:
          return 65520 <= e && e <= 65528;
        default:
          return !1;
      }
    else
      switch (r) {
        case 1:
          return 113824 <= e && e <= 113827 || 119155 <= e && e <= 119162;
        case 14:
          return 917504 <= e && e <= 921599;
        default:
          return !1;
      }
  }
  getAvailableFeatures(e, r) {
    let i = [];
    return this.engine && i.push(...this.engine.getAvailableFeatures(e, r)), this.font.kern && i.indexOf("kern") === -1 && i.push("kern"), i;
  }
  stringsForGlyph(e) {
    let r = /* @__PURE__ */ new Set(), i = this.font._cmapProcessor.codePointsForGlyph(e);
    for (let n of i) r.add(String.fromCodePoint(n));
    if (this.engine && this.engine.stringsForGlyph) for (let n of this.engine.stringsForGlyph(e)) r.add(n);
    return Array.from(r);
  }
  constructor(e) {
    this.font = e, this.unicodeLayoutEngine = null, this.kernProcessor = null, this.font.morx ? this.engine = new gw(this.font) : (this.font.GSUB || this.font.GPOS) && (this.engine = new py(this.font));
  }
}
const my = {
  moveTo: "M",
  lineTo: "L",
  quadraticCurveTo: "Q",
  bezierCurveTo: "C",
  closePath: "Z"
};
class Yn {
  /**
  * Compiles the path to a JavaScript function that can be applied with
  * a graphics context in order to render the path.
  * @return {string}
  */
  toFunction() {
    return (e) => {
      this.commands.forEach((r) => e[r.command].apply(e, r.args));
    };
  }
  /**
  * Converts the path to an SVG path data string
  * @return {string}
  */
  toSVG() {
    return this.commands.map((r) => {
      let i = r.args.map((n) => Math.round(n * 100) / 100);
      return `${my[r.command]}${i.join(" ")}`;
    }).join("");
  }
  /**
  * Gets the "control box" of a path.
  * This is like the bounding box, but it includes all points including
  * control points of bezier segments and is much faster to compute than
  * the real bounding box.
  * @type {BBox}
  */
  get cbox() {
    if (!this._cbox) {
      let e = new ti();
      for (let r of this.commands) for (let i = 0; i < r.args.length; i += 2) e.addPoint(r.args[i], r.args[i + 1]);
      this._cbox = Object.freeze(e);
    }
    return this._cbox;
  }
  /**
  * Gets the exact bounding box of the path by evaluating curve segments.
  * Slower to compute than the control box, but more accurate.
  * @type {BBox}
  */
  get bbox() {
    if (this._bbox) return this._bbox;
    let e = new ti(), r = 0, i = 0, n = (b) => Math.pow(1 - b, 3) * d[A] + 3 * Math.pow(1 - b, 2) * b * p[A] + 3 * (1 - b) * Math.pow(b, 2) * m[A] + Math.pow(b, 3) * C[A];
    for (let b of this.commands) switch (b.command) {
      case "moveTo":
      case "lineTo":
        let [x, _] = b.args;
        e.addPoint(x, _), r = x, i = _;
        break;
      case "quadraticCurveTo":
      case "bezierCurveTo":
        if (b.command === "quadraticCurveTo")
          var [a, s, u, h] = b.args, o = r + 2 / 3 * (a - r), c = i + 2 / 3 * (s - i), l = u + 2 / 3 * (a - u), f = h + 2 / 3 * (s - h);
        else var [o, c, l, f, u, h] = b.args;
        e.addPoint(u, h);
        for (var d = [
          r,
          i
        ], p = [
          o,
          c
        ], m = [
          l,
          f
        ], C = [
          u,
          h
        ], A = 0; A <= 1; A++) {
          let v = 6 * d[A] - 12 * p[A] + 6 * m[A], F = -3 * d[A] + 9 * p[A] - 9 * m[A] + 3 * C[A];
          if (b = 3 * p[A] - 3 * d[A], F === 0) {
            if (v === 0) continue;
            let B = -b / v;
            0 < B && B < 1 && (A === 0 ? e.addPoint(n(B), e.maxY) : A === 1 && e.addPoint(e.maxX, n(B)));
            continue;
          }
          let S = Math.pow(v, 2) - 4 * b * F;
          if (S < 0) continue;
          let D = (-v + Math.sqrt(S)) / (2 * F);
          0 < D && D < 1 && (A === 0 ? e.addPoint(n(D), e.maxY) : A === 1 && e.addPoint(e.maxX, n(D)));
          let P = (-v - Math.sqrt(S)) / (2 * F);
          0 < P && P < 1 && (A === 0 ? e.addPoint(n(P), e.maxY) : A === 1 && e.addPoint(e.maxX, n(P)));
        }
        r = u, i = h;
        break;
    }
    return this._bbox = Object.freeze(e);
  }
  /**
  * Applies a mapping function to each point in the path.
  * @param {function} fn
  * @return {Path}
  */
  mapPoints(e) {
    let r = new Yn();
    for (let i of this.commands) {
      let n = [];
      for (let a = 0; a < i.args.length; a += 2) {
        let [s, o] = e(i.args[a], i.args[a + 1]);
        n.push(s, o);
      }
      r[i.command](...n);
    }
    return r;
  }
  /**
  * Transforms the path by the given matrix.
  */
  transform(e, r, i, n, a, s) {
    return this.mapPoints((o, c) => {
      const l = e * o + i * c + a, f = r * o + n * c + s;
      return [
        l,
        f
      ];
    });
  }
  /**
  * Translates the path by the given offset.
  */
  translate(e, r) {
    return this.transform(1, 0, 0, 1, e, r);
  }
  /**
  * Rotates the path by the given angle (in radians).
  */
  rotate(e) {
    let r = Math.cos(e), i = Math.sin(e);
    return this.transform(r, i, -i, r, 0, 0);
  }
  /**
  * Scales the path.
  */
  scale(e, r = e) {
    return this.transform(e, 0, 0, r, 0, 0);
  }
  constructor() {
    this.commands = [], this._bbox = null, this._cbox = null;
  }
}
for (let t of [
  "moveTo",
  "lineTo",
  "quadraticCurveTo",
  "bezierCurveTo",
  "closePath"
]) Yn.prototype[t] = function(...e) {
  return this._bbox = this._cbox = null, this.commands.push({
    command: t,
    args: e
  }), this;
};
var da = [
  ".notdef",
  ".null",
  "nonmarkingreturn",
  "space",
  "exclam",
  "quotedbl",
  "numbersign",
  "dollar",
  "percent",
  "ampersand",
  "quotesingle",
  "parenleft",
  "parenright",
  "asterisk",
  "plus",
  "comma",
  "hyphen",
  "period",
  "slash",
  "zero",
  "one",
  "two",
  "three",
  "four",
  "five",
  "six",
  "seven",
  "eight",
  "nine",
  "colon",
  "semicolon",
  "less",
  "equal",
  "greater",
  "question",
  "at",
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "bracketleft",
  "backslash",
  "bracketright",
  "asciicircum",
  "underscore",
  "grave",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "braceleft",
  "bar",
  "braceright",
  "asciitilde",
  "Adieresis",
  "Aring",
  "Ccedilla",
  "Eacute",
  "Ntilde",
  "Odieresis",
  "Udieresis",
  "aacute",
  "agrave",
  "acircumflex",
  "adieresis",
  "atilde",
  "aring",
  "ccedilla",
  "eacute",
  "egrave",
  "ecircumflex",
  "edieresis",
  "iacute",
  "igrave",
  "icircumflex",
  "idieresis",
  "ntilde",
  "oacute",
  "ograve",
  "ocircumflex",
  "odieresis",
  "otilde",
  "uacute",
  "ugrave",
  "ucircumflex",
  "udieresis",
  "dagger",
  "degree",
  "cent",
  "sterling",
  "section",
  "bullet",
  "paragraph",
  "germandbls",
  "registered",
  "copyright",
  "trademark",
  "acute",
  "dieresis",
  "notequal",
  "AE",
  "Oslash",
  "infinity",
  "plusminus",
  "lessequal",
  "greaterequal",
  "yen",
  "mu",
  "partialdiff",
  "summation",
  "product",
  "pi",
  "integral",
  "ordfeminine",
  "ordmasculine",
  "Omega",
  "ae",
  "oslash",
  "questiondown",
  "exclamdown",
  "logicalnot",
  "radical",
  "florin",
  "approxequal",
  "Delta",
  "guillemotleft",
  "guillemotright",
  "ellipsis",
  "nonbreakingspace",
  "Agrave",
  "Atilde",
  "Otilde",
  "OE",
  "oe",
  "endash",
  "emdash",
  "quotedblleft",
  "quotedblright",
  "quoteleft",
  "quoteright",
  "divide",
  "lozenge",
  "ydieresis",
  "Ydieresis",
  "fraction",
  "currency",
  "guilsinglleft",
  "guilsinglright",
  "fi",
  "fl",
  "daggerdbl",
  "periodcentered",
  "quotesinglbase",
  "quotedblbase",
  "perthousand",
  "Acircumflex",
  "Ecircumflex",
  "Aacute",
  "Edieresis",
  "Egrave",
  "Iacute",
  "Icircumflex",
  "Idieresis",
  "Igrave",
  "Oacute",
  "Ocircumflex",
  "apple",
  "Ograve",
  "Uacute",
  "Ucircumflex",
  "Ugrave",
  "dotlessi",
  "circumflex",
  "tilde",
  "macron",
  "breve",
  "dotaccent",
  "ring",
  "cedilla",
  "hungarumlaut",
  "ogonek",
  "caron",
  "Lslash",
  "lslash",
  "Scaron",
  "scaron",
  "Zcaron",
  "zcaron",
  "brokenbar",
  "Eth",
  "eth",
  "Yacute",
  "yacute",
  "Thorn",
  "thorn",
  "minus",
  "multiply",
  "onesuperior",
  "twosuperior",
  "threesuperior",
  "onehalf",
  "onequarter",
  "threequarters",
  "franc",
  "Gbreve",
  "gbreve",
  "Idotaccent",
  "Scedilla",
  "scedilla",
  "Cacute",
  "cacute",
  "Ccaron",
  "ccaron",
  "dcroat"
];
class rr {
  _getPath() {
    return new Yn();
  }
  _getCBox() {
    return this.path.cbox;
  }
  _getBBox() {
    return this.path.bbox;
  }
  _getTableMetrics(e) {
    if (this.id < e.metrics.length) return e.metrics.get(this.id);
    let r = e.metrics.get(e.metrics.length - 1);
    return {
      advance: r ? r.advance : 0,
      bearing: e.bearings.get(this.id - e.metrics.length) || 0
    };
  }
  _getMetrics(e) {
    if (this._metrics) return this._metrics;
    let { advance: r, bearing: i } = this._getTableMetrics(this._font.hmtx);
    if (this._font.vmtx) var { advance: n, bearing: a } = this._getTableMetrics(this._font.vmtx);
    else {
      let s;
      if ((typeof e > "u" || e === null) && ({ cbox: e } = this), (s = this._font["OS/2"]) && s.version > 0)
        var n = Math.abs(s.typoAscender - s.typoDescender), a = s.typoAscender - e.maxY;
      else {
        let { hhea: o } = this._font;
        var n = Math.abs(o.ascent - o.descent), a = o.ascent - e.maxY;
      }
    }
    return this._font._variationProcessor && this._font.HVAR && (r += this._font._variationProcessor.getAdvanceAdjustment(this.id, this._font.HVAR)), this._metrics = {
      advanceWidth: r,
      advanceHeight: n,
      leftBearing: i,
      topBearing: a
    };
  }
  /**
  * The glyph’s control box.
  * This is often the same as the bounding box, but is faster to compute.
  * Because of the way bezier curves are defined, some of the control points
  * can be outside of the bounding box. Where `bbox` takes this into account,
  * `cbox` does not. Thus, cbox is less accurate, but faster to compute.
  * See [here](http://www.freetype.org/freetype2/docs/glyphs/glyphs-6.html#section-2)
  * for a more detailed description.
  *
  * @type {BBox}
  */
  get cbox() {
    return this._getCBox();
  }
  /**
  * The glyph’s bounding box, i.e. the rectangle that encloses the
  * glyph outline as tightly as possible.
  * @type {BBox}
  */
  get bbox() {
    return this._getBBox();
  }
  /**
  * A vector Path object representing the glyph outline.
  * @type {Path}
  */
  get path() {
    return this._getPath();
  }
  /**
  * Returns a path scaled to the given font size.
  * @param {number} size
  * @return {Path}
  */
  getScaledPath(e) {
    let r = 1 / this._font.unitsPerEm * e;
    return this.path.scale(r);
  }
  /**
  * The glyph's advance width.
  * @type {number}
  */
  get advanceWidth() {
    return this._getMetrics().advanceWidth;
  }
  /**
  * The glyph's advance height.
  * @type {number}
  */
  get advanceHeight() {
    return this._getMetrics().advanceHeight;
  }
  get ligatureCaretPositions() {
  }
  _getName() {
    let { post: e } = this._font;
    if (!e) return null;
    switch (e.version) {
      case 1:
        return da[this.id];
      case 2:
        let r = e.glyphNameIndex[this.id];
        return r < da.length ? da[r] : e.names[r - da.length];
      case 2.5:
        return da[this.id + e.offsets[this.id]];
      case 4:
        return String.fromCharCode(e.map[this.id]);
    }
  }
  /**
  * The glyph's name
  * @type {string}
  */
  get name() {
    return this._getName();
  }
  /**
  * Renders the glyph to the given graphics context, at the specified font size.
  * @param {CanvasRenderingContext2d} ctx
  * @param {number} size
  */
  render(e, r) {
    e.save();
    let i = 1 / this._font.head.unitsPerEm * r;
    e.scale(i, i), this.path.toFunction()(e), e.fill(), e.restore();
  }
  constructor(e, r, i) {
    this.id = e, this.codePoints = r, this._font = i, this.isMark = this.codePoints.length > 0 && this.codePoints.every(T4), this.isLigature = this.codePoints.length > 1;
  }
}
D0([
  B0
], rr.prototype, "cbox", null);
D0([
  B0
], rr.prototype, "bbox", null);
D0([
  B0
], rr.prototype, "path", null);
D0([
  B0
], rr.prototype, "advanceWidth", null);
D0([
  B0
], rr.prototype, "advanceHeight", null);
D0([
  B0
], rr.prototype, "name", null);
let $5 = new W({
  numberOfContours: te,
  xMin: te,
  yMin: te,
  xMax: te,
  yMax: te
});
const by = 1, xy = 2, wy = 4, yy = 8, _y = 16, Ay = 32, Ey = 1, Cy = 8, z5 = 32, Sy = 64, Ty = 128, ky = 256;
class wt {
  copy() {
    return new wt(this.onCurve, this.endContour, this.x, this.y);
  }
  constructor(e, r, i = 0, n = 0) {
    this.onCurve = e, this.endContour = r, this.x = i, this.y = n;
  }
}
class Fy {
  constructor(e, r, i) {
    this.glyphID = e, this.dx = r, this.dy = i, this.pos = 0, this.scaleX = this.scaleY = 1, this.scale01 = this.scale10 = 0;
  }
}
class rl extends rr {
  // Parses just the glyph header and returns the bounding box
  _getCBox(e) {
    if (this._font._variationProcessor && !e) return this.path.cbox;
    let r = this._font._getTableStream("glyf");
    r.pos += this._font.loca.offsets[this.id];
    let i = $5.decode(r), n = new ti(i.xMin, i.yMin, i.xMax, i.yMax);
    return Object.freeze(n);
  }
  // Parses a single glyph coordinate
  _parseGlyphCoord(e, r, i, n) {
    if (i) {
      var a = e.readUInt8();
      n || (a = -a), a += r;
    } else if (n) var a = r;
    else var a = r + e.readInt16BE();
    return a;
  }
  // Decodes the glyph data into points for simple glyphs,
  // or components for composite glyphs
  _decode() {
    let e = this._font.loca.offsets[this.id], r = this._font.loca.offsets[this.id + 1];
    if (e === r) return null;
    let i = this._font._getTableStream("glyf");
    i.pos += e;
    let n = i.pos, a = $5.decode(i);
    return a.numberOfContours > 0 ? this._decodeSimple(a, i) : a.numberOfContours < 0 && this._decodeComposite(a, i, n), a;
  }
  _decodeSimple(e, r) {
    e.points = [];
    let i = new M(g, e.numberOfContours).decode(r);
    e.instructions = new M(se, g).decode(r);
    let n = [], a = i[i.length - 1] + 1;
    for (; n.length < a; ) {
      var s = r.readUInt8();
      if (n.push(s), s & yy) {
        let f = r.readUInt8();
        for (let u = 0; u < f; u++) n.push(s);
      }
    }
    for (var o = 0; o < n.length; o++) {
      var s = n[o];
      let u = new wt(!!(s & by), i.indexOf(o) >= 0, 0, 0);
      e.points.push(u);
    }
    let c = 0;
    for (var o = 0; o < n.length; o++) {
      var s = n[o];
      e.points[o].x = c = this._parseGlyphCoord(r, c, s & xy, s & _y);
    }
    let l = 0;
    for (var o = 0; o < n.length; o++) {
      var s = n[o];
      e.points[o].y = l = this._parseGlyphCoord(r, l, s & wy, s & Ay);
    }
    if (this._font._variationProcessor) {
      let f = e.points.slice();
      f.push(...this._getPhantomPoints(e)), this._font._variationProcessor.transformPoints(this.id, f), e.phantomPoints = f.slice(-4);
    }
  }
  _decodeComposite(e, r, i = 0) {
    e.components = [];
    let n = !1, a = z5;
    for (; a & z5; ) {
      a = r.readUInt16BE();
      let l = r.pos - i, f = r.readUInt16BE();
      if (n || (n = (a & ky) !== 0), a & Ey)
        var s = r.readInt16BE(), o = r.readInt16BE();
      else
        var s = r.readInt8(), o = r.readInt8();
      var c = new Fy(f, s, o);
      c.pos = l, a & Cy ? c.scaleX = c.scaleY = (r.readUInt8() << 24 | r.readUInt8() << 16) / 1073741824 : a & Sy ? (c.scaleX = (r.readUInt8() << 24 | r.readUInt8() << 16) / 1073741824, c.scaleY = (r.readUInt8() << 24 | r.readUInt8() << 16) / 1073741824) : a & Ty && (c.scaleX = (r.readUInt8() << 24 | r.readUInt8() << 16) / 1073741824, c.scale01 = (r.readUInt8() << 24 | r.readUInt8() << 16) / 1073741824, c.scale10 = (r.readUInt8() << 24 | r.readUInt8() << 16) / 1073741824, c.scaleY = (r.readUInt8() << 24 | r.readUInt8() << 16) / 1073741824), e.components.push(c);
    }
    if (this._font._variationProcessor) {
      let l = [];
      for (let f = 0; f < e.components.length; f++) {
        var c = e.components[f];
        l.push(new wt(!0, !0, c.dx, c.dy));
      }
      l.push(...this._getPhantomPoints(e)), this._font._variationProcessor.transformPoints(this.id, l), e.phantomPoints = l.splice(-4, 4);
      for (let f = 0; f < l.length; f++) {
        let u = l[f];
        e.components[f].dx = u.x, e.components[f].dy = u.y;
      }
    }
    return n;
  }
  _getPhantomPoints(e) {
    let r = this._getCBox(!0);
    this._metrics == null && (this._metrics = rr.prototype._getMetrics.call(this, r));
    let { advanceWidth: i, advanceHeight: n, leftBearing: a, topBearing: s } = this._metrics;
    return [
      new wt(!1, !0, e.xMin - a, 0),
      new wt(!1, !0, e.xMin - a + i, 0),
      new wt(!1, !0, 0, e.yMax + s),
      new wt(!1, !0, 0, e.yMax + s + n)
    ];
  }
  // Decodes font data, resolves composite glyphs, and returns an array of contours
  _getContours() {
    let e = this._decode();
    if (!e) return [];
    let r = [];
    if (e.numberOfContours < 0)
      for (let s of e.components) {
        let o = this._font.getGlyph(s.glyphID)._getContours();
        for (let c = 0; c < o.length; c++) {
          let l = o[c];
          for (let f = 0; f < l.length; f++) {
            let u = l[f], h = u.x * s.scaleX + u.y * s.scale01 + s.dx, d = u.y * s.scaleY + u.x * s.scale10 + s.dy;
            r.push(new wt(u.onCurve, u.endContour, h, d));
          }
        }
      }
    else r = e.points || [];
    e.phantomPoints && !this._font.directory.tables.HVAR && (this._metrics.advanceWidth = e.phantomPoints[1].x - e.phantomPoints[0].x, this._metrics.advanceHeight = e.phantomPoints[3].y - e.phantomPoints[2].y, this._metrics.leftBearing = e.xMin - e.phantomPoints[0].x, this._metrics.topBearing = e.phantomPoints[2].y - e.yMax);
    let i = [], n = [];
    for (let s = 0; s < r.length; s++) {
      var a = r[s];
      n.push(a), a.endContour && (i.push(n), n = []);
    }
    return i;
  }
  _getMetrics() {
    if (this._metrics) return this._metrics;
    let e = this._getCBox(!0);
    return super._getMetrics(e), this._font._variationProcessor && !this._font.HVAR && this.path, this._metrics;
  }
  // Converts contours to a Path object that can be rendered
  _getPath() {
    let e = this._getContours(), r = new Yn();
    for (let n = 0; n < e.length; n++) {
      let a = e[n], s = a[0], o = a[a.length - 1], c = 0;
      if (s.onCurve) {
        var i = null;
        c = 1;
      } else {
        o.onCurve ? s = o : s = new wt(!1, !1, (s.x + o.x) / 2, (s.y + o.y) / 2);
        var i = s;
      }
      r.moveTo(s.x, s.y);
      for (let l = c; l < a.length; l++) {
        let f = a[l], u = l === 0 ? s : a[l - 1];
        if (u.onCurve && f.onCurve) r.lineTo(f.x, f.y);
        else if (u.onCurve && !f.onCurve) var i = f;
        else if (!u.onCurve && !f.onCurve) {
          let d = (u.x + f.x) / 2, p = (u.y + f.y) / 2;
          r.quadraticCurveTo(u.x, u.y, d, p);
          var i = f;
        } else if (!u.onCurve && f.onCurve) {
          r.quadraticCurveTo(i.x, i.y, f.x, f.y);
          var i = null;
        } else throw new Error("Unknown TTF path state");
      }
      i && r.quadraticCurveTo(i.x, i.y, s.x, s.y), r.closePath();
    }
    return r;
  }
  constructor(...e) {
    super(...e), K0(this, "type", "TTF");
  }
}
class Oy extends rr {
  _getName() {
    return this._font.CFF2 ? super._getName() : this._font["CFF "].getGlyphName(this.id);
  }
  bias(e) {
    return e.length < 1240 ? 107 : e.length < 33900 ? 1131 : 32768;
  }
  _getPath() {
    let e = this._font.CFF2 || this._font["CFF "], { stream: r } = e, i = e.topDict.CharStrings[this.id], n = i.offset + i.length;
    r.pos = i.offset;
    let a = new Yn(), s = [], o = [], c = null, l = 0, f = 0, u = 0, h, d, p = !1;
    this._usedGsubrs = h = {}, this._usedSubrs = d = {};
    let m = e.globalSubrIndex || [], C = this.bias(m), A = e.privateDictForGlyph(this.id) || {}, b = A.Subrs || [], x = this.bias(b), _ = e.topDict.vstore && e.topDict.vstore.itemVariationStore, v = A.vsindex, F = this._font._variationProcessor;
    function S() {
      c == null && (c = s.shift() + A.nominalWidthX);
    }
    function D() {
      return s.length % 2 !== 0 && S(), l += s.length >> 1, s.length = 0;
    }
    function P(I, w) {
      p && a.closePath(), a.moveTo(I, w), p = !0;
    }
    let B = function() {
      for (; r.pos < n; ) {
        let k = r.readUInt8();
        if (k < 32) {
          let z, H, re, ie, X, oe, ae, V, Q, ne, ee, Se, Ae, ze, Z, K;
          switch (k) {
            case 1:
            case 3:
            case 18:
            case 23:
              D();
              break;
            case 4:
              s.length > 1 && S(), u += s.shift(), P(f, u);
              break;
            case 5:
              for (; s.length >= 2; )
                f += s.shift(), u += s.shift(), a.lineTo(f, u);
              break;
            case 6:
            case 7:
              for (re = k === 6; s.length >= 1; )
                re ? f += s.shift() : u += s.shift(), a.lineTo(f, u), re = !re;
              break;
            case 8:
              for (; s.length > 0; )
                ie = f + s.shift(), X = u + s.shift(), oe = ie + s.shift(), ae = X + s.shift(), f = oe + s.shift(), u = ae + s.shift(), a.bezierCurveTo(ie, X, oe, ae, f, u);
              break;
            case 10:
              if (z = s.pop() + x, H = b[z], H) {
                d[z] = !0;
                let G = r.pos, Y = n;
                r.pos = H.offset, n = H.offset + H.length, B(), r.pos = G, n = Y;
              }
              break;
            case 11:
              if (e.version >= 2) break;
              return;
            case 14:
              if (e.version >= 2) break;
              s.length > 0 && S(), p && (a.closePath(), p = !1);
              break;
            case 15:
              if (e.version < 2) throw new Error("vsindex operator not supported in CFF v1");
              v = s.pop();
              break;
            case 16: {
              if (e.version < 2) throw new Error("blend operator not supported in CFF v1");
              if (!F) throw new Error("blend operator in non-variation font");
              let G = F.getBlendVector(_, v), Y = s.pop(), de = Y * G.length, he = s.length - de, ue = he - Y;
              for (let pe = 0; pe < Y; pe++) {
                let Ee = s[ue + pe];
                for (let be = 0; be < G.length; be++) Ee += G[be] * s[he++];
                s[ue + pe] = Ee;
              }
              for (; de--; ) s.pop();
              break;
            }
            case 19:
            case 20:
              D(), r.pos += l + 7 >> 3;
              break;
            case 21:
              s.length > 2 && S(), f += s.shift(), u += s.shift(), P(f, u);
              break;
            case 22:
              s.length > 1 && S(), f += s.shift(), P(f, u);
              break;
            case 24:
              for (; s.length >= 8; )
                ie = f + s.shift(), X = u + s.shift(), oe = ie + s.shift(), ae = X + s.shift(), f = oe + s.shift(), u = ae + s.shift(), a.bezierCurveTo(ie, X, oe, ae, f, u);
              f += s.shift(), u += s.shift(), a.lineTo(f, u);
              break;
            case 25:
              for (; s.length >= 8; )
                f += s.shift(), u += s.shift(), a.lineTo(f, u);
              ie = f + s.shift(), X = u + s.shift(), oe = ie + s.shift(), ae = X + s.shift(), f = oe + s.shift(), u = ae + s.shift(), a.bezierCurveTo(ie, X, oe, ae, f, u);
              break;
            case 26:
              for (s.length % 2 && (f += s.shift()); s.length >= 4; )
                ie = f, X = u + s.shift(), oe = ie + s.shift(), ae = X + s.shift(), f = oe, u = ae + s.shift(), a.bezierCurveTo(ie, X, oe, ae, f, u);
              break;
            case 27:
              for (s.length % 2 && (u += s.shift()); s.length >= 4; )
                ie = f + s.shift(), X = u, oe = ie + s.shift(), ae = X + s.shift(), f = oe + s.shift(), u = ae, a.bezierCurveTo(ie, X, oe, ae, f, u);
              break;
            case 28:
              s.push(r.readInt16BE());
              break;
            case 29:
              if (z = s.pop() + C, H = m[z], H) {
                h[z] = !0;
                let G = r.pos, Y = n;
                r.pos = H.offset, n = H.offset + H.length, B(), r.pos = G, n = Y;
              }
              break;
            case 30:
            case 31:
              for (re = k === 31; s.length >= 4; )
                re ? (ie = f + s.shift(), X = u, oe = ie + s.shift(), ae = X + s.shift(), u = ae + s.shift(), f = oe + (s.length === 1 ? s.shift() : 0)) : (ie = f, X = u + s.shift(), oe = ie + s.shift(), ae = X + s.shift(), f = oe + s.shift(), u = ae + (s.length === 1 ? s.shift() : 0)), a.bezierCurveTo(ie, X, oe, ae, f, u), re = !re;
              break;
            case 12:
              switch (k = r.readUInt8(), k) {
                case 3:
                  let G = s.pop(), Y = s.pop();
                  s.push(G && Y ? 1 : 0);
                  break;
                case 4:
                  G = s.pop(), Y = s.pop(), s.push(G || Y ? 1 : 0);
                  break;
                case 5:
                  G = s.pop(), s.push(G ? 0 : 1);
                  break;
                case 9:
                  G = s.pop(), s.push(Math.abs(G));
                  break;
                case 10:
                  G = s.pop(), Y = s.pop(), s.push(G + Y);
                  break;
                case 11:
                  G = s.pop(), Y = s.pop(), s.push(G - Y);
                  break;
                case 12:
                  G = s.pop(), Y = s.pop(), s.push(G / Y);
                  break;
                case 14:
                  G = s.pop(), s.push(-G);
                  break;
                case 15:
                  G = s.pop(), Y = s.pop(), s.push(G === Y ? 1 : 0);
                  break;
                case 18:
                  s.pop();
                  break;
                case 20:
                  let de = s.pop(), he = s.pop();
                  o[he] = de;
                  break;
                case 21:
                  he = s.pop(), s.push(o[he] || 0);
                  break;
                case 22:
                  let ue = s.pop(), pe = s.pop(), Ee = s.pop(), be = s.pop();
                  s.push(Ee <= be ? ue : pe);
                  break;
                case 23:
                  s.push(Math.random());
                  break;
                case 24:
                  G = s.pop(), Y = s.pop(), s.push(G * Y);
                  break;
                case 26:
                  G = s.pop(), s.push(Math.sqrt(G));
                  break;
                case 27:
                  G = s.pop(), s.push(G, G);
                  break;
                case 28:
                  G = s.pop(), Y = s.pop(), s.push(Y, G);
                  break;
                case 29:
                  he = s.pop(), he < 0 ? he = 0 : he > s.length - 1 && (he = s.length - 1), s.push(s[he]);
                  break;
                case 30:
                  let fe = s.pop(), Ie = s.pop();
                  if (Ie >= 0) for (; Ie > 0; ) {
                    var I = s[fe - 1];
                    for (let Re = fe - 2; Re >= 0; Re--) s[Re + 1] = s[Re];
                    s[0] = I, Ie--;
                  }
                  else for (; Ie < 0; ) {
                    var I = s[0];
                    for (let e0 = 0; e0 <= fe; e0++) s[e0] = s[e0 + 1];
                    s[fe - 1] = I, Ie++;
                  }
                  break;
                case 34:
                  ie = f + s.shift(), X = u, oe = ie + s.shift(), ae = X + s.shift(), V = oe + s.shift(), Q = ae, ne = V + s.shift(), ee = Q, Se = ne + s.shift(), Ae = ee, ze = Se + s.shift(), Z = Ae, f = ze, u = Z, a.bezierCurveTo(ie, X, oe, ae, V, Q), a.bezierCurveTo(ne, ee, Se, Ae, ze, Z);
                  break;
                case 35:
                  K = [];
                  for (let Re = 0; Re <= 5; Re++)
                    f += s.shift(), u += s.shift(), K.push(f, u);
                  a.bezierCurveTo(...K.slice(0, 6)), a.bezierCurveTo(...K.slice(6)), s.shift();
                  break;
                case 36:
                  ie = f + s.shift(), X = u + s.shift(), oe = ie + s.shift(), ae = X + s.shift(), V = oe + s.shift(), Q = ae, ne = V + s.shift(), ee = Q, Se = ne + s.shift(), Ae = ee + s.shift(), ze = Se + s.shift(), Z = Ae, f = ze, u = Z, a.bezierCurveTo(ie, X, oe, ae, V, Q), a.bezierCurveTo(ne, ee, Se, Ae, ze, Z);
                  break;
                case 37:
                  let o0 = f, i0 = u;
                  K = [];
                  for (let Re = 0; Re <= 4; Re++)
                    f += s.shift(), u += s.shift(), K.push(f, u);
                  Math.abs(f - o0) > Math.abs(u - i0) ? (f += s.shift(), u = i0) : (f = o0, u += s.shift()), K.push(f, u), a.bezierCurveTo(...K.slice(0, 6)), a.bezierCurveTo(...K.slice(6));
                  break;
                default:
                  throw new Error(`Unknown op: 12 ${k}`);
              }
              break;
            default:
              throw new Error(`Unknown op: ${k}`);
          }
        } else if (k < 247) s.push(k - 139);
        else if (k < 251) {
          var w = r.readUInt8();
          s.push((k - 247) * 256 + w + 108);
        } else if (k < 255) {
          var w = r.readUInt8();
          s.push(-(k - 251) * 256 - w - 108);
        } else s.push(r.readInt32BE() / 65536);
      }
    };
    return B(), p && a.closePath(), a;
  }
  constructor(...e) {
    super(...e), K0(this, "type", "CFF");
  }
}
let Dy = new W({
  originX: g,
  originY: g,
  type: new Ge(4),
  data: new F0((t) => t.parent.buflen - t._currentOffset)
});
class By extends rl {
  /**
  * Returns an object representing a glyph image at the given point size.
  * The object has a data property with a Buffer containing the actual image data,
  * along with the image type, and origin.
  *
  * @param {number} size
  * @return {object}
  */
  getImageForSize(e) {
    for (let s = 0; s < this._font.sbix.imageTables.length; s++) {
      var r = this._font.sbix.imageTables[s];
      if (r.ppem >= e) break;
    }
    let i = r.imageOffsets, n = i[this.id], a = i[this.id + 1];
    return n === a ? null : (this._font.stream.pos = n, Dy.decode(this._font.stream, {
      buflen: a - n
    }));
  }
  render(e, r) {
    let i = this.getImageForSize(r);
    if (i != null) {
      let n = r / this._font.unitsPerEm;
      e.image(i.data, {
        height: r,
        x: i.originX,
        y: (this.bbox.minY - i.originY) * n
      });
    }
    this._font.sbix.flags.renderOutlines && super.render(e, r);
  }
  constructor(...e) {
    super(...e), K0(this, "type", "SBIX");
  }
}
class W5 {
  constructor(e, r) {
    this.glyph = e, this.color = r;
  }
}
class Iy extends rr {
  _getBBox() {
    let e = new ti();
    for (let r = 0; r < this.layers.length; r++) {
      let n = this.layers[r].glyph.bbox;
      e.addPoint(n.minX, n.minY), e.addPoint(n.maxX, n.maxY);
    }
    return e;
  }
  /**
  * Returns an array of objects containing the glyph and color for
  * each layer in the composite color glyph.
  * @type {object[]}
  */
  get layers() {
    let e = this._font.CPAL, r = this._font.COLR, i = 0, n = r.baseGlyphRecord.length - 1;
    for (; i <= n; ) {
      let f = i + n >> 1;
      var a = r.baseGlyphRecord[f];
      if (this.id < a.gid) n = f - 1;
      else if (this.id > a.gid) i = f + 1;
      else {
        var s = a;
        break;
      }
    }
    if (s == null) {
      var o = this._font._getBaseGlyph(this.id), c = {
        red: 0,
        green: 0,
        blue: 0,
        alpha: 255
      };
      return [
        new W5(o, c)
      ];
    }
    let l = [];
    for (let f = s.firstLayerIndex; f < s.firstLayerIndex + s.numLayers; f++) {
      var a = r.layerRecords[f], c = e.colorRecords[a.paletteIndex], o = this._font._getBaseGlyph(a.gid);
      l.push(new W5(o, c));
    }
    return l;
  }
  render(e, r) {
    for (let { glyph: i, color: n } of this.layers)
      e.fillColor([
        n.red,
        n.green,
        n.blue
      ], n.alpha / 255 * 100), i.render(e, r);
  }
  constructor(...e) {
    super(...e), K0(this, "type", "COLR");
  }
}
const Ry = 32768, Py = 4095, Ly = 32768, H5 = 16384, Ny = 8192, q5 = 4095, V5 = 128, Y5 = 127, My = 128, Uy = 64, $y = 63;
class zy {
  normalizeCoords(e) {
    let r = [];
    for (var i = 0; i < this.font.fvar.axis.length; i++) {
      let n = this.font.fvar.axis[i];
      e[i] < n.defaultValue ? r.push((e[i] - n.defaultValue + Number.EPSILON) / (n.defaultValue - n.minValue + Number.EPSILON)) : r.push((e[i] - n.defaultValue + Number.EPSILON) / (n.maxValue - n.defaultValue + Number.EPSILON));
    }
    if (this.font.avar) for (var i = 0; i < this.font.avar.segment.length; i++) {
      let a = this.font.avar.segment[i];
      for (let s = 0; s < a.correspondence.length; s++) {
        let o = a.correspondence[s];
        if (s >= 1 && r[i] < o.fromCoord) {
          let c = a.correspondence[s - 1];
          r[i] = ((r[i] - c.fromCoord) * (o.toCoord - c.toCoord) + Number.EPSILON) / (o.fromCoord - c.fromCoord + Number.EPSILON) + c.toCoord;
          break;
        }
      }
    }
    return r;
  }
  transformPoints(e, r) {
    if (!this.font.fvar || !this.font.gvar) return;
    let { gvar: i } = this.font;
    if (e >= i.glyphCount) return;
    let n = i.offsets[e];
    if (n === i.offsets[e + 1]) return;
    let { stream: a } = this.font;
    if (a.pos = n, a.pos >= a.length) return;
    let s = a.readUInt16BE(), o = n + a.readUInt16BE();
    if (s & Ry) {
      var c = a.pos;
      a.pos = o;
      var l = this.decodePoints();
      o = a.pos, a.pos = c;
    }
    let f = r.map((C) => C.copy());
    s &= Py;
    for (let C = 0; C < s; C++) {
      let A = a.readUInt16BE(), b = a.readUInt16BE();
      if (b & Ly) {
        var u = [];
        for (let D = 0; D < i.axisCount; D++) u.push(a.readInt16BE() / 16384);
      } else {
        if ((b & q5) >= i.globalCoordCount) throw new Error("Invalid gvar table");
        var u = i.globalCoords[b & q5];
      }
      if (b & H5) {
        var h = [];
        for (let D = 0; D < i.axisCount; D++) h.push(a.readInt16BE() / 16384);
        var d = [];
        for (let D = 0; D < i.axisCount; D++) d.push(a.readInt16BE() / 16384);
      }
      let x = this.tupleFactor(b, u, h, d);
      if (x === 0) {
        o += A;
        continue;
      }
      var c = a.pos;
      if (a.pos = o, b & Ny) var p = this.decodePoints();
      else var p = l;
      let v = p.length === 0 ? r.length : p.length, F = this.decodeDeltas(v), S = this.decodeDeltas(v);
      if (p.length === 0) for (let D = 0; D < r.length; D++) {
        var m = r[D];
        m.x += Math.round(F[D] * x), m.y += Math.round(S[D] * x);
      }
      else {
        let D = f.map((B) => B.copy()), P = r.map(() => !1);
        for (let B = 0; B < p.length; B++) {
          let I = p[B];
          if (I < r.length) {
            let w = D[I];
            P[I] = !0, w.x += F[B] * x, w.y += S[B] * x;
          }
        }
        this.interpolateMissingDeltas(D, f, P);
        for (let B = 0; B < r.length; B++) {
          let I = D[B].x - f[B].x, w = D[B].y - f[B].y;
          r[B].x = Math.round(r[B].x + I), r[B].y = Math.round(r[B].y + w);
        }
      }
      o += A, a.pos = c;
    }
  }
  decodePoints() {
    let e = this.font.stream, r = e.readUInt8();
    r & V5 && (r = (r & Y5) << 8 | e.readUInt8());
    let i = new Uint16Array(r), n = 0, a = 0;
    for (; n < r; ) {
      let s = e.readUInt8(), o = (s & Y5) + 1, c = s & V5 ? e.readUInt16 : e.readUInt8;
      for (let l = 0; l < o && n < r; l++)
        a += c.call(e), i[n++] = a;
    }
    return i;
  }
  decodeDeltas(e) {
    let r = this.font.stream, i = 0, n = new Int16Array(e);
    for (; i < e; ) {
      let a = r.readUInt8(), s = (a & $y) + 1;
      if (a & My) i += s;
      else {
        let o = a & Uy ? r.readInt16BE : r.readInt8;
        for (let c = 0; c < s && i < e; c++) n[i++] = o.call(r);
      }
    }
    return n;
  }
  tupleFactor(e, r, i, n) {
    let a = this.normalizedCoords, { gvar: s } = this.font, o = 1;
    for (let c = 0; c < s.axisCount; c++)
      if (r[c] !== 0) {
        if (a[c] === 0) return 0;
        if (e & H5) {
          if (a[c] < i[c] || a[c] > n[c]) return 0;
          a[c] < r[c] ? o = o * (a[c] - i[c] + Number.EPSILON) / (r[c] - i[c] + Number.EPSILON) : o = o * (n[c] - a[c] + Number.EPSILON) / (n[c] - r[c] + Number.EPSILON);
        } else {
          if (a[c] < Math.min(0, r[c]) || a[c] > Math.max(0, r[c])) return 0;
          o = (o * a[c] + Number.EPSILON) / (r[c] + Number.EPSILON);
        }
      }
    return o;
  }
  // Interpolates points without delta values.
  // Needed for the Ø and Q glyphs in Skia.
  // Algorithm from Freetype.
  interpolateMissingDeltas(e, r, i) {
    if (e.length === 0) return;
    let n = 0;
    for (; n < e.length; ) {
      let a = n, s = n, o = e[s];
      for (; !o.endContour; ) o = e[++s];
      for (; n <= s && !i[n]; ) n++;
      if (n > s) continue;
      let c = n, l = n;
      for (n++; n <= s; )
        i[n] && (this.deltaInterpolate(l + 1, n - 1, l, n, r, e), l = n), n++;
      l === c ? this.deltaShift(a, s, l, r, e) : (this.deltaInterpolate(l + 1, s, l, c, r, e), c > 0 && this.deltaInterpolate(a, c - 1, l, c, r, e)), n = s + 1;
    }
  }
  deltaInterpolate(e, r, i, n, a, s) {
    if (e > r) return;
    let o = [
      "x",
      "y"
    ];
    for (let l = 0; l < o.length; l++) {
      let f = o[l];
      if (a[i][f] > a[n][f]) {
        var c = i;
        i = n, n = c;
      }
      let u = a[i][f], h = a[n][f], d = s[i][f], p = s[n][f];
      if (u !== h || d === p) {
        let m = u === h ? 0 : (p - d) / (h - u);
        for (let C = e; C <= r; C++) {
          let A = a[C][f];
          A <= u ? A += d - u : A >= h ? A += p - h : A = d + (A - u) * m, s[C][f] = A;
        }
      }
    }
  }
  deltaShift(e, r, i, n, a) {
    let s = a[i].x - n[i].x, o = a[i].y - n[i].y;
    if (!(s === 0 && o === 0))
      for (let c = e; c <= r; c++) c !== i && (a[c].x += s, a[c].y += o);
  }
  getAdvanceAdjustment(e, r) {
    let i, n;
    if (r.advanceWidthMapping) {
      let a = e;
      a >= r.advanceWidthMapping.mapCount && (a = r.advanceWidthMapping.mapCount - 1), r.advanceWidthMapping.entryFormat, { outerIndex: i, innerIndex: n } = r.advanceWidthMapping.mapData[a];
    } else
      i = 0, n = e;
    return this.getDelta(r.itemVariationStore, i, n);
  }
  // See pseudo code from `Font Variations Overview'
  // in the OpenType specification.
  getDelta(e, r, i) {
    if (r >= e.itemVariationData.length) return 0;
    let n = e.itemVariationData[r];
    if (i >= n.deltaSets.length) return 0;
    let a = n.deltaSets[i], s = this.getBlendVector(e, r), o = 0;
    for (let c = 0; c < n.regionIndexCount; c++) o += a.deltas[c] * s[c];
    return o;
  }
  getBlendVector(e, r) {
    let i = e.itemVariationData[r];
    if (this.blendVectors.has(i)) return this.blendVectors.get(i);
    let n = this.normalizedCoords, a = [];
    for (let s = 0; s < i.regionIndexCount; s++) {
      let o = 1, c = i.regionIndexes[s], l = e.variationRegionList.variationRegions[c];
      for (let f = 0; f < l.length; f++) {
        let u = l[f], h;
        u.startCoord > u.peakCoord || u.peakCoord > u.endCoord || u.startCoord < 0 && u.endCoord > 0 && u.peakCoord !== 0 || u.peakCoord === 0 ? h = 1 : n[f] < u.startCoord || n[f] > u.endCoord ? h = 0 : n[f] === u.peakCoord ? h = 1 : n[f] < u.peakCoord ? h = (n[f] - u.startCoord + Number.EPSILON) / (u.peakCoord - u.startCoord + Number.EPSILON) : h = (u.endCoord - n[f] + Number.EPSILON) / (u.endCoord - u.peakCoord + Number.EPSILON), o *= h;
      }
      a[s] = o;
    }
    return this.blendVectors.set(i, a), a;
  }
  constructor(e, r) {
    this.font = e, this.normalizedCoords = this.normalizeCoords(r), this.blendVectors = /* @__PURE__ */ new Map();
  }
}
Promise.resolve();
class dg {
  includeGlyph(e) {
    return typeof e == "object" && (e = e.id), this.mapping[e] == null && (this.glyphs.push(e), this.mapping[e] = this.glyphs.length - 1), this.mapping[e];
  }
  constructor(e) {
    this.font = e, this.glyphs = [], this.mapping = {}, this.includeGlyph(0);
  }
}
const Wy = 1, Hy = 2, qy = 4, Vy = 8, Yy = 16, Gy = 32;
class G5 {
  static size(e) {
    return e >= 0 && e <= 255 ? 1 : 2;
  }
  static encode(e, r) {
    r >= 0 && r <= 255 ? e.writeUInt8(r) : e.writeInt16BE(r);
  }
}
let Z5 = new W({
  numberOfContours: te,
  xMin: te,
  yMin: te,
  xMax: te,
  yMax: te,
  endPtsOfContours: new M(g, "numberOfContours"),
  instructions: new M(se, g),
  flags: new M(se, 0),
  xPoints: new M(G5, 0),
  yPoints: new M(G5, 0)
});
class Zy {
  encodeSimple(e, r = []) {
    let i = [], n = [], a = [], s = [], o = 0, c = 0, l = 0, f = 0, u = 0;
    for (let A = 0; A < e.commands.length; A++) {
      let b = e.commands[A];
      for (let x = 0; x < b.args.length; x += 2) {
        let _ = b.args[x], v = b.args[x + 1], F = 0;
        if (b.command === "quadraticCurveTo" && x === 2) {
          let S = e.commands[A + 1];
          if (S && S.command === "quadraticCurveTo") {
            let D = (c + S.args[0]) / 2, P = (l + S.args[1]) / 2;
            if (_ === D && v === P) continue;
          }
        }
        b.command === "quadraticCurveTo" && x === 0 || (F |= Wy), F = this._encodePoint(_, c, n, F, Hy, Yy), F = this._encodePoint(v, l, a, F, qy, Gy), F === f && o < 255 ? (s[s.length - 1] |= Vy, o++) : (o > 0 && (s.push(o), o = 0), s.push(F), f = F), c = _, l = v, u++;
      }
      b.command === "closePath" && i.push(u - 1);
    }
    e.commands.length > 1 && e.commands[e.commands.length - 1].command !== "closePath" && i.push(u - 1);
    let h = e.bbox, d = {
      numberOfContours: i.length,
      xMin: h.minX,
      yMin: h.minY,
      xMax: h.maxX,
      yMax: h.maxY,
      endPtsOfContours: i,
      instructions: r,
      flags: s,
      xPoints: n,
      yPoints: a
    }, p = Z5.size(d), m = 4 - p % 4, C = new po(p + m);
    return Z5.encode(C, d), m !== 0 && C.fill(0, m), C.buffer;
  }
  _encodePoint(e, r, i, n, a, s) {
    let o = e - r;
    return e === r ? n |= s : (-255 <= o && o <= 255 && (n |= a, o < 0 ? o = -o : n |= s), i.push(o)), n;
  }
}
class jy extends dg {
  _addGlyph(e) {
    let r = this.font.getGlyph(e), i = r._decode(), n = this.font.loca.offsets[e], a = this.font.loca.offsets[e + 1], s = this.font._getTableStream("glyf");
    s.pos += n;
    let o = s.readBuffer(a - n);
    if (i && i.numberOfContours < 0) {
      o = new Uint8Array(o);
      let c = new DataView(o.buffer);
      for (let l of i.components)
        e = this.includeGlyph(l.glyphID), c.setUint16(l.pos, e);
    } else i && this.font._variationProcessor && (o = this.glyphEncoder.encodeSimple(r.path, i.instructions));
    return this.glyf.push(o), this.loca.offsets.push(this.offset), this.hmtx.metrics.push({
      advance: r.advanceWidth,
      bearing: r._getMetrics().leftBearing
    }), this.offset += o.length, this.glyf.length - 1;
  }
  encode() {
    this.glyf = [], this.offset = 0, this.loca = {
      offsets: [],
      version: this.font.loca.version
    }, this.hmtx = {
      metrics: [],
      bearings: []
    };
    let e = 0;
    for (; e < this.glyphs.length; ) this._addGlyph(this.glyphs[e++]);
    let r = rc(this.font.maxp);
    r.numGlyphs = this.glyf.length, this.loca.offsets.push(this.offset);
    let i = rc(this.font.head);
    i.indexToLocFormat = this.loca.version;
    let n = rc(this.font.hhea);
    return n.numberOfMetrics = this.hmtx.metrics.length, rg.toBuffer({
      tables: {
        head: i,
        hhea: n,
        loca: this.loca,
        maxp: r,
        "cvt ": this.font["cvt "],
        prep: this.font.prep,
        glyf: this.glyf,
        hmtx: this.hmtx,
        fpgm: this.font.fpgm
      }
    });
  }
  constructor(e) {
    super(e), this.glyphEncoder = new Zy();
  }
}
class Xy extends dg {
  subsetCharstrings() {
    this.charstrings = [];
    let e = {};
    for (let r of this.glyphs) {
      this.charstrings.push(this.cff.getCharString(r));
      let i = this.font.getGlyph(r);
      i.path;
      for (let n in i._usedGsubrs) e[n] = !0;
    }
    this.gsubrs = this.subsetSubrs(this.cff.globalSubrIndex, e);
  }
  subsetSubrs(e, r) {
    let i = [];
    for (let n = 0; n < e.length; n++) {
      let a = e[n];
      r[n] ? (this.cff.stream.pos = a.offset, i.push(this.cff.stream.readBuffer(a.length))) : i.push(new Uint8Array([
        11
      ]));
    }
    return i;
  }
  subsetFontdict(e) {
    e.FDArray = [], e.FDSelect = {
      version: 0,
      fds: []
    };
    let r = {}, i = [], n = {};
    for (let a of this.glyphs) {
      let s = this.cff.fdForGlyph(a);
      if (s == null) continue;
      r[s] || (e.FDArray.push(Object.assign({}, this.cff.topDict.FDArray[s])), i.push({}), n[s] = e.FDArray.length - 1), r[s] = !0, e.FDSelect.fds.push(n[s]);
      let o = this.font.getGlyph(a);
      o.path;
      for (let c in o._usedSubrs) i[n[s]][c] = !0;
    }
    for (let a = 0; a < e.FDArray.length; a++) {
      let s = e.FDArray[a];
      delete s.FontName, s.Private && s.Private.Subrs && (s.Private = Object.assign({}, s.Private), s.Private.Subrs = this.subsetSubrs(s.Private.Subrs, i[a]));
    }
  }
  createCIDFontdict(e) {
    let r = {};
    for (let n of this.glyphs) {
      let a = this.font.getGlyph(n);
      a.path;
      for (let s in a._usedSubrs) r[s] = !0;
    }
    let i = Object.assign({}, this.cff.topDict.Private);
    return this.cff.topDict.Private && this.cff.topDict.Private.Subrs && (i.Subrs = this.subsetSubrs(this.cff.topDict.Private.Subrs, r)), e.FDArray = [
      {
        Private: i
      }
    ], e.FDSelect = {
      version: 3,
      nRanges: 1,
      ranges: [
        {
          first: 0,
          fd: 0
        }
      ],
      sentinel: this.charstrings.length
    };
  }
  addString(e) {
    return e ? (this.strings || (this.strings = []), this.strings.push(e), Js.length + this.strings.length - 1) : null;
  }
  encode() {
    this.subsetCharstrings();
    let e = {
      version: this.charstrings.length > 255 ? 2 : 1,
      ranges: [
        {
          first: 1,
          nLeft: this.charstrings.length - 2
        }
      ]
    }, r = Object.assign({}, this.cff.topDict);
    r.Private = null, r.charset = e, r.Encoding = null, r.CharStrings = this.charstrings;
    for (let n of [
      "version",
      "Notice",
      "Copyright",
      "FullName",
      "FamilyName",
      "Weight",
      "PostScript",
      "BaseFontName",
      "FontName"
    ]) r[n] = this.addString(this.cff.string(r[n]));
    r.ROS = [
      this.addString("Adobe"),
      this.addString("Identity"),
      0
    ], r.CIDCount = this.charstrings.length, this.cff.isCIDFont ? this.subsetFontdict(r) : this.createCIDFontdict(r);
    let i = {
      version: 1,
      hdrSize: this.cff.hdrSize,
      offSize: 4,
      header: this.cff.header,
      nameIndex: [
        this.cff.postscriptName
      ],
      topDictIndex: [
        r
      ],
      stringIndex: this.strings,
      globalSubrIndex: this.gsubrs
    };
    return K4.toBuffer(i);
  }
  constructor(e) {
    if (super(e), this.cff = this.font["CFF "], !this.cff) throw new Error("Not a CFF Font");
  }
}
class R0 {
  static probe(e) {
    let r = Jo.decode(e.slice(0, 4));
    return r === "true" || r === "OTTO" || r === "\0\0\0";
  }
  setDefaultLanguage(e = null) {
    this.defaultLanguage = e;
  }
  _getTable(e) {
    if (!(e.tag in this._tables)) try {
      this._tables[e.tag] = this._decodeTable(e);
    } catch {
    }
    return this._tables[e.tag];
  }
  _getTableStream(e) {
    let r = this.directory.tables[e];
    return r ? (this.stream.pos = r.offset, this.stream) : null;
  }
  _decodeDirectory() {
    return this.directory = rg.decode(this.stream, {
      _startOffset: 0
    });
  }
  _decodeTable(e) {
    let r = this.stream.pos, i = this._getTableStream(e.tag), n = _o[e.tag].decode(i, this, e.length);
    return this.stream.pos = r, n;
  }
  /**
  * Gets a string from the font's `name` table
  * `lang` is a BCP-47 language code.
  * @return {string}
  */
  getName(e, r = this.defaultLanguage || xo) {
    let i = this.name && this.name.records[e];
    return i && (i[r] || i[this.defaultLanguage] || i[xo] || i.en || i[Object.keys(i)[0]]) || null;
  }
  /**
  * The unique PostScript name for this font, e.g. "Helvetica-Bold"
  * @type {string}
  */
  get postscriptName() {
    return this.getName("postscriptName");
  }
  /**
  * The font's full name, e.g. "Helvetica Bold"
  * @type {string}
  */
  get fullName() {
    return this.getName("fullName");
  }
  /**
  * The font's family name, e.g. "Helvetica"
  * @type {string}
  */
  get familyName() {
    return this.getName("fontFamily");
  }
  /**
  * The font's sub-family, e.g. "Bold".
  * @type {string}
  */
  get subfamilyName() {
    return this.getName("fontSubfamily");
  }
  /**
  * The font's copyright information
  * @type {string}
  */
  get copyright() {
    return this.getName("copyright");
  }
  /**
  * The font's version number
  * @type {string}
  */
  get version() {
    return this.getName("version");
  }
  /**
  * The font’s [ascender](https://en.wikipedia.org/wiki/Ascender_(typography))
  * @type {number}
  */
  get ascent() {
    return this.hhea.ascent;
  }
  /**
  * The font’s [descender](https://en.wikipedia.org/wiki/Descender)
  * @type {number}
  */
  get descent() {
    return this.hhea.descent;
  }
  /**
  * The amount of space that should be included between lines
  * @type {number}
  */
  get lineGap() {
    return this.hhea.lineGap;
  }
  /**
  * The offset from the normal underline position that should be used
  * @type {number}
  */
  get underlinePosition() {
    return this.post.underlinePosition;
  }
  /**
  * The weight of the underline that should be used
  * @type {number}
  */
  get underlineThickness() {
    return this.post.underlineThickness;
  }
  /**
  * If this is an italic font, the angle the cursor should be drawn at to match the font design
  * @type {number}
  */
  get italicAngle() {
    return this.post.italicAngle;
  }
  /**
  * The height of capital letters above the baseline.
  * See [here](https://en.wikipedia.org/wiki/Cap_height) for more details.
  * @type {number}
  */
  get capHeight() {
    let e = this["OS/2"];
    return e ? e.capHeight : this.ascent;
  }
  /**
  * The height of lower case letters in the font.
  * See [here](https://en.wikipedia.org/wiki/X-height) for more details.
  * @type {number}
  */
  get xHeight() {
    let e = this["OS/2"];
    return e ? e.xHeight : 0;
  }
  /**
  * The number of glyphs in the font.
  * @type {number}
  */
  get numGlyphs() {
    return this.maxp.numGlyphs;
  }
  /**
  * The size of the font’s internal coordinate grid
  * @type {number}
  */
  get unitsPerEm() {
    return this.head.unitsPerEm;
  }
  /**
  * The font’s bounding box, i.e. the box that encloses all glyphs in the font.
  * @type {BBox}
  */
  get bbox() {
    return Object.freeze(new ti(this.head.xMin, this.head.yMin, this.head.xMax, this.head.yMax));
  }
  get _cmapProcessor() {
    return new Yf(this.cmap);
  }
  /**
  * An array of all of the unicode code points supported by the font.
  * @type {number[]}
  */
  get characterSet() {
    return this._cmapProcessor.getCharacterSet();
  }
  /**
  * Returns whether there is glyph in the font for the given unicode code point.
  *
  * @param {number} codePoint
  * @return {boolean}
  */
  hasGlyphForCodePoint(e) {
    return !!this._cmapProcessor.lookup(e);
  }
  /**
  * Maps a single unicode code point to a Glyph object.
  * Does not perform any advanced substitutions (there is no context to do so).
  *
  * @param {number} codePoint
  * @return {Glyph}
  */
  glyphForCodePoint(e) {
    return this.getGlyph(this._cmapProcessor.lookup(e), [
      e
    ]);
  }
  /**
  * Returns an array of Glyph objects for the given string.
  * This is only a one-to-one mapping from characters to glyphs.
  * For most uses, you should use font.layout (described below), which
  * provides a much more advanced mapping supporting AAT and OpenType shaping.
  *
  * @param {string} string
  * @return {Glyph[]}
  */
  glyphsForString(e) {
    let r = [], i = e.length, n = 0, a = -1, s = -1;
    for (; n <= i; ) {
      let o = 0, c = 0;
      if (n < i) {
        if (o = e.charCodeAt(n++), 55296 <= o && o <= 56319 && n < i) {
          let l = e.charCodeAt(n);
          56320 <= l && l <= 57343 && (n++, o = ((o & 1023) << 10) + (l & 1023) + 65536);
        }
        c = 65024 <= o && o <= 65039 || 917760 <= o && o <= 917999 ? 1 : 0;
      } else n++;
      s === 0 && c === 1 ? r.push(this.getGlyph(this._cmapProcessor.lookup(a, o), [
        a,
        o
      ])) : s === 0 && c === 0 && r.push(this.glyphForCodePoint(a)), a = o, s = c;
    }
    return r;
  }
  get _layoutEngine() {
    return new vy(this);
  }
  /**
  * Returns a GlyphRun object, which includes an array of Glyphs and GlyphPositions for the given string.
  *
  * @param {string} string
  * @param {string[]} [userFeatures]
  * @param {string} [script]
  * @param {string} [language]
  * @param {string} [direction]
  * @return {GlyphRun}
  */
  layout(e, r, i, n, a) {
    return this._layoutEngine.layout(e, r, i, n, a);
  }
  /**
  * Returns an array of strings that map to the given glyph id.
  * @param {number} gid - glyph id
  */
  stringsForGlyph(e) {
    return this._layoutEngine.stringsForGlyph(e);
  }
  /**
  * An array of all [OpenType feature tags](https://www.microsoft.com/typography/otspec/featuretags.htm)
  * (or mapped AAT tags) supported by the font.
  * The features parameter is an array of OpenType feature tags to be applied in addition to the default set.
  * If this is an AAT font, the OpenType feature tags are mapped to AAT features.
  *
  * @type {string[]}
  */
  get availableFeatures() {
    return this._layoutEngine.getAvailableFeatures();
  }
  getAvailableFeatures(e, r) {
    return this._layoutEngine.getAvailableFeatures(e, r);
  }
  _getBaseGlyph(e, r = []) {
    return this._glyphs[e] || (this.directory.tables.glyf ? this._glyphs[e] = new rl(e, r, this) : (this.directory.tables["CFF "] || this.directory.tables.CFF2) && (this._glyphs[e] = new Oy(e, r, this))), this._glyphs[e] || null;
  }
  /**
  * Returns a glyph object for the given glyph id.
  * You can pass the array of code points this glyph represents for
  * your use later, and it will be stored in the glyph object.
  *
  * @param {number} glyph
  * @param {number[]} characters
  * @return {Glyph}
  */
  getGlyph(e, r = []) {
    return this._glyphs[e] || (this.directory.tables.sbix ? this._glyphs[e] = new By(e, r, this) : this.directory.tables.COLR && this.directory.tables.CPAL ? this._glyphs[e] = new Iy(e, r, this) : this._getBaseGlyph(e, r)), this._glyphs[e] || null;
  }
  /**
  * Returns a Subset for this font.
  * @return {Subset}
  */
  createSubset() {
    return this.directory.tables["CFF "] ? new Xy(this) : new jy(this);
  }
  /**
  * Returns an object describing the available variation axes
  * that this font supports. Keys are setting tags, and values
  * contain the axis name, range, and default value.
  *
  * @type {object}
  */
  get variationAxes() {
    let e = {};
    if (!this.fvar) return e;
    for (let r of this.fvar.axis) e[r.axisTag.trim()] = {
      name: r.name.en,
      min: r.minValue,
      default: r.defaultValue,
      max: r.maxValue
    };
    return e;
  }
  /**
  * Returns an object describing the named variation instances
  * that the font designer has specified. Keys are variation names
  * and values are the variation settings for this instance.
  *
  * @type {object}
  */
  get namedVariations() {
    let e = {};
    if (!this.fvar) return e;
    for (let r of this.fvar.instance) {
      let i = {};
      for (let n = 0; n < this.fvar.axis.length; n++) {
        let a = this.fvar.axis[n];
        i[a.axisTag.trim()] = r.coord[n];
      }
      e[r.name.en] = i;
    }
    return e;
  }
  /**
  * Returns a new font with the given variation settings applied.
  * Settings can either be an instance name, or an object containing
  * variation tags as specified by the `variationAxes` property.
  *
  * @param {object} settings
  * @return {TTFFont}
  */
  getVariation(e) {
    if (!(this.directory.tables.fvar && (this.directory.tables.gvar && this.directory.tables.glyf || this.directory.tables.CFF2))) throw new Error("Variations require a font with the fvar, gvar and glyf, or CFF2 tables.");
    if (typeof e == "string" && (e = this.namedVariations[e]), typeof e != "object") throw new Error("Variation settings must be either a variation name or settings object.");
    let r = this.fvar.axis.map((a, s) => {
      let o = a.axisTag.trim();
      return o in e ? Math.max(a.minValue, Math.min(a.maxValue, e[o])) : a.defaultValue;
    }), i = new k0(this.stream.buffer);
    i.pos = this._directoryPos;
    let n = new R0(i, r);
    return n._tables = this._tables, n;
  }
  get _variationProcessor() {
    if (!this.fvar) return null;
    let e = this.variationCoords;
    return !e && !this.CFF2 ? null : (e || (e = this.fvar.axis.map((r) => r.defaultValue)), new zy(this, e));
  }
  // Standardized format plugin API
  getFont(e) {
    return this.getVariation(e);
  }
  constructor(e, r = null) {
    K0(this, "type", "TTF"), this.defaultLanguage = null, this.stream = e, this.variationCoords = r, this._directoryPos = this.stream.pos, this._tables = {}, this._glyphs = {}, this._decodeDirectory();
    for (let i in this.directory.tables) {
      let n = this.directory.tables[i];
      _o[i] && n.length > 0 && Object.defineProperty(this, i, {
        get: this._getTable.bind(this, n)
      });
    }
  }
}
D0([
  B0
], R0.prototype, "bbox", null);
D0([
  B0
], R0.prototype, "_cmapProcessor", null);
D0([
  B0
], R0.prototype, "characterSet", null);
D0([
  B0
], R0.prototype, "_layoutEngine", null);
D0([
  B0
], R0.prototype, "variationAxes", null);
D0([
  B0
], R0.prototype, "namedVariations", null);
D0([
  B0
], R0.prototype, "_variationProcessor", null);
let Ky = new W({
  tag: new Ge(4),
  offset: new U($, "void", {
    type: "global"
  }),
  compLength: $,
  length: $,
  origChecksum: $
}), gg = new W({
  tag: new Ge(4),
  flavor: $,
  length: $,
  numTables: g,
  reserved: new r0(g),
  totalSfntSize: $,
  majorVersion: g,
  minorVersion: g,
  metaOffset: $,
  metaLength: $,
  metaOrigLength: $,
  privOffset: $,
  privLength: $,
  tables: new M(Ky, "numTables")
});
gg.process = function() {
  let t = {};
  for (let e of this.tables) t[e.tag] = e;
  this.tables = t;
};
var Jy = gg;
class Qy extends R0 {
  static probe(e) {
    return Jo.decode(e.slice(0, 4)) === "wOFF";
  }
  _decodeDirectory() {
    this.directory = Jy.decode(this.stream, {
      _startOffset: 0
    });
  }
  _getTableStream(e) {
    let r = this.directory.tables[e];
    if (r)
      if (this.stream.pos = r.offset, r.compLength < r.length) {
        this.stream.pos += 2;
        let i = new Uint8Array(r.length), n = H8(this.stream.readBuffer(r.compLength - 2), i);
        return new k0(n);
      } else return this.stream;
    return null;
  }
  constructor(...e) {
    super(...e), K0(this, "type", "WOFF");
  }
}
class e_ extends rl {
  _decode() {
    return this._font._transformedGlyphs[this.id];
  }
  _getCBox() {
    return this.path.bbox;
  }
  constructor(...e) {
    super(...e), K0(this, "type", "WOFF2");
  }
}
const j5 = {
  decode(t) {
    let e = 0, r = [
      0,
      1,
      2,
      3,
      4
    ];
    for (let i = 0; i < r.length; i++) {
      let n = t.readUInt8();
      if (e & 3758096384) throw new Error("Overflow");
      if (e = e << 7 | n & 127, !(n & 128)) return e;
    }
    throw new Error("Bad base 128 number");
  }
};
let t_ = [
  "cmap",
  "head",
  "hhea",
  "hmtx",
  "maxp",
  "name",
  "OS/2",
  "post",
  "cvt ",
  "fpgm",
  "glyf",
  "loca",
  "prep",
  "CFF ",
  "VORG",
  "EBDT",
  "EBLC",
  "gasp",
  "hdmx",
  "kern",
  "LTSH",
  "PCLT",
  "VDMX",
  "vhea",
  "vmtx",
  "BASE",
  "GDEF",
  "GPOS",
  "GSUB",
  "EBSC",
  "JSTF",
  "MATH",
  "CBDT",
  "CBLC",
  "COLR",
  "CPAL",
  "SVG ",
  "sbix",
  "acnt",
  "avar",
  "bdat",
  "bloc",
  "bsln",
  "cvar",
  "fdsc",
  "feat",
  "fmtx",
  "fvar",
  "gvar",
  "hsty",
  "just",
  "lcar",
  "mort",
  "morx",
  "opbd",
  "prop",
  "trak",
  "Zapf",
  "Silf",
  "Glat",
  "Gloc",
  "Feat",
  "Sill"
], r_ = new W({
  flags: se,
  customTag: new vo(new Ge(4), (t) => (t.flags & 63) === 63),
  tag: (t) => t.customTag || t_[t.flags & 63],
  length: j5,
  transformVersion: (t) => t.flags >>> 6 & 3,
  transformed: (t) => t.tag === "glyf" || t.tag === "loca" ? t.transformVersion === 0 : t.transformVersion !== 0,
  transformLength: new vo(j5, (t) => t.transformed)
}), pg = new W({
  tag: new Ge(4),
  flavor: $,
  length: $,
  numTables: g,
  reserved: new r0(g),
  totalSfntSize: $,
  totalCompressedSize: $,
  majorVersion: g,
  minorVersion: g,
  metaOffset: $,
  metaLength: $,
  metaOrigLength: $,
  privOffset: $,
  privLength: $,
  tables: new M(r_, "numTables")
});
pg.process = function() {
  let t = {};
  for (let e = 0; e < this.tables.length; e++) {
    let r = this.tables[e];
    t[r.tag] = r;
  }
  return this.tables = t;
};
var i_ = pg;
class n_ extends R0 {
  static probe(e) {
    return Jo.decode(e.slice(0, 4)) === "wOF2";
  }
  _decodeDirectory() {
    this.directory = i_.decode(this.stream), this._dataPos = this.stream.pos;
  }
  _decompress() {
    if (!this._decompressed) {
      this.stream.pos = this._dataPos;
      let e = this.stream.readBuffer(this.directory.totalCompressedSize), r = 0;
      for (let n in this.directory.tables) {
        let a = this.directory.tables[n];
        a.offset = r, r += a.transformLength != null ? a.transformLength : a.length;
      }
      let i = kb(e, r);
      if (!i) throw new Error("Error decoding compressed data in WOFF2");
      this.stream = new k0(i), this._decompressed = !0;
    }
  }
  _decodeTable(e) {
    return this._decompress(), super._decodeTable(e);
  }
  // Override this method to get a glyph and return our
  // custom subclass if there is a glyf table.
  _getBaseGlyph(e, r = []) {
    if (!this._glyphs[e])
      return this.directory.tables.glyf && this.directory.tables.glyf.transformed ? (this._transformedGlyphs || this._transformGlyfTable(), this._glyphs[e] = new e_(e, r, this)) : super._getBaseGlyph(e, r);
  }
  _transformGlyfTable() {
    this._decompress(), this.stream.pos = this.directory.tables.glyf.offset;
    let e = a_.decode(this.stream), r = [];
    for (let n = 0; n < e.numGlyphs; n++) {
      let a = {}, s = e.nContours.readInt16BE();
      if (a.numberOfContours = s, s > 0) {
        let o = [], c = 0;
        for (let l = 0; l < s; l++) {
          let f = gc(e.nPoints);
          c += f, o.push(c);
        }
        a.points = c_(e.flags, e.glyphs, c);
        for (let l = 0; l < s; l++) a.points[o[l] - 1].endContour = !0;
        var i = gc(e.glyphs);
      } else if (s < 0 && rl.prototype._decodeComposite.call({
        _font: this
      }, a, e.composites))
        var i = gc(e.glyphs);
      r.push(a);
    }
    this._transformedGlyphs = r;
  }
  constructor(...e) {
    super(...e), K0(this, "type", "WOFF2");
  }
}
class ci {
  decode(e, r) {
    return new k0(this._buf.decode(e, r));
  }
  constructor(e) {
    this.length = e, this._buf = new F0(e);
  }
}
let a_ = new W({
  version: $,
  numGlyphs: g,
  indexFormat: g,
  nContourStreamSize: $,
  nPointsStreamSize: $,
  flagStreamSize: $,
  glyphStreamSize: $,
  compositeStreamSize: $,
  bboxStreamSize: $,
  instructionStreamSize: $,
  nContours: new ci("nContourStreamSize"),
  nPoints: new ci("nPointsStreamSize"),
  flags: new ci("flagStreamSize"),
  glyphs: new ci("glyphStreamSize"),
  composites: new ci("compositeStreamSize"),
  bboxes: new ci("bboxStreamSize"),
  instructions: new ci("instructionStreamSize")
});
const s_ = 253, o_ = 254, l_ = 255, X5 = 253;
function gc(t) {
  let e = t.readUInt8();
  return e === s_ ? t.readUInt16BE() : e === l_ ? t.readUInt8() + X5 : e === o_ ? t.readUInt8() + X5 * 2 : e;
}
function Mt(t, e) {
  return t & 1 ? e : -e;
}
function c_(t, e, r) {
  let i, n = i = 0, a = [];
  for (let c = 0; c < r; c++) {
    let l = 0, f = 0, u = t.readUInt8(), h = !(u >> 7);
    if (u &= 127, u < 10)
      l = 0, f = Mt(u, ((u & 14) << 7) + e.readUInt8());
    else if (u < 20)
      l = Mt(u, ((u - 10 & 14) << 7) + e.readUInt8()), f = 0;
    else if (u < 84) {
      var s = u - 20, o = e.readUInt8();
      l = Mt(u, 1 + (s & 48) + (o >> 4)), f = Mt(u >> 1, 1 + ((s & 12) << 2) + (o & 15));
    } else if (u < 120) {
      var s = u - 84;
      l = Mt(u, 1 + (s / 12 << 8) + e.readUInt8()), f = Mt(u >> 1, 1 + (s % 12 >> 2 << 8) + e.readUInt8());
    } else if (u < 124) {
      var o = e.readUInt8();
      let p = e.readUInt8();
      l = Mt(u, (o << 4) + (p >> 4)), f = Mt(u >> 1, ((p & 15) << 8) + e.readUInt8());
    } else
      l = Mt(u, e.readUInt16BE()), f = Mt(u >> 1, e.readUInt16BE());
    n += l, i += f, a.push(new wt(h, !1, n, i));
  }
  return a;
}
let f_ = new Te($, {
  65536: {
    numFonts: $,
    offsets: new M($, "numFonts")
  },
  131072: {
    numFonts: $,
    offsets: new M($, "numFonts"),
    dsigTag: $,
    dsigLength: $,
    dsigOffset: $
  }
});
class u_ {
  static probe(e) {
    return Jo.decode(e.slice(0, 4)) === "ttcf";
  }
  getFont(e) {
    for (let r of this.header.offsets) {
      let i = new k0(this.stream.buffer);
      i.pos = r;
      let n = new R0(i);
      if (n.postscriptName === e || n.postscriptName instanceof Uint8Array && e instanceof Uint8Array && n.postscriptName.every((a, s) => e[s] === a)) return n;
    }
    return null;
  }
  get fonts() {
    let e = [];
    for (let r of this.header.offsets) {
      let i = new k0(this.stream.buffer);
      i.pos = r, e.push(new R0(i));
    }
    return e;
  }
  constructor(e) {
    if (K0(this, "type", "TTC"), this.stream = e, e.readString(4) !== "ttcf") throw new Error("Not a TrueType collection");
    this.header = f_.decode(e);
  }
}
let h_ = new Ge(se);
new W({
  len: $,
  buf: new F0("len")
});
let d_ = new W({
  id: g,
  nameOffset: te,
  attr: se,
  dataOffset: jr,
  handle: $
}), g_ = new W({
  name: new Ge(4),
  maxTypeIndex: g,
  refList: new U(g, new M(d_, (t) => t.maxTypeIndex + 1), {
    type: "parent"
  })
}), p_ = new W({
  length: g,
  types: new M(g_, (t) => t.length + 1)
}), v_ = new W({
  reserved: new r0(se, 24),
  typeList: new U(g, p_),
  nameListOffset: new U(g, "void")
}), K5 = new W({
  dataOffset: $,
  map: new U($, v_),
  dataLength: $,
  mapLength: $
});
class m_ {
  static probe(e) {
    let r = new k0(e);
    try {
      var i = K5.decode(r);
    } catch {
      return !1;
    }
    for (let n of i.map.typeList.types)
      if (n.name === "sfnt") return !0;
    return !1;
  }
  getFont(e) {
    if (!this.sfnt) return null;
    for (let r of this.sfnt.refList) {
      let i = this.header.dataOffset + r.dataOffset + 4, n = new k0(this.stream.buffer.slice(i)), a = new R0(n);
      if (a.postscriptName === e || a.postscriptName instanceof Uint8Array && e instanceof Uint8Array && a.postscriptName.every((s, o) => e[o] === s)) return a;
    }
    return null;
  }
  get fonts() {
    let e = [];
    for (let r of this.sfnt.refList) {
      let i = this.header.dataOffset + r.dataOffset + 4, n = new k0(this.stream.buffer.slice(i));
      e.push(new R0(n));
    }
    return e;
  }
  constructor(e) {
    K0(this, "type", "DFont"), this.stream = e, this.header = K5.decode(this.stream);
    for (let r of this.header.map.typeList.types) {
      for (let i of r.refList) i.nameOffset >= 0 ? (this.stream.pos = i.nameOffset + this.header.map.nameListOffset, i.name = h_.decode(this.stream)) : i.name = null;
      r.name === "sfnt" && (this.sfnt = r);
    }
  }
}
Vn(R0);
Vn(Qy);
Vn(n_);
Vn(u_);
Vn(m_);
var vg = {};
(function(t) {
  var e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  (function(r) {
    var i = typeof Uint8Array < "u" ? Uint8Array : Array, n = 43, a = 47, s = 48, o = 97, c = 65, l = 45, f = 95;
    function u(p) {
      var m = p.charCodeAt(0);
      if (m === n || m === l)
        return 62;
      if (m === a || m === f)
        return 63;
      if (m < s)
        return -1;
      if (m < s + 10)
        return m - s + 26 + 26;
      if (m < c + 26)
        return m - c;
      if (m < o + 26)
        return m - o + 26;
    }
    function h(p) {
      var m, C, A, b, x, _;
      if (p.length % 4 > 0)
        throw new Error("Invalid string. Length must be a multiple of 4");
      var v = p.length;
      x = p.charAt(v - 2) === "=" ? 2 : p.charAt(v - 1) === "=" ? 1 : 0, _ = new i(p.length * 3 / 4 - x), A = x > 0 ? p.length - 4 : p.length;
      var F = 0;
      function S(D) {
        _[F++] = D;
      }
      for (m = 0, C = 0; m < A; m += 4, C += 3)
        b = u(p.charAt(m)) << 18 | u(p.charAt(m + 1)) << 12 | u(p.charAt(m + 2)) << 6 | u(p.charAt(m + 3)), S((b & 16711680) >> 16), S((b & 65280) >> 8), S(b & 255);
      return x === 2 ? (b = u(p.charAt(m)) << 2 | u(p.charAt(m + 1)) >> 4, S(b & 255)) : x === 1 && (b = u(p.charAt(m)) << 10 | u(p.charAt(m + 1)) << 4 | u(p.charAt(m + 2)) >> 2, S(b >> 8 & 255), S(b & 255)), _;
    }
    function d(p) {
      var m, C = p.length % 3, A = "", b, x;
      function _(F) {
        return e.charAt(F);
      }
      function v(F) {
        return _(F >> 18 & 63) + _(F >> 12 & 63) + _(F >> 6 & 63) + _(F & 63);
      }
      for (m = 0, x = p.length - C; m < x; m += 3)
        b = (p[m] << 16) + (p[m + 1] << 8) + p[m + 2], A += v(b);
      switch (C) {
        case 1:
          b = p[p.length - 1], A += _(b >> 2), A += _(b << 4 & 63), A += "==";
          break;
        case 2:
          b = (p[p.length - 2] << 8) + p[p.length - 1], A += _(b >> 10), A += _(b >> 4 & 63), A += _(b << 2 & 63), A += "=";
          break;
      }
      return A;
    }
    r.toByteArray = h, r.fromByteArray = d;
  })(t);
})(vg);
const b_ = /* @__PURE__ */ Dt(vg);
var mg = {};
const x_ = 5, J5 = 12, w_ = 13, y_ = 16, __ = 17, A_ = 22, Q5 = 28, e2 = 31, E_ = 33, to = 34, C_ = 35, pc = 36, sf = 37, bg = 38, S_ = 39, T_ = 40, ba = 41, k_ = 42, E = 0, T = 1, Ye = 2, xg = 3, R = 4, F_ = [
  //OP   , CL    , CP    , QU    , GL    , NS    , EX    , SY    , IS    , PR    , PO    , NU    , AL    , HL    , ID    , IN    , HY    , BA    , BB    , B2    , ZW    , CM    , WJ    , H2    , H3    , JL    , JV    , JT    , RI    , EB    , EM    , ZWJ   , CB
  [
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    xg,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R,
    R
  ],
  [
    E,
    R,
    R,
    T,
    T,
    R,
    R,
    R,
    R,
    T,
    T,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    R,
    R,
    R,
    R,
    T,
    T,
    T,
    T,
    T,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    R,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    R,
    Ye,
    R,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T
  ],
  [
    T,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    R,
    Ye,
    R,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    E,
    T,
    E,
    T,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    E,
    T,
    T,
    T,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    T,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    E,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    T,
    T,
    T,
    T,
    T,
    E,
    T,
    T,
    T,
    E
  ],
  [
    T,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    E,
    T,
    T,
    T,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    T,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    T,
    T,
    T,
    T,
    T,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    T,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    T,
    T,
    T,
    T,
    T,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    T,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    T,
    T,
    T,
    T,
    T,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    T,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    E,
    T,
    R,
    R,
    R,
    E,
    E,
    T,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    E,
    T,
    R,
    R,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    T,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    R,
    Ye,
    R,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    R,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E
  ],
  [
    T,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    T,
    T,
    T,
    T,
    T,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    T,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    R,
    Ye,
    R,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T,
    T
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    T,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    T,
    T,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    T,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    T,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    T,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    T,
    T,
    T,
    T,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    T,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    T,
    T,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    T,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    T,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    T,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    T,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    E,
    T,
    E,
    E,
    E,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    T,
    R,
    R,
    T,
    T,
    T,
    R,
    R,
    R,
    T,
    T,
    T,
    T,
    T,
    E,
    T,
    T,
    T,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ],
  [
    E,
    R,
    R,
    T,
    T,
    E,
    R,
    R,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    R,
    Ye,
    R,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    E,
    T,
    E
  ]
  // CB
], O_ = b_.toByteArray("AAgOAAAAAAAQ4QAAAQ0P8vDtnQuMXUUZx+eyu7d7797d9m5bHoWltKVUlsjLWE0VJNigQoMVqkStEoNQQUl5GIo1KKmogEgqkKbBRki72lYabZMGKoGAjQRtJJDaCCIRiiigREBQS3z+xzOTnZ3O+3HOhd5NfpkzZx7fN9988zivu2M9hGwB28F94DnwEngd/Asc1EtIs9c/bIPDwCxwLDgezHcodyo4w5C+CCwBS8FnwSXgCnA1uFbI93XwbXAbWAfWgx+CzWAb+An4KfgFeAzsYWWfYuFz4CXwGvgb+Dfo6yNkEEwGh4CZYB44FpwI3g1OY+kfBItZOo2fB84Hy8DF4HJwNbiWpV8PVoO1LH4n2NRXyN+KcAd4kNVP9XsY4aPgcfAbsBfs6SniL4K/sPjfEf6HlanXCRkCw2BGvUh/keWfXS/CY+pFXs7x9XHmM94LTmWIeU2cgbxnS/k/B3kf86jDhU8L9V2E40vAFWAlWFUfb++NOL4F3C7JX4/4GiE+hvgWsF0oS7mXldspnN+F493gyXrh9xTav0cg3EvzgVfBG6wsmVSEkxBOBgdPGpd7JI6PnqRvJ68/xlbHof53gPeA94OzwLngk+ACsAwsByvASrAK3MB0Ws3CtQjvBJvAVrADPMDSHkb4CNijaccTwvnf4fiPEs8Lxy+D18A/QU8/xjgYBjPAbDAKTgYLwOngTHAO+EQ/8wuEF4EvsPiVCFf2+9tsFStzA8LVHuXXBsi6QyqzUYiPMR/7Mc7dAx7oL8bzw/3u/Bw8Bp4Az4AXwCtgHzsmDXP5fiF9iiVvly5d0sHngar16NKlS5cuXbp06fLmYlqHXrcd3ph4P0THUY3iXh49novju4S0tzfs5d+JPKewfAsRntZb3K9ZhOMlrO6lCC8An28U9+OuovcPcPxlVu5rCL/VmHh/iHIrzn3fIPu7SN8Axmg+8AOwEWwCm7tp3bRuWjetm5Y8bSu4B9zbKO6ZVsnORrVU3f4uXTqZ2H3sLoyx3eDXjfDndE9qyj6L838CfwVvgFpzYnof4oNgOhgBc8Fos9DrZIQLmtXPP1MmF6wGj4H+KXoWguvADkXaPil+YpuQy8Am8Ey7ODdtmJDF4HowBp4De6HDTNjhfHAHeBr0DBBy0kDxfPbcgSIusgrcWhtnJ8vL+TPix7UIOQtcBq4C28Cr4KRBnANbwSuDE+s50JgyNNFuXbp06XIgsXjIvPafjvXozKY+fVFz/z0LT1uCtKVSWbrOLWPnztG8e0Xfy7ol8XtZJi7WtG+5od2UFXQ/A12vUeS7jp27yVKHjdsU9lXB869TyNvAzt0lpP2oWbwLdjiO78bx/Sz+EMJHwK9Y/LcIfw+eZ3F67/Hl5vh9xX80J+rwX8SvRDhpgL17iPAQMHNArfPrqHPewLheI+AERV6efwV418B4nOZ/H+IfYHV8GOF5LJ3eAz0fx8sM9S0fUNud39O9CulfGZhY5huI3wzWgNvBelbHZoTbNPVpfYjKQpkHwUNgl0LWblbnk0LbbDxr0OMFpL3iqWdu9nWYPlVAWkXY39LnGdCkDbeqv1YNbfcMQ3t9oe8lzm6NH9N1ZB6Ln4BwfkJZJk7RyFnYKt6b/JDQXx9p5X+eFdqOjzM9P9MB/lUlFzr20aXIdzlY4dmn9F3YqtvoO76/2hp/D/xA5Zue88nNyL8GbFbs075X0tyUig3Qd2MCnf//HjnzpbsR3g9+1kHzzVjdnE71/qVBX9rGPUh/ysNWe1neFzvIDi5zAufV1sT0N0poR22wkFUfTOPfA4N2mbZ5fSrqOHSw+IbkSBbOGSzSRgf91/GTUWYBOB2cIZQ/G8cfBZ8CFwrnL8XxF8FKcA24jqXdiPA7Qr61OF7H4mMItwzuv2/YLth1ISt3Hzu3k4W7EH5JqPdRHD/O4k+z8A8IX5Lq3y7Z4nXE9xn6kX6vQ4bKfy+ok+hH+xf3hq9dnTTHhjKd2GmDuWA242iHMq4cC7A8kJ7i8o1+skSa7Jieo38HCWnoNjKFhdSFBxzpZ7QE6lI8N4S14aASZcryaV/WWHw66f6NHuCoxuQxmvM56GX9QMd8Q4D65ywGP+ZzRJuM+zQvx/MOS2VFeqQ4IXnH26zM9Xe6/E6D+4foAzzuajPZp8Qyw5ayZVDWuH0z0BtYRkeIDqH9KO9VbH1btd/lhNqCzvl8zeLnG0S/hnU6baHfpiuO6yy0rd+DHURo/zYF5H26j03rQsip2ndzz82u1z9N4VjWKWeb68Tedpt95HRVXp7H1R6p+/Wt4FPy/PpWwscOLRJ+PVWF/+W0iVyGzs18TIvXkOJ1Wxm66vSXz+vylenrZcj1ub439W+K8RNCGTJi2p/TJ1K23VaXr35tRpnzmjxequgfcfyk6B/TGBVlyedsNgpdd/h+W1U3P99QyFPNo1X3TwpM/WLTIWYfoBqXrv6iskHZ/RFr79R6hIyHBrH3f1nrUVnjP8SnZZ+rYtzr9Exld5MNbPNErusAPg+77u/eDOPftU9yj39TH7rezxd1LvsZQJlzkWlOirG/79zjMj/mtHUKu7vKy+3/LnXr9okyKedjX5/0He9iP/j63LwOQdarEVlfy8OO/Lqw023j6xcqmwxLiOd6heM2i9cV9LJy8jMJ23yQ+rpbfu7EQ/pXE8KYvUSqvVnb4XzZa6LrHMXHR+zcLvqWbm/Bn0/HzIs6fWPHoat8XfnDKmZGxRxeMbn2UqZ5Q94nmcZRbqqUXbZ8+lcjE+cPX11t814orvvAXNcG8vqj2vvk1MGn3anlj0bIT72v47bvE+Lc98T9b6r7AKn6j+8Duf7D0nnZx/j7Zjn0j9nbpSTndaLr9WNLivP+iN23xF7L+fqv6ZouFyb78jxVXvv5jJ9YUs9/sddO8h7KNg5jrhfaJGztT6G7KF+1d6yCmD5Kdb2fan60rSc552fZr3zeQ9DpnPp+Si5cx5Ktv2QfSzF/mMbWdOm46rFI4XstnU9xeqX4NKb7TKEdcr6pZOK3ID1k/LvFHkVczEuZLEDr499YqvqBym1aEHWgcvoYOtv0M91qQl5TfpO/in6rWx8OVpT1Wedkv3f5xom3T/xeR/6Gx6V86PWAOB4bBpqWdN+yTcVxjIyGRz/FrDGu6w/3d7kPm8StX8RyPu+uuvpNju/vTLJV37GpvoM0oZPnW87VLnL/5pDno1NoW1R6yedU6TyUv3u19a3KFnIbTLYz+ZCLP4T0tU1uivFgso0pnsJ/UtXvarNY28Xq5cvkBDrQP/E5ZaiuQwwfmTlsOiQRU1fMuqrDd/3ISSuwjOwXOfTyGUMpZIXq4GpLn3pUcdfzch2x7XO1u2uZHOPb1G6b3Xg9PH1IIWeEpJlPQtqos2EKW8b0u8rnuP1UeVLoXJb9be0uG9nnbchjU+XTszT5VeNBThPHnc5OKj1U9aj0GTHIVaGy1YhEWT4ixns00DT+XEzWn/7VAsIc63Cov3OdyhwjrnaqQqZvWKXdypRdlq+k8msZ031U+Rm4fA+3TtyeR9hwfW9G9yxDN0fZMN33F+9TE6md4hwoxumfaUzI9fN3PFT3xVV2msrQ3UsnChm6Nulk8TndpS28D3zX9tTIPsF/z7Am5OkTjm1tI1JZW74+4VgsZ0N3L1yXV3WeP5uR7TGHHdvC3JQlxybfpd22tDlk/2eofRK8TzrN/qnar/K/OUTth6I/+jAnEptNbPvFHP2gs40N3+dfMWtwqvVct7/wfd8gtQ7imifial9ZJ9/3IHLYU6eDj3+4PhsNhX+vwvcWLnu6kGfEMe8DuciPfUfGZB8X/7HJy/Gefe5n+VRGFd/wyP2ta7/LO4yh/sbLV/k9lev6kfO9Dt/5U67b1/6u/epqB1U9Me23jfHY9sscAg4tkbLl+e4/U36rJ9ddxfd6sg5vq5ice42Wpk/pb9FOJ36/W9tpv4kbC79nUbZceX8Zu6/qJ+P3WvhvA8v3reh7Jbn2d6rrNC7XNZTLma4Ba0JI9efX2uLzF5scG/w9UNU1ZxW+ymUfzELeTllXlQ1rUuhzjS5fp9c964iFBOqeSz63bU065nZKdU+mDEz3qHIjjifquw0pnb/raRtvrnsYcb46ihT3taoYz6brdNW9l6rWRnE/navdPn1XlR1km7hcz1WlH/elKuSOSvLLuE8U6m8uzwRdfcGl73VyTHuyMvzJ1Sa2cWDTP/Z63Kc94n2B1PYr24dz1JlyHLlcP+S4B6vD1c9EW4q2LWstCvUjeVy63k/LMYdUNd5D1xQfvVTzX1VjkMsUv88N8VH5fReVn/Fjn++/h6X6Q8a6b1/q3g/i/ewi0/Scs8zxXeV6mWIOUPlPzBgdFerW+bZrm2P18dnjuK6HunEp+rHvPMXbr+sHVb/lnL+pTP57jPw9Cvk3PW178JD9qChfzuvTf7Htl38L1QUf/VKu9SFjwWbTWPvFEvu7Uq76y7+31g6QlYPc669pbsm9Xur2LWI9Pu8ypfDXqm3A2z8s1FWGn4ntL9NfQu2oSlftX9uetvTtv7J8Ql4zxfXGZ3zk8PeQ9w59x2uMfqI8/q5eKh/l9cb2rwsu9rSNl06ZP2Pmxtz+rNMx93yno0n2/82rVH7rQ+y9P15H6FyRun9ViH81ATmffI7nJ5r8uXXW6enbP6b/B8/l5OifVHYLnb9S39s2zcc+Ph+rh8+eQgVPS72elzGWY/tUtbbabBpDiI7yN1q6/4th2y+ErAc5+9BVvu/7KamJbWNZeuqI/R4tRf+YyD1HmOZM1bMV3/14Sn10c0Xu+Sj1nOXb5jL73ncdy02uvlXZNde65dOHYl7Vs4KYuS6FzWLn2zJlpZqPXPVPOa5yzKOyn1VhT9lmMfdbfH7D11Wf2PXN5h9y+dD287+qxgSnaYmnIrRtIb8pJe6/Uv9OVer6Whn0zfGO/BEloZI9ojmfAlUflClDd178bTmVHVTpZXOkAlk/lb42UujmI89HH5V+cl7XtowY6vTxLVWok6UrGzoGTHN+bB+6ri05687VNpvfuvRfaP2uMlNQth1D5JjGelm/8yn+9p3p/7qk9gnfeddXZmq/Sm333PJT659Kv1zjNbZ9uv2Oi//67CV8/N1nj1DmviyXDNVeJkaeaX8UsyesYg8cu2+NvdaPfb+lLDu5tvt/"), D_ = new es(O_), t2 = function(t) {
  switch (t) {
    case E_:
      return J5;
    case S_:
    case T_:
    case k_:
      return J5;
    case C_:
      return x_;
    default:
      return t;
  }
}, r2 = function(t) {
  switch (t) {
    case sf:
    case bg:
      return to;
    case ba:
      return A_;
    default:
      return t;
  }
};
class vc {
  constructor(e, r = !1) {
    this.position = e, this.required = r;
  }
}
class B_ {
  nextCodePoint() {
    const e = this.string.charCodeAt(this.pos++), r = this.string.charCodeAt(this.pos);
    return 55296 <= e && e <= 56319 && 56320 <= r && r <= 57343 ? (this.pos++, (e - 55296) * 1024 + (r - 56320) + 65536) : e;
  }
  nextCharClass() {
    return t2(D_.get(this.nextCodePoint()));
  }
  getSimpleBreak() {
    switch (this.nextClass) {
      case ba:
        return !1;
      case to:
      case sf:
      case bg:
        return this.curClass = to, !1;
      case pc:
        return this.curClass = pc, !1;
    }
    return null;
  }
  getPairTableBreak(e) {
    let r = !1;
    switch (F_[this.curClass][this.nextClass]) {
      case E:
        r = !0;
        break;
      case T:
        r = e === ba;
        break;
      case Ye:
        if (r = e === ba, !r)
          return r = !1, r;
        break;
      case xg:
        if (e !== ba) return r;
        break;
    }
    return this.LB8a && (r = !1), this.LB21a && (this.curClass === y_ || this.curClass === __) ? (r = !1, this.LB21a = !1) : this.LB21a = this.curClass === w_, this.curClass === Q5 ? (this.LB30a++, this.LB30a == 2 && this.nextClass === Q5 && (r = !0, this.LB30a = 0)) : this.LB30a = 0, this.curClass = this.nextClass, r;
  }
  nextBreak() {
    if (this.curClass == null) {
      let e = this.nextCharClass();
      this.curClass = r2(e), this.nextClass = e, this.LB8a = e === e2, this.LB30a = 0;
    }
    for (; this.pos < this.string.length; ) {
      this.lastPos = this.pos;
      const e = this.nextClass;
      if (this.nextClass = this.nextCharClass(), this.curClass === to || this.curClass === pc && this.nextClass !== sf)
        return this.curClass = r2(t2(this.nextClass)), new vc(this.lastPos, !0);
      let r = this.getSimpleBreak();
      if (r === null && (r = this.getPairTableBreak(e)), this.LB8a = this.nextClass === e2, r) return new vc(this.lastPos);
    }
    return this.lastPos < this.string.length ? (this.lastPos = this.string.length, new vc(this.string.length)) : null;
  }
  constructor(e) {
    this.string = e, this.pos = 0, this.lastPos = 0, this.curClass = null, this.nextClass = null, this.LB8a = !1, this.LB21a = !1, this.LB30a = 0;
  }
}
mg = B_;
const I_ = new W({
  identifier: new F0(1),
  value: new F0(1)
}), R_ = {
  name: () => "DAC",
  length: w0,
  tables: new M(I_, (t) => t.length / 2)
}, wg = (t, e) => t[e], i2 = (t, e) => t[e] << 8 | t[e + 1], n2 = (t, e) => t[e] | t[e + 1] << 8, mc = (t, e) => yg(t, e) >>> 0, bc = (t, e) => _g(t, e) >>> 0, a2 = (t) => Array.from(
  t,
  (e) => e.toString(16).padStart(2, "0")
).join(""), P_ = new TextDecoder("utf-8"), L_ = (t) => P_.decode(t), N_ = (t) => {
  const e = t.reduce((n, a) => n + a.length, 0), r = new Uint8Array(e);
  let i = 0;
  return t.forEach((n) => {
    r.set(n, i), i += n.length;
  }), r;
}, yg = (t, e) => t[e] << 24 | t[e + 1] << 16 | t[e + 2] << 8 | t[e + 3], _g = (t, e) => t[e] | t[e + 1] << 8 | t[e + 2] << 16 | t[e + 3] << 24;
class M_ {
  decode(e, r) {
    const i = {};
    let n = e.buffer.slice(
      e.pos,
      e.pos + r.length - 2
    );
    for (; n.length > 0; ) {
      let a = 1;
      const s = [], o = wg(n, 0), c = n.slice(a, a + 16);
      a += 16;
      for (const l of c)
        s.push(n.slice(a, a + l)), a += l;
      n = n.slice(a), i[o] = N_(s);
    }
    return e.pos += r.length - 2, i;
  }
}
const U_ = {
  name: () => "DHT",
  length: w0,
  tables: new M_()
}, $_ = {
  name: () => "DQT",
  length: w0,
  tables: new M(
    new W({
      identifier: new F0(1),
      data: new F0(64)
    }),
    (t) => (t.length - 2) / 65
  )
}, z_ = {
  name: () => "DRI",
  length: w0,
  restartInterval: w0
}, W_ = {
  name: () => "EOI",
  afterEOI: new r0(se, 1 / 0)
}, xc = {
  ifd: {
    "010e": "imageDescription",
    "010f": "make",
    "011a": "xResolution",
    "011b": "yResolution",
    "011c": "planarConfiguration",
    "012d": "transferFunction",
    "013b": "artist",
    "013e": "whitePoint",
    "013f": "primaryChromaticities",
    "0100": "imageWidth",
    "0101": "imageHeight",
    "0102": "bitsPerSample",
    "0103": "compression",
    "0106": "photometricInterpretation",
    "0110": "model",
    "0111": "stripOffsets",
    "0112": "orientation",
    "0115": "samplesPerPixel",
    "0116": "rowsPerStrip",
    "0117": "stripByteCounts",
    "0128": "resolutionUnit",
    "0131": "software",
    "0132": "dateTime",
    "0201": "jpegInterchangeFormat",
    "0202": "jpegInterchangeFormatLength",
    "0211": "ycbCrCoefficients",
    "0212": "ycbCrSubSampling",
    "0213": "ycbCrPositioning",
    "0214": "referenceBlackWhite",
    "829a": "exposureTime",
    "829d": "fNumber",
    "920a": "focalLength",
    "927c": "makerNote",
    8298: "copyright",
    8769: "exifIFDPointer",
    8822: "exposureProgram",
    8824: "spectralSensitivity",
    8825: "gpsInfoIFDPointer",
    8827: "photographicSensitivity",
    8828: "oecf",
    8830: "sensitivityType",
    8831: "standardOutputSensitivity",
    8832: "recommendedExposureIndex",
    8833: "isoSpeed",
    8834: "isoSpeedLatitudeyyy",
    8835: "isoSpeedLatitudezzz",
    9e3: "exifVersion",
    9003: "dateTimeOriginal",
    9004: "dateTimeDigitized",
    9101: "componentsConfiguration",
    9102: "compressedBitsPerPixel",
    9201: "shutterSpeedValue",
    9202: "apertureValue",
    9203: "brightnessValue",
    9204: "exposureBiasValue",
    9205: "maxApertureValue",
    9206: "subjectDistance",
    9207: "meteringMode",
    9208: "lightSource",
    9209: "flash",
    9214: "subjectArea",
    9286: "userComment",
    9290: "subSecTime",
    9291: "subSecTimeOriginal",
    9292: "subSecTimeDigitized",
    a000: "flashpixVersion",
    a001: "colorSpace",
    a002: "pixelXDimension",
    a003: "pixelYDimension",
    a004: "relatedSoundFile",
    a005: "interoperabilityIFDPointer",
    a20b: "flashEnergy",
    a20c: "spatialFrequencyResponse",
    a20e: "focalPlaneXResolution",
    a20f: "focalPlaneYResolution",
    a40a: "sharpness",
    a40b: "deviceSettingDescription",
    a40c: "subjectDistanceRange",
    a210: "focalPlaneResolutionUnit",
    a214: "subjectLocation",
    a215: "exposureIndex",
    a217: "sensingMethod",
    a300: "fileSource",
    a301: "sceneType",
    a302: "cfaPattern",
    a401: "customRendered",
    a402: "exposureMode",
    a403: "whiteBalance",
    a404: "digitalZoomRatio",
    a405: "focalLengthIn35mmFilm",
    a406: "sceneCaptureType",
    a407: "gainControl",
    a408: "contrast",
    a409: "saturation",
    a420: "imageUniqueID",
    a430: "cameraOwnerName",
    a431: "bodySerialNumber",
    a432: "lensSpecification",
    a433: "lensMake",
    a434: "lensModel",
    a435: "lensSerialNumber",
    a500: "gamma"
  },
  gps: {
    "0000": "gpsVersionID",
    "0001": "gpsLatitudeRef",
    "0002": "gpsLatitude",
    "0003": "gpsLongitudeRef",
    "0004": "gpsLongitude",
    "0005": "gpsAltitudeRef",
    "0006": "gpsAltitude",
    "0007": "gpsTimeStamp",
    "0008": "gpsSatellites",
    "0009": "gpsStatus",
    "000a": "gpsMeasureMode",
    "000b": "gpsDOP",
    "000c": "gpsSpeedRef",
    "000d": "gpsSpeed",
    "000e": "gpsTrackRef",
    "000f": "gpsTrack",
    "0010": "gpsImgDirectionRef",
    "0011": "gpsImgDirection",
    "0012": "gpsMapDatum",
    "0013": "gpsDestLatitudeRef",
    "0014": "gpsDestLatitude",
    "0015": "gpsDestLongitudeRef",
    "0016": "gpsDestLongitude",
    "0017": "gpsDestBearingRef",
    "0018": "gpsDestBearing",
    "0019": "gpsDestDistanceRef",
    "001a": "gpsDestDistance",
    "001b": "gpsProcessingMethod",
    "001c": "gpsAreaInformation",
    "001d": "gpsDateStamp",
    "001e": "gpsDifferential",
    "001f": "gpsHPositioningError"
  }
};
class H_ {
  constructor(e) {
    this.bigEndian = e, this.bytes = [0, 1, 1, 2, 4, 8, 1, 1, 2, 4, 8, 4, 8];
  }
  _getTagValue(e, r, i) {
    switch (r) {
      case 2:
        return e.toString("ascii").replace(/\0+$/, "");
      case 129:
        return e.toString("utf8").replace(/\0+$/, "");
      case 7:
        return "0x" + e.toString("hex");
      default:
        return this._getTagValueForNumericalData(e, r, i);
    }
  }
  _getTagValueForNumericalData(e, r, i) {
    const n = [], a = this.bytes[r];
    for (let s = 0; s < i; s += 1)
      n.push(this._getSingleTagValueForNumericalData(e, r, s * a));
    return n.length === 1 ? n[0] : n;
  }
  _getSingleTagValueForNumericalData(e, r, i) {
    const n = (o) => this.bigEndian ? i2(e, o) : n2(e, o), a = (o) => this.bigEndian ? mc(e, o) : bc(e, o), s = (o) => this.bigEndian ? yg(e, o) : _g(e, o);
    switch (r) {
      case 1:
        return wg(e, i);
      case 3:
        return n(i);
      case 4:
        return a(i);
      case 5:
        return a(i) / a(i + 4);
      case 9:
        return s(i);
      case 10:
        return s(i) / s(i + 4);
    }
  }
  _decodeIDFEntries(e, r, i, n = !1) {
    let a = 2 + i;
    const s = {}, o = (f) => this.bigEndian ? i2(e, f) : n2(e, f), c = (f) => this.bigEndian ? mc(e, f) : bc(e, f), l = o(i);
    for (let f = 0; f < l; f++) {
      const u = e.slice(a, a + 2), h = o(a + 2), d = c(a + 4), p = this.bytes[h], m = d * p;
      let C = e.slice(a + 8, a + 12);
      if (m > 4) {
        const _ = this.bigEndian ? mc(C, 0) : bc(C, 0);
        C = e.slice(_, _ + m);
      }
      const A = this._getTagValue(C, h, d), b = this.bigEndian ? a2(u) : a2(u.reverse()), x = r[b];
      s[x] = A, a += 12;
    }
    return s;
  }
  decode(e, r) {
    const i = e.buffer.slice(e.pos - 8), n = r.offsetToFirstIFD;
    if (n > i.length)
      return e.pos += r.parent.length - 16, {};
    const a = this._decodeIDFEntries(i, xc.ifd, n), { exifIFDPointer: s, gpsInfoIFDPointer: o } = a;
    if (s && (a.subExif = this._decodeIDFEntries(
      i,
      xc.ifd,
      s
    )), o) {
      const c = o;
      a.gpsInfo = this._decodeIDFEntries(i, xc.gps, c, !0);
    }
    return e.pos += r.parent.length - 16, a;
  }
}
const q_ = (t) => {
  const e = t ? w0 : b8, r = t ? p4 : w8;
  return new W({
    fortyTwo: e,
    offsetToFirstIFD: r,
    entries: new H_(t)
  });
};
class V_ {
  decode(e, r) {
    const n = L_(
      e.buffer.slice(e.pos, e.pos + 2)
    ) === "MM";
    return e.pos += 2, q_(n).decode(e, r).entries;
  }
}
const Y_ = {
  name: () => "EXIF",
  length: w0,
  identifier: new Ge(6),
  entries: new V_()
}, G_ = {
  name: () => "JFIF",
  length: w0,
  identifier: new Ge(5),
  version: w0,
  units: se,
  xDensity: w0,
  yDensity: w0,
  thumbnailWidth: se,
  thumbnailHeight: se
};
class Z_ {
  decode(e) {
    const r = e.buffer.slice(e.pos);
    let i = 0, n = r.indexOf(255);
    for (; n !== -1; ) {
      i = n;
      const a = r[i + 1], s = a >= 208 && a <= 215;
      if (a !== 0 && !s) break;
      n = r.indexOf(255, n + 1);
    }
    return e.pos += i, r.slice(0, i);
  }
}
const j_ = new W({
  scanComponentSelector: se,
  entropyCodingTable: new F0(1)
}), X_ = {
  name: () => "SOS",
  length: w0,
  numberOfImageComponents: se,
  componentSpecifications: new M(
    j_,
    (t) => t.numberOfImageComponents
  ),
  startOfSpectral: se,
  endOfSpectral: se,
  successiveApproximationBit: new F0(1),
  data: new Z_()
}, K_ = new W({
  id: se,
  samplingFactors: se,
  quantizationTableId: se
}), rt = {
  name: () => "SOF",
  length: w0,
  precision: se,
  height: w0,
  width: w0,
  numberOfComponents: se,
  components: new M(
    K_,
    (t) => t.numberOfComponents
  )
}, J_ = {
  name: () => "SOI"
}, Q_ = {
  length: w0,
  buf: new F0((t) => t.length - 2)
}, eA = Array(63).fill(0).reduce((t, e, r) => ({ ...t, [r + 65472]: Q_ }), {}), tA = new Te(w0, {
  ...eA,
  65472: rt,
  65473: rt,
  65474: rt,
  65475: rt,
  65476: U_,
  65477: rt,
  65478: rt,
  65479: rt,
  65481: rt,
  65482: rt,
  65483: rt,
  65484: R_,
  65485: rt,
  65486: rt,
  65487: rt,
  65496: J_,
  65497: W_,
  65498: X_,
  65499: $_,
  65501: z_,
  65504: G_,
  65505: Y_
}), rA = new M(tA), iA = (t) => rA.fromBuffer(t).map(({ version: r, ...i }) => ({ type: r, ...i })), nA = { decode: iA };
var Mi = typeof window < "u" ? window : typeof self < "u" ? self : typeof window < "u" ? window : {}, Zt = [], ft = [], aA = typeof Uint8Array < "u" ? Uint8Array : Array, Zf = !1;
function Ag() {
  Zf = !0;
  for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", e = 0, r = t.length; e < r; ++e)
    Zt[e] = t[e], ft[t.charCodeAt(e)] = e;
  ft[45] = 62, ft[95] = 63;
}
function sA(t) {
  Zf || Ag();
  var e, r, i, n, a, s, o = t.length;
  if (o % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  a = t[o - 2] === "=" ? 2 : t[o - 1] === "=" ? 1 : 0, s = new aA(o * 3 / 4 - a), i = a > 0 ? o - 4 : o;
  var c = 0;
  for (e = 0, r = 0; e < i; e += 4, r += 3)
    n = ft[t.charCodeAt(e)] << 18 | ft[t.charCodeAt(e + 1)] << 12 | ft[t.charCodeAt(e + 2)] << 6 | ft[t.charCodeAt(e + 3)], s[c++] = n >> 16 & 255, s[c++] = n >> 8 & 255, s[c++] = n & 255;
  return a === 2 ? (n = ft[t.charCodeAt(e)] << 2 | ft[t.charCodeAt(e + 1)] >> 4, s[c++] = n & 255) : a === 1 && (n = ft[t.charCodeAt(e)] << 10 | ft[t.charCodeAt(e + 1)] << 4 | ft[t.charCodeAt(e + 2)] >> 2, s[c++] = n >> 8 & 255, s[c++] = n & 255), s;
}
function oA(t) {
  return Zt[t >> 18 & 63] + Zt[t >> 12 & 63] + Zt[t >> 6 & 63] + Zt[t & 63];
}
function lA(t, e, r) {
  for (var i, n = [], a = e; a < r; a += 3)
    i = (t[a] << 16) + (t[a + 1] << 8) + t[a + 2], n.push(oA(i));
  return n.join("");
}
function s2(t) {
  Zf || Ag();
  for (var e, r = t.length, i = r % 3, n = "", a = [], s = 16383, o = 0, c = r - i; o < c; o += s)
    a.push(lA(t, o, o + s > c ? c : o + s));
  return i === 1 ? (e = t[r - 1], n += Zt[e >> 2], n += Zt[e << 4 & 63], n += "==") : i === 2 && (e = (t[r - 2] << 8) + t[r - 1], n += Zt[e >> 10], n += Zt[e >> 4 & 63], n += Zt[e << 2 & 63], n += "="), a.push(n), a.join("");
}
function il(t, e, r, i, n) {
  var a, s, o = n * 8 - i - 1, c = (1 << o) - 1, l = c >> 1, f = -7, u = r ? n - 1 : 0, h = r ? -1 : 1, d = t[e + u];
  for (u += h, a = d & (1 << -f) - 1, d >>= -f, f += o; f > 0; a = a * 256 + t[e + u], u += h, f -= 8)
    ;
  for (s = a & (1 << -f) - 1, a >>= -f, f += i; f > 0; s = s * 256 + t[e + u], u += h, f -= 8)
    ;
  if (a === 0)
    a = 1 - l;
  else {
    if (a === c)
      return s ? NaN : (d ? -1 : 1) * (1 / 0);
    s = s + Math.pow(2, i), a = a - l;
  }
  return (d ? -1 : 1) * s * Math.pow(2, a - i);
}
function Eg(t, e, r, i, n, a) {
  var s, o, c, l = a * 8 - n - 1, f = (1 << l) - 1, u = f >> 1, h = n === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = i ? 0 : a - 1, p = i ? 1 : -1, m = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;
  for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (o = isNaN(e) ? 1 : 0, s = f) : (s = Math.floor(Math.log(e) / Math.LN2), e * (c = Math.pow(2, -s)) < 1 && (s--, c *= 2), s + u >= 1 ? e += h / c : e += h * Math.pow(2, 1 - u), e * c >= 2 && (s++, c /= 2), s + u >= f ? (o = 0, s = f) : s + u >= 1 ? (o = (e * c - 1) * Math.pow(2, n), s = s + u) : (o = e * Math.pow(2, u - 1) * Math.pow(2, n), s = 0)); n >= 8; t[r + d] = o & 255, d += p, o /= 256, n -= 8)
    ;
  for (s = s << n | o, l += n; l > 0; t[r + d] = s & 255, d += p, s /= 256, l -= 8)
    ;
  t[r + d - p] |= m * 128;
}
var cA = {}.toString, Cg = Array.isArray || function(t) {
  return cA.call(t) == "[object Array]";
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var Sg = 50;
J.TYPED_ARRAY_SUPPORT = Mi.TYPED_ARRAY_SUPPORT !== void 0 ? Mi.TYPED_ARRAY_SUPPORT : !0;
var fA = Oo();
function Oo() {
  return J.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function xr(t, e) {
  if (Oo() < e)
    throw new RangeError("Invalid typed array length");
  return J.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e), t.__proto__ = J.prototype) : (t === null && (t = new J(e)), t.length = e), t;
}
function J(t, e, r) {
  if (!J.TYPED_ARRAY_SUPPORT && !(this instanceof J))
    return new J(t, e, r);
  if (typeof t == "number") {
    if (typeof e == "string")
      throw new Error(
        "If encoding is specified then the first argument must be a string"
      );
    return jf(this, t);
  }
  return Tg(this, t, e, r);
}
J.poolSize = 8192;
J._augment = function(t) {
  return t.__proto__ = J.prototype, t;
};
function Tg(t, e, r, i) {
  if (typeof e == "number")
    throw new TypeError('"value" argument must not be a number');
  return typeof ArrayBuffer < "u" && e instanceof ArrayBuffer ? dA(t, e, r, i) : typeof e == "string" ? hA(t, e, r) : gA(t, e);
}
J.from = function(t, e, r) {
  return Tg(null, t, e, r);
};
J.TYPED_ARRAY_SUPPORT && (J.prototype.__proto__ = Uint8Array.prototype, J.__proto__ = Uint8Array, typeof Symbol < "u" && Symbol.species && J[Symbol.species]);
function kg(t) {
  if (typeof t != "number")
    throw new TypeError('"size" argument must be a number');
  if (t < 0)
    throw new RangeError('"size" argument must not be negative');
}
function uA(t, e, r, i) {
  return kg(e), e <= 0 ? xr(t, e) : r !== void 0 ? typeof i == "string" ? xr(t, e).fill(r, i) : xr(t, e).fill(r) : xr(t, e);
}
J.alloc = function(t, e, r) {
  return uA(null, t, e, r);
};
function jf(t, e) {
  if (kg(e), t = xr(t, e < 0 ? 0 : Xf(e) | 0), !J.TYPED_ARRAY_SUPPORT)
    for (var r = 0; r < e; ++r)
      t[r] = 0;
  return t;
}
J.allocUnsafe = function(t) {
  return jf(null, t);
};
J.allocUnsafeSlow = function(t) {
  return jf(null, t);
};
function hA(t, e, r) {
  if ((typeof r != "string" || r === "") && (r = "utf8"), !J.isEncoding(r))
    throw new TypeError('"encoding" must be a valid string encoding');
  var i = Fg(e, r) | 0;
  t = xr(t, i);
  var n = t.write(e, r);
  return n !== i && (t = t.slice(0, n)), t;
}
function of(t, e) {
  var r = e.length < 0 ? 0 : Xf(e.length) | 0;
  t = xr(t, r);
  for (var i = 0; i < r; i += 1)
    t[i] = e[i] & 255;
  return t;
}
function dA(t, e, r, i) {
  if (e.byteLength, r < 0 || e.byteLength < r)
    throw new RangeError("'offset' is out of bounds");
  if (e.byteLength < r + (i || 0))
    throw new RangeError("'length' is out of bounds");
  return r === void 0 && i === void 0 ? e = new Uint8Array(e) : i === void 0 ? e = new Uint8Array(e, r) : e = new Uint8Array(e, r, i), J.TYPED_ARRAY_SUPPORT ? (t = e, t.__proto__ = J.prototype) : t = of(t, e), t;
}
function gA(t, e) {
  if (ir(e)) {
    var r = Xf(e.length) | 0;
    return t = xr(t, r), t.length === 0 || e.copy(t, 0, 0, r), t;
  }
  if (e) {
    if (typeof ArrayBuffer < "u" && e.buffer instanceof ArrayBuffer || "length" in e)
      return typeof e.length != "number" || RA(e.length) ? xr(t, 0) : of(t, e);
    if (e.type === "Buffer" && Cg(e.data))
      return of(t, e.data);
  }
  throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function Xf(t) {
  if (t >= Oo())
    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + Oo().toString(16) + " bytes");
  return t | 0;
}
function pA(t) {
  return +t != t && (t = 0), J.alloc(+t);
}
J.isBuffer = yi;
function ir(t) {
  return !!(t != null && t._isBuffer);
}
J.compare = function(e, r) {
  if (!ir(e) || !ir(r))
    throw new TypeError("Arguments must be Buffers");
  if (e === r) return 0;
  for (var i = e.length, n = r.length, a = 0, s = Math.min(i, n); a < s; ++a)
    if (e[a] !== r[a]) {
      i = e[a], n = r[a];
      break;
    }
  return i < n ? -1 : n < i ? 1 : 0;
};
J.isEncoding = function(e) {
  switch (String(e).toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "latin1":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return !0;
    default:
      return !1;
  }
};
J.concat = function(e, r) {
  if (!Cg(e))
    throw new TypeError('"list" argument must be an Array of Buffers');
  if (e.length === 0)
    return J.alloc(0);
  var i;
  if (r === void 0)
    for (r = 0, i = 0; i < e.length; ++i)
      r += e[i].length;
  var n = J.allocUnsafe(r), a = 0;
  for (i = 0; i < e.length; ++i) {
    var s = e[i];
    if (!ir(s))
      throw new TypeError('"list" argument must be an Array of Buffers');
    s.copy(n, a), a += s.length;
  }
  return n;
};
function Fg(t, e) {
  if (ir(t))
    return t.length;
  if (typeof ArrayBuffer < "u" && typeof ArrayBuffer.isView == "function" && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer))
    return t.byteLength;
  typeof t != "string" && (t = "" + t);
  var r = t.length;
  if (r === 0) return 0;
  for (var i = !1; ; )
    switch (e) {
      case "ascii":
      case "latin1":
      case "binary":
        return r;
      case "utf8":
      case "utf-8":
      case void 0:
        return Do(t).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return r * 2;
      case "hex":
        return r >>> 1;
      case "base64":
        return Lg(t).length;
      default:
        if (i) return Do(t).length;
        e = ("" + e).toLowerCase(), i = !0;
    }
}
J.byteLength = Fg;
function vA(t, e, r) {
  var i = !1;
  if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((r === void 0 || r > this.length) && (r = this.length), r <= 0) || (r >>>= 0, e >>>= 0, r <= e))
    return "";
  for (t || (t = "utf8"); ; )
    switch (t) {
      case "hex":
        return SA(this, e, r);
      case "utf8":
      case "utf-8":
        return Bg(this, e, r);
      case "ascii":
        return EA(this, e, r);
      case "latin1":
      case "binary":
        return CA(this, e, r);
      case "base64":
        return _A(this, e, r);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return TA(this, e, r);
      default:
        if (i) throw new TypeError("Unknown encoding: " + t);
        t = (t + "").toLowerCase(), i = !0;
    }
}
J.prototype._isBuffer = !0;
function wi(t, e, r) {
  var i = t[e];
  t[e] = t[r], t[r] = i;
}
J.prototype.swap16 = function() {
  var e = this.length;
  if (e % 2 !== 0)
    throw new RangeError("Buffer size must be a multiple of 16-bits");
  for (var r = 0; r < e; r += 2)
    wi(this, r, r + 1);
  return this;
};
J.prototype.swap32 = function() {
  var e = this.length;
  if (e % 4 !== 0)
    throw new RangeError("Buffer size must be a multiple of 32-bits");
  for (var r = 0; r < e; r += 4)
    wi(this, r, r + 3), wi(this, r + 1, r + 2);
  return this;
};
J.prototype.swap64 = function() {
  var e = this.length;
  if (e % 8 !== 0)
    throw new RangeError("Buffer size must be a multiple of 64-bits");
  for (var r = 0; r < e; r += 8)
    wi(this, r, r + 7), wi(this, r + 1, r + 6), wi(this, r + 2, r + 5), wi(this, r + 3, r + 4);
  return this;
};
J.prototype.toString = function() {
  var e = this.length | 0;
  return e === 0 ? "" : arguments.length === 0 ? Bg(this, 0, e) : vA.apply(this, arguments);
};
J.prototype.equals = function(e) {
  if (!ir(e)) throw new TypeError("Argument must be a Buffer");
  return this === e ? !0 : J.compare(this, e) === 0;
};
J.prototype.inspect = function() {
  var e = "", r = Sg;
  return this.length > 0 && (e = this.toString("hex", 0, r).match(/.{2}/g).join(" "), this.length > r && (e += " ... ")), "<Buffer " + e + ">";
};
J.prototype.compare = function(e, r, i, n, a) {
  if (!ir(e))
    throw new TypeError("Argument must be a Buffer");
  if (r === void 0 && (r = 0), i === void 0 && (i = e ? e.length : 0), n === void 0 && (n = 0), a === void 0 && (a = this.length), r < 0 || i > e.length || n < 0 || a > this.length)
    throw new RangeError("out of range index");
  if (n >= a && r >= i)
    return 0;
  if (n >= a)
    return -1;
  if (r >= i)
    return 1;
  if (r >>>= 0, i >>>= 0, n >>>= 0, a >>>= 0, this === e) return 0;
  for (var s = a - n, o = i - r, c = Math.min(s, o), l = this.slice(n, a), f = e.slice(r, i), u = 0; u < c; ++u)
    if (l[u] !== f[u]) {
      s = l[u], o = f[u];
      break;
    }
  return s < o ? -1 : o < s ? 1 : 0;
};
function Og(t, e, r, i, n) {
  if (t.length === 0) return -1;
  if (typeof r == "string" ? (i = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = n ? 0 : t.length - 1), r < 0 && (r = t.length + r), r >= t.length) {
    if (n) return -1;
    r = t.length - 1;
  } else if (r < 0)
    if (n) r = 0;
    else return -1;
  if (typeof e == "string" && (e = J.from(e, i)), ir(e))
    return e.length === 0 ? -1 : o2(t, e, r, i, n);
  if (typeof e == "number")
    return e = e & 255, J.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf == "function" ? n ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : o2(t, [e], r, i, n);
  throw new TypeError("val must be string, number or Buffer");
}
function o2(t, e, r, i, n) {
  var a = 1, s = t.length, o = e.length;
  if (i !== void 0 && (i = String(i).toLowerCase(), i === "ucs2" || i === "ucs-2" || i === "utf16le" || i === "utf-16le")) {
    if (t.length < 2 || e.length < 2)
      return -1;
    a = 2, s /= 2, o /= 2, r /= 2;
  }
  function c(d, p) {
    return a === 1 ? d[p] : d.readUInt16BE(p * a);
  }
  var l;
  if (n) {
    var f = -1;
    for (l = r; l < s; l++)
      if (c(t, l) === c(e, f === -1 ? 0 : l - f)) {
        if (f === -1 && (f = l), l - f + 1 === o) return f * a;
      } else
        f !== -1 && (l -= l - f), f = -1;
  } else
    for (r + o > s && (r = s - o), l = r; l >= 0; l--) {
      for (var u = !0, h = 0; h < o; h++)
        if (c(t, l + h) !== c(e, h)) {
          u = !1;
          break;
        }
      if (u) return l;
    }
  return -1;
}
J.prototype.includes = function(e, r, i) {
  return this.indexOf(e, r, i) !== -1;
};
J.prototype.indexOf = function(e, r, i) {
  return Og(this, e, r, i, !0);
};
J.prototype.lastIndexOf = function(e, r, i) {
  return Og(this, e, r, i, !1);
};
function mA(t, e, r, i) {
  r = Number(r) || 0;
  var n = t.length - r;
  i ? (i = Number(i), i > n && (i = n)) : i = n;
  var a = e.length;
  if (a % 2 !== 0) throw new TypeError("Invalid hex string");
  i > a / 2 && (i = a / 2);
  for (var s = 0; s < i; ++s) {
    var o = parseInt(e.substr(s * 2, 2), 16);
    if (isNaN(o)) return s;
    t[r + s] = o;
  }
  return s;
}
function bA(t, e, r, i) {
  return sl(Do(e, t.length - r), t, r, i);
}
function Dg(t, e, r, i) {
  return sl(BA(e), t, r, i);
}
function xA(t, e, r, i) {
  return Dg(t, e, r, i);
}
function wA(t, e, r, i) {
  return sl(Lg(e), t, r, i);
}
function yA(t, e, r, i) {
  return sl(IA(e, t.length - r), t, r, i);
}
J.prototype.write = function(e, r, i, n) {
  if (r === void 0)
    n = "utf8", i = this.length, r = 0;
  else if (i === void 0 && typeof r == "string")
    n = r, i = this.length, r = 0;
  else if (isFinite(r))
    r = r | 0, isFinite(i) ? (i = i | 0, n === void 0 && (n = "utf8")) : (n = i, i = void 0);
  else
    throw new Error(
      "Buffer.write(string, encoding, offset[, length]) is no longer supported"
    );
  var a = this.length - r;
  if ((i === void 0 || i > a) && (i = a), e.length > 0 && (i < 0 || r < 0) || r > this.length)
    throw new RangeError("Attempt to write outside buffer bounds");
  n || (n = "utf8");
  for (var s = !1; ; )
    switch (n) {
      case "hex":
        return mA(this, e, r, i);
      case "utf8":
      case "utf-8":
        return bA(this, e, r, i);
      case "ascii":
        return Dg(this, e, r, i);
      case "latin1":
      case "binary":
        return xA(this, e, r, i);
      case "base64":
        return wA(this, e, r, i);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return yA(this, e, r, i);
      default:
        if (s) throw new TypeError("Unknown encoding: " + n);
        n = ("" + n).toLowerCase(), s = !0;
    }
};
J.prototype.toJSON = function() {
  return {
    type: "Buffer",
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function _A(t, e, r) {
  return e === 0 && r === t.length ? s2(t) : s2(t.slice(e, r));
}
function Bg(t, e, r) {
  r = Math.min(t.length, r);
  for (var i = [], n = e; n < r; ) {
    var a = t[n], s = null, o = a > 239 ? 4 : a > 223 ? 3 : a > 191 ? 2 : 1;
    if (n + o <= r) {
      var c, l, f, u;
      switch (o) {
        case 1:
          a < 128 && (s = a);
          break;
        case 2:
          c = t[n + 1], (c & 192) === 128 && (u = (a & 31) << 6 | c & 63, u > 127 && (s = u));
          break;
        case 3:
          c = t[n + 1], l = t[n + 2], (c & 192) === 128 && (l & 192) === 128 && (u = (a & 15) << 12 | (c & 63) << 6 | l & 63, u > 2047 && (u < 55296 || u > 57343) && (s = u));
          break;
        case 4:
          c = t[n + 1], l = t[n + 2], f = t[n + 3], (c & 192) === 128 && (l & 192) === 128 && (f & 192) === 128 && (u = (a & 15) << 18 | (c & 63) << 12 | (l & 63) << 6 | f & 63, u > 65535 && u < 1114112 && (s = u));
      }
    }
    s === null ? (s = 65533, o = 1) : s > 65535 && (s -= 65536, i.push(s >>> 10 & 1023 | 55296), s = 56320 | s & 1023), i.push(s), n += o;
  }
  return AA(i);
}
var l2 = 4096;
function AA(t) {
  var e = t.length;
  if (e <= l2)
    return String.fromCharCode.apply(String, t);
  for (var r = "", i = 0; i < e; )
    r += String.fromCharCode.apply(
      String,
      t.slice(i, i += l2)
    );
  return r;
}
function EA(t, e, r) {
  var i = "";
  r = Math.min(t.length, r);
  for (var n = e; n < r; ++n)
    i += String.fromCharCode(t[n] & 127);
  return i;
}
function CA(t, e, r) {
  var i = "";
  r = Math.min(t.length, r);
  for (var n = e; n < r; ++n)
    i += String.fromCharCode(t[n]);
  return i;
}
function SA(t, e, r) {
  var i = t.length;
  (!e || e < 0) && (e = 0), (!r || r < 0 || r > i) && (r = i);
  for (var n = "", a = e; a < r; ++a)
    n += DA(t[a]);
  return n;
}
function TA(t, e, r) {
  for (var i = t.slice(e, r), n = "", a = 0; a < i.length; a += 2)
    n += String.fromCharCode(i[a] + i[a + 1] * 256);
  return n;
}
J.prototype.slice = function(e, r) {
  var i = this.length;
  e = ~~e, r = r === void 0 ? i : ~~r, e < 0 ? (e += i, e < 0 && (e = 0)) : e > i && (e = i), r < 0 ? (r += i, r < 0 && (r = 0)) : r > i && (r = i), r < e && (r = e);
  var n;
  if (J.TYPED_ARRAY_SUPPORT)
    n = this.subarray(e, r), n.__proto__ = J.prototype;
  else {
    var a = r - e;
    n = new J(a, void 0);
    for (var s = 0; s < a; ++s)
      n[s] = this[s + e];
  }
  return n;
};
function y0(t, e, r) {
  if (t % 1 !== 0 || t < 0) throw new RangeError("offset is not uint");
  if (t + e > r) throw new RangeError("Trying to access beyond buffer length");
}
J.prototype.readUIntLE = function(e, r, i) {
  e = e | 0, r = r | 0, i || y0(e, r, this.length);
  for (var n = this[e], a = 1, s = 0; ++s < r && (a *= 256); )
    n += this[e + s] * a;
  return n;
};
J.prototype.readUIntBE = function(e, r, i) {
  e = e | 0, r = r | 0, i || y0(e, r, this.length);
  for (var n = this[e + --r], a = 1; r > 0 && (a *= 256); )
    n += this[e + --r] * a;
  return n;
};
J.prototype.readUInt8 = function(e, r) {
  return r || y0(e, 1, this.length), this[e];
};
J.prototype.readUInt16LE = function(e, r) {
  return r || y0(e, 2, this.length), this[e] | this[e + 1] << 8;
};
J.prototype.readUInt16BE = function(e, r) {
  return r || y0(e, 2, this.length), this[e] << 8 | this[e + 1];
};
J.prototype.readUInt32LE = function(e, r) {
  return r || y0(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;
};
J.prototype.readUInt32BE = function(e, r) {
  return r || y0(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
};
J.prototype.readIntLE = function(e, r, i) {
  e = e | 0, r = r | 0, i || y0(e, r, this.length);
  for (var n = this[e], a = 1, s = 0; ++s < r && (a *= 256); )
    n += this[e + s] * a;
  return a *= 128, n >= a && (n -= Math.pow(2, 8 * r)), n;
};
J.prototype.readIntBE = function(e, r, i) {
  e = e | 0, r = r | 0, i || y0(e, r, this.length);
  for (var n = r, a = 1, s = this[e + --n]; n > 0 && (a *= 256); )
    s += this[e + --n] * a;
  return a *= 128, s >= a && (s -= Math.pow(2, 8 * r)), s;
};
J.prototype.readInt8 = function(e, r) {
  return r || y0(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];
};
J.prototype.readInt16LE = function(e, r) {
  r || y0(e, 2, this.length);
  var i = this[e] | this[e + 1] << 8;
  return i & 32768 ? i | 4294901760 : i;
};
J.prototype.readInt16BE = function(e, r) {
  r || y0(e, 2, this.length);
  var i = this[e + 1] | this[e] << 8;
  return i & 32768 ? i | 4294901760 : i;
};
J.prototype.readInt32LE = function(e, r) {
  return r || y0(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
};
J.prototype.readInt32BE = function(e, r) {
  return r || y0(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
};
J.prototype.readFloatLE = function(e, r) {
  return r || y0(e, 4, this.length), il(this, e, !0, 23, 4);
};
J.prototype.readFloatBE = function(e, r) {
  return r || y0(e, 4, this.length), il(this, e, !1, 23, 4);
};
J.prototype.readDoubleLE = function(e, r) {
  return r || y0(e, 8, this.length), il(this, e, !0, 52, 8);
};
J.prototype.readDoubleBE = function(e, r) {
  return r || y0(e, 8, this.length), il(this, e, !1, 52, 8);
};
function J0(t, e, r, i, n, a) {
  if (!ir(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (e > n || e < a) throw new RangeError('"value" argument is out of bounds');
  if (r + i > t.length) throw new RangeError("Index out of range");
}
J.prototype.writeUIntLE = function(e, r, i, n) {
  if (e = +e, r = r | 0, i = i | 0, !n) {
    var a = Math.pow(2, 8 * i) - 1;
    J0(this, e, r, i, a, 0);
  }
  var s = 1, o = 0;
  for (this[r] = e & 255; ++o < i && (s *= 256); )
    this[r + o] = e / s & 255;
  return r + i;
};
J.prototype.writeUIntBE = function(e, r, i, n) {
  if (e = +e, r = r | 0, i = i | 0, !n) {
    var a = Math.pow(2, 8 * i) - 1;
    J0(this, e, r, i, a, 0);
  }
  var s = i - 1, o = 1;
  for (this[r + s] = e & 255; --s >= 0 && (o *= 256); )
    this[r + s] = e / o & 255;
  return r + i;
};
J.prototype.writeUInt8 = function(e, r, i) {
  return e = +e, r = r | 0, i || J0(this, e, r, 1, 255, 0), J.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[r] = e & 255, r + 1;
};
function nl(t, e, r, i) {
  e < 0 && (e = 65535 + e + 1);
  for (var n = 0, a = Math.min(t.length - r, 2); n < a; ++n)
    t[r + n] = (e & 255 << 8 * (i ? n : 1 - n)) >>> (i ? n : 1 - n) * 8;
}
J.prototype.writeUInt16LE = function(e, r, i) {
  return e = +e, r = r | 0, i || J0(this, e, r, 2, 65535, 0), J.TYPED_ARRAY_SUPPORT ? (this[r] = e & 255, this[r + 1] = e >>> 8) : nl(this, e, r, !0), r + 2;
};
J.prototype.writeUInt16BE = function(e, r, i) {
  return e = +e, r = r | 0, i || J0(this, e, r, 2, 65535, 0), J.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 8, this[r + 1] = e & 255) : nl(this, e, r, !1), r + 2;
};
function al(t, e, r, i) {
  e < 0 && (e = 4294967295 + e + 1);
  for (var n = 0, a = Math.min(t.length - r, 4); n < a; ++n)
    t[r + n] = e >>> (i ? n : 3 - n) * 8 & 255;
}
J.prototype.writeUInt32LE = function(e, r, i) {
  return e = +e, r = r | 0, i || J0(this, e, r, 4, 4294967295, 0), J.TYPED_ARRAY_SUPPORT ? (this[r + 3] = e >>> 24, this[r + 2] = e >>> 16, this[r + 1] = e >>> 8, this[r] = e & 255) : al(this, e, r, !0), r + 4;
};
J.prototype.writeUInt32BE = function(e, r, i) {
  return e = +e, r = r | 0, i || J0(this, e, r, 4, 4294967295, 0), J.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = e & 255) : al(this, e, r, !1), r + 4;
};
J.prototype.writeIntLE = function(e, r, i, n) {
  if (e = +e, r = r | 0, !n) {
    var a = Math.pow(2, 8 * i - 1);
    J0(this, e, r, i, a - 1, -a);
  }
  var s = 0, o = 1, c = 0;
  for (this[r] = e & 255; ++s < i && (o *= 256); )
    e < 0 && c === 0 && this[r + s - 1] !== 0 && (c = 1), this[r + s] = (e / o >> 0) - c & 255;
  return r + i;
};
J.prototype.writeIntBE = function(e, r, i, n) {
  if (e = +e, r = r | 0, !n) {
    var a = Math.pow(2, 8 * i - 1);
    J0(this, e, r, i, a - 1, -a);
  }
  var s = i - 1, o = 1, c = 0;
  for (this[r + s] = e & 255; --s >= 0 && (o *= 256); )
    e < 0 && c === 0 && this[r + s + 1] !== 0 && (c = 1), this[r + s] = (e / o >> 0) - c & 255;
  return r + i;
};
J.prototype.writeInt8 = function(e, r, i) {
  return e = +e, r = r | 0, i || J0(this, e, r, 1, 127, -128), J.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[r] = e & 255, r + 1;
};
J.prototype.writeInt16LE = function(e, r, i) {
  return e = +e, r = r | 0, i || J0(this, e, r, 2, 32767, -32768), J.TYPED_ARRAY_SUPPORT ? (this[r] = e & 255, this[r + 1] = e >>> 8) : nl(this, e, r, !0), r + 2;
};
J.prototype.writeInt16BE = function(e, r, i) {
  return e = +e, r = r | 0, i || J0(this, e, r, 2, 32767, -32768), J.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 8, this[r + 1] = e & 255) : nl(this, e, r, !1), r + 2;
};
J.prototype.writeInt32LE = function(e, r, i) {
  return e = +e, r = r | 0, i || J0(this, e, r, 4, 2147483647, -2147483648), J.TYPED_ARRAY_SUPPORT ? (this[r] = e & 255, this[r + 1] = e >>> 8, this[r + 2] = e >>> 16, this[r + 3] = e >>> 24) : al(this, e, r, !0), r + 4;
};
J.prototype.writeInt32BE = function(e, r, i) {
  return e = +e, r = r | 0, i || J0(this, e, r, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), J.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = e & 255) : al(this, e, r, !1), r + 4;
};
function Ig(t, e, r, i, n, a) {
  if (r + i > t.length) throw new RangeError("Index out of range");
  if (r < 0) throw new RangeError("Index out of range");
}
function Rg(t, e, r, i, n) {
  return n || Ig(t, e, r, 4), Eg(t, e, r, i, 23, 4), r + 4;
}
J.prototype.writeFloatLE = function(e, r, i) {
  return Rg(this, e, r, !0, i);
};
J.prototype.writeFloatBE = function(e, r, i) {
  return Rg(this, e, r, !1, i);
};
function Pg(t, e, r, i, n) {
  return n || Ig(t, e, r, 8), Eg(t, e, r, i, 52, 8), r + 8;
}
J.prototype.writeDoubleLE = function(e, r, i) {
  return Pg(this, e, r, !0, i);
};
J.prototype.writeDoubleBE = function(e, r, i) {
  return Pg(this, e, r, !1, i);
};
J.prototype.copy = function(e, r, i, n) {
  if (i || (i = 0), !n && n !== 0 && (n = this.length), r >= e.length && (r = e.length), r || (r = 0), n > 0 && n < i && (n = i), n === i || e.length === 0 || this.length === 0) return 0;
  if (r < 0)
    throw new RangeError("targetStart out of bounds");
  if (i < 0 || i >= this.length) throw new RangeError("sourceStart out of bounds");
  if (n < 0) throw new RangeError("sourceEnd out of bounds");
  n > this.length && (n = this.length), e.length - r < n - i && (n = e.length - r + i);
  var a = n - i, s;
  if (this === e && i < r && r < n)
    for (s = a - 1; s >= 0; --s)
      e[s + r] = this[s + i];
  else if (a < 1e3 || !J.TYPED_ARRAY_SUPPORT)
    for (s = 0; s < a; ++s)
      e[s + r] = this[s + i];
  else
    Uint8Array.prototype.set.call(
      e,
      this.subarray(i, i + a),
      r
    );
  return a;
};
J.prototype.fill = function(e, r, i, n) {
  if (typeof e == "string") {
    if (typeof r == "string" ? (n = r, r = 0, i = this.length) : typeof i == "string" && (n = i, i = this.length), e.length === 1) {
      var a = e.charCodeAt(0);
      a < 256 && (e = a);
    }
    if (n !== void 0 && typeof n != "string")
      throw new TypeError("encoding must be a string");
    if (typeof n == "string" && !J.isEncoding(n))
      throw new TypeError("Unknown encoding: " + n);
  } else typeof e == "number" && (e = e & 255);
  if (r < 0 || this.length < r || this.length < i)
    throw new RangeError("Out of range index");
  if (i <= r)
    return this;
  r = r >>> 0, i = i === void 0 ? this.length : i >>> 0, e || (e = 0);
  var s;
  if (typeof e == "number")
    for (s = r; s < i; ++s)
      this[s] = e;
  else {
    var o = ir(e) ? e : Do(new J(e, n).toString()), c = o.length;
    for (s = 0; s < i - r; ++s)
      this[s + r] = o[s % c];
  }
  return this;
};
var kA = /[^+\/0-9A-Za-z-_]/g;
function FA(t) {
  if (t = OA(t).replace(kA, ""), t.length < 2) return "";
  for (; t.length % 4 !== 0; )
    t = t + "=";
  return t;
}
function OA(t) {
  return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
}
function DA(t) {
  return t < 16 ? "0" + t.toString(16) : t.toString(16);
}
function Do(t, e) {
  e = e || 1 / 0;
  for (var r, i = t.length, n = null, a = [], s = 0; s < i; ++s) {
    if (r = t.charCodeAt(s), r > 55295 && r < 57344) {
      if (!n) {
        if (r > 56319) {
          (e -= 3) > -1 && a.push(239, 191, 189);
          continue;
        } else if (s + 1 === i) {
          (e -= 3) > -1 && a.push(239, 191, 189);
          continue;
        }
        n = r;
        continue;
      }
      if (r < 56320) {
        (e -= 3) > -1 && a.push(239, 191, 189), n = r;
        continue;
      }
      r = (n - 55296 << 10 | r - 56320) + 65536;
    } else n && (e -= 3) > -1 && a.push(239, 191, 189);
    if (n = null, r < 128) {
      if ((e -= 1) < 0) break;
      a.push(r);
    } else if (r < 2048) {
      if ((e -= 2) < 0) break;
      a.push(
        r >> 6 | 192,
        r & 63 | 128
      );
    } else if (r < 65536) {
      if ((e -= 3) < 0) break;
      a.push(
        r >> 12 | 224,
        r >> 6 & 63 | 128,
        r & 63 | 128
      );
    } else if (r < 1114112) {
      if ((e -= 4) < 0) break;
      a.push(
        r >> 18 | 240,
        r >> 12 & 63 | 128,
        r >> 6 & 63 | 128,
        r & 63 | 128
      );
    } else
      throw new Error("Invalid code point");
  }
  return a;
}
function BA(t) {
  for (var e = [], r = 0; r < t.length; ++r)
    e.push(t.charCodeAt(r) & 255);
  return e;
}
function IA(t, e) {
  for (var r, i, n, a = [], s = 0; s < t.length && !((e -= 2) < 0); ++s)
    r = t.charCodeAt(s), i = r >> 8, n = r % 256, a.push(n), a.push(i);
  return a;
}
function Lg(t) {
  return sA(FA(t));
}
function sl(t, e, r, i) {
  for (var n = 0; n < i && !(n + r >= e.length || n >= t.length); ++n)
    e[n + r] = t[n];
  return n;
}
function RA(t) {
  return t !== t;
}
function yi(t) {
  return t != null && (!!t._isBuffer || Ng(t) || PA(t));
}
function Ng(t) {
  return !!t.constructor && typeof t.constructor.isBuffer == "function" && t.constructor.isBuffer(t);
}
function PA(t) {
  return typeof t.readFloatLE == "function" && typeof t.slice == "function" && Ng(t.slice(0, 0));
}
var LA = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  Buffer: J,
  INSPECT_MAX_BYTES: Sg,
  SlowBuffer: pA,
  isBuffer: yi,
  kMaxLength: fA
});
function Mg() {
  throw new Error("setTimeout has not been defined");
}
function Ug() {
  throw new Error("clearTimeout has not been defined");
}
var Rr = Mg, Pr = Ug;
typeof Mi.setTimeout == "function" && (Rr = setTimeout);
typeof Mi.clearTimeout == "function" && (Pr = clearTimeout);
function $g(t) {
  if (Rr === setTimeout)
    return setTimeout(t, 0);
  if ((Rr === Mg || !Rr) && setTimeout)
    return Rr = setTimeout, setTimeout(t, 0);
  try {
    return Rr(t, 0);
  } catch {
    try {
      return Rr.call(null, t, 0);
    } catch {
      return Rr.call(this, t, 0);
    }
  }
}
function NA(t) {
  if (Pr === clearTimeout)
    return clearTimeout(t);
  if ((Pr === Ug || !Pr) && clearTimeout)
    return Pr = clearTimeout, clearTimeout(t);
  try {
    return Pr(t);
  } catch {
    try {
      return Pr.call(null, t);
    } catch {
      return Pr.call(this, t);
    }
  }
}
var wr = [], An = !1, _i, ro = -1;
function MA() {
  !An || !_i || (An = !1, _i.length ? wr = _i.concat(wr) : ro = -1, wr.length && zg());
}
function zg() {
  if (!An) {
    var t = $g(MA);
    An = !0;
    for (var e = wr.length; e; ) {
      for (_i = wr, wr = []; ++ro < e; )
        _i && _i[ro].run();
      ro = -1, e = wr.length;
    }
    _i = null, An = !1, NA(t);
  }
}
function ot(t) {
  var e = new Array(arguments.length - 1);
  if (arguments.length > 1)
    for (var r = 1; r < arguments.length; r++)
      e[r - 1] = arguments[r];
  wr.push(new Wg(t, e)), wr.length === 1 && !An && $g(zg);
}
function Wg(t, e) {
  this.fun = t, this.array = e;
}
Wg.prototype.run = function() {
  this.fun.apply(null, this.array);
};
var UA = "browser", $A = "browser", zA = !0, WA = {}, HA = [], qA = "", VA = {}, YA = {}, GA = {};
function Gi() {
}
var ZA = Gi, jA = Gi, XA = Gi, KA = Gi, JA = Gi, QA = Gi, eE = Gi;
function tE(t) {
  throw new Error("process.binding is not supported");
}
function rE() {
  return "/";
}
function iE(t) {
  throw new Error("process.chdir is not supported");
}
function nE() {
  return 0;
}
var gn = Mi.performance || {}, aE = gn.now || gn.mozNow || gn.msNow || gn.oNow || gn.webkitNow || function() {
  return (/* @__PURE__ */ new Date()).getTime();
};
function sE(t) {
  var e = aE.call(gn) * 1e-3, r = Math.floor(e), i = Math.floor(e % 1 * 1e9);
  return t && (r = r - t[0], i = i - t[1], i < 0 && (r--, i += 1e9)), [r, i];
}
var oE = /* @__PURE__ */ new Date();
function lE() {
  var t = /* @__PURE__ */ new Date(), e = t - oE;
  return e / 1e3;
}
var _t = {
  nextTick: ot,
  title: UA,
  browser: zA,
  env: WA,
  argv: HA,
  version: qA,
  versions: VA,
  on: ZA,
  addListener: jA,
  once: XA,
  off: KA,
  removeListener: JA,
  removeAllListeners: QA,
  emit: eE,
  binding: tE,
  cwd: rE,
  chdir: iE,
  umask: nE,
  hrtime: sE,
  platform: $A,
  release: YA,
  config: GA,
  uptime: lE
};
function cE(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function ol(t) {
  if (t.__esModule) return t;
  var e = t.default;
  if (typeof e == "function") {
    var r = function i() {
      return this instanceof i ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    r.prototype = e.prototype;
  } else r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(t).forEach(function(i) {
    var n = Object.getOwnPropertyDescriptor(t, i);
    Object.defineProperty(r, i, n.get ? n : {
      enumerable: !0,
      get: function() {
        return t[i];
      }
    });
  }), r;
}
var Hg = {}, c2 = /* @__PURE__ */ ol(LA), fE;
function Kr() {
}
Kr.prototype = /* @__PURE__ */ Object.create(null);
function Ue() {
  Ue.init.call(this);
}
Ue.EventEmitter = Ue;
Ue.usingDomains = !1;
Ue.prototype.domain = void 0;
Ue.prototype._events = void 0;
Ue.prototype._maxListeners = void 0;
Ue.defaultMaxListeners = 10;
Ue.init = function() {
  this.domain = null, Ue.usingDomains && fE.active, (!this._events || this._events === Object.getPrototypeOf(this)._events) && (this._events = new Kr(), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
Ue.prototype.setMaxListeners = function(e) {
  if (typeof e != "number" || e < 0 || isNaN(e))
    throw new TypeError('"n" argument must be a positive number');
  return this._maxListeners = e, this;
};
function qg(t) {
  return t._maxListeners === void 0 ? Ue.defaultMaxListeners : t._maxListeners;
}
Ue.prototype.getMaxListeners = function() {
  return qg(this);
};
function uE(t, e, r) {
  if (e)
    t.call(r);
  else
    for (var i = t.length, n = ns(t, i), a = 0; a < i; ++a)
      n[a].call(r);
}
function hE(t, e, r, i) {
  if (e)
    t.call(r, i);
  else
    for (var n = t.length, a = ns(t, n), s = 0; s < n; ++s)
      a[s].call(r, i);
}
function dE(t, e, r, i, n) {
  if (e)
    t.call(r, i, n);
  else
    for (var a = t.length, s = ns(t, a), o = 0; o < a; ++o)
      s[o].call(r, i, n);
}
function gE(t, e, r, i, n, a) {
  if (e)
    t.call(r, i, n, a);
  else
    for (var s = t.length, o = ns(t, s), c = 0; c < s; ++c)
      o[c].call(r, i, n, a);
}
function pE(t, e, r, i) {
  if (e)
    t.apply(r, i);
  else
    for (var n = t.length, a = ns(t, n), s = 0; s < n; ++s)
      a[s].apply(r, i);
}
Ue.prototype.emit = function(e) {
  var r, i, n, a, s, o, c, l = e === "error";
  if (o = this._events, o)
    l = l && o.error == null;
  else if (!l)
    return !1;
  if (c = this.domain, l) {
    if (r = arguments[1], c)
      r || (r = new Error('Uncaught, unspecified "error" event')), r.domainEmitter = this, r.domain = c, r.domainThrown = !1, c.emit("error", r);
    else {
      if (r instanceof Error)
        throw r;
      var f = new Error('Uncaught, unspecified "error" event. (' + r + ")");
      throw f.context = r, f;
    }
    return !1;
  }
  if (i = o[e], !i)
    return !1;
  var u = typeof i == "function";
  switch (n = arguments.length, n) {
    case 1:
      uE(i, u, this);
      break;
    case 2:
      hE(i, u, this, arguments[1]);
      break;
    case 3:
      dE(i, u, this, arguments[1], arguments[2]);
      break;
    case 4:
      gE(i, u, this, arguments[1], arguments[2], arguments[3]);
      break;
    default:
      for (a = new Array(n - 1), s = 1; s < n; s++)
        a[s - 1] = arguments[s];
      pE(i, u, this, a);
  }
  return !0;
};
function Vg(t, e, r, i) {
  var n, a, s;
  if (typeof r != "function")
    throw new TypeError('"listener" argument must be a function');
  if (a = t._events, a ? (a.newListener && (t.emit(
    "newListener",
    e,
    r.listener ? r.listener : r
  ), a = t._events), s = a[e]) : (a = t._events = new Kr(), t._eventsCount = 0), !s)
    s = a[e] = r, ++t._eventsCount;
  else if (typeof s == "function" ? s = a[e] = i ? [r, s] : [s, r] : i ? s.unshift(r) : s.push(r), !s.warned && (n = qg(t), n && n > 0 && s.length > n)) {
    s.warned = !0;
    var o = new Error("Possible EventEmitter memory leak detected. " + s.length + " " + e + " listeners added. Use emitter.setMaxListeners() to increase limit");
    o.name = "MaxListenersExceededWarning", o.emitter = t, o.type = e, o.count = s.length, vE(o);
  }
  return t;
}
function vE(t) {
  typeof console.warn == "function" ? console.warn(t) : console.log(t);
}
Ue.prototype.addListener = function(e, r) {
  return Vg(this, e, r, !1);
};
Ue.prototype.on = Ue.prototype.addListener;
Ue.prototype.prependListener = function(e, r) {
  return Vg(this, e, r, !0);
};
function Yg(t, e, r) {
  var i = !1;
  function n() {
    t.removeListener(e, n), i || (i = !0, r.apply(t, arguments));
  }
  return n.listener = r, n;
}
Ue.prototype.once = function(e, r) {
  if (typeof r != "function")
    throw new TypeError('"listener" argument must be a function');
  return this.on(e, Yg(this, e, r)), this;
};
Ue.prototype.prependOnceListener = function(e, r) {
  if (typeof r != "function")
    throw new TypeError('"listener" argument must be a function');
  return this.prependListener(e, Yg(this, e, r)), this;
};
Ue.prototype.removeListener = function(e, r) {
  var i, n, a, s, o;
  if (typeof r != "function")
    throw new TypeError('"listener" argument must be a function');
  if (n = this._events, !n)
    return this;
  if (i = n[e], !i)
    return this;
  if (i === r || i.listener && i.listener === r)
    --this._eventsCount === 0 ? this._events = new Kr() : (delete n[e], n.removeListener && this.emit("removeListener", e, i.listener || r));
  else if (typeof i != "function") {
    for (a = -1, s = i.length; s-- > 0; )
      if (i[s] === r || i[s].listener && i[s].listener === r) {
        o = i[s].listener, a = s;
        break;
      }
    if (a < 0)
      return this;
    if (i.length === 1) {
      if (i[0] = void 0, --this._eventsCount === 0)
        return this._events = new Kr(), this;
      delete n[e];
    } else
      mE(i, a);
    n.removeListener && this.emit("removeListener", e, o || r);
  }
  return this;
};
Ue.prototype.off = function(t, e) {
  return this.removeListener(t, e);
};
Ue.prototype.removeAllListeners = function(e) {
  var r, i;
  if (i = this._events, !i)
    return this;
  if (!i.removeListener)
    return arguments.length === 0 ? (this._events = new Kr(), this._eventsCount = 0) : i[e] && (--this._eventsCount === 0 ? this._events = new Kr() : delete i[e]), this;
  if (arguments.length === 0) {
    for (var n = Object.keys(i), a = 0, s; a < n.length; ++a)
      s = n[a], s !== "removeListener" && this.removeAllListeners(s);
    return this.removeAllListeners("removeListener"), this._events = new Kr(), this._eventsCount = 0, this;
  }
  if (r = i[e], typeof r == "function")
    this.removeListener(e, r);
  else if (r)
    do
      this.removeListener(e, r[r.length - 1]);
    while (r[0]);
  return this;
};
Ue.prototype.listeners = function(e) {
  var r, i, n = this._events;
  return n ? (r = n[e], r ? typeof r == "function" ? i = [r.listener || r] : i = bE(r) : i = []) : i = [], i;
};
Ue.listenerCount = function(t, e) {
  return typeof t.listenerCount == "function" ? t.listenerCount(e) : Gg.call(t, e);
};
Ue.prototype.listenerCount = Gg;
function Gg(t) {
  var e = this._events;
  if (e) {
    var r = e[t];
    if (typeof r == "function")
      return 1;
    if (r)
      return r.length;
  }
  return 0;
}
Ue.prototype.eventNames = function() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};
function mE(t, e) {
  for (var r = e, i = r + 1, n = t.length; i < n; r += 1, i += 1)
    t[r] = t[i];
  t.pop();
}
function ns(t, e) {
  for (var r = new Array(e); e--; )
    r[e] = t[e];
  return r;
}
function bE(t) {
  for (var e = new Array(t.length), r = 0; r < e.length; ++r)
    e[r] = t[r].listener || t[r];
  return e;
}
var lf;
typeof Object.create == "function" ? lf = function(e, r) {
  e.super_ = r, e.prototype = Object.create(r.prototype, {
    constructor: {
      value: e,
      enumerable: !1,
      writable: !0,
      configurable: !0
    }
  });
} : lf = function(e, r) {
  e.super_ = r;
  var i = function() {
  };
  i.prototype = r.prototype, e.prototype = new i(), e.prototype.constructor = e;
};
var Cr = lf, Zg = Object.getOwnPropertyDescriptors || function(e) {
  for (var r = Object.keys(e), i = {}, n = 0; n < r.length; n++)
    i[r[n]] = Object.getOwnPropertyDescriptor(e, r[n]);
  return i;
}, xE = /%[sdj%]/g;
function ll(t) {
  if (!ss(t)) {
    for (var e = [], r = 0; r < arguments.length; r++)
      e.push(Et(arguments[r]));
    return e.join(" ");
  }
  for (var r = 1, i = arguments, n = i.length, a = String(t).replace(xE, function(o) {
    if (o === "%%") return "%";
    if (r >= n) return o;
    switch (o) {
      case "%s":
        return String(i[r++]);
      case "%d":
        return Number(i[r++]);
      case "%j":
        try {
          return JSON.stringify(i[r++]);
        } catch {
          return "[Circular]";
        }
      default:
        return o;
    }
  }), s = i[r]; r < n; s = i[++r])
    as(s) || !Zi(s) ? a += " " + s : a += " " + Et(s);
  return a;
}
function cl(t, e) {
  if (Qt(Mi.process))
    return function() {
      return cl(t, e).apply(this, arguments);
    };
  if (_t.noDeprecation === !0)
    return t;
  var r = !1;
  function i() {
    if (!r) {
      if (_t.throwDeprecation)
        throw new Error(e);
      _t.traceDeprecation ? console.trace(e) : console.error(e), r = !0;
    }
    return t.apply(this, arguments);
  }
  return i;
}
var Ms = {}, wc;
function Kf(t) {
  if (Qt(wc) && (wc = _t.env.NODE_DEBUG || ""), t = t.toUpperCase(), !Ms[t])
    if (new RegExp("\\b" + t + "\\b", "i").test(wc)) {
      var e = 0;
      Ms[t] = function() {
        var r = ll.apply(null, arguments);
        console.error("%s %d: %s", t, e, r);
      };
    } else
      Ms[t] = function() {
      };
  return Ms[t];
}
function Et(t, e) {
  var r = {
    seen: [],
    stylize: yE
  };
  return arguments.length >= 3 && (r.depth = arguments[2]), arguments.length >= 4 && (r.colors = arguments[3]), fl(e) ? r.showHidden = e : e && tu(r, e), Qt(r.showHidden) && (r.showHidden = !1), Qt(r.depth) && (r.depth = 2), Qt(r.colors) && (r.colors = !1), Qt(r.customInspect) && (r.customInspect = !0), r.colors && (r.stylize = wE), Bo(r, t, r.depth);
}
Et.colors = {
  bold: [1, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  white: [37, 39],
  grey: [90, 39],
  black: [30, 39],
  blue: [34, 39],
  cyan: [36, 39],
  green: [32, 39],
  magenta: [35, 39],
  red: [31, 39],
  yellow: [33, 39]
};
Et.styles = {
  special: "cyan",
  number: "yellow",
  boolean: "yellow",
  undefined: "grey",
  null: "bold",
  string: "green",
  date: "magenta",
  // "name": intentionally not styling
  regexp: "red"
};
function wE(t, e) {
  var r = Et.styles[e];
  return r ? "\x1B[" + Et.colors[r][0] + "m" + t + "\x1B[" + Et.colors[r][1] + "m" : t;
}
function yE(t, e) {
  return t;
}
function _E(t) {
  var e = {};
  return t.forEach(function(r, i) {
    e[r] = !0;
  }), e;
}
function Bo(t, e, r) {
  if (t.customInspect && e && Bi(e.inspect) && // Filter out the util module, it's inspect function is special
  e.inspect !== Et && // Also filter out any prototype objects using the circular check.
  !(e.constructor && e.constructor.prototype === e)) {
    var i = e.inspect(r, t);
    return ss(i) || (i = Bo(t, i, r)), i;
  }
  var n = AE(t, e);
  if (n)
    return n;
  var a = Object.keys(e), s = _E(a);
  if (t.showHidden && (a = Object.getOwnPropertyNames(e)), En(e) && (a.indexOf("message") >= 0 || a.indexOf("description") >= 0))
    return yc(e);
  if (a.length === 0) {
    if (Bi(e)) {
      var o = e.name ? ": " + e.name : "";
      return t.stylize("[Function" + o + "]", "special");
    }
    if (Di(e))
      return t.stylize(RegExp.prototype.toString.call(e), "regexp");
    if (Rn(e))
      return t.stylize(Date.prototype.toString.call(e), "date");
    if (En(e))
      return yc(e);
  }
  var c = "", l = !1, f = ["{", "}"];
  if (Jf(e) && (l = !0, f = ["[", "]"]), Bi(e)) {
    var u = e.name ? ": " + e.name : "";
    c = " [Function" + u + "]";
  }
  if (Di(e) && (c = " " + RegExp.prototype.toString.call(e)), Rn(e) && (c = " " + Date.prototype.toUTCString.call(e)), En(e) && (c = " " + yc(e)), a.length === 0 && (!l || e.length == 0))
    return f[0] + c + f[1];
  if (r < 0)
    return Di(e) ? t.stylize(RegExp.prototype.toString.call(e), "regexp") : t.stylize("[Object]", "special");
  t.seen.push(e);
  var h;
  return l ? h = EE(t, e, r, s, a) : h = a.map(function(d) {
    return cf(t, e, r, s, d, l);
  }), t.seen.pop(), CE(h, c, f);
}
function AE(t, e) {
  if (Qt(e))
    return t.stylize("undefined", "undefined");
  if (ss(e)) {
    var r = "'" + JSON.stringify(e).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
    return t.stylize(r, "string");
  }
  if (Qf(e))
    return t.stylize("" + e, "number");
  if (fl(e))
    return t.stylize("" + e, "boolean");
  if (as(e))
    return t.stylize("null", "null");
}
function yc(t) {
  return "[" + Error.prototype.toString.call(t) + "]";
}
function EE(t, e, r, i, n) {
  for (var a = [], s = 0, o = e.length; s < o; ++s)
    Qg(e, String(s)) ? a.push(cf(
      t,
      e,
      r,
      i,
      String(s),
      !0
    )) : a.push("");
  return n.forEach(function(c) {
    c.match(/^\d+$/) || a.push(cf(
      t,
      e,
      r,
      i,
      c,
      !0
    ));
  }), a;
}
function cf(t, e, r, i, n, a) {
  var s, o, c;
  if (c = Object.getOwnPropertyDescriptor(e, n) || { value: e[n] }, c.get ? c.set ? o = t.stylize("[Getter/Setter]", "special") : o = t.stylize("[Getter]", "special") : c.set && (o = t.stylize("[Setter]", "special")), Qg(i, n) || (s = "[" + n + "]"), o || (t.seen.indexOf(c.value) < 0 ? (as(r) ? o = Bo(t, c.value, null) : o = Bo(t, c.value, r - 1), o.indexOf(`
`) > -1 && (a ? o = o.split(`
`).map(function(l) {
    return "  " + l;
  }).join(`
`).substr(2) : o = `
` + o.split(`
`).map(function(l) {
    return "   " + l;
  }).join(`
`))) : o = t.stylize("[Circular]", "special")), Qt(s)) {
    if (a && n.match(/^\d+$/))
      return o;
    s = JSON.stringify("" + n), s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s = s.substr(1, s.length - 2), s = t.stylize(s, "name")) : (s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s = t.stylize(s, "string"));
  }
  return s + ": " + o;
}
function CE(t, e, r) {
  var i = t.reduce(function(n, a) {
    return a.indexOf(`
`) >= 0, n + a.replace(/\u001b\[\d\d?m/g, "").length + 1;
  }, 0);
  return i > 60 ? r[0] + (e === "" ? "" : e + `
 `) + " " + t.join(`,
  `) + " " + r[1] : r[0] + e + " " + t.join(", ") + " " + r[1];
}
function Jf(t) {
  return Array.isArray(t);
}
function fl(t) {
  return typeof t == "boolean";
}
function as(t) {
  return t === null;
}
function jg(t) {
  return t == null;
}
function Qf(t) {
  return typeof t == "number";
}
function ss(t) {
  return typeof t == "string";
}
function Xg(t) {
  return typeof t == "symbol";
}
function Qt(t) {
  return t === void 0;
}
function Di(t) {
  return Zi(t) && eu(t) === "[object RegExp]";
}
function Zi(t) {
  return typeof t == "object" && t !== null;
}
function Rn(t) {
  return Zi(t) && eu(t) === "[object Date]";
}
function En(t) {
  return Zi(t) && (eu(t) === "[object Error]" || t instanceof Error);
}
function Bi(t) {
  return typeof t == "function";
}
function Io(t) {
  return t === null || typeof t == "boolean" || typeof t == "number" || typeof t == "string" || typeof t == "symbol" || // ES6 symbol
  typeof t > "u";
}
function Kg(t) {
  return J.isBuffer(t);
}
function eu(t) {
  return Object.prototype.toString.call(t);
}
function _c(t) {
  return t < 10 ? "0" + t.toString(10) : t.toString(10);
}
var SE = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
function TE() {
  var t = /* @__PURE__ */ new Date(), e = [
    _c(t.getHours()),
    _c(t.getMinutes()),
    _c(t.getSeconds())
  ].join(":");
  return [t.getDate(), SE[t.getMonth()], e].join(" ");
}
function Jg() {
  console.log("%s - %s", TE(), ll.apply(null, arguments));
}
function tu(t, e) {
  if (!e || !Zi(e)) return t;
  for (var r = Object.keys(e), i = r.length; i--; )
    t[r[i]] = e[r[i]];
  return t;
}
function Qg(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
var ui = typeof Symbol < "u" ? Symbol("util.promisify.custom") : void 0;
function ru(t) {
  if (typeof t != "function")
    throw new TypeError('The "original" argument must be of type Function');
  if (ui && t[ui]) {
    var e = t[ui];
    if (typeof e != "function")
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    return Object.defineProperty(e, ui, {
      value: e,
      enumerable: !1,
      writable: !1,
      configurable: !0
    }), e;
  }
  function e() {
    for (var r, i, n = new Promise(function(o, c) {
      r = o, i = c;
    }), a = [], s = 0; s < arguments.length; s++)
      a.push(arguments[s]);
    a.push(function(o, c) {
      o ? i(o) : r(c);
    });
    try {
      t.apply(this, a);
    } catch (o) {
      i(o);
    }
    return n;
  }
  return Object.setPrototypeOf(e, Object.getPrototypeOf(t)), ui && Object.defineProperty(e, ui, {
    value: e,
    enumerable: !1,
    writable: !1,
    configurable: !0
  }), Object.defineProperties(
    e,
    Zg(t)
  );
}
ru.custom = ui;
function kE(t, e) {
  if (!t) {
    var r = new Error("Promise was rejected with a falsy value");
    r.reason = t, t = r;
  }
  return e(t);
}
function e6(t) {
  if (typeof t != "function")
    throw new TypeError('The "original" argument must be of type Function');
  function e() {
    for (var r = [], i = 0; i < arguments.length; i++)
      r.push(arguments[i]);
    var n = r.pop();
    if (typeof n != "function")
      throw new TypeError("The last argument must be of type Function");
    var a = this, s = function() {
      return n.apply(a, arguments);
    };
    t.apply(this, r).then(
      function(o) {
        _t.nextTick(s.bind(null, null, o));
      },
      function(o) {
        _t.nextTick(kE.bind(null, o, s));
      }
    );
  }
  return Object.setPrototypeOf(e, Object.getPrototypeOf(t)), Object.defineProperties(e, Zg(t)), e;
}
var FE = {
  inherits: Cr,
  _extend: tu,
  log: Jg,
  isBuffer: Kg,
  isPrimitive: Io,
  isFunction: Bi,
  isError: En,
  isDate: Rn,
  isObject: Zi,
  isRegExp: Di,
  isUndefined: Qt,
  isSymbol: Xg,
  isString: ss,
  isNumber: Qf,
  isNullOrUndefined: jg,
  isNull: as,
  isBoolean: fl,
  isArray: Jf,
  inspect: Et,
  deprecate: cl,
  format: ll,
  debuglog: Kf,
  promisify: ru,
  callbackify: e6
}, OE = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  _extend: tu,
  callbackify: e6,
  debuglog: Kf,
  default: FE,
  deprecate: cl,
  format: ll,
  inherits: Cr,
  inspect: Et,
  isArray: Jf,
  isBoolean: fl,
  isBuffer: Kg,
  isDate: Rn,
  isError: En,
  isFunction: Bi,
  isNull: as,
  isNullOrUndefined: jg,
  isNumber: Qf,
  isObject: Zi,
  isPrimitive: Io,
  isRegExp: Di,
  isString: ss,
  isSymbol: Xg,
  isUndefined: Qt,
  log: Jg,
  promisify: ru
});
function ji() {
  this.head = null, this.tail = null, this.length = 0;
}
ji.prototype.push = function(t) {
  var e = { data: t, next: null };
  this.length > 0 ? this.tail.next = e : this.head = e, this.tail = e, ++this.length;
};
ji.prototype.unshift = function(t) {
  var e = { data: t, next: this.head };
  this.length === 0 && (this.tail = e), this.head = e, ++this.length;
};
ji.prototype.shift = function() {
  if (this.length !== 0) {
    var t = this.head.data;
    return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, t;
  }
};
ji.prototype.clear = function() {
  this.head = this.tail = null, this.length = 0;
};
ji.prototype.join = function(t) {
  if (this.length === 0) return "";
  for (var e = this.head, r = "" + e.data; e = e.next; )
    r += t + e.data;
  return r;
};
ji.prototype.concat = function(t) {
  if (this.length === 0) return J.alloc(0);
  if (this.length === 1) return this.head.data;
  for (var e = J.allocUnsafe(t >>> 0), r = this.head, i = 0; r; )
    r.data.copy(e, i), i += r.data.length, r = r.next;
  return e;
};
var DE = J.isEncoding || function(t) {
  switch (t && t.toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
    case "raw":
      return !0;
    default:
      return !1;
  }
};
function BE(t) {
  if (t && !DE(t))
    throw new Error("Unknown encoding: " + t);
}
function os(t) {
  switch (this.encoding = (t || "utf8").toLowerCase().replace(/[-_]/, ""), BE(t), this.encoding) {
    case "utf8":
      this.surrogateSize = 3;
      break;
    case "ucs2":
    case "utf16le":
      this.surrogateSize = 2, this.detectIncompleteChar = RE;
      break;
    case "base64":
      this.surrogateSize = 3, this.detectIncompleteChar = PE;
      break;
    default:
      this.write = IE;
      return;
  }
  this.charBuffer = new J(6), this.charReceived = 0, this.charLength = 0;
}
os.prototype.write = function(t) {
  for (var e = ""; this.charLength; ) {
    var r = t.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : t.length;
    if (t.copy(this.charBuffer, this.charReceived, 0, r), this.charReceived += r, this.charReceived < this.charLength)
      return "";
    t = t.slice(r, t.length), e = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
    var n = e.charCodeAt(e.length - 1);
    if (n >= 55296 && n <= 56319) {
      this.charLength += this.surrogateSize, e = "";
      continue;
    }
    if (this.charReceived = this.charLength = 0, t.length === 0)
      return e;
    break;
  }
  this.detectIncompleteChar(t);
  var i = t.length;
  this.charLength && (t.copy(this.charBuffer, 0, t.length - this.charReceived, i), i -= this.charReceived), e += t.toString(this.encoding, 0, i);
  var i = e.length - 1, n = e.charCodeAt(i);
  if (n >= 55296 && n <= 56319) {
    var a = this.surrogateSize;
    return this.charLength += a, this.charReceived += a, this.charBuffer.copy(this.charBuffer, a, 0, a), t.copy(this.charBuffer, 0, 0, a), e.substring(0, i);
  }
  return e;
};
os.prototype.detectIncompleteChar = function(t) {
  for (var e = t.length >= 3 ? 3 : t.length; e > 0; e--) {
    var r = t[t.length - e];
    if (e == 1 && r >> 5 == 6) {
      this.charLength = 2;
      break;
    }
    if (e <= 2 && r >> 4 == 14) {
      this.charLength = 3;
      break;
    }
    if (e <= 3 && r >> 3 == 30) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = e;
};
os.prototype.end = function(t) {
  var e = "";
  if (t && t.length && (e = this.write(t)), this.charReceived) {
    var r = this.charReceived, i = this.charBuffer, n = this.encoding;
    e += i.slice(0, r).toString(n);
  }
  return e;
};
function IE(t) {
  return t.toString(this.encoding);
}
function RE(t) {
  this.charReceived = t.length % 2, this.charLength = this.charReceived ? 2 : 0;
}
function PE(t) {
  this.charReceived = t.length % 3, this.charLength = this.charReceived ? 3 : 0;
}
c0.ReadableState = t6;
var Qe = Kf("stream");
Cr(c0, Ue);
function LE(t, e, r) {
  if (typeof t.prependListener == "function")
    return t.prependListener(e, r);
  !t._events || !t._events[e] ? t.on(e, r) : Array.isArray(t._events[e]) ? t._events[e].unshift(r) : t._events[e] = [r, t._events[e]];
}
function NE(t, e) {
  return t.listeners(e).length;
}
function t6(t, e) {
  t = t || {}, this.objectMode = !!t.objectMode, e instanceof st && (this.objectMode = this.objectMode || !!t.readableObjectMode);
  var r = t.highWaterMark, i = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = r || r === 0 ? r : i, this.highWaterMark = ~~this.highWaterMark, this.buffer = new ji(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.defaultEncoding = t.defaultEncoding || "utf8", this.ranOut = !1, this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, t.encoding && (this.decoder = new os(t.encoding), this.encoding = t.encoding);
}
function c0(t) {
  if (!(this instanceof c0)) return new c0(t);
  this._readableState = new t6(t, this), this.readable = !0, t && typeof t.read == "function" && (this._read = t.read), Ue.call(this);
}
c0.prototype.push = function(t, e) {
  var r = this._readableState;
  return !r.objectMode && typeof t == "string" && (e = e || r.defaultEncoding, e !== r.encoding && (t = J.from(t, e), e = "")), r6(this, r, t, e, !1);
};
c0.prototype.unshift = function(t) {
  var e = this._readableState;
  return r6(this, e, t, "", !0);
};
c0.prototype.isPaused = function() {
  return this._readableState.flowing === !1;
};
function r6(t, e, r, i, n) {
  var a = $E(e, r);
  if (a)
    t.emit("error", a);
  else if (r === null)
    e.reading = !1, zE(t, e);
  else if (e.objectMode || r && r.length > 0)
    if (e.ended && !n) {
      var s = new Error("stream.push() after EOF");
      t.emit("error", s);
    } else if (e.endEmitted && n) {
      var o = new Error("stream.unshift() after end event");
      t.emit("error", o);
    } else {
      var c;
      e.decoder && !n && !i && (r = e.decoder.write(r), c = !e.objectMode && r.length === 0), n || (e.reading = !1), c || (e.flowing && e.length === 0 && !e.sync ? (t.emit("data", r), t.read(0)) : (e.length += e.objectMode ? 1 : r.length, n ? e.buffer.unshift(r) : e.buffer.push(r), e.needReadable && ul(t))), WE(t, e);
    }
  else n || (e.reading = !1);
  return ME(e);
}
function ME(t) {
  return !t.ended && (t.needReadable || t.length < t.highWaterMark || t.length === 0);
}
c0.prototype.setEncoding = function(t) {
  return this._readableState.decoder = new os(t), this._readableState.encoding = t, this;
};
var f2 = 8388608;
function UE(t) {
  return t >= f2 ? t = f2 : (t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++), t;
}
function u2(t, e) {
  return t <= 0 || e.length === 0 && e.ended ? 0 : e.objectMode ? 1 : t !== t ? e.flowing && e.length ? e.buffer.head.data.length : e.length : (t > e.highWaterMark && (e.highWaterMark = UE(t)), t <= e.length ? t : e.ended ? e.length : (e.needReadable = !0, 0));
}
c0.prototype.read = function(t) {
  Qe("read", t), t = parseInt(t, 10);
  var e = this._readableState, r = t;
  if (t !== 0 && (e.emittedReadable = !1), t === 0 && e.needReadable && (e.length >= e.highWaterMark || e.ended))
    return Qe("read: emitReadable", e.length, e.ended), e.length === 0 && e.ended ? Ac(this) : ul(this), null;
  if (t = u2(t, e), t === 0 && e.ended)
    return e.length === 0 && Ac(this), null;
  var i = e.needReadable;
  Qe("need readable", i), (e.length === 0 || e.length - t < e.highWaterMark) && (i = !0, Qe("length less than watermark", i)), e.ended || e.reading ? (i = !1, Qe("reading or ended", i)) : i && (Qe("do read"), e.reading = !0, e.sync = !0, e.length === 0 && (e.needReadable = !0), this._read(e.highWaterMark), e.sync = !1, e.reading || (t = u2(r, e)));
  var n;
  return t > 0 ? n = i6(t, e) : n = null, n === null ? (e.needReadable = !0, t = 0) : e.length -= t, e.length === 0 && (e.ended || (e.needReadable = !0), r !== t && e.ended && Ac(this)), n !== null && this.emit("data", n), n;
};
function $E(t, e) {
  var r = null;
  return !J.isBuffer(e) && typeof e != "string" && e !== null && e !== void 0 && !t.objectMode && (r = new TypeError("Invalid non-string/buffer chunk")), r;
}
function zE(t, e) {
  if (!e.ended) {
    if (e.decoder) {
      var r = e.decoder.end();
      r && r.length && (e.buffer.push(r), e.length += e.objectMode ? 1 : r.length);
    }
    e.ended = !0, ul(t);
  }
}
function ul(t) {
  var e = t._readableState;
  e.needReadable = !1, e.emittedReadable || (Qe("emitReadable", e.flowing), e.emittedReadable = !0, e.sync ? ot(h2, t) : h2(t));
}
function h2(t) {
  Qe("emit readable"), t.emit("readable"), iu(t);
}
function WE(t, e) {
  e.readingMore || (e.readingMore = !0, ot(HE, t, e));
}
function HE(t, e) {
  for (var r = e.length; !e.reading && !e.flowing && !e.ended && e.length < e.highWaterMark && (Qe("maybeReadMore read 0"), t.read(0), r !== e.length); )
    r = e.length;
  e.readingMore = !1;
}
c0.prototype._read = function(t) {
  this.emit("error", new Error("not implemented"));
};
c0.prototype.pipe = function(t, e) {
  var r = this, i = this._readableState;
  switch (i.pipesCount) {
    case 0:
      i.pipes = t;
      break;
    case 1:
      i.pipes = [i.pipes, t];
      break;
    default:
      i.pipes.push(t);
      break;
  }
  i.pipesCount += 1, Qe("pipe count=%d opts=%j", i.pipesCount, e);
  var n = !e || e.end !== !1, a = n ? o : f;
  i.endEmitted ? ot(a) : r.once("end", a), t.on("unpipe", s);
  function s(A) {
    Qe("onunpipe"), A === r && f();
  }
  function o() {
    Qe("onend"), t.end();
  }
  var c = qE(r);
  t.on("drain", c);
  var l = !1;
  function f() {
    Qe("cleanup"), t.removeListener("close", p), t.removeListener("finish", m), t.removeListener("drain", c), t.removeListener("error", d), t.removeListener("unpipe", s), r.removeListener("end", o), r.removeListener("end", f), r.removeListener("data", h), l = !0, i.awaitDrain && (!t._writableState || t._writableState.needDrain) && c();
  }
  var u = !1;
  r.on("data", h);
  function h(A) {
    Qe("ondata"), u = !1;
    var b = t.write(A);
    b === !1 && !u && ((i.pipesCount === 1 && i.pipes === t || i.pipesCount > 1 && n6(i.pipes, t) !== -1) && !l && (Qe("false write response, pause", r._readableState.awaitDrain), r._readableState.awaitDrain++, u = !0), r.pause());
  }
  function d(A) {
    Qe("onerror", A), C(), t.removeListener("error", d), NE(t, "error") === 0 && t.emit("error", A);
  }
  LE(t, "error", d);
  function p() {
    t.removeListener("finish", m), C();
  }
  t.once("close", p);
  function m() {
    Qe("onfinish"), t.removeListener("close", p), C();
  }
  t.once("finish", m);
  function C() {
    Qe("unpipe"), r.unpipe(t);
  }
  return t.emit("pipe", r), i.flowing || (Qe("pipe resume"), r.resume()), t;
};
function qE(t) {
  return function() {
    var e = t._readableState;
    Qe("pipeOnDrain", e.awaitDrain), e.awaitDrain && e.awaitDrain--, e.awaitDrain === 0 && t.listeners("data").length && (e.flowing = !0, iu(t));
  };
}
c0.prototype.unpipe = function(t) {
  var e = this._readableState;
  if (e.pipesCount === 0) return this;
  if (e.pipesCount === 1)
    return t && t !== e.pipes ? this : (t || (t = e.pipes), e.pipes = null, e.pipesCount = 0, e.flowing = !1, t && t.emit("unpipe", this), this);
  if (!t) {
    var r = e.pipes, i = e.pipesCount;
    e.pipes = null, e.pipesCount = 0, e.flowing = !1;
    for (var n = 0; n < i; n++)
      r[n].emit("unpipe", this);
    return this;
  }
  var a = n6(e.pipes, t);
  return a === -1 ? this : (e.pipes.splice(a, 1), e.pipesCount -= 1, e.pipesCount === 1 && (e.pipes = e.pipes[0]), t.emit("unpipe", this), this);
};
c0.prototype.on = function(t, e) {
  var r = Ue.prototype.on.call(this, t, e);
  if (t === "data")
    this._readableState.flowing !== !1 && this.resume();
  else if (t === "readable") {
    var i = this._readableState;
    !i.endEmitted && !i.readableListening && (i.readableListening = i.needReadable = !0, i.emittedReadable = !1, i.reading ? i.length && ul(this) : ot(VE, this));
  }
  return r;
};
c0.prototype.addListener = c0.prototype.on;
function VE(t) {
  Qe("readable nexttick read 0"), t.read(0);
}
c0.prototype.resume = function() {
  var t = this._readableState;
  return t.flowing || (Qe("resume"), t.flowing = !0, YE(this, t)), this;
};
function YE(t, e) {
  e.resumeScheduled || (e.resumeScheduled = !0, ot(GE, t, e));
}
function GE(t, e) {
  e.reading || (Qe("resume read 0"), t.read(0)), e.resumeScheduled = !1, e.awaitDrain = 0, t.emit("resume"), iu(t), e.flowing && !e.reading && t.read(0);
}
c0.prototype.pause = function() {
  return Qe("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== !1 && (Qe("pause"), this._readableState.flowing = !1, this.emit("pause")), this;
};
function iu(t) {
  var e = t._readableState;
  for (Qe("flow", e.flowing); e.flowing && t.read() !== null; )
    ;
}
c0.prototype.wrap = function(t) {
  var e = this._readableState, r = !1, i = this;
  t.on("end", function() {
    if (Qe("wrapped end"), e.decoder && !e.ended) {
      var s = e.decoder.end();
      s && s.length && i.push(s);
    }
    i.push(null);
  }), t.on("data", function(s) {
    if (Qe("wrapped data"), e.decoder && (s = e.decoder.write(s)), !(e.objectMode && s == null) && !(!e.objectMode && (!s || !s.length))) {
      var o = i.push(s);
      o || (r = !0, t.pause());
    }
  });
  for (var n in t)
    this[n] === void 0 && typeof t[n] == "function" && (this[n] = /* @__PURE__ */ function(s) {
      return function() {
        return t[s].apply(t, arguments);
      };
    }(n));
  var a = ["error", "close", "destroy", "pause", "resume"];
  return JE(a, function(s) {
    t.on(s, i.emit.bind(i, s));
  }), i._read = function(s) {
    Qe("wrapped _read", s), r && (r = !1, t.resume());
  }, i;
};
c0._fromList = i6;
function i6(t, e) {
  if (e.length === 0) return null;
  var r;
  return e.objectMode ? r = e.buffer.shift() : !t || t >= e.length ? (e.decoder ? r = e.buffer.join("") : e.buffer.length === 1 ? r = e.buffer.head.data : r = e.buffer.concat(e.length), e.buffer.clear()) : r = ZE(t, e.buffer, e.decoder), r;
}
function ZE(t, e, r) {
  var i;
  return t < e.head.data.length ? (i = e.head.data.slice(0, t), e.head.data = e.head.data.slice(t)) : t === e.head.data.length ? i = e.shift() : i = r ? jE(t, e) : XE(t, e), i;
}
function jE(t, e) {
  var r = e.head, i = 1, n = r.data;
  for (t -= n.length; r = r.next; ) {
    var a = r.data, s = t > a.length ? a.length : t;
    if (s === a.length ? n += a : n += a.slice(0, t), t -= s, t === 0) {
      s === a.length ? (++i, r.next ? e.head = r.next : e.head = e.tail = null) : (e.head = r, r.data = a.slice(s));
      break;
    }
    ++i;
  }
  return e.length -= i, n;
}
function XE(t, e) {
  var r = J.allocUnsafe(t), i = e.head, n = 1;
  for (i.data.copy(r), t -= i.data.length; i = i.next; ) {
    var a = i.data, s = t > a.length ? a.length : t;
    if (a.copy(r, r.length - t, 0, s), t -= s, t === 0) {
      s === a.length ? (++n, i.next ? e.head = i.next : e.head = e.tail = null) : (e.head = i, i.data = a.slice(s));
      break;
    }
    ++n;
  }
  return e.length -= n, r;
}
function Ac(t) {
  var e = t._readableState;
  if (e.length > 0) throw new Error('"endReadable()" called on non-empty stream');
  e.endEmitted || (e.ended = !0, ot(KE, e, t));
}
function KE(t, e) {
  !t.endEmitted && t.length === 0 && (t.endEmitted = !0, e.readable = !1, e.emit("end"));
}
function JE(t, e) {
  for (var r = 0, i = t.length; r < i; r++)
    e(t[r], r);
}
function n6(t, e) {
  for (var r = 0, i = t.length; r < i; r++)
    if (t[r] === e) return r;
  return -1;
}
O0.WritableState = nu;
Cr(O0, Ue);
function QE() {
}
function eC(t, e, r) {
  this.chunk = t, this.encoding = e, this.callback = r, this.next = null;
}
function nu(t, e) {
  Object.defineProperty(this, "buffer", {
    get: cl(function() {
      return this.getBuffer();
    }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")
  }), t = t || {}, this.objectMode = !!t.objectMode, e instanceof st && (this.objectMode = this.objectMode || !!t.writableObjectMode);
  var r = t.highWaterMark, i = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = r || r === 0 ? r : i, this.highWaterMark = ~~this.highWaterMark, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1;
  var n = t.decodeStrings === !1;
  this.decodeStrings = !n, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(a) {
    oC(e, a);
  }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.bufferedRequestCount = 0, this.corkedRequestsFree = new l6(this);
}
nu.prototype.getBuffer = function() {
  for (var e = this.bufferedRequest, r = []; e; )
    r.push(e), e = e.next;
  return r;
};
function O0(t) {
  if (!(this instanceof O0) && !(this instanceof st)) return new O0(t);
  this._writableState = new nu(t, this), this.writable = !0, t && (typeof t.write == "function" && (this._write = t.write), typeof t.writev == "function" && (this._writev = t.writev)), Ue.call(this);
}
O0.prototype.pipe = function() {
  this.emit("error", new Error("Cannot pipe, not readable"));
};
function tC(t, e) {
  var r = new Error("write after end");
  t.emit("error", r), ot(e, r);
}
function rC(t, e, r, i) {
  var n = !0, a = !1;
  return r === null ? a = new TypeError("May not write null values to stream") : !J.isBuffer(r) && typeof r != "string" && r !== void 0 && !e.objectMode && (a = new TypeError("Invalid non-string/buffer chunk")), a && (t.emit("error", a), ot(i, a), n = !1), n;
}
O0.prototype.write = function(t, e, r) {
  var i = this._writableState, n = !1;
  return typeof e == "function" && (r = e, e = null), J.isBuffer(t) ? e = "buffer" : e || (e = i.defaultEncoding), typeof r != "function" && (r = QE), i.ended ? tC(this, r) : rC(this, i, t, r) && (i.pendingcb++, n = nC(this, i, t, e, r)), n;
};
O0.prototype.cork = function() {
  var t = this._writableState;
  t.corked++;
};
O0.prototype.uncork = function() {
  var t = this._writableState;
  t.corked && (t.corked--, !t.writing && !t.corked && !t.finished && !t.bufferProcessing && t.bufferedRequest && a6(this, t));
};
O0.prototype.setDefaultEncoding = function(e) {
  if (typeof e == "string" && (e = e.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1)) throw new TypeError("Unknown encoding: " + e);
  return this._writableState.defaultEncoding = e, this;
};
function iC(t, e, r) {
  return !t.objectMode && t.decodeStrings !== !1 && typeof e == "string" && (e = J.from(e, r)), e;
}
function nC(t, e, r, i, n) {
  r = iC(e, r, i), J.isBuffer(r) && (i = "buffer");
  var a = e.objectMode ? 1 : r.length;
  e.length += a;
  var s = e.length < e.highWaterMark;
  if (s || (e.needDrain = !0), e.writing || e.corked) {
    var o = e.lastBufferedRequest;
    e.lastBufferedRequest = new eC(r, i, n), o ? o.next = e.lastBufferedRequest : e.bufferedRequest = e.lastBufferedRequest, e.bufferedRequestCount += 1;
  } else
    ff(t, e, !1, a, r, i, n);
  return s;
}
function ff(t, e, r, i, n, a, s) {
  e.writelen = i, e.writecb = s, e.writing = !0, e.sync = !0, r ? t._writev(n, e.onwrite) : t._write(n, a, e.onwrite), e.sync = !1;
}
function aC(t, e, r, i, n) {
  --e.pendingcb, r ? ot(n, i) : n(i), t._writableState.errorEmitted = !0, t.emit("error", i);
}
function sC(t) {
  t.writing = !1, t.writecb = null, t.length -= t.writelen, t.writelen = 0;
}
function oC(t, e) {
  var r = t._writableState, i = r.sync, n = r.writecb;
  if (sC(r), e) aC(t, r, i, e, n);
  else {
    var a = s6(r);
    !a && !r.corked && !r.bufferProcessing && r.bufferedRequest && a6(t, r), i ? ot(d2, t, r, a, n) : d2(t, r, a, n);
  }
}
function d2(t, e, r, i) {
  r || lC(t, e), e.pendingcb--, i(), o6(t, e);
}
function lC(t, e) {
  e.length === 0 && e.needDrain && (e.needDrain = !1, t.emit("drain"));
}
function a6(t, e) {
  e.bufferProcessing = !0;
  var r = e.bufferedRequest;
  if (t._writev && r && r.next) {
    var i = e.bufferedRequestCount, n = new Array(i), a = e.corkedRequestsFree;
    a.entry = r;
    for (var s = 0; r; )
      n[s] = r, r = r.next, s += 1;
    ff(t, e, !0, e.length, n, "", a.finish), e.pendingcb++, e.lastBufferedRequest = null, a.next ? (e.corkedRequestsFree = a.next, a.next = null) : e.corkedRequestsFree = new l6(e);
  } else {
    for (; r; ) {
      var o = r.chunk, c = r.encoding, l = r.callback, f = e.objectMode ? 1 : o.length;
      if (ff(t, e, !1, f, o, c, l), r = r.next, e.writing)
        break;
    }
    r === null && (e.lastBufferedRequest = null);
  }
  e.bufferedRequestCount = 0, e.bufferedRequest = r, e.bufferProcessing = !1;
}
O0.prototype._write = function(t, e, r) {
  r(new Error("not implemented"));
};
O0.prototype._writev = null;
O0.prototype.end = function(t, e, r) {
  var i = this._writableState;
  typeof t == "function" ? (r = t, t = null, e = null) : typeof e == "function" && (r = e, e = null), t != null && this.write(t, e), i.corked && (i.corked = 1, this.uncork()), !i.ending && !i.finished && cC(this, i, r);
};
function s6(t) {
  return t.ending && t.length === 0 && t.bufferedRequest === null && !t.finished && !t.writing;
}
function g2(t, e) {
  e.prefinished || (e.prefinished = !0, t.emit("prefinish"));
}
function o6(t, e) {
  var r = s6(e);
  return r && (e.pendingcb === 0 ? (g2(t, e), e.finished = !0, t.emit("finish")) : g2(t, e)), r;
}
function cC(t, e, r) {
  e.ending = !0, o6(t, e), r && (e.finished ? ot(r) : t.once("finish", r)), e.ended = !0, t.writable = !1;
}
function l6(t) {
  var e = this;
  this.next = null, this.entry = null, this.finish = function(r) {
    var i = e.entry;
    for (e.entry = null; i; ) {
      var n = i.callback;
      t.pendingcb--, n(r), i = i.next;
    }
    t.corkedRequestsFree ? t.corkedRequestsFree.next = e : t.corkedRequestsFree = e;
  };
}
Cr(st, c0);
var p2 = Object.keys(O0.prototype);
for (var Ec = 0; Ec < p2.length; Ec++) {
  var Cc = p2[Ec];
  st.prototype[Cc] || (st.prototype[Cc] = O0.prototype[Cc]);
}
function st(t) {
  if (!(this instanceof st)) return new st(t);
  c0.call(this, t), O0.call(this, t), t && t.readable === !1 && (this.readable = !1), t && t.writable === !1 && (this.writable = !1), this.allowHalfOpen = !0, t && t.allowHalfOpen === !1 && (this.allowHalfOpen = !1), this.once("end", fC);
}
function fC() {
  this.allowHalfOpen || this._writableState.ended || ot(uC, this);
}
function uC(t) {
  t.end();
}
Cr(Ft, st);
function hC(t) {
  this.afterTransform = function(e, r) {
    return dC(t, e, r);
  }, this.needTransform = !1, this.transforming = !1, this.writecb = null, this.writechunk = null, this.writeencoding = null;
}
function dC(t, e, r) {
  var i = t._transformState;
  i.transforming = !1;
  var n = i.writecb;
  if (!n) return t.emit("error", new Error("no writecb in Transform class"));
  i.writechunk = null, i.writecb = null, r != null && t.push(r), n(e);
  var a = t._readableState;
  a.reading = !1, (a.needReadable || a.length < a.highWaterMark) && t._read(a.highWaterMark);
}
function Ft(t) {
  if (!(this instanceof Ft)) return new Ft(t);
  st.call(this, t), this._transformState = new hC(this);
  var e = this;
  this._readableState.needReadable = !0, this._readableState.sync = !1, t && (typeof t.transform == "function" && (this._transform = t.transform), typeof t.flush == "function" && (this._flush = t.flush)), this.once("prefinish", function() {
    typeof this._flush == "function" ? this._flush(function(r) {
      v2(e, r);
    }) : v2(e);
  });
}
Ft.prototype.push = function(t, e) {
  return this._transformState.needTransform = !1, st.prototype.push.call(this, t, e);
};
Ft.prototype._transform = function(t, e, r) {
  throw new Error("Not implemented");
};
Ft.prototype._write = function(t, e, r) {
  var i = this._transformState;
  if (i.writecb = r, i.writechunk = t, i.writeencoding = e, !i.transforming) {
    var n = this._readableState;
    (i.needTransform || n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark);
  }
};
Ft.prototype._read = function(t) {
  var e = this._transformState;
  e.writechunk !== null && e.writecb && !e.transforming ? (e.transforming = !0, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = !0;
};
function v2(t, e) {
  if (e) return t.emit("error", e);
  var r = t._writableState, i = t._transformState;
  if (r.length) throw new Error("Calling transform done when ws.length != 0");
  if (i.transforming) throw new Error("Calling transform done when still transforming");
  return t.push(null);
}
Cr(Pn, Ft);
function Pn(t) {
  if (!(this instanceof Pn)) return new Pn(t);
  Ft.call(this, t);
}
Pn.prototype._transform = function(t, e, r) {
  r(null, t);
};
Cr(Ot, Ue);
Ot.Readable = c0;
Ot.Writable = O0;
Ot.Duplex = st;
Ot.Transform = Ft;
Ot.PassThrough = Pn;
Ot.Stream = Ot;
function Ot() {
  Ue.call(this);
}
Ot.prototype.pipe = function(t, e) {
  var r = this;
  function i(f) {
    t.writable && t.write(f) === !1 && r.pause && r.pause();
  }
  r.on("data", i);
  function n() {
    r.readable && r.resume && r.resume();
  }
  t.on("drain", n), !t._isStdio && (!e || e.end !== !1) && (r.on("end", s), r.on("close", o));
  var a = !1;
  function s() {
    a || (a = !0, t.end());
  }
  function o() {
    a || (a = !0, typeof t.destroy == "function" && t.destroy());
  }
  function c(f) {
    if (l(), Ue.listenerCount(this, "error") === 0)
      throw f;
  }
  r.on("error", c), t.on("error", c);
  function l() {
    r.removeListener("data", i), t.removeListener("drain", n), r.removeListener("end", s), r.removeListener("close", o), r.removeListener("error", c), t.removeListener("error", c), r.removeListener("end", l), r.removeListener("close", l), t.removeListener("close", l);
  }
  return r.on("end", l), r.on("close", l), t.on("close", l), t.emit("pipe", r), t;
};
var gC = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  Duplex: st,
  PassThrough: Pn,
  Readable: c0,
  Stream: Ot,
  Transform: Ft,
  Writable: O0,
  default: Ot
}), pC = /* @__PURE__ */ ol(gC), c6 = {};
function m2(t, e) {
  if (t === e)
    return 0;
  for (var r = t.length, i = e.length, n = 0, a = Math.min(r, i); n < a; ++n)
    if (t[n] !== e[n]) {
      r = t[n], i = e[n];
      break;
    }
  return r < i ? -1 : i < r ? 1 : 0;
}
var vC = Object.prototype.hasOwnProperty, b2 = Object.keys || function(t) {
  var e = [];
  for (var r in t)
    vC.call(t, r) && e.push(r);
  return e;
}, x2 = Array.prototype.slice, Sc;
function f6() {
  return typeof Sc < "u" ? Sc : Sc = function() {
    return (function() {
    }).name === "foo";
  }();
}
function w2(t) {
  return Object.prototype.toString.call(t);
}
function y2(t) {
  return yi(t) || typeof Mi.ArrayBuffer != "function" ? !1 : typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(t) : t ? !!(t instanceof DataView || t.buffer && t.buffer instanceof ArrayBuffer) : !1;
}
function H0(t, e) {
  t || z0(t, !0, e, "==", Ua);
}
var mC = /\s*function\s+([^\(\s]*)\s*/;
function u6(t) {
  if (Bi(t)) {
    if (f6())
      return t.name;
    var e = t.toString(), r = e.match(mC);
    return r && r[1];
  }
}
H0.AssertionError = hl;
function hl(t) {
  this.name = "AssertionError", this.actual = t.actual, this.expected = t.expected, this.operator = t.operator, t.message ? (this.message = t.message, this.generatedMessage = !1) : (this.message = bC(this), this.generatedMessage = !0);
  var e = t.stackStartFunction || z0;
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, e);
  else {
    var r = new Error();
    if (r.stack) {
      var i = r.stack, n = u6(e), a = i.indexOf(`
` + n);
      if (a >= 0) {
        var s = i.indexOf(`
`, a + 1);
        i = i.substring(s + 1);
      }
      this.stack = i;
    }
  }
}
Cr(hl, Error);
function _2(t, e) {
  return typeof t == "string" ? t.length < e ? t : t.slice(0, e) : t;
}
function A2(t) {
  if (f6() || !Bi(t))
    return Et(t);
  var e = u6(t), r = e ? ": " + e : "";
  return "[Function" + r + "]";
}
function bC(t) {
  return _2(A2(t.actual), 128) + " " + t.operator + " " + _2(A2(t.expected), 128);
}
function z0(t, e, r, i, n) {
  throw new hl({
    message: r,
    actual: t,
    expected: e,
    operator: i,
    stackStartFunction: n
  });
}
H0.fail = z0;
function Ua(t, e) {
  t || z0(t, !0, e, "==", Ua);
}
H0.ok = Ua;
H0.equal = au;
function au(t, e, r) {
  t != e && z0(t, e, r, "==", au);
}
H0.notEqual = su;
function su(t, e, r) {
  t == e && z0(t, e, r, "!=", su);
}
H0.deepEqual = ou;
function ou(t, e, r) {
  Ln(t, e, !1) || z0(t, e, r, "deepEqual", ou);
}
H0.deepStrictEqual = lu;
function lu(t, e, r) {
  Ln(t, e, !0) || z0(t, e, r, "deepStrictEqual", lu);
}
function Ln(t, e, r, i) {
  if (t === e)
    return !0;
  if (yi(t) && yi(e))
    return m2(t, e) === 0;
  if (Rn(t) && Rn(e))
    return t.getTime() === e.getTime();
  if (Di(t) && Di(e))
    return t.source === e.source && t.global === e.global && t.multiline === e.multiline && t.lastIndex === e.lastIndex && t.ignoreCase === e.ignoreCase;
  if ((t === null || typeof t != "object") && (e === null || typeof e != "object"))
    return r ? t === e : t == e;
  if (y2(t) && y2(e) && w2(t) === w2(e) && !(t instanceof Float32Array || t instanceof Float64Array))
    return m2(
      new Uint8Array(t.buffer),
      new Uint8Array(e.buffer)
    ) === 0;
  if (yi(t) !== yi(e))
    return !1;
  i = i || { actual: [], expected: [] };
  var n = i.actual.indexOf(t);
  return n !== -1 && n === i.expected.indexOf(e) ? !0 : (i.actual.push(t), i.expected.push(e), xC(t, e, r, i));
}
function E2(t) {
  return Object.prototype.toString.call(t) == "[object Arguments]";
}
function xC(t, e, r, i) {
  if (t == null || e === null || e === void 0)
    return !1;
  if (Io(t) || Io(e))
    return t === e;
  if (r && Object.getPrototypeOf(t) !== Object.getPrototypeOf(e))
    return !1;
  var n = E2(t), a = E2(e);
  if (n && !a || !n && a)
    return !1;
  if (n)
    return t = x2.call(t), e = x2.call(e), Ln(t, e, r);
  var s = b2(t), o = b2(e), c, l;
  if (s.length !== o.length)
    return !1;
  for (s.sort(), o.sort(), l = s.length - 1; l >= 0; l--)
    if (s[l] !== o[l])
      return !1;
  for (l = s.length - 1; l >= 0; l--)
    if (c = s[l], !Ln(t[c], e[c], r, i))
      return !1;
  return !0;
}
H0.notDeepEqual = cu;
function cu(t, e, r) {
  Ln(t, e, !1) && z0(t, e, r, "notDeepEqual", cu);
}
H0.notDeepStrictEqual = fu;
function fu(t, e, r) {
  Ln(t, e, !0) && z0(t, e, r, "notDeepStrictEqual", fu);
}
H0.strictEqual = uu;
function uu(t, e, r) {
  t !== e && z0(t, e, r, "===", uu);
}
H0.notStrictEqual = hu;
function hu(t, e, r) {
  t === e && z0(t, e, r, "!==", hu);
}
function C2(t, e) {
  if (!t || !e)
    return !1;
  if (Object.prototype.toString.call(e) == "[object RegExp]")
    return e.test(t);
  try {
    if (t instanceof e)
      return !0;
  } catch {
  }
  return Error.isPrototypeOf(e) ? !1 : e.call({}, t) === !0;
}
function wC(t) {
  var e;
  try {
    t();
  } catch (r) {
    e = r;
  }
  return e;
}
function h6(t, e, r, i) {
  var n;
  if (typeof e != "function")
    throw new TypeError('"block" argument must be a function');
  typeof r == "string" && (i = r, r = null), n = wC(e), i = (r && r.name ? " (" + r.name + ")." : ".") + (i ? " " + i : "."), t && !n && z0(n, r, "Missing expected exception" + i);
  var a = typeof i == "string", s = !t && En(n), o = !t && n && !r;
  if ((s && a && C2(n, r) || o) && z0(n, r, "Got unwanted exception" + i), t && n && r && !C2(n, r) || !t && n)
    throw n;
}
H0.throws = d6;
function d6(t, e, r) {
  h6(!0, t, e, r);
}
H0.doesNotThrow = g6;
function g6(t, e, r) {
  h6(!1, t, e, r);
}
H0.ifError = p6;
function p6(t) {
  if (t) throw t;
}
var yC = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  AssertionError: hl,
  assert: Ua,
  deepEqual: ou,
  deepStrictEqual: lu,
  default: H0,
  doesNotThrow: g6,
  equal: au,
  fail: z0,
  ifError: p6,
  notDeepEqual: cu,
  notDeepStrictEqual: fu,
  notEqual: su,
  notStrictEqual: hu,
  ok: Ua,
  strictEqual: uu,
  throws: d6
}), v6 = /* @__PURE__ */ ol(yC);
function _C() {
  this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
}
var AC = _C, or = {}, ls = {};
(function(t) {
  var e = typeof Uint8Array < "u" && typeof Uint16Array < "u" && typeof Int32Array < "u";
  function r(a, s) {
    return Object.prototype.hasOwnProperty.call(a, s);
  }
  t.assign = function(a) {
    for (var s = Array.prototype.slice.call(arguments, 1); s.length; ) {
      var o = s.shift();
      if (o) {
        if (typeof o != "object")
          throw new TypeError(o + "must be non-object");
        for (var c in o)
          r(o, c) && (a[c] = o[c]);
      }
    }
    return a;
  }, t.shrinkBuf = function(a, s) {
    return a.length === s ? a : a.subarray ? a.subarray(0, s) : (a.length = s, a);
  };
  var i = {
    arraySet: function(a, s, o, c, l) {
      if (s.subarray && a.subarray) {
        a.set(s.subarray(o, o + c), l);
        return;
      }
      for (var f = 0; f < c; f++)
        a[l + f] = s[o + f];
    },
    // Join array of chunks to single array.
    flattenChunks: function(a) {
      var s, o, c, l, f, u;
      for (c = 0, s = 0, o = a.length; s < o; s++)
        c += a[s].length;
      for (u = new Uint8Array(c), l = 0, s = 0, o = a.length; s < o; s++)
        f = a[s], u.set(f, l), l += f.length;
      return u;
    }
  }, n = {
    arraySet: function(a, s, o, c, l) {
      for (var f = 0; f < c; f++)
        a[l + f] = s[o + f];
    },
    // Join array of chunks to single array.
    flattenChunks: function(a) {
      return [].concat.apply([], a);
    }
  };
  t.setTyped = function(a) {
    a ? (t.Buf8 = Uint8Array, t.Buf16 = Uint16Array, t.Buf32 = Int32Array, t.assign(t, i)) : (t.Buf8 = Array, t.Buf16 = Array, t.Buf32 = Array, t.assign(t, n));
  }, t.setTyped(e);
})(ls);
var Gn = {}, EC = ls, CC = 4, S2 = 0, T2 = 1, SC = 2;
function Zn(t) {
  for (var e = t.length; --e >= 0; )
    t[e] = 0;
}
var TC = 0, m6 = 1, kC = 2, FC = 3, OC = 258, du = 29, cs = 256, $a = cs + 1 + du, Cn = 30, gu = 19, b6 = 2 * $a + 1, Ai = 15, Tc = 16, DC = 7, pu = 256, x6 = 16, w6 = 17, y6 = 18, uf = (
  /* extra bits for each length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
), io = (
  /* extra bits for each distance code */
  [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
), BC = (
  /* extra bits for each bit length code */
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]
), _6 = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], IC = 512, br = new Array(($a + 2) * 2);
Zn(br);
var Ta = new Array(Cn * 2);
Zn(Ta);
var za = new Array(IC);
Zn(za);
var Wa = new Array(OC - FC + 1);
Zn(Wa);
var vu = new Array(du);
Zn(vu);
var Ro = new Array(Cn);
Zn(Ro);
function kc(t, e, r, i, n) {
  this.static_tree = t, this.extra_bits = e, this.extra_base = r, this.elems = i, this.max_length = n, this.has_stree = t && t.length;
}
var A6, E6, C6;
function Fc(t, e) {
  this.dyn_tree = t, this.max_code = 0, this.stat_desc = e;
}
function S6(t) {
  return t < 256 ? za[t] : za[256 + (t >>> 7)];
}
function Ha(t, e) {
  t.pending_buf[t.pending++] = e & 255, t.pending_buf[t.pending++] = e >>> 8 & 255;
}
function X0(t, e, r) {
  t.bi_valid > Tc - r ? (t.bi_buf |= e << t.bi_valid & 65535, Ha(t, t.bi_buf), t.bi_buf = e >> Tc - t.bi_valid, t.bi_valid += r - Tc) : (t.bi_buf |= e << t.bi_valid & 65535, t.bi_valid += r);
}
function jt(t, e, r) {
  X0(
    t,
    r[e * 2],
    r[e * 2 + 1]
    /*.Len*/
  );
}
function T6(t, e) {
  var r = 0;
  do
    r |= t & 1, t >>>= 1, r <<= 1;
  while (--e > 0);
  return r >>> 1;
}
function RC(t) {
  t.bi_valid === 16 ? (Ha(t, t.bi_buf), t.bi_buf = 0, t.bi_valid = 0) : t.bi_valid >= 8 && (t.pending_buf[t.pending++] = t.bi_buf & 255, t.bi_buf >>= 8, t.bi_valid -= 8);
}
function PC(t, e) {
  var r = e.dyn_tree, i = e.max_code, n = e.stat_desc.static_tree, a = e.stat_desc.has_stree, s = e.stat_desc.extra_bits, o = e.stat_desc.extra_base, c = e.stat_desc.max_length, l, f, u, h, d, p, m = 0;
  for (h = 0; h <= Ai; h++)
    t.bl_count[h] = 0;
  for (r[t.heap[t.heap_max] * 2 + 1] = 0, l = t.heap_max + 1; l < b6; l++)
    f = t.heap[l], h = r[r[f * 2 + 1] * 2 + 1] + 1, h > c && (h = c, m++), r[f * 2 + 1] = h, !(f > i) && (t.bl_count[h]++, d = 0, f >= o && (d = s[f - o]), p = r[f * 2], t.opt_len += p * (h + d), a && (t.static_len += p * (n[f * 2 + 1] + d)));
  if (m !== 0) {
    do {
      for (h = c - 1; t.bl_count[h] === 0; )
        h--;
      t.bl_count[h]--, t.bl_count[h + 1] += 2, t.bl_count[c]--, m -= 2;
    } while (m > 0);
    for (h = c; h !== 0; h--)
      for (f = t.bl_count[h]; f !== 0; )
        u = t.heap[--l], !(u > i) && (r[u * 2 + 1] !== h && (t.opt_len += (h - r[u * 2 + 1]) * r[u * 2], r[u * 2 + 1] = h), f--);
  }
}
function k6(t, e, r) {
  var i = new Array(Ai + 1), n = 0, a, s;
  for (a = 1; a <= Ai; a++)
    i[a] = n = n + r[a - 1] << 1;
  for (s = 0; s <= e; s++) {
    var o = t[s * 2 + 1];
    o !== 0 && (t[s * 2] = T6(i[o]++, o));
  }
}
function LC() {
  var t, e, r, i, n, a = new Array(Ai + 1);
  for (r = 0, i = 0; i < du - 1; i++)
    for (vu[i] = r, t = 0; t < 1 << uf[i]; t++)
      Wa[r++] = i;
  for (Wa[r - 1] = i, n = 0, i = 0; i < 16; i++)
    for (Ro[i] = n, t = 0; t < 1 << io[i]; t++)
      za[n++] = i;
  for (n >>= 7; i < Cn; i++)
    for (Ro[i] = n << 7, t = 0; t < 1 << io[i] - 7; t++)
      za[256 + n++] = i;
  for (e = 0; e <= Ai; e++)
    a[e] = 0;
  for (t = 0; t <= 143; )
    br[t * 2 + 1] = 8, t++, a[8]++;
  for (; t <= 255; )
    br[t * 2 + 1] = 9, t++, a[9]++;
  for (; t <= 279; )
    br[t * 2 + 1] = 7, t++, a[7]++;
  for (; t <= 287; )
    br[t * 2 + 1] = 8, t++, a[8]++;
  for (k6(br, $a + 1, a), t = 0; t < Cn; t++)
    Ta[t * 2 + 1] = 5, Ta[t * 2] = T6(t, 5);
  A6 = new kc(br, uf, cs + 1, $a, Ai), E6 = new kc(Ta, io, 0, Cn, Ai), C6 = new kc(new Array(0), BC, 0, gu, DC);
}
function F6(t) {
  var e;
  for (e = 0; e < $a; e++)
    t.dyn_ltree[e * 2] = 0;
  for (e = 0; e < Cn; e++)
    t.dyn_dtree[e * 2] = 0;
  for (e = 0; e < gu; e++)
    t.bl_tree[e * 2] = 0;
  t.dyn_ltree[pu * 2] = 1, t.opt_len = t.static_len = 0, t.last_lit = t.matches = 0;
}
function O6(t) {
  t.bi_valid > 8 ? Ha(t, t.bi_buf) : t.bi_valid > 0 && (t.pending_buf[t.pending++] = t.bi_buf), t.bi_buf = 0, t.bi_valid = 0;
}
function NC(t, e, r, i) {
  O6(t), Ha(t, r), Ha(t, ~r), EC.arraySet(t.pending_buf, t.window, e, r, t.pending), t.pending += r;
}
function k2(t, e, r, i) {
  var n = e * 2, a = r * 2;
  return t[n] < t[a] || t[n] === t[a] && i[e] <= i[r];
}
function Oc(t, e, r) {
  for (var i = t.heap[r], n = r << 1; n <= t.heap_len && (n < t.heap_len && k2(e, t.heap[n + 1], t.heap[n], t.depth) && n++, !k2(e, i, t.heap[n], t.depth)); )
    t.heap[r] = t.heap[n], r = n, n <<= 1;
  t.heap[r] = i;
}
function F2(t, e, r) {
  var i, n, a = 0, s, o;
  if (t.last_lit !== 0)
    do
      i = t.pending_buf[t.d_buf + a * 2] << 8 | t.pending_buf[t.d_buf + a * 2 + 1], n = t.pending_buf[t.l_buf + a], a++, i === 0 ? jt(t, n, e) : (s = Wa[n], jt(t, s + cs + 1, e), o = uf[s], o !== 0 && (n -= vu[s], X0(t, n, o)), i--, s = S6(i), jt(t, s, r), o = io[s], o !== 0 && (i -= Ro[s], X0(t, i, o)));
    while (a < t.last_lit);
  jt(t, pu, e);
}
function hf(t, e) {
  var r = e.dyn_tree, i = e.stat_desc.static_tree, n = e.stat_desc.has_stree, a = e.stat_desc.elems, s, o, c = -1, l;
  for (t.heap_len = 0, t.heap_max = b6, s = 0; s < a; s++)
    r[s * 2] !== 0 ? (t.heap[++t.heap_len] = c = s, t.depth[s] = 0) : r[s * 2 + 1] = 0;
  for (; t.heap_len < 2; )
    l = t.heap[++t.heap_len] = c < 2 ? ++c : 0, r[l * 2] = 1, t.depth[l] = 0, t.opt_len--, n && (t.static_len -= i[l * 2 + 1]);
  for (e.max_code = c, s = t.heap_len >> 1; s >= 1; s--)
    Oc(t, r, s);
  l = a;
  do
    s = t.heap[
      1
      /*SMALLEST*/
    ], t.heap[
      1
      /*SMALLEST*/
    ] = t.heap[t.heap_len--], Oc(
      t,
      r,
      1
      /*SMALLEST*/
    ), o = t.heap[
      1
      /*SMALLEST*/
    ], t.heap[--t.heap_max] = s, t.heap[--t.heap_max] = o, r[l * 2] = r[s * 2] + r[o * 2], t.depth[l] = (t.depth[s] >= t.depth[o] ? t.depth[s] : t.depth[o]) + 1, r[s * 2 + 1] = r[o * 2 + 1] = l, t.heap[
      1
      /*SMALLEST*/
    ] = l++, Oc(
      t,
      r,
      1
      /*SMALLEST*/
    );
  while (t.heap_len >= 2);
  t.heap[--t.heap_max] = t.heap[
    1
    /*SMALLEST*/
  ], PC(t, e), k6(r, c, t.bl_count);
}
function O2(t, e, r) {
  var i, n = -1, a, s = e[0 * 2 + 1], o = 0, c = 7, l = 4;
  for (s === 0 && (c = 138, l = 3), e[(r + 1) * 2 + 1] = 65535, i = 0; i <= r; i++)
    a = s, s = e[(i + 1) * 2 + 1], !(++o < c && a === s) && (o < l ? t.bl_tree[a * 2] += o : a !== 0 ? (a !== n && t.bl_tree[a * 2]++, t.bl_tree[x6 * 2]++) : o <= 10 ? t.bl_tree[w6 * 2]++ : t.bl_tree[y6 * 2]++, o = 0, n = a, s === 0 ? (c = 138, l = 3) : a === s ? (c = 6, l = 3) : (c = 7, l = 4));
}
function D2(t, e, r) {
  var i, n = -1, a, s = e[0 * 2 + 1], o = 0, c = 7, l = 4;
  for (s === 0 && (c = 138, l = 3), i = 0; i <= r; i++)
    if (a = s, s = e[(i + 1) * 2 + 1], !(++o < c && a === s)) {
      if (o < l)
        do
          jt(t, a, t.bl_tree);
        while (--o !== 0);
      else a !== 0 ? (a !== n && (jt(t, a, t.bl_tree), o--), jt(t, x6, t.bl_tree), X0(t, o - 3, 2)) : o <= 10 ? (jt(t, w6, t.bl_tree), X0(t, o - 3, 3)) : (jt(t, y6, t.bl_tree), X0(t, o - 11, 7));
      o = 0, n = a, s === 0 ? (c = 138, l = 3) : a === s ? (c = 6, l = 3) : (c = 7, l = 4);
    }
}
function MC(t) {
  var e;
  for (O2(t, t.dyn_ltree, t.l_desc.max_code), O2(t, t.dyn_dtree, t.d_desc.max_code), hf(t, t.bl_desc), e = gu - 1; e >= 3 && t.bl_tree[_6[e] * 2 + 1] === 0; e--)
    ;
  return t.opt_len += 3 * (e + 1) + 5 + 5 + 4, e;
}
function UC(t, e, r, i) {
  var n;
  for (X0(t, e - 257, 5), X0(t, r - 1, 5), X0(t, i - 4, 4), n = 0; n < i; n++)
    X0(t, t.bl_tree[_6[n] * 2 + 1], 3);
  D2(t, t.dyn_ltree, e - 1), D2(t, t.dyn_dtree, r - 1);
}
function $C(t) {
  var e = 4093624447, r;
  for (r = 0; r <= 31; r++, e >>>= 1)
    if (e & 1 && t.dyn_ltree[r * 2] !== 0)
      return S2;
  if (t.dyn_ltree[9 * 2] !== 0 || t.dyn_ltree[10 * 2] !== 0 || t.dyn_ltree[13 * 2] !== 0)
    return T2;
  for (r = 32; r < cs; r++)
    if (t.dyn_ltree[r * 2] !== 0)
      return T2;
  return S2;
}
var B2 = !1;
function zC(t) {
  B2 || (LC(), B2 = !0), t.l_desc = new Fc(t.dyn_ltree, A6), t.d_desc = new Fc(t.dyn_dtree, E6), t.bl_desc = new Fc(t.bl_tree, C6), t.bi_buf = 0, t.bi_valid = 0, F6(t);
}
function D6(t, e, r, i) {
  X0(t, (TC << 1) + (i ? 1 : 0), 3), NC(t, e, r);
}
function WC(t) {
  X0(t, m6 << 1, 3), jt(t, pu, br), RC(t);
}
function HC(t, e, r, i) {
  var n, a, s = 0;
  t.level > 0 ? (t.strm.data_type === SC && (t.strm.data_type = $C(t)), hf(t, t.l_desc), hf(t, t.d_desc), s = MC(t), n = t.opt_len + 3 + 7 >>> 3, a = t.static_len + 3 + 7 >>> 3, a <= n && (n = a)) : n = a = r + 5, r + 4 <= n && e !== -1 ? D6(t, e, r, i) : t.strategy === CC || a === n ? (X0(t, (m6 << 1) + (i ? 1 : 0), 3), F2(t, br, Ta)) : (X0(t, (kC << 1) + (i ? 1 : 0), 3), UC(t, t.l_desc.max_code + 1, t.d_desc.max_code + 1, s + 1), F2(t, t.dyn_ltree, t.dyn_dtree)), F6(t), i && O6(t);
}
function qC(t, e, r) {
  return t.pending_buf[t.d_buf + t.last_lit * 2] = e >>> 8 & 255, t.pending_buf[t.d_buf + t.last_lit * 2 + 1] = e & 255, t.pending_buf[t.l_buf + t.last_lit] = r & 255, t.last_lit++, e === 0 ? t.dyn_ltree[r * 2]++ : (t.matches++, e--, t.dyn_ltree[(Wa[r] + cs + 1) * 2]++, t.dyn_dtree[S6(e) * 2]++), t.last_lit === t.lit_bufsize - 1;
}
Gn._tr_init = zC;
Gn._tr_stored_block = D6;
Gn._tr_flush_block = HC;
Gn._tr_tally = qC;
Gn._tr_align = WC;
function VC(t, e, r, i) {
  for (var n = t & 65535 | 0, a = t >>> 16 & 65535 | 0, s = 0; r !== 0; ) {
    s = r > 2e3 ? 2e3 : r, r -= s;
    do
      n = n + e[i++] | 0, a = a + n | 0;
    while (--s);
    n %= 65521, a %= 65521;
  }
  return n | a << 16 | 0;
}
var B6 = VC;
function YC() {
  for (var t, e = [], r = 0; r < 256; r++) {
    t = r;
    for (var i = 0; i < 8; i++)
      t = t & 1 ? 3988292384 ^ t >>> 1 : t >>> 1;
    e[r] = t;
  }
  return e;
}
var GC = YC();
function ZC(t, e, r, i) {
  var n = GC, a = i + r;
  t ^= -1;
  for (var s = i; s < a; s++)
    t = t >>> 8 ^ n[(t ^ e[s]) & 255];
  return t ^ -1;
}
var I6 = ZC, jC = {
  2: "need dictionary",
  /* Z_NEED_DICT       2  */
  1: "stream end",
  /* Z_STREAM_END      1  */
  0: "",
  /* Z_OK              0  */
  "-1": "file error",
  /* Z_ERRNO         (-1) */
  "-2": "stream error",
  /* Z_STREAM_ERROR  (-2) */
  "-3": "data error",
  /* Z_DATA_ERROR    (-3) */
  "-4": "insufficient memory",
  /* Z_MEM_ERROR     (-4) */
  "-5": "buffer error",
  /* Z_BUF_ERROR     (-5) */
  "-6": "incompatible version"
  /* Z_VERSION_ERROR (-6) */
}, $0 = ls, gt = Gn, R6 = B6, Lr = I6, XC = jC, Xi = 0, KC = 1, JC = 3, Jr = 4, I2 = 5, Xt = 0, R2 = 1, pt = -2, QC = -3, Dc = -5, eS = -1, tS = 1, Us = 2, rS = 3, iS = 4, nS = 0, aS = 2, dl = 8, sS = 9, oS = 15, lS = 8, cS = 29, fS = 256, df = fS + 1 + cS, uS = 30, hS = 19, dS = 2 * df + 1, gS = 15, Me = 3, Yr = 258, Ct = Yr + Me + 1, pS = 32, gl = 42, gf = 69, no = 73, ao = 91, so = 103, Ei = 113, xa = 666, x0 = 1, fs = 2, Ui = 3, jn = 4, vS = 3;
function Gr(t, e) {
  return t.msg = XC[e], e;
}
function P2(t) {
  return (t << 1) - (t > 4 ? 9 : 0);
}
function Wr(t) {
  for (var e = t.length; --e >= 0; )
    t[e] = 0;
}
function Nr(t) {
  var e = t.state, r = e.pending;
  r > t.avail_out && (r = t.avail_out), r !== 0 && ($0.arraySet(t.output, e.pending_buf, e.pending_out, r, t.next_out), t.next_out += r, e.pending_out += r, t.total_out += r, t.avail_out -= r, e.pending -= r, e.pending === 0 && (e.pending_out = 0));
}
function T0(t, e) {
  gt._tr_flush_block(t, t.block_start >= 0 ? t.block_start : -1, t.strstart - t.block_start, e), t.block_start = t.strstart, Nr(t.strm);
}
function Ve(t, e) {
  t.pending_buf[t.pending++] = e;
}
function ga(t, e) {
  t.pending_buf[t.pending++] = e >>> 8 & 255, t.pending_buf[t.pending++] = e & 255;
}
function mS(t, e, r, i) {
  var n = t.avail_in;
  return n > i && (n = i), n === 0 ? 0 : (t.avail_in -= n, $0.arraySet(e, t.input, t.next_in, n, r), t.state.wrap === 1 ? t.adler = R6(t.adler, e, n, r) : t.state.wrap === 2 && (t.adler = Lr(t.adler, e, n, r)), t.next_in += n, t.total_in += n, n);
}
function P6(t, e) {
  var r = t.max_chain_length, i = t.strstart, n, a, s = t.prev_length, o = t.nice_match, c = t.strstart > t.w_size - Ct ? t.strstart - (t.w_size - Ct) : 0, l = t.window, f = t.w_mask, u = t.prev, h = t.strstart + Yr, d = l[i + s - 1], p = l[i + s];
  t.prev_length >= t.good_match && (r >>= 2), o > t.lookahead && (o = t.lookahead);
  do
    if (n = e, !(l[n + s] !== p || l[n + s - 1] !== d || l[n] !== l[i] || l[++n] !== l[i + 1])) {
      i += 2, n++;
      do
        ;
      while (l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && l[++i] === l[++n] && i < h);
      if (a = Yr - (h - i), i = h - Yr, a > s) {
        if (t.match_start = e, s = a, a >= o)
          break;
        d = l[i + s - 1], p = l[i + s];
      }
    }
  while ((e = u[e & f]) > c && --r !== 0);
  return s <= t.lookahead ? s : t.lookahead;
}
function $i(t) {
  var e = t.w_size, r, i, n, a, s;
  do {
    if (a = t.window_size - t.lookahead - t.strstart, t.strstart >= e + (e - Ct)) {
      $0.arraySet(t.window, t.window, e, e, 0), t.match_start -= e, t.strstart -= e, t.block_start -= e, i = t.hash_size, r = i;
      do
        n = t.head[--r], t.head[r] = n >= e ? n - e : 0;
      while (--i);
      i = e, r = i;
      do
        n = t.prev[--r], t.prev[r] = n >= e ? n - e : 0;
      while (--i);
      a += e;
    }
    if (t.strm.avail_in === 0)
      break;
    if (i = mS(t.strm, t.window, t.strstart + t.lookahead, a), t.lookahead += i, t.lookahead + t.insert >= Me)
      for (s = t.strstart - t.insert, t.ins_h = t.window[s], t.ins_h = (t.ins_h << t.hash_shift ^ t.window[s + 1]) & t.hash_mask; t.insert && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[s + Me - 1]) & t.hash_mask, t.prev[s & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = s, s++, t.insert--, !(t.lookahead + t.insert < Me)); )
        ;
  } while (t.lookahead < Ct && t.strm.avail_in !== 0);
}
function bS(t, e) {
  var r = 65535;
  for (r > t.pending_buf_size - 5 && (r = t.pending_buf_size - 5); ; ) {
    if (t.lookahead <= 1) {
      if ($i(t), t.lookahead === 0 && e === Xi)
        return x0;
      if (t.lookahead === 0)
        break;
    }
    t.strstart += t.lookahead, t.lookahead = 0;
    var i = t.block_start + r;
    if ((t.strstart === 0 || t.strstart >= i) && (t.lookahead = t.strstart - i, t.strstart = i, T0(t, !1), t.strm.avail_out === 0) || t.strstart - t.block_start >= t.w_size - Ct && (T0(t, !1), t.strm.avail_out === 0))
      return x0;
  }
  return t.insert = 0, e === Jr ? (T0(t, !0), t.strm.avail_out === 0 ? Ui : jn) : (t.strstart > t.block_start && (T0(t, !1), t.strm.avail_out === 0), x0);
}
function Bc(t, e) {
  for (var r, i; ; ) {
    if (t.lookahead < Ct) {
      if ($i(t), t.lookahead < Ct && e === Xi)
        return x0;
      if (t.lookahead === 0)
        break;
    }
    if (r = 0, t.lookahead >= Me && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + Me - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart), r !== 0 && t.strstart - r <= t.w_size - Ct && (t.match_length = P6(t, r)), t.match_length >= Me)
      if (i = gt._tr_tally(t, t.strstart - t.match_start, t.match_length - Me), t.lookahead -= t.match_length, t.match_length <= t.max_lazy_match && t.lookahead >= Me) {
        t.match_length--;
        do
          t.strstart++, t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + Me - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart;
        while (--t.match_length !== 0);
        t.strstart++;
      } else
        t.strstart += t.match_length, t.match_length = 0, t.ins_h = t.window[t.strstart], t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + 1]) & t.hash_mask;
    else
      i = gt._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++;
    if (i && (T0(t, !1), t.strm.avail_out === 0))
      return x0;
  }
  return t.insert = t.strstart < Me - 1 ? t.strstart : Me - 1, e === Jr ? (T0(t, !0), t.strm.avail_out === 0 ? Ui : jn) : t.last_lit && (T0(t, !1), t.strm.avail_out === 0) ? x0 : fs;
}
function cn(t, e) {
  for (var r, i, n; ; ) {
    if (t.lookahead < Ct) {
      if ($i(t), t.lookahead < Ct && e === Xi)
        return x0;
      if (t.lookahead === 0)
        break;
    }
    if (r = 0, t.lookahead >= Me && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + Me - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart), t.prev_length = t.match_length, t.prev_match = t.match_start, t.match_length = Me - 1, r !== 0 && t.prev_length < t.max_lazy_match && t.strstart - r <= t.w_size - Ct && (t.match_length = P6(t, r), t.match_length <= 5 && (t.strategy === tS || t.match_length === Me && t.strstart - t.match_start > 4096) && (t.match_length = Me - 1)), t.prev_length >= Me && t.match_length <= t.prev_length) {
      n = t.strstart + t.lookahead - Me, i = gt._tr_tally(t, t.strstart - 1 - t.prev_match, t.prev_length - Me), t.lookahead -= t.prev_length - 1, t.prev_length -= 2;
      do
        ++t.strstart <= n && (t.ins_h = (t.ins_h << t.hash_shift ^ t.window[t.strstart + Me - 1]) & t.hash_mask, r = t.prev[t.strstart & t.w_mask] = t.head[t.ins_h], t.head[t.ins_h] = t.strstart);
      while (--t.prev_length !== 0);
      if (t.match_available = 0, t.match_length = Me - 1, t.strstart++, i && (T0(t, !1), t.strm.avail_out === 0))
        return x0;
    } else if (t.match_available) {
      if (i = gt._tr_tally(t, 0, t.window[t.strstart - 1]), i && T0(t, !1), t.strstart++, t.lookahead--, t.strm.avail_out === 0)
        return x0;
    } else
      t.match_available = 1, t.strstart++, t.lookahead--;
  }
  return t.match_available && (i = gt._tr_tally(t, 0, t.window[t.strstart - 1]), t.match_available = 0), t.insert = t.strstart < Me - 1 ? t.strstart : Me - 1, e === Jr ? (T0(t, !0), t.strm.avail_out === 0 ? Ui : jn) : t.last_lit && (T0(t, !1), t.strm.avail_out === 0) ? x0 : fs;
}
function xS(t, e) {
  for (var r, i, n, a, s = t.window; ; ) {
    if (t.lookahead <= Yr) {
      if ($i(t), t.lookahead <= Yr && e === Xi)
        return x0;
      if (t.lookahead === 0)
        break;
    }
    if (t.match_length = 0, t.lookahead >= Me && t.strstart > 0 && (n = t.strstart - 1, i = s[n], i === s[++n] && i === s[++n] && i === s[++n])) {
      a = t.strstart + Yr;
      do
        ;
      while (i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && i === s[++n] && n < a);
      t.match_length = Yr - (a - n), t.match_length > t.lookahead && (t.match_length = t.lookahead);
    }
    if (t.match_length >= Me ? (r = gt._tr_tally(t, 1, t.match_length - Me), t.lookahead -= t.match_length, t.strstart += t.match_length, t.match_length = 0) : (r = gt._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++), r && (T0(t, !1), t.strm.avail_out === 0))
      return x0;
  }
  return t.insert = 0, e === Jr ? (T0(t, !0), t.strm.avail_out === 0 ? Ui : jn) : t.last_lit && (T0(t, !1), t.strm.avail_out === 0) ? x0 : fs;
}
function wS(t, e) {
  for (var r; ; ) {
    if (t.lookahead === 0 && ($i(t), t.lookahead === 0)) {
      if (e === Xi)
        return x0;
      break;
    }
    if (t.match_length = 0, r = gt._tr_tally(t, 0, t.window[t.strstart]), t.lookahead--, t.strstart++, r && (T0(t, !1), t.strm.avail_out === 0))
      return x0;
  }
  return t.insert = 0, e === Jr ? (T0(t, !0), t.strm.avail_out === 0 ? Ui : jn) : t.last_lit && (T0(t, !1), t.strm.avail_out === 0) ? x0 : fs;
}
function Ut(t, e, r, i, n) {
  this.good_length = t, this.max_lazy = e, this.nice_length = r, this.max_chain = i, this.func = n;
}
var xn;
xn = [
  /*      good lazy nice chain */
  new Ut(0, 0, 0, 0, bS),
  /* 0 store only */
  new Ut(4, 4, 8, 4, Bc),
  /* 1 max speed, no lazy matches */
  new Ut(4, 5, 16, 8, Bc),
  /* 2 */
  new Ut(4, 6, 32, 32, Bc),
  /* 3 */
  new Ut(4, 4, 16, 16, cn),
  /* 4 lazy matches */
  new Ut(8, 16, 32, 32, cn),
  /* 5 */
  new Ut(8, 16, 128, 128, cn),
  /* 6 */
  new Ut(8, 32, 128, 256, cn),
  /* 7 */
  new Ut(32, 128, 258, 1024, cn),
  /* 8 */
  new Ut(32, 258, 258, 4096, cn)
  /* 9 max compression */
];
function yS(t) {
  t.window_size = 2 * t.w_size, Wr(t.head), t.max_lazy_match = xn[t.level].max_lazy, t.good_match = xn[t.level].good_length, t.nice_match = xn[t.level].nice_length, t.max_chain_length = xn[t.level].max_chain, t.strstart = 0, t.block_start = 0, t.lookahead = 0, t.insert = 0, t.match_length = t.prev_length = Me - 1, t.match_available = 0, t.ins_h = 0;
}
function _S() {
  this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = dl, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new $0.Buf16(dS * 2), this.dyn_dtree = new $0.Buf16((2 * uS + 1) * 2), this.bl_tree = new $0.Buf16((2 * hS + 1) * 2), Wr(this.dyn_ltree), Wr(this.dyn_dtree), Wr(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new $0.Buf16(gS + 1), this.heap = new $0.Buf16(2 * df + 1), Wr(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new $0.Buf16(2 * df + 1), Wr(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
}
function L6(t) {
  var e;
  return !t || !t.state ? Gr(t, pt) : (t.total_in = t.total_out = 0, t.data_type = aS, e = t.state, e.pending = 0, e.pending_out = 0, e.wrap < 0 && (e.wrap = -e.wrap), e.status = e.wrap ? gl : Ei, t.adler = e.wrap === 2 ? 0 : 1, e.last_flush = Xi, gt._tr_init(e), Xt);
}
function N6(t) {
  var e = L6(t);
  return e === Xt && yS(t.state), e;
}
function AS(t, e) {
  return !t || !t.state || t.state.wrap !== 2 ? pt : (t.state.gzhead = e, Xt);
}
function M6(t, e, r, i, n, a) {
  if (!t)
    return pt;
  var s = 1;
  if (e === eS && (e = 6), i < 0 ? (s = 0, i = -i) : i > 15 && (s = 2, i -= 16), n < 1 || n > sS || r !== dl || i < 8 || i > 15 || e < 0 || e > 9 || a < 0 || a > iS)
    return Gr(t, pt);
  i === 8 && (i = 9);
  var o = new _S();
  return t.state = o, o.strm = t, o.wrap = s, o.gzhead = null, o.w_bits = i, o.w_size = 1 << o.w_bits, o.w_mask = o.w_size - 1, o.hash_bits = n + 7, o.hash_size = 1 << o.hash_bits, o.hash_mask = o.hash_size - 1, o.hash_shift = ~~((o.hash_bits + Me - 1) / Me), o.window = new $0.Buf8(o.w_size * 2), o.head = new $0.Buf16(o.hash_size), o.prev = new $0.Buf16(o.w_size), o.lit_bufsize = 1 << n + 6, o.pending_buf_size = o.lit_bufsize * 4, o.pending_buf = new $0.Buf8(o.pending_buf_size), o.d_buf = 1 * o.lit_bufsize, o.l_buf = 3 * o.lit_bufsize, o.level = e, o.strategy = a, o.method = r, N6(t);
}
function ES(t, e) {
  return M6(t, e, dl, oS, lS, nS);
}
function CS(t, e) {
  var r, i, n, a;
  if (!t || !t.state || e > I2 || e < 0)
    return t ? Gr(t, pt) : pt;
  if (i = t.state, !t.output || !t.input && t.avail_in !== 0 || i.status === xa && e !== Jr)
    return Gr(t, t.avail_out === 0 ? Dc : pt);
  if (i.strm = t, r = i.last_flush, i.last_flush = e, i.status === gl)
    if (i.wrap === 2)
      t.adler = 0, Ve(i, 31), Ve(i, 139), Ve(i, 8), i.gzhead ? (Ve(i, (i.gzhead.text ? 1 : 0) + (i.gzhead.hcrc ? 2 : 0) + (i.gzhead.extra ? 4 : 0) + (i.gzhead.name ? 8 : 0) + (i.gzhead.comment ? 16 : 0)), Ve(i, i.gzhead.time & 255), Ve(i, i.gzhead.time >> 8 & 255), Ve(i, i.gzhead.time >> 16 & 255), Ve(i, i.gzhead.time >> 24 & 255), Ve(i, i.level === 9 ? 2 : i.strategy >= Us || i.level < 2 ? 4 : 0), Ve(i, i.gzhead.os & 255), i.gzhead.extra && i.gzhead.extra.length && (Ve(i, i.gzhead.extra.length & 255), Ve(i, i.gzhead.extra.length >> 8 & 255)), i.gzhead.hcrc && (t.adler = Lr(t.adler, i.pending_buf, i.pending, 0)), i.gzindex = 0, i.status = gf) : (Ve(i, 0), Ve(i, 0), Ve(i, 0), Ve(i, 0), Ve(i, 0), Ve(i, i.level === 9 ? 2 : i.strategy >= Us || i.level < 2 ? 4 : 0), Ve(i, vS), i.status = Ei);
    else {
      var s = dl + (i.w_bits - 8 << 4) << 8, o = -1;
      i.strategy >= Us || i.level < 2 ? o = 0 : i.level < 6 ? o = 1 : i.level === 6 ? o = 2 : o = 3, s |= o << 6, i.strstart !== 0 && (s |= pS), s += 31 - s % 31, i.status = Ei, ga(i, s), i.strstart !== 0 && (ga(i, t.adler >>> 16), ga(i, t.adler & 65535)), t.adler = 1;
    }
  if (i.status === gf)
    if (i.gzhead.extra) {
      for (n = i.pending; i.gzindex < (i.gzhead.extra.length & 65535) && !(i.pending === i.pending_buf_size && (i.gzhead.hcrc && i.pending > n && (t.adler = Lr(t.adler, i.pending_buf, i.pending - n, n)), Nr(t), n = i.pending, i.pending === i.pending_buf_size)); )
        Ve(i, i.gzhead.extra[i.gzindex] & 255), i.gzindex++;
      i.gzhead.hcrc && i.pending > n && (t.adler = Lr(t.adler, i.pending_buf, i.pending - n, n)), i.gzindex === i.gzhead.extra.length && (i.gzindex = 0, i.status = no);
    } else
      i.status = no;
  if (i.status === no)
    if (i.gzhead.name) {
      n = i.pending;
      do {
        if (i.pending === i.pending_buf_size && (i.gzhead.hcrc && i.pending > n && (t.adler = Lr(t.adler, i.pending_buf, i.pending - n, n)), Nr(t), n = i.pending, i.pending === i.pending_buf_size)) {
          a = 1;
          break;
        }
        i.gzindex < i.gzhead.name.length ? a = i.gzhead.name.charCodeAt(i.gzindex++) & 255 : a = 0, Ve(i, a);
      } while (a !== 0);
      i.gzhead.hcrc && i.pending > n && (t.adler = Lr(t.adler, i.pending_buf, i.pending - n, n)), a === 0 && (i.gzindex = 0, i.status = ao);
    } else
      i.status = ao;
  if (i.status === ao)
    if (i.gzhead.comment) {
      n = i.pending;
      do {
        if (i.pending === i.pending_buf_size && (i.gzhead.hcrc && i.pending > n && (t.adler = Lr(t.adler, i.pending_buf, i.pending - n, n)), Nr(t), n = i.pending, i.pending === i.pending_buf_size)) {
          a = 1;
          break;
        }
        i.gzindex < i.gzhead.comment.length ? a = i.gzhead.comment.charCodeAt(i.gzindex++) & 255 : a = 0, Ve(i, a);
      } while (a !== 0);
      i.gzhead.hcrc && i.pending > n && (t.adler = Lr(t.adler, i.pending_buf, i.pending - n, n)), a === 0 && (i.status = so);
    } else
      i.status = so;
  if (i.status === so && (i.gzhead.hcrc ? (i.pending + 2 > i.pending_buf_size && Nr(t), i.pending + 2 <= i.pending_buf_size && (Ve(i, t.adler & 255), Ve(i, t.adler >> 8 & 255), t.adler = 0, i.status = Ei)) : i.status = Ei), i.pending !== 0) {
    if (Nr(t), t.avail_out === 0)
      return i.last_flush = -1, Xt;
  } else if (t.avail_in === 0 && P2(e) <= P2(r) && e !== Jr)
    return Gr(t, Dc);
  if (i.status === xa && t.avail_in !== 0)
    return Gr(t, Dc);
  if (t.avail_in !== 0 || i.lookahead !== 0 || e !== Xi && i.status !== xa) {
    var c = i.strategy === Us ? wS(i, e) : i.strategy === rS ? xS(i, e) : xn[i.level].func(i, e);
    if ((c === Ui || c === jn) && (i.status = xa), c === x0 || c === Ui)
      return t.avail_out === 0 && (i.last_flush = -1), Xt;
    if (c === fs && (e === KC ? gt._tr_align(i) : e !== I2 && (gt._tr_stored_block(i, 0, 0, !1), e === JC && (Wr(i.head), i.lookahead === 0 && (i.strstart = 0, i.block_start = 0, i.insert = 0))), Nr(t), t.avail_out === 0))
      return i.last_flush = -1, Xt;
  }
  return e !== Jr ? Xt : i.wrap <= 0 ? R2 : (i.wrap === 2 ? (Ve(i, t.adler & 255), Ve(i, t.adler >> 8 & 255), Ve(i, t.adler >> 16 & 255), Ve(i, t.adler >> 24 & 255), Ve(i, t.total_in & 255), Ve(i, t.total_in >> 8 & 255), Ve(i, t.total_in >> 16 & 255), Ve(i, t.total_in >> 24 & 255)) : (ga(i, t.adler >>> 16), ga(i, t.adler & 65535)), Nr(t), i.wrap > 0 && (i.wrap = -i.wrap), i.pending !== 0 ? Xt : R2);
}
function SS(t) {
  var e;
  return !t || !t.state ? pt : (e = t.state.status, e !== gl && e !== gf && e !== no && e !== ao && e !== so && e !== Ei && e !== xa ? Gr(t, pt) : (t.state = null, e === Ei ? Gr(t, QC) : Xt));
}
function TS(t, e) {
  var r = e.length, i, n, a, s, o, c, l, f;
  if (!t || !t.state || (i = t.state, s = i.wrap, s === 2 || s === 1 && i.status !== gl || i.lookahead))
    return pt;
  for (s === 1 && (t.adler = R6(t.adler, e, r, 0)), i.wrap = 0, r >= i.w_size && (s === 0 && (Wr(i.head), i.strstart = 0, i.block_start = 0, i.insert = 0), f = new $0.Buf8(i.w_size), $0.arraySet(f, e, r - i.w_size, i.w_size, 0), e = f, r = i.w_size), o = t.avail_in, c = t.next_in, l = t.input, t.avail_in = r, t.next_in = 0, t.input = e, $i(i); i.lookahead >= Me; ) {
    n = i.strstart, a = i.lookahead - (Me - 1);
    do
      i.ins_h = (i.ins_h << i.hash_shift ^ i.window[n + Me - 1]) & i.hash_mask, i.prev[n & i.w_mask] = i.head[i.ins_h], i.head[i.ins_h] = n, n++;
    while (--a);
    i.strstart = n, i.lookahead = Me - 1, $i(i);
  }
  return i.strstart += i.lookahead, i.block_start = i.strstart, i.insert = i.lookahead, i.lookahead = 0, i.match_length = i.prev_length = Me - 1, i.match_available = 0, t.next_in = c, t.input = l, t.avail_in = o, i.wrap = s, Xt;
}
or.deflateInit = ES;
or.deflateInit2 = M6;
or.deflateReset = N6;
or.deflateResetKeep = L6;
or.deflateSetHeader = AS;
or.deflate = CS;
or.deflateEnd = SS;
or.deflateSetDictionary = TS;
or.deflateInfo = "pako deflate (from Nodeca project)";
var It = {}, $s = 30, kS = 12, FS = function(e, r) {
  var i, n, a, s, o, c, l, f, u, h, d, p, m, C, A, b, x, _, v, F, S, D, P, B, I;
  i = e.state, n = e.next_in, B = e.input, a = n + (e.avail_in - 5), s = e.next_out, I = e.output, o = s - (r - e.avail_out), c = s + (e.avail_out - 257), l = i.dmax, f = i.wsize, u = i.whave, h = i.wnext, d = i.window, p = i.hold, m = i.bits, C = i.lencode, A = i.distcode, b = (1 << i.lenbits) - 1, x = (1 << i.distbits) - 1;
  e: do {
    m < 15 && (p += B[n++] << m, m += 8, p += B[n++] << m, m += 8), _ = C[p & b];
    t: for (; ; ) {
      if (v = _ >>> 24, p >>>= v, m -= v, v = _ >>> 16 & 255, v === 0)
        I[s++] = _ & 65535;
      else if (v & 16) {
        F = _ & 65535, v &= 15, v && (m < v && (p += B[n++] << m, m += 8), F += p & (1 << v) - 1, p >>>= v, m -= v), m < 15 && (p += B[n++] << m, m += 8, p += B[n++] << m, m += 8), _ = A[p & x];
        r: for (; ; ) {
          if (v = _ >>> 24, p >>>= v, m -= v, v = _ >>> 16 & 255, v & 16) {
            if (S = _ & 65535, v &= 15, m < v && (p += B[n++] << m, m += 8, m < v && (p += B[n++] << m, m += 8)), S += p & (1 << v) - 1, S > l) {
              e.msg = "invalid distance too far back", i.mode = $s;
              break e;
            }
            if (p >>>= v, m -= v, v = s - o, S > v) {
              if (v = S - v, v > u && i.sane) {
                e.msg = "invalid distance too far back", i.mode = $s;
                break e;
              }
              if (D = 0, P = d, h === 0) {
                if (D += f - v, v < F) {
                  F -= v;
                  do
                    I[s++] = d[D++];
                  while (--v);
                  D = s - S, P = I;
                }
              } else if (h < v) {
                if (D += f + h - v, v -= h, v < F) {
                  F -= v;
                  do
                    I[s++] = d[D++];
                  while (--v);
                  if (D = 0, h < F) {
                    v = h, F -= v;
                    do
                      I[s++] = d[D++];
                    while (--v);
                    D = s - S, P = I;
                  }
                }
              } else if (D += h - v, v < F) {
                F -= v;
                do
                  I[s++] = d[D++];
                while (--v);
                D = s - S, P = I;
              }
              for (; F > 2; )
                I[s++] = P[D++], I[s++] = P[D++], I[s++] = P[D++], F -= 3;
              F && (I[s++] = P[D++], F > 1 && (I[s++] = P[D++]));
            } else {
              D = s - S;
              do
                I[s++] = I[D++], I[s++] = I[D++], I[s++] = I[D++], F -= 3;
              while (F > 2);
              F && (I[s++] = I[D++], F > 1 && (I[s++] = I[D++]));
            }
          } else if (v & 64) {
            e.msg = "invalid distance code", i.mode = $s;
            break e;
          } else {
            _ = A[(_ & 65535) + (p & (1 << v) - 1)];
            continue r;
          }
          break;
        }
      } else if (v & 64)
        if (v & 32) {
          i.mode = kS;
          break e;
        } else {
          e.msg = "invalid literal/length code", i.mode = $s;
          break e;
        }
      else {
        _ = C[(_ & 65535) + (p & (1 << v) - 1)];
        continue t;
      }
      break;
    }
  } while (n < a && s < c);
  F = m >> 3, n -= F, m -= F << 3, p &= (1 << m) - 1, e.next_in = n, e.next_out = s, e.avail_in = n < a ? 5 + (a - n) : 5 - (n - a), e.avail_out = s < c ? 257 + (c - s) : 257 - (s - c), i.hold = p, i.bits = m;
}, L2 = ls, fn = 15, N2 = 852, M2 = 592, U2 = 0, Ic = 1, $2 = 2, OS = [
  /* Length codes 257..285 base */
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  15,
  17,
  19,
  23,
  27,
  31,
  35,
  43,
  51,
  59,
  67,
  83,
  99,
  115,
  131,
  163,
  195,
  227,
  258,
  0,
  0
], DS = [
  /* Length codes 257..285 extra */
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  16,
  17,
  17,
  17,
  17,
  18,
  18,
  18,
  18,
  19,
  19,
  19,
  19,
  20,
  20,
  20,
  20,
  21,
  21,
  21,
  21,
  16,
  72,
  78
], BS = [
  /* Distance codes 0..29 base */
  1,
  2,
  3,
  4,
  5,
  7,
  9,
  13,
  17,
  25,
  33,
  49,
  65,
  97,
  129,
  193,
  257,
  385,
  513,
  769,
  1025,
  1537,
  2049,
  3073,
  4097,
  6145,
  8193,
  12289,
  16385,
  24577,
  0,
  0
], IS = [
  /* Distance codes 0..29 extra */
  16,
  16,
  16,
  16,
  17,
  17,
  18,
  18,
  19,
  19,
  20,
  20,
  21,
  21,
  22,
  22,
  23,
  23,
  24,
  24,
  25,
  25,
  26,
  26,
  27,
  27,
  28,
  28,
  29,
  29,
  64,
  64
], RS = function(e, r, i, n, a, s, o, c) {
  var l = c.bits, f = 0, u = 0, h = 0, d = 0, p = 0, m = 0, C = 0, A = 0, b = 0, x = 0, _, v, F, S, D, P = null, B = 0, I, w = new L2.Buf16(fn + 1), k = new L2.Buf16(fn + 1), z = null, H = 0, re, ie, X;
  for (f = 0; f <= fn; f++)
    w[f] = 0;
  for (u = 0; u < n; u++)
    w[r[i + u]]++;
  for (p = l, d = fn; d >= 1 && w[d] === 0; d--)
    ;
  if (p > d && (p = d), d === 0)
    return a[s++] = 1 << 24 | 64 << 16 | 0, a[s++] = 1 << 24 | 64 << 16 | 0, c.bits = 1, 0;
  for (h = 1; h < d && w[h] === 0; h++)
    ;
  for (p < h && (p = h), A = 1, f = 1; f <= fn; f++)
    if (A <<= 1, A -= w[f], A < 0)
      return -1;
  if (A > 0 && (e === U2 || d !== 1))
    return -1;
  for (k[1] = 0, f = 1; f < fn; f++)
    k[f + 1] = k[f] + w[f];
  for (u = 0; u < n; u++)
    r[i + u] !== 0 && (o[k[r[i + u]]++] = u);
  if (e === U2 ? (P = z = o, I = 19) : e === Ic ? (P = OS, B -= 257, z = DS, H -= 257, I = 256) : (P = BS, z = IS, I = -1), x = 0, u = 0, f = h, D = s, m = p, C = 0, F = -1, b = 1 << p, S = b - 1, e === Ic && b > N2 || e === $2 && b > M2)
    return 1;
  for (; ; ) {
    re = f - C, o[u] < I ? (ie = 0, X = o[u]) : o[u] > I ? (ie = z[H + o[u]], X = P[B + o[u]]) : (ie = 96, X = 0), _ = 1 << f - C, v = 1 << m, h = v;
    do
      v -= _, a[D + (x >> C) + v] = re << 24 | ie << 16 | X | 0;
    while (v !== 0);
    for (_ = 1 << f - 1; x & _; )
      _ >>= 1;
    if (_ !== 0 ? (x &= _ - 1, x += _) : x = 0, u++, --w[f] === 0) {
      if (f === d)
        break;
      f = r[i + o[u]];
    }
    if (f > p && (x & S) !== F) {
      for (C === 0 && (C = p), D += h, m = f - C, A = 1 << m; m + C < d && (A -= w[m + C], !(A <= 0)); )
        m++, A <<= 1;
      if (b += 1 << m, e === Ic && b > N2 || e === $2 && b > M2)
        return 1;
      F = x & S, a[F] = p << 24 | m << 16 | D - s | 0;
    }
  }
  return x !== 0 && (a[D + x] = f - C << 24 | 64 << 16 | 0), c.bits = p, 0;
}, nt = ls, pf = B6, $t = I6, PS = FS, ka = RS, LS = 0, U6 = 1, $6 = 2, z2 = 4, NS = 5, zs = 6, zi = 0, MS = 1, US = 2, mt = -2, z6 = -3, W6 = -4, $S = -5, W2 = 8, H6 = 1, H2 = 2, q2 = 3, V2 = 4, Y2 = 5, G2 = 6, Z2 = 7, j2 = 8, X2 = 9, K2 = 10, Po = 11, dr = 12, Rc = 13, J2 = 14, Pc = 15, Q2 = 16, ed = 17, td = 18, rd = 19, Ws = 20, Hs = 21, id = 22, nd = 23, ad = 24, sd = 25, od = 26, Lc = 27, ld = 28, cd = 29, s0 = 30, q6 = 31, zS = 32, WS = 852, HS = 592, qS = 15, VS = qS;
function fd(t) {
  return (t >>> 24 & 255) + (t >>> 8 & 65280) + ((t & 65280) << 8) + ((t & 255) << 24);
}
function YS() {
  this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new nt.Buf16(320), this.work = new nt.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
}
function V6(t) {
  var e;
  return !t || !t.state ? mt : (e = t.state, t.total_in = t.total_out = e.total = 0, t.msg = "", e.wrap && (t.adler = e.wrap & 1), e.mode = H6, e.last = 0, e.havedict = 0, e.dmax = 32768, e.head = null, e.hold = 0, e.bits = 0, e.lencode = e.lendyn = new nt.Buf32(WS), e.distcode = e.distdyn = new nt.Buf32(HS), e.sane = 1, e.back = -1, zi);
}
function Y6(t) {
  var e;
  return !t || !t.state ? mt : (e = t.state, e.wsize = 0, e.whave = 0, e.wnext = 0, V6(t));
}
function G6(t, e) {
  var r, i;
  return !t || !t.state || (i = t.state, e < 0 ? (r = 0, e = -e) : (r = (e >> 4) + 1, e < 48 && (e &= 15)), e && (e < 8 || e > 15)) ? mt : (i.window !== null && i.wbits !== e && (i.window = null), i.wrap = r, i.wbits = e, Y6(t));
}
function Z6(t, e) {
  var r, i;
  return t ? (i = new YS(), t.state = i, i.window = null, r = G6(t, e), r !== zi && (t.state = null), r) : mt;
}
function GS(t) {
  return Z6(t, VS);
}
var ud = !0, Nc, Mc;
function ZS(t) {
  if (ud) {
    var e;
    for (Nc = new nt.Buf32(512), Mc = new nt.Buf32(32), e = 0; e < 144; )
      t.lens[e++] = 8;
    for (; e < 256; )
      t.lens[e++] = 9;
    for (; e < 280; )
      t.lens[e++] = 7;
    for (; e < 288; )
      t.lens[e++] = 8;
    for (ka(U6, t.lens, 0, 288, Nc, 0, t.work, {
      bits: 9
    }), e = 0; e < 32; )
      t.lens[e++] = 5;
    ka($6, t.lens, 0, 32, Mc, 0, t.work, {
      bits: 5
    }), ud = !1;
  }
  t.lencode = Nc, t.lenbits = 9, t.distcode = Mc, t.distbits = 5;
}
function j6(t, e, r, i) {
  var n, a = t.state;
  return a.window === null && (a.wsize = 1 << a.wbits, a.wnext = 0, a.whave = 0, a.window = new nt.Buf8(a.wsize)), i >= a.wsize ? (nt.arraySet(a.window, e, r - a.wsize, a.wsize, 0), a.wnext = 0, a.whave = a.wsize) : (n = a.wsize - a.wnext, n > i && (n = i), nt.arraySet(a.window, e, r - i, n, a.wnext), i -= n, i ? (nt.arraySet(a.window, e, r - i, i, 0), a.wnext = i, a.whave = a.wsize) : (a.wnext += n, a.wnext === a.wsize && (a.wnext = 0), a.whave < a.wsize && (a.whave += n))), 0;
}
function jS(t, e) {
  var r, i, n, a, s, o, c, l, f, u, h, d, p, m, C = 0, A, b, x, _, v, F, S, D, P = new nt.Buf8(4), B, I, w = (
    /* permutation of code lengths */
    [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
  );
  if (!t || !t.state || !t.output || !t.input && t.avail_in !== 0)
    return mt;
  r = t.state, r.mode === dr && (r.mode = Rc), s = t.next_out, n = t.output, c = t.avail_out, a = t.next_in, i = t.input, o = t.avail_in, l = r.hold, f = r.bits, u = o, h = c, D = zi;
  e:
    for (; ; )
      switch (r.mode) {
        case H6:
          if (r.wrap === 0) {
            r.mode = Rc;
            break;
          }
          for (; f < 16; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if (r.wrap & 2 && l === 35615) {
            r.check = 0, P[0] = l & 255, P[1] = l >>> 8 & 255, r.check = $t(r.check, P, 2, 0), l = 0, f = 0, r.mode = H2;
            break;
          }
          if (r.flags = 0, r.head && (r.head.done = !1), !(r.wrap & 1) || /* check if zlib header allowed */
          (((l & 255) << 8) + (l >> 8)) % 31) {
            t.msg = "incorrect header check", r.mode = s0;
            break;
          }
          if ((l & 15) !== W2) {
            t.msg = "unknown compression method", r.mode = s0;
            break;
          }
          if (l >>>= 4, f -= 4, S = (l & 15) + 8, r.wbits === 0)
            r.wbits = S;
          else if (S > r.wbits) {
            t.msg = "invalid window size", r.mode = s0;
            break;
          }
          r.dmax = 1 << S, t.adler = r.check = 1, r.mode = l & 512 ? K2 : dr, l = 0, f = 0;
          break;
        case H2:
          for (; f < 16; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if (r.flags = l, (r.flags & 255) !== W2) {
            t.msg = "unknown compression method", r.mode = s0;
            break;
          }
          if (r.flags & 57344) {
            t.msg = "unknown header flags set", r.mode = s0;
            break;
          }
          r.head && (r.head.text = l >> 8 & 1), r.flags & 512 && (P[0] = l & 255, P[1] = l >>> 8 & 255, r.check = $t(r.check, P, 2, 0)), l = 0, f = 0, r.mode = q2;
        case q2:
          for (; f < 32; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          r.head && (r.head.time = l), r.flags & 512 && (P[0] = l & 255, P[1] = l >>> 8 & 255, P[2] = l >>> 16 & 255, P[3] = l >>> 24 & 255, r.check = $t(r.check, P, 4, 0)), l = 0, f = 0, r.mode = V2;
        case V2:
          for (; f < 16; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          r.head && (r.head.xflags = l & 255, r.head.os = l >> 8), r.flags & 512 && (P[0] = l & 255, P[1] = l >>> 8 & 255, r.check = $t(r.check, P, 2, 0)), l = 0, f = 0, r.mode = Y2;
        case Y2:
          if (r.flags & 1024) {
            for (; f < 16; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            r.length = l, r.head && (r.head.extra_len = l), r.flags & 512 && (P[0] = l & 255, P[1] = l >>> 8 & 255, r.check = $t(r.check, P, 2, 0)), l = 0, f = 0;
          } else r.head && (r.head.extra = null);
          r.mode = G2;
        case G2:
          if (r.flags & 1024 && (d = r.length, d > o && (d = o), d && (r.head && (S = r.head.extra_len - r.length, r.head.extra || (r.head.extra = new Array(r.head.extra_len)), nt.arraySet(
            r.head.extra,
            i,
            a,
            // extra field is limited to 65536 bytes
            // - no need for additional size check
            d,
            /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
            S
          )), r.flags & 512 && (r.check = $t(r.check, i, d, a)), o -= d, a += d, r.length -= d), r.length))
            break e;
          r.length = 0, r.mode = Z2;
        case Z2:
          if (r.flags & 2048) {
            if (o === 0)
              break e;
            d = 0;
            do
              S = i[a + d++], r.head && S && r.length < 65536 && (r.head.name += String.fromCharCode(S));
            while (S && d < o);
            if (r.flags & 512 && (r.check = $t(r.check, i, d, a)), o -= d, a += d, S)
              break e;
          } else r.head && (r.head.name = null);
          r.length = 0, r.mode = j2;
        case j2:
          if (r.flags & 4096) {
            if (o === 0)
              break e;
            d = 0;
            do
              S = i[a + d++], r.head && S && r.length < 65536 && (r.head.comment += String.fromCharCode(S));
            while (S && d < o);
            if (r.flags & 512 && (r.check = $t(r.check, i, d, a)), o -= d, a += d, S)
              break e;
          } else r.head && (r.head.comment = null);
          r.mode = X2;
        case X2:
          if (r.flags & 512) {
            for (; f < 16; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            if (l !== (r.check & 65535)) {
              t.msg = "header crc mismatch", r.mode = s0;
              break;
            }
            l = 0, f = 0;
          }
          r.head && (r.head.hcrc = r.flags >> 9 & 1, r.head.done = !0), t.adler = r.check = 0, r.mode = dr;
          break;
        case K2:
          for (; f < 32; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          t.adler = r.check = fd(l), l = 0, f = 0, r.mode = Po;
        case Po:
          if (r.havedict === 0)
            return t.next_out = s, t.avail_out = c, t.next_in = a, t.avail_in = o, r.hold = l, r.bits = f, US;
          t.adler = r.check = 1, r.mode = dr;
        case dr:
          if (e === NS || e === zs)
            break e;
        case Rc:
          if (r.last) {
            l >>>= f & 7, f -= f & 7, r.mode = Lc;
            break;
          }
          for (; f < 3; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          switch (r.last = l & 1, l >>>= 1, f -= 1, l & 3) {
            case 0:
              r.mode = J2;
              break;
            case 1:
              if (ZS(r), r.mode = Ws, e === zs) {
                l >>>= 2, f -= 2;
                break e;
              }
              break;
            case 2:
              r.mode = ed;
              break;
            case 3:
              t.msg = "invalid block type", r.mode = s0;
          }
          l >>>= 2, f -= 2;
          break;
        case J2:
          for (l >>>= f & 7, f -= f & 7; f < 32; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if ((l & 65535) !== (l >>> 16 ^ 65535)) {
            t.msg = "invalid stored block lengths", r.mode = s0;
            break;
          }
          if (r.length = l & 65535, l = 0, f = 0, r.mode = Pc, e === zs)
            break e;
        case Pc:
          r.mode = Q2;
        case Q2:
          if (d = r.length, d) {
            if (d > o && (d = o), d > c && (d = c), d === 0)
              break e;
            nt.arraySet(n, i, a, d, s), o -= d, a += d, c -= d, s += d, r.length -= d;
            break;
          }
          r.mode = dr;
          break;
        case ed:
          for (; f < 14; ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if (r.nlen = (l & 31) + 257, l >>>= 5, f -= 5, r.ndist = (l & 31) + 1, l >>>= 5, f -= 5, r.ncode = (l & 15) + 4, l >>>= 4, f -= 4, r.nlen > 286 || r.ndist > 30) {
            t.msg = "too many length or distance symbols", r.mode = s0;
            break;
          }
          r.have = 0, r.mode = td;
        case td:
          for (; r.have < r.ncode; ) {
            for (; f < 3; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            r.lens[w[r.have++]] = l & 7, l >>>= 3, f -= 3;
          }
          for (; r.have < 19; )
            r.lens[w[r.have++]] = 0;
          if (r.lencode = r.lendyn, r.lenbits = 7, B = {
            bits: r.lenbits
          }, D = ka(LS, r.lens, 0, 19, r.lencode, 0, r.work, B), r.lenbits = B.bits, D) {
            t.msg = "invalid code lengths set", r.mode = s0;
            break;
          }
          r.have = 0, r.mode = rd;
        case rd:
          for (; r.have < r.nlen + r.ndist; ) {
            for (; C = r.lencode[l & (1 << r.lenbits) - 1], A = C >>> 24, b = C >>> 16 & 255, x = C & 65535, !(A <= f); ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            if (x < 16)
              l >>>= A, f -= A, r.lens[r.have++] = x;
            else {
              if (x === 16) {
                for (I = A + 2; f < I; ) {
                  if (o === 0)
                    break e;
                  o--, l += i[a++] << f, f += 8;
                }
                if (l >>>= A, f -= A, r.have === 0) {
                  t.msg = "invalid bit length repeat", r.mode = s0;
                  break;
                }
                S = r.lens[r.have - 1], d = 3 + (l & 3), l >>>= 2, f -= 2;
              } else if (x === 17) {
                for (I = A + 3; f < I; ) {
                  if (o === 0)
                    break e;
                  o--, l += i[a++] << f, f += 8;
                }
                l >>>= A, f -= A, S = 0, d = 3 + (l & 7), l >>>= 3, f -= 3;
              } else {
                for (I = A + 7; f < I; ) {
                  if (o === 0)
                    break e;
                  o--, l += i[a++] << f, f += 8;
                }
                l >>>= A, f -= A, S = 0, d = 11 + (l & 127), l >>>= 7, f -= 7;
              }
              if (r.have + d > r.nlen + r.ndist) {
                t.msg = "invalid bit length repeat", r.mode = s0;
                break;
              }
              for (; d--; )
                r.lens[r.have++] = S;
            }
          }
          if (r.mode === s0)
            break;
          if (r.lens[256] === 0) {
            t.msg = "invalid code -- missing end-of-block", r.mode = s0;
            break;
          }
          if (r.lenbits = 9, B = {
            bits: r.lenbits
          }, D = ka(U6, r.lens, 0, r.nlen, r.lencode, 0, r.work, B), r.lenbits = B.bits, D) {
            t.msg = "invalid literal/lengths set", r.mode = s0;
            break;
          }
          if (r.distbits = 6, r.distcode = r.distdyn, B = {
            bits: r.distbits
          }, D = ka($6, r.lens, r.nlen, r.ndist, r.distcode, 0, r.work, B), r.distbits = B.bits, D) {
            t.msg = "invalid distances set", r.mode = s0;
            break;
          }
          if (r.mode = Ws, e === zs)
            break e;
        case Ws:
          r.mode = Hs;
        case Hs:
          if (o >= 6 && c >= 258) {
            t.next_out = s, t.avail_out = c, t.next_in = a, t.avail_in = o, r.hold = l, r.bits = f, PS(t, h), s = t.next_out, n = t.output, c = t.avail_out, a = t.next_in, i = t.input, o = t.avail_in, l = r.hold, f = r.bits, r.mode === dr && (r.back = -1);
            break;
          }
          for (r.back = 0; C = r.lencode[l & (1 << r.lenbits) - 1], A = C >>> 24, b = C >>> 16 & 255, x = C & 65535, !(A <= f); ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if (b && !(b & 240)) {
            for (_ = A, v = b, F = x; C = r.lencode[F + ((l & (1 << _ + v) - 1) >> _)], A = C >>> 24, b = C >>> 16 & 255, x = C & 65535, !(_ + A <= f); ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            l >>>= _, f -= _, r.back += _;
          }
          if (l >>>= A, f -= A, r.back += A, r.length = x, b === 0) {
            r.mode = od;
            break;
          }
          if (b & 32) {
            r.back = -1, r.mode = dr;
            break;
          }
          if (b & 64) {
            t.msg = "invalid literal/length code", r.mode = s0;
            break;
          }
          r.extra = b & 15, r.mode = id;
        case id:
          if (r.extra) {
            for (I = r.extra; f < I; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            r.length += l & (1 << r.extra) - 1, l >>>= r.extra, f -= r.extra, r.back += r.extra;
          }
          r.was = r.length, r.mode = nd;
        case nd:
          for (; C = r.distcode[l & (1 << r.distbits) - 1], A = C >>> 24, b = C >>> 16 & 255, x = C & 65535, !(A <= f); ) {
            if (o === 0)
              break e;
            o--, l += i[a++] << f, f += 8;
          }
          if (!(b & 240)) {
            for (_ = A, v = b, F = x; C = r.distcode[F + ((l & (1 << _ + v) - 1) >> _)], A = C >>> 24, b = C >>> 16 & 255, x = C & 65535, !(_ + A <= f); ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            l >>>= _, f -= _, r.back += _;
          }
          if (l >>>= A, f -= A, r.back += A, b & 64) {
            t.msg = "invalid distance code", r.mode = s0;
            break;
          }
          r.offset = x, r.extra = b & 15, r.mode = ad;
        case ad:
          if (r.extra) {
            for (I = r.extra; f < I; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            r.offset += l & (1 << r.extra) - 1, l >>>= r.extra, f -= r.extra, r.back += r.extra;
          }
          if (r.offset > r.dmax) {
            t.msg = "invalid distance too far back", r.mode = s0;
            break;
          }
          r.mode = sd;
        case sd:
          if (c === 0)
            break e;
          if (d = h - c, r.offset > d) {
            if (d = r.offset - d, d > r.whave && r.sane) {
              t.msg = "invalid distance too far back", r.mode = s0;
              break;
            }
            d > r.wnext ? (d -= r.wnext, p = r.wsize - d) : p = r.wnext - d, d > r.length && (d = r.length), m = r.window;
          } else
            m = n, p = s - r.offset, d = r.length;
          d > c && (d = c), c -= d, r.length -= d;
          do
            n[s++] = m[p++];
          while (--d);
          r.length === 0 && (r.mode = Hs);
          break;
        case od:
          if (c === 0)
            break e;
          n[s++] = r.length, c--, r.mode = Hs;
          break;
        case Lc:
          if (r.wrap) {
            for (; f < 32; ) {
              if (o === 0)
                break e;
              o--, l |= i[a++] << f, f += 8;
            }
            if (h -= c, t.total_out += h, r.total += h, h && (t.adler = r.check = /*UPDATE(state.check, put - _out, _out);*/
            r.flags ? $t(r.check, n, h, s - h) : pf(r.check, n, h, s - h)), h = c, (r.flags ? l : fd(l)) !== r.check) {
              t.msg = "incorrect data check", r.mode = s0;
              break;
            }
            l = 0, f = 0;
          }
          r.mode = ld;
        case ld:
          if (r.wrap && r.flags) {
            for (; f < 32; ) {
              if (o === 0)
                break e;
              o--, l += i[a++] << f, f += 8;
            }
            if (l !== (r.total & 4294967295)) {
              t.msg = "incorrect length check", r.mode = s0;
              break;
            }
            l = 0, f = 0;
          }
          r.mode = cd;
        case cd:
          D = MS;
          break e;
        case s0:
          D = z6;
          break e;
        case q6:
          return W6;
        case zS:
        default:
          return mt;
      }
  return t.next_out = s, t.avail_out = c, t.next_in = a, t.avail_in = o, r.hold = l, r.bits = f, (r.wsize || h !== t.avail_out && r.mode < s0 && (r.mode < Lc || e !== z2)) && j6(t, t.output, t.next_out, h - t.avail_out), u -= t.avail_in, h -= t.avail_out, t.total_in += u, t.total_out += h, r.total += h, r.wrap && h && (t.adler = r.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
  r.flags ? $t(r.check, n, h, t.next_out - h) : pf(r.check, n, h, t.next_out - h)), t.data_type = r.bits + (r.last ? 64 : 0) + (r.mode === dr ? 128 : 0) + (r.mode === Ws || r.mode === Pc ? 256 : 0), (u === 0 && h === 0 || e === z2) && D === zi && (D = $S), D;
}
function XS(t) {
  if (!t || !t.state)
    return mt;
  var e = t.state;
  return e.window && (e.window = null), t.state = null, zi;
}
function KS(t, e) {
  var r;
  return !t || !t.state || (r = t.state, !(r.wrap & 2)) ? mt : (r.head = e, e.done = !1, zi);
}
function JS(t, e) {
  var r = e.length, i, n, a;
  return !t || !t.state || (i = t.state, i.wrap !== 0 && i.mode !== Po) ? mt : i.mode === Po && (n = 1, n = pf(n, e, r, 0), n !== i.check) ? z6 : (a = j6(t, e, r, r), a ? (i.mode = q6, W6) : (i.havedict = 1, zi));
}
It.inflateReset = Y6;
It.inflateReset2 = G6;
It.inflateResetKeep = V6;
It.inflateInit = GS;
It.inflateInit2 = Z6;
It.inflate = jS;
It.inflateEnd = XS;
It.inflateGetHeader = KS;
It.inflateSetDictionary = JS;
It.inflateInfo = "pako inflate (from Nodeca project)";
var QS = {
  /* Allowed flush values; see deflate() and inflate() below for details */
  Z_NO_FLUSH: 0,
  Z_PARTIAL_FLUSH: 1,
  Z_SYNC_FLUSH: 2,
  Z_FULL_FLUSH: 3,
  Z_FINISH: 4,
  Z_BLOCK: 5,
  Z_TREES: 6,
  /* Return codes for the compression/decompression functions. Negative values
  * are errors, positive values are used for special but normal events.
  */
  Z_OK: 0,
  Z_STREAM_END: 1,
  Z_NEED_DICT: 2,
  Z_ERRNO: -1,
  Z_STREAM_ERROR: -2,
  Z_DATA_ERROR: -3,
  //Z_MEM_ERROR:     -4,
  Z_BUF_ERROR: -5,
  //Z_VERSION_ERROR: -6,
  /* compression levels */
  Z_NO_COMPRESSION: 0,
  Z_BEST_SPEED: 1,
  Z_BEST_COMPRESSION: 9,
  Z_DEFAULT_COMPRESSION: -1,
  Z_FILTERED: 1,
  Z_HUFFMAN_ONLY: 2,
  Z_RLE: 3,
  Z_FIXED: 4,
  Z_DEFAULT_STRATEGY: 0,
  /* Possible values of the data_type field (though see inflate()) */
  Z_BINARY: 0,
  Z_TEXT: 1,
  //Z_ASCII:                1, // = Z_TEXT (deprecated)
  Z_UNKNOWN: 2,
  /* The deflate compression method */
  Z_DEFLATED: 8
  //Z_NULL:                 null // Use -1 or null inline, depending on var type
};
(function(t) {
  var e = v6, r = AC, i = or, n = It, a = QS;
  for (var s in a)
    t[s] = a[s];
  t.NONE = 0, t.DEFLATE = 1, t.INFLATE = 2, t.GZIP = 3, t.GUNZIP = 4, t.DEFLATERAW = 5, t.INFLATERAW = 6, t.UNZIP = 7;
  var o = 31, c = 139;
  function l(f) {
    if (typeof f != "number" || f < t.DEFLATE || f > t.UNZIP)
      throw new TypeError("Bad argument");
    this.dictionary = null, this.err = 0, this.flush = 0, this.init_done = !1, this.level = 0, this.memLevel = 0, this.mode = f, this.strategy = 0, this.windowBits = 0, this.write_in_progress = !1, this.pending_close = !1, this.gzip_id_bytes_read = 0;
  }
  l.prototype.close = function() {
    if (this.write_in_progress) {
      this.pending_close = !0;
      return;
    }
    this.pending_close = !1, e(this.init_done, "close before init"), e(this.mode <= t.UNZIP), this.mode === t.DEFLATE || this.mode === t.GZIP || this.mode === t.DEFLATERAW ? i.deflateEnd(this.strm) : (this.mode === t.INFLATE || this.mode === t.GUNZIP || this.mode === t.INFLATERAW || this.mode === t.UNZIP) && n.inflateEnd(this.strm), this.mode = t.NONE, this.dictionary = null;
  }, l.prototype.write = function(f, u, h, d, p, m, C) {
    return this._write(!0, f, u, h, d, p, m, C);
  }, l.prototype.writeSync = function(f, u, h, d, p, m, C) {
    return this._write(!1, f, u, h, d, p, m, C);
  }, l.prototype._write = function(f, u, h, d, p, m, C, A) {
    if (e.equal(arguments.length, 8), e(this.init_done, "write before init"), e(this.mode !== t.NONE, "already finalized"), e.equal(!1, this.write_in_progress, "write already in progress"), e.equal(!1, this.pending_close, "close is pending"), this.write_in_progress = !0, e.equal(!1, u === void 0, "must provide flush value"), this.write_in_progress = !0, u !== t.Z_NO_FLUSH && u !== t.Z_PARTIAL_FLUSH && u !== t.Z_SYNC_FLUSH && u !== t.Z_FULL_FLUSH && u !== t.Z_FINISH && u !== t.Z_BLOCK)
      throw new Error("Invalid flush value");
    if (h == null && (h = J.alloc(0), p = 0, d = 0), this.strm.avail_in = p, this.strm.input = h, this.strm.next_in = d, this.strm.avail_out = A, this.strm.output = m, this.strm.next_out = C, this.flush = u, !f)
      return this._process(), this._checkError() ? this._afterSync() : void 0;
    var b = this;
    return _t.nextTick(function() {
      b._process(), b._after();
    }), this;
  }, l.prototype._afterSync = function() {
    var f = this.strm.avail_out, u = this.strm.avail_in;
    return this.write_in_progress = !1, [u, f];
  }, l.prototype._process = function() {
    var f = null;
    switch (this.mode) {
      case t.DEFLATE:
      case t.GZIP:
      case t.DEFLATERAW:
        this.err = i.deflate(this.strm, this.flush);
        break;
      case t.UNZIP:
        switch (this.strm.avail_in > 0 && (f = this.strm.next_in), this.gzip_id_bytes_read) {
          case 0:
            if (f === null)
              break;
            if (this.strm.input[f] === o) {
              if (this.gzip_id_bytes_read = 1, f++, this.strm.avail_in === 1)
                break;
            } else {
              this.mode = t.INFLATE;
              break;
            }
          case 1:
            if (f === null)
              break;
            this.strm.input[f] === c ? (this.gzip_id_bytes_read = 2, this.mode = t.GUNZIP) : this.mode = t.INFLATE;
            break;
          default:
            throw new Error("invalid number of gzip magic number bytes read");
        }
      case t.INFLATE:
      case t.GUNZIP:
      case t.INFLATERAW:
        for (this.err = n.inflate(
          this.strm,
          this.flush
          // If data was encoded with dictionary
        ), this.err === t.Z_NEED_DICT && this.dictionary && (this.err = n.inflateSetDictionary(this.strm, this.dictionary), this.err === t.Z_OK ? this.err = n.inflate(this.strm, this.flush) : this.err === t.Z_DATA_ERROR && (this.err = t.Z_NEED_DICT)); this.strm.avail_in > 0 && this.mode === t.GUNZIP && this.err === t.Z_STREAM_END && this.strm.next_in[0] !== 0; )
          this.reset(), this.err = n.inflate(this.strm, this.flush);
        break;
      default:
        throw new Error("Unknown mode " + this.mode);
    }
  }, l.prototype._checkError = function() {
    switch (this.err) {
      case t.Z_OK:
      case t.Z_BUF_ERROR:
        if (this.strm.avail_out !== 0 && this.flush === t.Z_FINISH)
          return this._error("unexpected end of file"), !1;
        break;
      case t.Z_STREAM_END:
        break;
      case t.Z_NEED_DICT:
        return this.dictionary == null ? this._error("Missing dictionary") : this._error("Bad dictionary"), !1;
      default:
        return this._error("Zlib error"), !1;
    }
    return !0;
  }, l.prototype._after = function() {
    if (this._checkError()) {
      var f = this.strm.avail_out, u = this.strm.avail_in;
      this.write_in_progress = !1, this.callback(u, f), this.pending_close && this.close();
    }
  }, l.prototype._error = function(f) {
    this.strm.msg && (f = this.strm.msg), this.onerror(
      f,
      this.err
      // no hope of rescue.
    ), this.write_in_progress = !1, this.pending_close && this.close();
  }, l.prototype.init = function(f, u, h, d, p) {
    e(arguments.length === 4 || arguments.length === 5, "init(windowBits, level, memLevel, strategy, [dictionary])"), e(f >= 8 && f <= 15, "invalid windowBits"), e(u >= -1 && u <= 9, "invalid compression level"), e(h >= 1 && h <= 9, "invalid memlevel"), e(d === t.Z_FILTERED || d === t.Z_HUFFMAN_ONLY || d === t.Z_RLE || d === t.Z_FIXED || d === t.Z_DEFAULT_STRATEGY, "invalid strategy"), this._init(u, f, h, d, p), this._setDictionary();
  }, l.prototype.params = function() {
    throw new Error("deflateParams Not supported");
  }, l.prototype.reset = function() {
    this._reset(), this._setDictionary();
  }, l.prototype._init = function(f, u, h, d, p) {
    switch (this.level = f, this.windowBits = u, this.memLevel = h, this.strategy = d, this.flush = t.Z_NO_FLUSH, this.err = t.Z_OK, (this.mode === t.GZIP || this.mode === t.GUNZIP) && (this.windowBits += 16), this.mode === t.UNZIP && (this.windowBits += 32), (this.mode === t.DEFLATERAW || this.mode === t.INFLATERAW) && (this.windowBits = -1 * this.windowBits), this.strm = new r(), this.mode) {
      case t.DEFLATE:
      case t.GZIP:
      case t.DEFLATERAW:
        this.err = i.deflateInit2(this.strm, this.level, t.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
        break;
      case t.INFLATE:
      case t.GUNZIP:
      case t.INFLATERAW:
      case t.UNZIP:
        this.err = n.inflateInit2(this.strm, this.windowBits);
        break;
      default:
        throw new Error("Unknown mode " + this.mode);
    }
    this.err !== t.Z_OK && this._error("Init error"), this.dictionary = p, this.write_in_progress = !1, this.init_done = !0;
  }, l.prototype._setDictionary = function() {
    if (this.dictionary != null) {
      switch (this.err = t.Z_OK, this.mode) {
        case t.DEFLATE:
        case t.DEFLATERAW:
          this.err = i.deflateSetDictionary(this.strm, this.dictionary);
          break;
      }
      this.err !== t.Z_OK && this._error("Failed to set dictionary");
    }
  }, l.prototype._reset = function() {
    switch (this.err = t.Z_OK, this.mode) {
      case t.DEFLATE:
      case t.DEFLATERAW:
      case t.GZIP:
        this.err = i.deflateReset(this.strm);
        break;
      case t.INFLATE:
      case t.INFLATERAW:
      case t.GUNZIP:
        this.err = n.inflateReset(this.strm);
        break;
    }
    this.err !== t.Z_OK && this._error("Failed to reset stream");
  }, t.Zlib = l;
})(c6);
var eT = /* @__PURE__ */ ol(OE);
(function(t) {
  var e = c2.Buffer, r = pC.Transform, i = c6, n = eT, a = v6.ok, s = c2.kMaxLength, o = "Cannot create final Buffer. It would be larger than 0x" + s.toString(16) + " bytes";
  i.Z_MIN_WINDOWBITS = 8, i.Z_MAX_WINDOWBITS = 15, i.Z_DEFAULT_WINDOWBITS = 15, i.Z_MIN_CHUNK = 64, i.Z_MAX_CHUNK = 1 / 0, i.Z_DEFAULT_CHUNK = 16 * 1024, i.Z_MIN_MEMLEVEL = 1, i.Z_MAX_MEMLEVEL = 9, i.Z_DEFAULT_MEMLEVEL = 8, i.Z_MIN_LEVEL = -1, i.Z_MAX_LEVEL = 9, i.Z_DEFAULT_LEVEL = i.Z_DEFAULT_COMPRESSION;
  for (var c = Object.keys(i), l = 0; l < c.length; l++) {
    var f = c[l];
    f.match(/^Z/) && Object.defineProperty(t, f, {
      enumerable: !0,
      value: i[f],
      writable: !1
    });
  }
  for (var u = {
    Z_OK: i.Z_OK,
    Z_STREAM_END: i.Z_STREAM_END,
    Z_NEED_DICT: i.Z_NEED_DICT,
    Z_ERRNO: i.Z_ERRNO,
    Z_STREAM_ERROR: i.Z_STREAM_ERROR,
    Z_DATA_ERROR: i.Z_DATA_ERROR,
    Z_MEM_ERROR: i.Z_MEM_ERROR,
    Z_BUF_ERROR: i.Z_BUF_ERROR,
    Z_VERSION_ERROR: i.Z_VERSION_ERROR
  }, h = Object.keys(u), d = 0; d < h.length; d++) {
    var p = h[d];
    u[u[p]] = p;
  }
  Object.defineProperty(t, "codes", {
    enumerable: !0,
    value: Object.freeze(u),
    writable: !1
  }), t.Deflate = A, t.Inflate = b, t.Gzip = x, t.Gunzip = _, t.DeflateRaw = v, t.InflateRaw = F, t.Unzip = S, t.createDeflate = function(w) {
    return new A(w);
  }, t.createInflate = function(w) {
    return new b(w);
  }, t.createDeflateRaw = function(w) {
    return new v(w);
  }, t.createInflateRaw = function(w) {
    return new F(w);
  }, t.createGzip = function(w) {
    return new x(w);
  }, t.createGunzip = function(w) {
    return new _(w);
  }, t.createUnzip = function(w) {
    return new S(w);
  }, t.deflate = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new A(k), w, z);
  }, t.deflateSync = function(w, k) {
    return C(new A(k), w);
  }, t.gzip = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new x(k), w, z);
  }, t.gzipSync = function(w, k) {
    return C(new x(k), w);
  }, t.deflateRaw = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new v(k), w, z);
  }, t.deflateRawSync = function(w, k) {
    return C(new v(k), w);
  }, t.unzip = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new S(k), w, z);
  }, t.unzipSync = function(w, k) {
    return C(new S(k), w);
  }, t.inflate = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new b(k), w, z);
  }, t.inflateSync = function(w, k) {
    return C(new b(k), w);
  }, t.gunzip = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new _(k), w, z);
  }, t.gunzipSync = function(w, k) {
    return C(new _(k), w);
  }, t.inflateRaw = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new F(k), w, z);
  }, t.inflateRawSync = function(w, k) {
    return C(new F(k), w);
  };
  function m(w, k, z) {
    var H = [], re = 0;
    w.on("error", X), w.on("end", oe), w.end(k), ie();
    function ie() {
      for (var ae; (ae = w.read()) !== null; )
        H.push(ae), re += ae.length;
      w.once("readable", ie);
    }
    function X(ae) {
      w.removeListener("end", oe), w.removeListener("readable", ie), z(ae);
    }
    function oe() {
      var ae, V = null;
      re >= s ? V = new RangeError(o) : ae = e.concat(H, re), H = [], w.close(), z(V, ae);
    }
  }
  function C(w, k) {
    if (typeof k == "string" && (k = e.from(k)), !e.isBuffer(k)) throw new TypeError("Not a string or buffer");
    var z = w._finishFlushFlag;
    return w._processChunk(k, z);
  }
  function A(w) {
    if (!(this instanceof A)) return new A(w);
    P.call(this, w, i.DEFLATE);
  }
  function b(w) {
    if (!(this instanceof b)) return new b(w);
    P.call(this, w, i.INFLATE);
  }
  function x(w) {
    if (!(this instanceof x)) return new x(w);
    P.call(this, w, i.GZIP);
  }
  function _(w) {
    if (!(this instanceof _)) return new _(w);
    P.call(this, w, i.GUNZIP);
  }
  function v(w) {
    if (!(this instanceof v)) return new v(w);
    P.call(this, w, i.DEFLATERAW);
  }
  function F(w) {
    if (!(this instanceof F)) return new F(w);
    P.call(this, w, i.INFLATERAW);
  }
  function S(w) {
    if (!(this instanceof S)) return new S(w);
    P.call(this, w, i.UNZIP);
  }
  function D(w) {
    return w === i.Z_NO_FLUSH || w === i.Z_PARTIAL_FLUSH || w === i.Z_SYNC_FLUSH || w === i.Z_FULL_FLUSH || w === i.Z_FINISH || w === i.Z_BLOCK;
  }
  function P(w, k) {
    var z = this;
    if (this._opts = w = w || {}, this._chunkSize = w.chunkSize || t.Z_DEFAULT_CHUNK, r.call(this, w), w.flush && !D(w.flush))
      throw new Error("Invalid flush flag: " + w.flush);
    if (w.finishFlush && !D(w.finishFlush))
      throw new Error("Invalid flush flag: " + w.finishFlush);
    if (this._flushFlag = w.flush || i.Z_NO_FLUSH, this._finishFlushFlag = typeof w.finishFlush < "u" ? w.finishFlush : i.Z_FINISH, w.chunkSize && (w.chunkSize < t.Z_MIN_CHUNK || w.chunkSize > t.Z_MAX_CHUNK))
      throw new Error("Invalid chunk size: " + w.chunkSize);
    if (w.windowBits && (w.windowBits < t.Z_MIN_WINDOWBITS || w.windowBits > t.Z_MAX_WINDOWBITS))
      throw new Error("Invalid windowBits: " + w.windowBits);
    if (w.level && (w.level < t.Z_MIN_LEVEL || w.level > t.Z_MAX_LEVEL))
      throw new Error("Invalid compression level: " + w.level);
    if (w.memLevel && (w.memLevel < t.Z_MIN_MEMLEVEL || w.memLevel > t.Z_MAX_MEMLEVEL))
      throw new Error("Invalid memLevel: " + w.memLevel);
    if (w.strategy && w.strategy != t.Z_FILTERED && w.strategy != t.Z_HUFFMAN_ONLY && w.strategy != t.Z_RLE && w.strategy != t.Z_FIXED && w.strategy != t.Z_DEFAULT_STRATEGY)
      throw new Error("Invalid strategy: " + w.strategy);
    if (w.dictionary && !e.isBuffer(w.dictionary))
      throw new Error("Invalid dictionary: it should be a Buffer instance");
    this._handle = new i.Zlib(k);
    var H = this;
    this._hadError = !1, this._handle.onerror = function(X, oe) {
      B(H), H._hadError = !0;
      var ae = new Error(X);
      ae.errno = oe, ae.code = t.codes[oe], H.emit("error", ae);
    };
    var re = t.Z_DEFAULT_COMPRESSION;
    typeof w.level == "number" && (re = w.level);
    var ie = t.Z_DEFAULT_STRATEGY;
    typeof w.strategy == "number" && (ie = w.strategy), this._handle.init(w.windowBits || t.Z_DEFAULT_WINDOWBITS, re, w.memLevel || t.Z_DEFAULT_MEMLEVEL, ie, w.dictionary), this._buffer = e.allocUnsafe(this._chunkSize), this._offset = 0, this._level = re, this._strategy = ie, this.once("end", this.close), Object.defineProperty(this, "_closed", {
      get: function() {
        return !z._handle;
      },
      configurable: !0,
      enumerable: !0
    });
  }
  n.inherits(P, r), P.prototype.params = function(w, k, z) {
    if (w < t.Z_MIN_LEVEL || w > t.Z_MAX_LEVEL)
      throw new RangeError("Invalid compression level: " + w);
    if (k != t.Z_FILTERED && k != t.Z_HUFFMAN_ONLY && k != t.Z_RLE && k != t.Z_FIXED && k != t.Z_DEFAULT_STRATEGY)
      throw new TypeError("Invalid strategy: " + k);
    if (this._level !== w || this._strategy !== k) {
      var H = this;
      this.flush(i.Z_SYNC_FLUSH, function() {
        a(H._handle, "zlib binding closed"), H._handle.params(w, k), H._hadError || (H._level = w, H._strategy = k, z && z());
      });
    } else
      _t.nextTick(z);
  }, P.prototype.reset = function() {
    return a(this._handle, "zlib binding closed"), this._handle.reset();
  }, P.prototype._flush = function(w) {
    this._transform(e.alloc(0), "", w);
  }, P.prototype.flush = function(w, k) {
    var z = this, H = this._writableState;
    (typeof w == "function" || w === void 0 && !k) && (k = w, w = i.Z_FULL_FLUSH), H.ended ? k && _t.nextTick(k) : H.ending ? k && this.once("end", k) : H.needDrain ? k && this.once("drain", function() {
      return z.flush(w, k);
    }) : (this._flushFlag = w, this.write(e.alloc(0), "", k));
  }, P.prototype.close = function(w) {
    B(this, w), _t.nextTick(I, this);
  };
  function B(w, k) {
    k && _t.nextTick(k), w._handle && (w._handle.close(), w._handle = null);
  }
  function I(w) {
    w.emit("close");
  }
  P.prototype._transform = function(w, k, z) {
    var H, re = this._writableState, ie = re.ending || re.ended, X = ie && (!w || re.length === w.length);
    if (w !== null && !e.isBuffer(w)) return z(new Error("invalid input"));
    if (!this._handle) return z(new Error("zlib binding closed"));
    X ? H = this._finishFlushFlag : (H = this._flushFlag, w.length >= re.length && (this._flushFlag = this._opts.flush || i.Z_NO_FLUSH)), this._processChunk(w, H, z);
  }, P.prototype._processChunk = function(w, k, z) {
    var H = w && w.length, re = this._chunkSize - this._offset, ie = 0, X = this, oe = typeof z == "function";
    if (!oe) {
      var ae = [], V = 0, Q;
      this.on("error", function(ze) {
        Q = ze;
      }), a(this._handle, "zlib binding closed");
      do
        var ne = this._handle.writeSync(
          k,
          w,
          // in
          ie,
          // in_off
          H,
          // in_len
          this._buffer,
          // out
          this._offset,
          //out_off
          re
        );
      while (!this._hadError && Ae(ne[0], ne[1]));
      if (this._hadError)
        throw Q;
      if (V >= s)
        throw B(this), new RangeError(o);
      var ee = e.concat(ae, V);
      return B(this), ee;
    }
    a(this._handle, "zlib binding closed");
    var Se = this._handle.write(
      k,
      w,
      // in
      ie,
      // in_off
      H,
      // in_len
      this._buffer,
      // out
      this._offset,
      //out_off
      re
    );
    Se.buffer = w, Se.callback = Ae;
    function Ae(ze, Z) {
      if (this && (this.buffer = null, this.callback = null), !X._hadError) {
        var K = re - Z;
        if (a(K >= 0, "have should not go down"), K > 0) {
          var G = X._buffer.slice(X._offset, X._offset + K);
          X._offset += K, oe ? X.push(G) : (ae.push(G), V += G.length);
        }
        if ((Z === 0 || X._offset >= X._chunkSize) && (re = X._chunkSize, X._offset = 0, X._buffer = e.allocUnsafe(X._chunkSize)), Z === 0) {
          if (ie += H - ze, H = ze, !oe) return !0;
          var Y = X._handle.write(k, w, ie, H, X._buffer, X._offset, X._chunkSize);
          Y.callback = Ae, Y.buffer = w;
          return;
        }
        if (!oe) return !1;
        z();
      }
    }
  }, n.inherits(A, P), n.inherits(b, P), n.inherits(x, P), n.inherits(_, P), n.inherits(v, P), n.inherits(F, P), n.inherits(S, P);
})(Hg);
var tT = /* @__PURE__ */ cE(Hg);
class rT {
  static decode(e, r) {
    throw new Error("PNG.decode not available in browser build");
  }
  static load(e) {
    throw new Error("PNG.load not available in browser build");
  }
  constructor(e) {
    let r;
    for (this.data = e, this.pos = 8, this.palette = [], this.imgData = [], this.transparency = {}, this.text = {}; ; ) {
      const c = this.readUInt32();
      let l = "";
      for (r = 0; r < 4; r++)
        l += String.fromCharCode(this.data[this.pos++]);
      switch (l) {
        case "IHDR":
          this.width = this.readUInt32(), this.height = this.readUInt32(), this.bits = this.data[this.pos++], this.colorType = this.data[this.pos++], this.compressionMethod = this.data[this.pos++], this.filterMethod = this.data[this.pos++], this.interlaceMethod = this.data[this.pos++];
          break;
        case "PLTE":
          this.palette = this.read(c);
          break;
        case "IDAT":
          for (r = 0; r < c; r++)
            this.imgData.push(this.data[this.pos++]);
          break;
        case "tRNS":
          switch (this.transparency = {}, this.colorType) {
            case 3:
              this.transparency.indexed = this.read(c);
              var i = 255 - this.transparency.indexed.length;
              if (i > 0)
                for (r = 0; r < i; r++)
                  this.transparency.indexed.push(255);
              break;
            case 0:
              this.transparency.grayscale = this.read(c)[0];
              break;
            case 2:
              this.transparency.rgb = this.read(c);
              break;
          }
          break;
        case "tEXt":
          var n = this.read(c), a = n.indexOf(0), s = String.fromCharCode.apply(String, n.slice(0, a));
          this.text[s] = String.fromCharCode.apply(String, n.slice(a + 1));
          break;
        case "IEND":
          switch (this.colorType) {
            case 0:
            case 3:
            case 4:
              this.colors = 1;
              break;
            case 2:
            case 6:
              this.colors = 3;
              break;
          }
          this.hasAlphaChannel = [4, 6].includes(this.colorType);
          var o = this.colors + (this.hasAlphaChannel ? 1 : 0);
          switch (this.pixelBitlength = this.bits * o, this.colors) {
            case 1:
              this.colorSpace = "DeviceGray";
              break;
            case 3:
              this.colorSpace = "DeviceRGB";
              break;
          }
          this.imgData = J.from(this.imgData);
          return;
        default:
          this.pos += c;
      }
      if (this.pos += 4, this.pos > this.data.length)
        throw new Error("Incomplete or corrupt PNG file");
    }
  }
  read(e) {
    const r = new Array(e);
    for (let i = 0; i < e; i++)
      r[i] = this.data[this.pos++];
    return r;
  }
  readUInt32() {
    const e = this.data[this.pos++] << 24, r = this.data[this.pos++] << 16, i = this.data[this.pos++] << 8, n = this.data[this.pos++];
    return e | r | i | n;
  }
  readUInt16() {
    const e = this.data[this.pos++] << 8, r = this.data[this.pos++];
    return e | r;
  }
  decodePixels(e) {
    return tT.inflate(this.imgData, (r, i) => {
      if (r) throw r;
      var n = 0;
      const {
        width: a,
        height: s
      } = this;
      var o = this.pixelBitlength / 8;
      const c = J.alloc(a * s * o);
      function l(f, u, h, d, p) {
        p === void 0 && (p = !1);
        const m = Math.ceil((a - f) / h), C = Math.ceil((s - u) / d), A = o * m, b = p ? c : J.alloc(A * C);
        let x = 0, _ = 0;
        for (; x < C && n < i.length; ) {
          var v, F, S, D, P;
          switch (i[n++]) {
            case 0:
              for (S = 0; S < A; S++)
                b[_++] = i[n++];
              break;
            case 1:
              for (S = 0; S < A; S++)
                v = i[n++], D = S < o ? 0 : b[_ - o], b[_++] = (v + D) % 256;
              break;
            case 2:
              for (S = 0; S < A; S++)
                v = i[n++], F = (S - S % o) / o, P = x && b[(x - 1) * A + F * o + S % o], b[_++] = (P + v) % 256;
              break;
            case 3:
              for (S = 0; S < A; S++)
                v = i[n++], F = (S - S % o) / o, D = S < o ? 0 : b[_ - o], P = x && b[(x - 1) * A + F * o + S % o], b[_++] = (v + Math.floor((D + P) / 2)) % 256;
              break;
            case 4:
              for (S = 0; S < A; S++) {
                var B, I;
                v = i[n++], F = (S - S % o) / o, D = S < o ? 0 : b[_ - o], x === 0 ? P = I = 0 : (P = b[(x - 1) * A + F * o + S % o], I = F && b[(x - 1) * A + (F - 1) * o + S % o]);
                const w = D + P - I, k = Math.abs(w - D), z = Math.abs(w - P), H = Math.abs(w - I);
                k <= z && k <= H ? B = D : z <= H ? B = P : B = I, b[_++] = (v + B) % 256;
              }
              break;
            default:
              throw new Error(`Invalid filter algorithm: ${i[n - 1]}`);
          }
          if (!p) {
            let w = ((u + x * d) * a + f) * o, k = x * A;
            for (S = 0; S < m; S++) {
              for (let z = 0; z < o; z++) c[w++] = b[k++];
              w += (h - 1) * o;
            }
          }
          x++;
        }
      }
      return this.interlaceMethod === 1 ? (l(0, 0, 8, 8), l(4, 0, 8, 8), l(0, 4, 4, 8), l(2, 0, 4, 4), l(0, 2, 2, 4), l(1, 0, 2, 2), l(0, 1, 1, 2)) : l(0, 0, 1, 1, !0), e(c);
    });
  }
  decodePalette() {
    const {
      palette: e
    } = this, {
      length: r
    } = e, i = this.transparency.indexed || [], n = J.alloc(i.length + r);
    let a = 0, s = 0;
    for (let c = 0; c < r; c += 3) {
      var o;
      n[a++] = e[c], n[a++] = e[c + 1], n[a++] = e[c + 2], n[a++] = (o = i[s++]) != null ? o : 255;
    }
    return n;
  }
  copyToImageData(e, r) {
    let i;
    var n;
    let {
      colors: a
    } = this, s = null, o = this.hasAlphaChannel;
    this.palette.length && (s = this._decodedPalette || (this._decodedPalette = this.decodePalette()), a = 4, o = !0);
    const c = e.data || e, {
      length: l
    } = c, f = s || r;
    let u = i = 0;
    if (a === 1)
      for (; u < l; ) {
        n = s ? r[u / 4] * 4 : i;
        const h = f[n++];
        c[u++] = h, c[u++] = h, c[u++] = h, c[u++] = o ? f[n++] : 255, i = n;
      }
    else
      for (; u < l; )
        n = s ? r[u / 4] * 4 : i, c[u++] = f[n++], c[u++] = f[n++], c[u++] = f[n++], c[u++] = o ? f[n++] : 255, i = n;
  }
  decode(e) {
    const r = J.alloc(this.width * this.height * 4);
    return this.decodePixels((i) => (this.copyToImageData(r, i), e(r)));
  }
}
var X6 = { exports: {} }, Uc = { exports: {} }, hd;
function pl() {
  return hd || (hd = 1, function(t, e) {
    (function(r, i) {
      t.exports = i($e());
    })(Pe, function(r) {
      return function(i) {
        var n = r, a = n.lib, s = a.Base, o = a.WordArray, c = n.x64 = {};
        c.Word = s.extend({
          /**
           * Initializes a newly created 64-bit word.
           *
           * @param {number} high The high 32 bits.
           * @param {number} low The low 32 bits.
           *
           * @example
           *
           *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);
           */
          init: function(l, f) {
            this.high = l, this.low = f;
          }
          /**
           * Bitwise NOTs this word.
           *
           * @return {X64Word} A new x64-Word object after negating.
           *
           * @example
           *
           *     var negated = x64Word.not();
           */
          // not: function () {
          // var high = ~this.high;
          // var low = ~this.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ANDs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to AND with this word.
           *
           * @return {X64Word} A new x64-Word object after ANDing.
           *
           * @example
           *
           *     var anded = x64Word.and(anotherX64Word);
           */
          // and: function (word) {
          // var high = this.high & word.high;
          // var low = this.low & word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise ORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to OR with this word.
           *
           * @return {X64Word} A new x64-Word object after ORing.
           *
           * @example
           *
           *     var ored = x64Word.or(anotherX64Word);
           */
          // or: function (word) {
          // var high = this.high | word.high;
          // var low = this.low | word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Bitwise XORs this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to XOR with this word.
           *
           * @return {X64Word} A new x64-Word object after XORing.
           *
           * @example
           *
           *     var xored = x64Word.xor(anotherX64Word);
           */
          // xor: function (word) {
          // var high = this.high ^ word.high;
          // var low = this.low ^ word.low;
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the left.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftL(25);
           */
          // shiftL: function (n) {
          // if (n < 32) {
          // var high = (this.high << n) | (this.low >>> (32 - n));
          // var low = this.low << n;
          // } else {
          // var high = this.low << (n - 32);
          // var low = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Shifts this word n bits to the right.
           *
           * @param {number} n The number of bits to shift.
           *
           * @return {X64Word} A new x64-Word object after shifting.
           *
           * @example
           *
           *     var shifted = x64Word.shiftR(7);
           */
          // shiftR: function (n) {
          // if (n < 32) {
          // var low = (this.low >>> n) | (this.high << (32 - n));
          // var high = this.high >>> n;
          // } else {
          // var low = this.high >>> (n - 32);
          // var high = 0;
          // }
          // return X64Word.create(high, low);
          // },
          /**
           * Rotates this word n bits to the left.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotL(25);
           */
          // rotL: function (n) {
          // return this.shiftL(n).or(this.shiftR(64 - n));
          // },
          /**
           * Rotates this word n bits to the right.
           *
           * @param {number} n The number of bits to rotate.
           *
           * @return {X64Word} A new x64-Word object after rotating.
           *
           * @example
           *
           *     var rotated = x64Word.rotR(7);
           */
          // rotR: function (n) {
          // return this.shiftR(n).or(this.shiftL(64 - n));
          // },
          /**
           * Adds this word with the passed word.
           *
           * @param {X64Word} word The x64-Word to add with this word.
           *
           * @return {X64Word} A new x64-Word object after adding.
           *
           * @example
           *
           *     var added = x64Word.add(anotherX64Word);
           */
          // add: function (word) {
          // var low = (this.low + word.low) | 0;
          // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;
          // var high = (this.high + word.high + carry) | 0;
          // return X64Word.create(high, low);
          // }
        }), c.WordArray = s.extend({
          /**
           * Initializes a newly created word array.
           *
           * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.
           * @param {number} sigBytes (Optional) The number of significant bytes in the words.
           *
           * @example
           *
           *     var wordArray = CryptoJS.x64.WordArray.create();
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ]);
           *
           *     var wordArray = CryptoJS.x64.WordArray.create([
           *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),
           *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)
           *     ], 10);
           */
          init: function(l, f) {
            l = this.words = l || [], f != i ? this.sigBytes = f : this.sigBytes = l.length * 8;
          },
          /**
           * Converts this 64-bit word array to a 32-bit word array.
           *
           * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.
           *
           * @example
           *
           *     var x32WordArray = x64WordArray.toX32();
           */
          toX32: function() {
            for (var l = this.words, f = l.length, u = [], h = 0; h < f; h++) {
              var d = l[h];
              u.push(d.high), u.push(d.low);
            }
            return o.create(u, this.sigBytes);
          },
          /**
           * Creates a copy of this word array.
           *
           * @return {X64WordArray} The clone.
           *
           * @example
           *
           *     var clone = x64WordArray.clone();
           */
          clone: function() {
            for (var l = s.clone.call(this), f = l.words = this.words.slice(0), u = f.length, h = 0; h < u; h++)
              f[h] = f[h].clone();
            return l;
          }
        });
      }(), r;
    });
  }(Uc)), Uc.exports;
}
var $c = { exports: {} }, dd;
function iT() {
  return dd || (dd = 1, function(t, e) {
    (function(r, i) {
      t.exports = i($e());
    })(Pe, function(r) {
      return function() {
        if (typeof ArrayBuffer == "function") {
          var i = r, n = i.lib, a = n.WordArray, s = a.init, o = a.init = function(c) {
            if (c instanceof ArrayBuffer && (c = new Uint8Array(c)), (c instanceof Int8Array || typeof Uint8ClampedArray < "u" && c instanceof Uint8ClampedArray || c instanceof Int16Array || c instanceof Uint16Array || c instanceof Int32Array || c instanceof Uint32Array || c instanceof Float32Array || c instanceof Float64Array) && (c = new Uint8Array(c.buffer, c.byteOffset, c.byteLength)), c instanceof Uint8Array) {
              for (var l = c.byteLength, f = [], u = 0; u < l; u++)
                f[u >>> 2] |= c[u] << 24 - u % 4 * 8;
              s.call(this, f, l);
            } else
              s.apply(this, arguments);
          };
          o.prototype = a;
        }
      }(), r.lib.WordArray;
    });
  }($c)), $c.exports;
}
var zc = { exports: {} }, gd;
function nT() {
  return gd || (gd = 1, function(t, e) {
    (function(r, i) {
      t.exports = i($e());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.WordArray, s = i.enc;
        s.Utf16 = s.Utf16BE = {
          /**
           * Converts a word array to a UTF-16 BE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 BE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);
           */
          stringify: function(c) {
            for (var l = c.words, f = c.sigBytes, u = [], h = 0; h < f; h += 2) {
              var d = l[h >>> 2] >>> 16 - h % 4 * 8 & 65535;
              u.push(String.fromCharCode(d));
            }
            return u.join("");
          },
          /**
           * Converts a UTF-16 BE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 BE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);
           */
          parse: function(c) {
            for (var l = c.length, f = [], u = 0; u < l; u++)
              f[u >>> 1] |= c.charCodeAt(u) << 16 - u % 2 * 16;
            return a.create(f, l * 2);
          }
        }, s.Utf16LE = {
          /**
           * Converts a word array to a UTF-16 LE string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The UTF-16 LE string.
           *
           * @static
           *
           * @example
           *
           *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);
           */
          stringify: function(c) {
            for (var l = c.words, f = c.sigBytes, u = [], h = 0; h < f; h += 2) {
              var d = o(l[h >>> 2] >>> 16 - h % 4 * 8 & 65535);
              u.push(String.fromCharCode(d));
            }
            return u.join("");
          },
          /**
           * Converts a UTF-16 LE string to a word array.
           *
           * @param {string} utf16Str The UTF-16 LE string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);
           */
          parse: function(c) {
            for (var l = c.length, f = [], u = 0; u < l; u++)
              f[u >>> 1] |= o(c.charCodeAt(u) << 16 - u % 2 * 16);
            return a.create(f, l * 2);
          }
        };
        function o(c) {
          return c << 8 & 4278255360 | c >>> 8 & 16711935;
        }
      }(), r.enc.Utf16;
    });
  }(zc)), zc.exports;
}
var Wc = { exports: {} }, pd;
function Ki() {
  return pd || (pd = 1, function(t, e) {
    (function(r, i) {
      t.exports = i($e());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.WordArray, s = i.enc;
        s.Base64 = {
          /**
           * Converts a word array to a Base64 string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @return {string} The Base64 string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
           */
          stringify: function(c) {
            var l = c.words, f = c.sigBytes, u = this._map;
            c.clamp();
            for (var h = [], d = 0; d < f; d += 3)
              for (var p = l[d >>> 2] >>> 24 - d % 4 * 8 & 255, m = l[d + 1 >>> 2] >>> 24 - (d + 1) % 4 * 8 & 255, C = l[d + 2 >>> 2] >>> 24 - (d + 2) % 4 * 8 & 255, A = p << 16 | m << 8 | C, b = 0; b < 4 && d + b * 0.75 < f; b++)
                h.push(u.charAt(A >>> 6 * (3 - b) & 63));
            var x = u.charAt(64);
            if (x)
              for (; h.length % 4; )
                h.push(x);
            return h.join("");
          },
          /**
           * Converts a Base64 string to a word array.
           *
           * @param {string} base64Str The Base64 string.
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
           */
          parse: function(c) {
            var l = c.length, f = this._map, u = this._reverseMap;
            if (!u) {
              u = this._reverseMap = [];
              for (var h = 0; h < f.length; h++)
                u[f.charCodeAt(h)] = h;
            }
            var d = f.charAt(64);
            if (d) {
              var p = c.indexOf(d);
              p !== -1 && (l = p);
            }
            return o(c, l, u);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function o(c, l, f) {
          for (var u = [], h = 0, d = 0; d < l; d++)
            if (d % 4) {
              var p = f[c.charCodeAt(d - 1)] << d % 4 * 2, m = f[c.charCodeAt(d)] >>> 6 - d % 4 * 2, C = p | m;
              u[h >>> 2] |= C << 24 - h % 4 * 8, h++;
            }
          return a.create(u, h);
        }
      }(), r.enc.Base64;
    });
  }(Wc)), Wc.exports;
}
var Hc = { exports: {} }, vd;
function aT() {
  return vd || (vd = 1, function(t, e) {
    (function(r, i) {
      t.exports = i($e());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.WordArray, s = i.enc;
        s.Base64url = {
          /**
           * Converts a word array to a Base64url string.
           *
           * @param {WordArray} wordArray The word array.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {string} The Base64url string.
           *
           * @static
           *
           * @example
           *
           *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);
           */
          stringify: function(c, l) {
            l === void 0 && (l = !0);
            var f = c.words, u = c.sigBytes, h = l ? this._safe_map : this._map;
            c.clamp();
            for (var d = [], p = 0; p < u; p += 3)
              for (var m = f[p >>> 2] >>> 24 - p % 4 * 8 & 255, C = f[p + 1 >>> 2] >>> 24 - (p + 1) % 4 * 8 & 255, A = f[p + 2 >>> 2] >>> 24 - (p + 2) % 4 * 8 & 255, b = m << 16 | C << 8 | A, x = 0; x < 4 && p + x * 0.75 < u; x++)
                d.push(h.charAt(b >>> 6 * (3 - x) & 63));
            var _ = h.charAt(64);
            if (_)
              for (; d.length % 4; )
                d.push(_);
            return d.join("");
          },
          /**
           * Converts a Base64url string to a word array.
           *
           * @param {string} base64Str The Base64url string.
           *
           * @param {boolean} urlSafe Whether to use url safe
           *
           * @return {WordArray} The word array.
           *
           * @static
           *
           * @example
           *
           *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);
           */
          parse: function(c, l) {
            l === void 0 && (l = !0);
            var f = c.length, u = l ? this._safe_map : this._map, h = this._reverseMap;
            if (!h) {
              h = this._reverseMap = [];
              for (var d = 0; d < u.length; d++)
                h[u.charCodeAt(d)] = d;
            }
            var p = u.charAt(64);
            if (p) {
              var m = c.indexOf(p);
              m !== -1 && (f = m);
            }
            return o(c, f, h);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function o(c, l, f) {
          for (var u = [], h = 0, d = 0; d < l; d++)
            if (d % 4) {
              var p = f[c.charCodeAt(d - 1)] << d % 4 * 2, m = f[c.charCodeAt(d)] >>> 6 - d % 4 * 2, C = p | m;
              u[h >>> 2] |= C << 24 - h % 4 * 8, h++;
            }
          return a.create(u, h);
        }
      }(), r.enc.Base64url;
    });
  }(Hc)), Hc.exports;
}
var qc = { exports: {} }, md;
function K6() {
  return md || (md = 1, function(t, e) {
    (function(r, i) {
      t.exports = i($e());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.WordArray, s = n.Hasher, o = i.algo, c = [], l = o.SHA1 = s.extend({
          _doReset: function() {
            this._hash = new a.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(f, u) {
            for (var h = this._hash.words, d = h[0], p = h[1], m = h[2], C = h[3], A = h[4], b = 0; b < 80; b++) {
              if (b < 16)
                c[b] = f[u + b] | 0;
              else {
                var x = c[b - 3] ^ c[b - 8] ^ c[b - 14] ^ c[b - 16];
                c[b] = x << 1 | x >>> 31;
              }
              var _ = (d << 5 | d >>> 27) + A + c[b];
              b < 20 ? _ += (p & m | ~p & C) + 1518500249 : b < 40 ? _ += (p ^ m ^ C) + 1859775393 : b < 60 ? _ += (p & m | p & C | m & C) - 1894007588 : _ += (p ^ m ^ C) - 899497514, A = C, C = m, m = p << 30 | p >>> 2, p = d, d = _;
            }
            h[0] = h[0] + d | 0, h[1] = h[1] + p | 0, h[2] = h[2] + m | 0, h[3] = h[3] + C | 0, h[4] = h[4] + A | 0;
          },
          _doFinalize: function() {
            var f = this._data, u = f.words, h = this._nDataBytes * 8, d = f.sigBytes * 8;
            return u[d >>> 5] |= 128 << 24 - d % 32, u[(d + 64 >>> 9 << 4) + 14] = Math.floor(h / 4294967296), u[(d + 64 >>> 9 << 4) + 15] = h, f.sigBytes = u.length * 4, this._process(), this._hash;
          },
          clone: function() {
            var f = s.clone.call(this);
            return f._hash = this._hash.clone(), f;
          }
        });
        i.SHA1 = s._createHelper(l), i.HmacSHA1 = s._createHmacHelper(l);
      }(), r.SHA1;
    });
  }(qc)), qc.exports;
}
var Vc = { exports: {} }, bd;
function mu() {
  return bd || (bd = 1, function(t, e) {
    (function(r, i) {
      t.exports = i($e());
    })(Pe, function(r) {
      return function(i) {
        var n = r, a = n.lib, s = a.WordArray, o = a.Hasher, c = n.algo, l = [], f = [];
        (function() {
          function d(A) {
            for (var b = i.sqrt(A), x = 2; x <= b; x++)
              if (!(A % x))
                return !1;
            return !0;
          }
          function p(A) {
            return (A - (A | 0)) * 4294967296 | 0;
          }
          for (var m = 2, C = 0; C < 64; )
            d(m) && (C < 8 && (l[C] = p(i.pow(m, 1 / 2))), f[C] = p(i.pow(m, 1 / 3)), C++), m++;
        })();
        var u = [], h = c.SHA256 = o.extend({
          _doReset: function() {
            this._hash = new s.init(l.slice(0));
          },
          _doProcessBlock: function(d, p) {
            for (var m = this._hash.words, C = m[0], A = m[1], b = m[2], x = m[3], _ = m[4], v = m[5], F = m[6], S = m[7], D = 0; D < 64; D++) {
              if (D < 16)
                u[D] = d[p + D] | 0;
              else {
                var P = u[D - 15], B = (P << 25 | P >>> 7) ^ (P << 14 | P >>> 18) ^ P >>> 3, I = u[D - 2], w = (I << 15 | I >>> 17) ^ (I << 13 | I >>> 19) ^ I >>> 10;
                u[D] = B + u[D - 7] + w + u[D - 16];
              }
              var k = _ & v ^ ~_ & F, z = C & A ^ C & b ^ A & b, H = (C << 30 | C >>> 2) ^ (C << 19 | C >>> 13) ^ (C << 10 | C >>> 22), re = (_ << 26 | _ >>> 6) ^ (_ << 21 | _ >>> 11) ^ (_ << 7 | _ >>> 25), ie = S + re + k + f[D] + u[D], X = H + z;
              S = F, F = v, v = _, _ = x + ie | 0, x = b, b = A, A = C, C = ie + X | 0;
            }
            m[0] = m[0] + C | 0, m[1] = m[1] + A | 0, m[2] = m[2] + b | 0, m[3] = m[3] + x | 0, m[4] = m[4] + _ | 0, m[5] = m[5] + v | 0, m[6] = m[6] + F | 0, m[7] = m[7] + S | 0;
          },
          _doFinalize: function() {
            var d = this._data, p = d.words, m = this._nDataBytes * 8, C = d.sigBytes * 8;
            return p[C >>> 5] |= 128 << 24 - C % 32, p[(C + 64 >>> 9 << 4) + 14] = i.floor(m / 4294967296), p[(C + 64 >>> 9 << 4) + 15] = m, d.sigBytes = p.length * 4, this._process(), this._hash;
          },
          clone: function() {
            var d = o.clone.call(this);
            return d._hash = this._hash.clone(), d;
          }
        });
        n.SHA256 = o._createHelper(h), n.HmacSHA256 = o._createHmacHelper(h);
      }(Math), r.SHA256;
    });
  }(Vc)), Vc.exports;
}
var Yc = { exports: {} }, xd;
function sT() {
  return xd || (xd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), mu());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.WordArray, s = i.algo, o = s.SHA256, c = s.SHA224 = o.extend({
          _doReset: function() {
            this._hash = new a.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var l = o._doFinalize.call(this);
            return l.sigBytes -= 4, l;
          }
        });
        i.SHA224 = o._createHelper(c), i.HmacSHA224 = o._createHmacHelper(c);
      }(), r.SHA224;
    });
  }(Yc)), Yc.exports;
}
var Gc = { exports: {} }, wd;
function J6() {
  return wd || (wd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), pl());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.Hasher, s = i.x64, o = s.Word, c = s.WordArray, l = i.algo;
        function f() {
          return o.create.apply(o, arguments);
        }
        var u = [
          f(1116352408, 3609767458),
          f(1899447441, 602891725),
          f(3049323471, 3964484399),
          f(3921009573, 2173295548),
          f(961987163, 4081628472),
          f(1508970993, 3053834265),
          f(2453635748, 2937671579),
          f(2870763221, 3664609560),
          f(3624381080, 2734883394),
          f(310598401, 1164996542),
          f(607225278, 1323610764),
          f(1426881987, 3590304994),
          f(1925078388, 4068182383),
          f(2162078206, 991336113),
          f(2614888103, 633803317),
          f(3248222580, 3479774868),
          f(3835390401, 2666613458),
          f(4022224774, 944711139),
          f(264347078, 2341262773),
          f(604807628, 2007800933),
          f(770255983, 1495990901),
          f(1249150122, 1856431235),
          f(1555081692, 3175218132),
          f(1996064986, 2198950837),
          f(2554220882, 3999719339),
          f(2821834349, 766784016),
          f(2952996808, 2566594879),
          f(3210313671, 3203337956),
          f(3336571891, 1034457026),
          f(3584528711, 2466948901),
          f(113926993, 3758326383),
          f(338241895, 168717936),
          f(666307205, 1188179964),
          f(773529912, 1546045734),
          f(1294757372, 1522805485),
          f(1396182291, 2643833823),
          f(1695183700, 2343527390),
          f(1986661051, 1014477480),
          f(2177026350, 1206759142),
          f(2456956037, 344077627),
          f(2730485921, 1290863460),
          f(2820302411, 3158454273),
          f(3259730800, 3505952657),
          f(3345764771, 106217008),
          f(3516065817, 3606008344),
          f(3600352804, 1432725776),
          f(4094571909, 1467031594),
          f(275423344, 851169720),
          f(430227734, 3100823752),
          f(506948616, 1363258195),
          f(659060556, 3750685593),
          f(883997877, 3785050280),
          f(958139571, 3318307427),
          f(1322822218, 3812723403),
          f(1537002063, 2003034995),
          f(1747873779, 3602036899),
          f(1955562222, 1575990012),
          f(2024104815, 1125592928),
          f(2227730452, 2716904306),
          f(2361852424, 442776044),
          f(2428436474, 593698344),
          f(2756734187, 3733110249),
          f(3204031479, 2999351573),
          f(3329325298, 3815920427),
          f(3391569614, 3928383900),
          f(3515267271, 566280711),
          f(3940187606, 3454069534),
          f(4118630271, 4000239992),
          f(116418474, 1914138554),
          f(174292421, 2731055270),
          f(289380356, 3203993006),
          f(460393269, 320620315),
          f(685471733, 587496836),
          f(852142971, 1086792851),
          f(1017036298, 365543100),
          f(1126000580, 2618297676),
          f(1288033470, 3409855158),
          f(1501505948, 4234509866),
          f(1607167915, 987167468),
          f(1816402316, 1246189591)
        ], h = [];
        (function() {
          for (var p = 0; p < 80; p++)
            h[p] = f();
        })();
        var d = l.SHA512 = a.extend({
          _doReset: function() {
            this._hash = new c.init([
              new o.init(1779033703, 4089235720),
              new o.init(3144134277, 2227873595),
              new o.init(1013904242, 4271175723),
              new o.init(2773480762, 1595750129),
              new o.init(1359893119, 2917565137),
              new o.init(2600822924, 725511199),
              new o.init(528734635, 4215389547),
              new o.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(p, m) {
            for (var C = this._hash.words, A = C[0], b = C[1], x = C[2], _ = C[3], v = C[4], F = C[5], S = C[6], D = C[7], P = A.high, B = A.low, I = b.high, w = b.low, k = x.high, z = x.low, H = _.high, re = _.low, ie = v.high, X = v.low, oe = F.high, ae = F.low, V = S.high, Q = S.low, ne = D.high, ee = D.low, Se = P, Ae = B, ze = I, Z = w, K = k, G = z, Y = H, de = re, he = ie, ue = X, pe = oe, Ee = ae, be = V, fe = Q, Ie = ne, o0 = ee, i0 = 0; i0 < 80; i0++) {
              var Re, e0, n0 = h[i0];
              if (i0 < 16)
                e0 = n0.high = p[m + i0 * 2] | 0, Re = n0.low = p[m + i0 * 2 + 1] | 0;
              else {
                var E0 = h[i0 - 15], p0 = E0.high, Ce = E0.low, Fl = (p0 >>> 1 | Ce << 31) ^ (p0 >>> 8 | Ce << 24) ^ p0 >>> 7, oi = (Ce >>> 1 | p0 << 31) ^ (Ce >>> 8 | p0 << 24) ^ (Ce >>> 7 | p0 << 25), g0 = h[i0 - 2], lr = g0.high, I0 = g0.low, Rt = (lr >>> 19 | I0 << 13) ^ (lr << 3 | I0 >>> 29) ^ lr >>> 6, V0 = (I0 >>> 19 | lr << 13) ^ (I0 << 3 | lr >>> 29) ^ (I0 >>> 6 | lr << 26), tn = h[i0 - 7], rn = tn.high, Sr = tn.low, Tr = h[i0 - 16], bs = Tr.high, Jn = Tr.low;
                Re = oi + Sr, e0 = Fl + rn + (Re >>> 0 < oi >>> 0 ? 1 : 0), Re = Re + V0, e0 = e0 + Rt + (Re >>> 0 < V0 >>> 0 ? 1 : 0), Re = Re + Jn, e0 = e0 + bs + (Re >>> 0 < Jn >>> 0 ? 1 : 0), n0.high = e0, n0.low = Re;
              }
              var xs = he & pe ^ ~he & be, li = ue & Ee ^ ~ue & fe, ws = Se & ze ^ Se & K ^ ze & K, ys = Ae & Z ^ Ae & G ^ Z & G, _s = (Se >>> 28 | Ae << 4) ^ (Se << 30 | Ae >>> 2) ^ (Se << 25 | Ae >>> 7), Qn = (Ae >>> 28 | Se << 4) ^ (Ae << 30 | Se >>> 2) ^ (Ae << 25 | Se >>> 7), ea = (he >>> 14 | ue << 18) ^ (he >>> 18 | ue << 14) ^ (he << 23 | ue >>> 9), As = (ue >>> 14 | he << 18) ^ (ue >>> 18 | he << 14) ^ (ue << 23 | he >>> 9), ta = u[i0], ra = ta.high, ia = ta.low, C0 = o0 + As, lt = Ie + ea + (C0 >>> 0 < o0 >>> 0 ? 1 : 0), C0 = C0 + li, lt = lt + xs + (C0 >>> 0 < li >>> 0 ? 1 : 0), C0 = C0 + ia, lt = lt + ra + (C0 >>> 0 < ia >>> 0 ? 1 : 0), C0 = C0 + Re, lt = lt + e0 + (C0 >>> 0 < Re >>> 0 ? 1 : 0), cr = Qn + ys, na = _s + ws + (cr >>> 0 < Qn >>> 0 ? 1 : 0);
              Ie = be, o0 = fe, be = pe, fe = Ee, pe = he, Ee = ue, ue = de + C0 | 0, he = Y + lt + (ue >>> 0 < de >>> 0 ? 1 : 0) | 0, Y = K, de = G, K = ze, G = Z, ze = Se, Z = Ae, Ae = C0 + cr | 0, Se = lt + na + (Ae >>> 0 < C0 >>> 0 ? 1 : 0) | 0;
            }
            B = A.low = B + Ae, A.high = P + Se + (B >>> 0 < Ae >>> 0 ? 1 : 0), w = b.low = w + Z, b.high = I + ze + (w >>> 0 < Z >>> 0 ? 1 : 0), z = x.low = z + G, x.high = k + K + (z >>> 0 < G >>> 0 ? 1 : 0), re = _.low = re + de, _.high = H + Y + (re >>> 0 < de >>> 0 ? 1 : 0), X = v.low = X + ue, v.high = ie + he + (X >>> 0 < ue >>> 0 ? 1 : 0), ae = F.low = ae + Ee, F.high = oe + pe + (ae >>> 0 < Ee >>> 0 ? 1 : 0), Q = S.low = Q + fe, S.high = V + be + (Q >>> 0 < fe >>> 0 ? 1 : 0), ee = D.low = ee + o0, D.high = ne + Ie + (ee >>> 0 < o0 >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var p = this._data, m = p.words, C = this._nDataBytes * 8, A = p.sigBytes * 8;
            m[A >>> 5] |= 128 << 24 - A % 32, m[(A + 128 >>> 10 << 5) + 30] = Math.floor(C / 4294967296), m[(A + 128 >>> 10 << 5) + 31] = C, p.sigBytes = m.length * 4, this._process();
            var b = this._hash.toX32();
            return b;
          },
          clone: function() {
            var p = a.clone.call(this);
            return p._hash = this._hash.clone(), p;
          },
          blockSize: 1024 / 32
        });
        i.SHA512 = a._createHelper(d), i.HmacSHA512 = a._createHmacHelper(d);
      }(), r.SHA512;
    });
  }(Gc)), Gc.exports;
}
var Zc = { exports: {} }, yd;
function oT() {
  return yd || (yd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), pl(), J6());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.x64, a = n.Word, s = n.WordArray, o = i.algo, c = o.SHA512, l = o.SHA384 = c.extend({
          _doReset: function() {
            this._hash = new s.init([
              new a.init(3418070365, 3238371032),
              new a.init(1654270250, 914150663),
              new a.init(2438529370, 812702999),
              new a.init(355462360, 4144912697),
              new a.init(1731405415, 4290775857),
              new a.init(2394180231, 1750603025),
              new a.init(3675008525, 1694076839),
              new a.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var f = c._doFinalize.call(this);
            return f.sigBytes -= 16, f;
          }
        });
        i.SHA384 = c._createHelper(l), i.HmacSHA384 = c._createHmacHelper(l);
      }(), r.SHA384;
    });
  }(Zc)), Zc.exports;
}
var jc = { exports: {} }, _d;
function lT() {
  return _d || (_d = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), pl());
    })(Pe, function(r) {
      return function(i) {
        var n = r, a = n.lib, s = a.WordArray, o = a.Hasher, c = n.x64, l = c.Word, f = n.algo, u = [], h = [], d = [];
        (function() {
          for (var C = 1, A = 0, b = 0; b < 24; b++) {
            u[C + 5 * A] = (b + 1) * (b + 2) / 2 % 64;
            var x = A % 5, _ = (2 * C + 3 * A) % 5;
            C = x, A = _;
          }
          for (var C = 0; C < 5; C++)
            for (var A = 0; A < 5; A++)
              h[C + 5 * A] = A + (2 * C + 3 * A) % 5 * 5;
          for (var v = 1, F = 0; F < 24; F++) {
            for (var S = 0, D = 0, P = 0; P < 7; P++) {
              if (v & 1) {
                var B = (1 << P) - 1;
                B < 32 ? D ^= 1 << B : S ^= 1 << B - 32;
              }
              v & 128 ? v = v << 1 ^ 113 : v <<= 1;
            }
            d[F] = l.create(S, D);
          }
        })();
        var p = [];
        (function() {
          for (var C = 0; C < 25; C++)
            p[C] = l.create();
        })();
        var m = f.SHA3 = o.extend({
          /**
           * Configuration options.
           *
           * @property {number} outputLength
           *   The desired number of bits in the output hash.
           *   Only values permitted are: 224, 256, 384, 512.
           *   Default: 512
           */
          cfg: o.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            for (var C = this._state = [], A = 0; A < 25; A++)
              C[A] = new l.init();
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(C, A) {
            for (var b = this._state, x = this.blockSize / 2, _ = 0; _ < x; _++) {
              var v = C[A + 2 * _], F = C[A + 2 * _ + 1];
              v = (v << 8 | v >>> 24) & 16711935 | (v << 24 | v >>> 8) & 4278255360, F = (F << 8 | F >>> 24) & 16711935 | (F << 24 | F >>> 8) & 4278255360;
              var S = b[_];
              S.high ^= F, S.low ^= v;
            }
            for (var D = 0; D < 24; D++) {
              for (var P = 0; P < 5; P++) {
                for (var B = 0, I = 0, w = 0; w < 5; w++) {
                  var S = b[P + 5 * w];
                  B ^= S.high, I ^= S.low;
                }
                var k = p[P];
                k.high = B, k.low = I;
              }
              for (var P = 0; P < 5; P++)
                for (var z = p[(P + 4) % 5], H = p[(P + 1) % 5], re = H.high, ie = H.low, B = z.high ^ (re << 1 | ie >>> 31), I = z.low ^ (ie << 1 | re >>> 31), w = 0; w < 5; w++) {
                  var S = b[P + 5 * w];
                  S.high ^= B, S.low ^= I;
                }
              for (var X = 1; X < 25; X++) {
                var B, I, S = b[X], oe = S.high, ae = S.low, V = u[X];
                V < 32 ? (B = oe << V | ae >>> 32 - V, I = ae << V | oe >>> 32 - V) : (B = ae << V - 32 | oe >>> 64 - V, I = oe << V - 32 | ae >>> 64 - V);
                var Q = p[h[X]];
                Q.high = B, Q.low = I;
              }
              var ne = p[0], ee = b[0];
              ne.high = ee.high, ne.low = ee.low;
              for (var P = 0; P < 5; P++)
                for (var w = 0; w < 5; w++) {
                  var X = P + 5 * w, S = b[X], Se = p[X], Ae = p[(P + 1) % 5 + 5 * w], ze = p[(P + 2) % 5 + 5 * w];
                  S.high = Se.high ^ ~Ae.high & ze.high, S.low = Se.low ^ ~Ae.low & ze.low;
                }
              var S = b[0], Z = d[D];
              S.high ^= Z.high, S.low ^= Z.low;
            }
          },
          _doFinalize: function() {
            var C = this._data, A = C.words;
            this._nDataBytes * 8;
            var b = C.sigBytes * 8, x = this.blockSize * 32;
            A[b >>> 5] |= 1 << 24 - b % 32, A[(i.ceil((b + 1) / x) * x >>> 5) - 1] |= 128, C.sigBytes = A.length * 4, this._process();
            for (var _ = this._state, v = this.cfg.outputLength / 8, F = v / 8, S = [], D = 0; D < F; D++) {
              var P = _[D], B = P.high, I = P.low;
              B = (B << 8 | B >>> 24) & 16711935 | (B << 24 | B >>> 8) & 4278255360, I = (I << 8 | I >>> 24) & 16711935 | (I << 24 | I >>> 8) & 4278255360, S.push(I), S.push(B);
            }
            return new s.init(S, v);
          },
          clone: function() {
            for (var C = o.clone.call(this), A = C._state = this._state.slice(0), b = 0; b < 25; b++)
              A[b] = A[b].clone();
            return C;
          }
        });
        n.SHA3 = o._createHelper(m), n.HmacSHA3 = o._createHmacHelper(m);
      }(Math), r.SHA3;
    });
  }(jc)), jc.exports;
}
var Xc = { exports: {} }, Ad;
function cT() {
  return Ad || (Ad = 1, function(t, e) {
    (function(r, i) {
      t.exports = i($e());
    })(Pe, function(r) {
      /** @preserve
      			(c) 2012 by Cédric Mesnil. All rights reserved.
      
      			Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
      
      			    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
      			    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
      
      			THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
      			*/
      return function(i) {
        var n = r, a = n.lib, s = a.WordArray, o = a.Hasher, c = n.algo, l = s.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]), f = s.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]), u = s.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]), h = s.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]), d = s.create([0, 1518500249, 1859775393, 2400959708, 2840853838]), p = s.create([1352829926, 1548603684, 1836072691, 2053994217, 0]), m = c.RIPEMD160 = o.extend({
          _doReset: function() {
            this._hash = s.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(F, S) {
            for (var D = 0; D < 16; D++) {
              var P = S + D, B = F[P];
              F[P] = (B << 8 | B >>> 24) & 16711935 | (B << 24 | B >>> 8) & 4278255360;
            }
            var I = this._hash.words, w = d.words, k = p.words, z = l.words, H = f.words, re = u.words, ie = h.words, X, oe, ae, V, Q, ne, ee, Se, Ae, ze;
            ne = X = I[0], ee = oe = I[1], Se = ae = I[2], Ae = V = I[3], ze = Q = I[4];
            for (var Z, D = 0; D < 80; D += 1)
              Z = X + F[S + z[D]] | 0, D < 16 ? Z += C(oe, ae, V) + w[0] : D < 32 ? Z += A(oe, ae, V) + w[1] : D < 48 ? Z += b(oe, ae, V) + w[2] : D < 64 ? Z += x(oe, ae, V) + w[3] : Z += _(oe, ae, V) + w[4], Z = Z | 0, Z = v(Z, re[D]), Z = Z + Q | 0, X = Q, Q = V, V = v(ae, 10), ae = oe, oe = Z, Z = ne + F[S + H[D]] | 0, D < 16 ? Z += _(ee, Se, Ae) + k[0] : D < 32 ? Z += x(ee, Se, Ae) + k[1] : D < 48 ? Z += b(ee, Se, Ae) + k[2] : D < 64 ? Z += A(ee, Se, Ae) + k[3] : Z += C(ee, Se, Ae) + k[4], Z = Z | 0, Z = v(Z, ie[D]), Z = Z + ze | 0, ne = ze, ze = Ae, Ae = v(Se, 10), Se = ee, ee = Z;
            Z = I[1] + ae + Ae | 0, I[1] = I[2] + V + ze | 0, I[2] = I[3] + Q + ne | 0, I[3] = I[4] + X + ee | 0, I[4] = I[0] + oe + Se | 0, I[0] = Z;
          },
          _doFinalize: function() {
            var F = this._data, S = F.words, D = this._nDataBytes * 8, P = F.sigBytes * 8;
            S[P >>> 5] |= 128 << 24 - P % 32, S[(P + 64 >>> 9 << 4) + 14] = (D << 8 | D >>> 24) & 16711935 | (D << 24 | D >>> 8) & 4278255360, F.sigBytes = (S.length + 1) * 4, this._process();
            for (var B = this._hash, I = B.words, w = 0; w < 5; w++) {
              var k = I[w];
              I[w] = (k << 8 | k >>> 24) & 16711935 | (k << 24 | k >>> 8) & 4278255360;
            }
            return B;
          },
          clone: function() {
            var F = o.clone.call(this);
            return F._hash = this._hash.clone(), F;
          }
        });
        function C(F, S, D) {
          return F ^ S ^ D;
        }
        function A(F, S, D) {
          return F & S | ~F & D;
        }
        function b(F, S, D) {
          return (F | ~S) ^ D;
        }
        function x(F, S, D) {
          return F & D | S & ~D;
        }
        function _(F, S, D) {
          return F ^ (S | ~D);
        }
        function v(F, S) {
          return F << S | F >>> 32 - S;
        }
        n.RIPEMD160 = o._createHelper(m), n.HmacRIPEMD160 = o._createHmacHelper(m);
      }(), r.RIPEMD160;
    });
  }(Xc)), Xc.exports;
}
var Kc = { exports: {} }, Ed;
function bu() {
  return Ed || (Ed = 1, function(t, e) {
    (function(r, i) {
      t.exports = i($e());
    })(Pe, function(r) {
      (function() {
        var i = r, n = i.lib, a = n.Base, s = i.enc, o = s.Utf8, c = i.algo;
        c.HMAC = a.extend({
          /**
           * Initializes a newly created HMAC.
           *
           * @param {Hasher} hasher The hash algorithm to use.
           * @param {WordArray|string} key The secret key.
           *
           * @example
           *
           *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
           */
          init: function(l, f) {
            l = this._hasher = new l.init(), typeof f == "string" && (f = o.parse(f));
            var u = l.blockSize, h = u * 4;
            f.sigBytes > h && (f = l.finalize(f)), f.clamp();
            for (var d = this._oKey = f.clone(), p = this._iKey = f.clone(), m = d.words, C = p.words, A = 0; A < u; A++)
              m[A] ^= 1549556828, C[A] ^= 909522486;
            d.sigBytes = p.sigBytes = h, this.reset();
          },
          /**
           * Resets this HMAC to its initial state.
           *
           * @example
           *
           *     hmacHasher.reset();
           */
          reset: function() {
            var l = this._hasher;
            l.reset(), l.update(this._iKey);
          },
          /**
           * Updates this HMAC with a message.
           *
           * @param {WordArray|string} messageUpdate The message to append.
           *
           * @return {HMAC} This HMAC instance.
           *
           * @example
           *
           *     hmacHasher.update('message');
           *     hmacHasher.update(wordArray);
           */
          update: function(l) {
            return this._hasher.update(l), this;
          },
          /**
           * Finalizes the HMAC computation.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} messageUpdate (Optional) A final message update.
           *
           * @return {WordArray} The HMAC.
           *
           * @example
           *
           *     var hmac = hmacHasher.finalize();
           *     var hmac = hmacHasher.finalize('message');
           *     var hmac = hmacHasher.finalize(wordArray);
           */
          finalize: function(l) {
            var f = this._hasher, u = f.finalize(l);
            f.reset();
            var h = f.finalize(this._oKey.clone().concat(u));
            return h;
          }
        });
      })();
    });
  }(Kc)), Kc.exports;
}
var Jc = { exports: {} }, Cd;
function fT() {
  return Cd || (Cd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), mu(), bu());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.Base, s = n.WordArray, o = i.algo, c = o.SHA256, l = o.HMAC, f = o.PBKDF2 = a.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hasher to use. Default: SHA256
           * @property {number} iterations The number of iterations to perform. Default: 250000
           */
          cfg: a.extend({
            keySize: 128 / 32,
            hasher: c,
            iterations: 25e4
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.PBKDF2.create();
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });
           */
          init: function(u) {
            this.cfg = this.cfg.extend(u);
          },
          /**
           * Computes the Password-Based Key Derivation Function 2.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(u, h) {
            for (var d = this.cfg, p = l.create(d.hasher, u), m = s.create(), C = s.create([1]), A = m.words, b = C.words, x = d.keySize, _ = d.iterations; A.length < x; ) {
              var v = p.update(h).finalize(C);
              p.reset();
              for (var F = v.words, S = F.length, D = v, P = 1; P < _; P++) {
                D = p.finalize(D), p.reset();
                for (var B = D.words, I = 0; I < S; I++)
                  F[I] ^= B[I];
              }
              m.concat(v), b[0]++;
            }
            return m.sigBytes = x * 4, m;
          }
        });
        i.PBKDF2 = function(u, h, d) {
          return f.create(d).compute(u, h);
        };
      }(), r.PBKDF2;
    });
  }(Jc)), Jc.exports;
}
var Qc = { exports: {} }, Sd;
function ai() {
  return Sd || (Sd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), K6(), bu());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.Base, s = n.WordArray, o = i.algo, c = o.MD5, l = o.EvpKDF = a.extend({
          /**
           * Configuration options.
           *
           * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)
           * @property {Hasher} hasher The hash algorithm to use. Default: MD5
           * @property {number} iterations The number of iterations to perform. Default: 1
           */
          cfg: a.extend({
            keySize: 128 / 32,
            hasher: c,
            iterations: 1
          }),
          /**
           * Initializes a newly created key derivation function.
           *
           * @param {Object} cfg (Optional) The configuration options to use for the derivation.
           *
           * @example
           *
           *     var kdf = CryptoJS.algo.EvpKDF.create();
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });
           *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });
           */
          init: function(f) {
            this.cfg = this.cfg.extend(f);
          },
          /**
           * Derives a key from a password.
           *
           * @param {WordArray|string} password The password.
           * @param {WordArray|string} salt A salt.
           *
           * @return {WordArray} The derived key.
           *
           * @example
           *
           *     var key = kdf.compute(password, salt);
           */
          compute: function(f, u) {
            for (var h, d = this.cfg, p = d.hasher.create(), m = s.create(), C = m.words, A = d.keySize, b = d.iterations; C.length < A; ) {
              h && p.update(h), h = p.update(f).finalize(u), p.reset();
              for (var x = 1; x < b; x++)
                h = p.finalize(h), p.reset();
              m.concat(h);
            }
            return m.sigBytes = A * 4, m;
          }
        });
        i.EvpKDF = function(f, u, h) {
          return l.create(h).compute(f, u);
        };
      }(), r.EvpKDF;
    });
  }(Qc)), Qc.exports;
}
var e1 = { exports: {} }, Td;
function _0() {
  return Td || (Td = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), ai());
    })(Pe, function(r) {
      r.lib.Cipher || function(i) {
        var n = r, a = n.lib, s = a.Base, o = a.WordArray, c = a.BufferedBlockAlgorithm, l = n.enc;
        l.Utf8;
        var f = l.Base64, u = n.algo, h = u.EvpKDF, d = a.Cipher = c.extend({
          /**
           * Configuration options.
           *
           * @property {WordArray} iv The IV to use for this operation.
           */
          cfg: s.extend(),
          /**
           * Creates this cipher in encryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });
           */
          createEncryptor: function(B, I) {
            return this.create(this._ENC_XFORM_MODE, B, I);
          },
          /**
           * Creates this cipher in decryption mode.
           *
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {Cipher} A cipher instance.
           *
           * @static
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });
           */
          createDecryptor: function(B, I) {
            return this.create(this._DEC_XFORM_MODE, B, I);
          },
          /**
           * Initializes a newly created cipher.
           *
           * @param {number} xformMode Either the encryption or decryption transormation mode constant.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @example
           *
           *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });
           */
          init: function(B, I, w) {
            this.cfg = this.cfg.extend(w), this._xformMode = B, this._key = I, this.reset();
          },
          /**
           * Resets this cipher to its initial state.
           *
           * @example
           *
           *     cipher.reset();
           */
          reset: function() {
            c.reset.call(this), this._doReset();
          },
          /**
           * Adds data to be encrypted or decrypted.
           *
           * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.
           *
           * @return {WordArray} The data after processing.
           *
           * @example
           *
           *     var encrypted = cipher.process('data');
           *     var encrypted = cipher.process(wordArray);
           */
          process: function(B) {
            return this._append(B), this._process();
          },
          /**
           * Finalizes the encryption or decryption process.
           * Note that the finalize operation is effectively a destructive, read-once operation.
           *
           * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.
           *
           * @return {WordArray} The data after final processing.
           *
           * @example
           *
           *     var encrypted = cipher.finalize();
           *     var encrypted = cipher.finalize('data');
           *     var encrypted = cipher.finalize(wordArray);
           */
          finalize: function(B) {
            B && this._append(B);
            var I = this._doFinalize();
            return I;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          /**
           * Creates shortcut functions to a cipher's object interface.
           *
           * @param {Cipher} cipher The cipher to create a helper for.
           *
           * @return {Object} An object with encrypt and decrypt shortcut functions.
           *
           * @static
           *
           * @example
           *
           *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);
           */
          _createHelper: /* @__PURE__ */ function() {
            function B(I) {
              return typeof I == "string" ? P : F;
            }
            return function(I) {
              return {
                encrypt: function(w, k, z) {
                  return B(k).encrypt(I, w, k, z);
                },
                decrypt: function(w, k, z) {
                  return B(k).decrypt(I, w, k, z);
                }
              };
            };
          }()
        });
        a.StreamCipher = d.extend({
          _doFinalize: function() {
            var B = this._process(!0);
            return B;
          },
          blockSize: 1
        });
        var p = n.mode = {}, m = a.BlockCipherMode = s.extend({
          /**
           * Creates this mode for encryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);
           */
          createEncryptor: function(B, I) {
            return this.Encryptor.create(B, I);
          },
          /**
           * Creates this mode for decryption.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @static
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);
           */
          createDecryptor: function(B, I) {
            return this.Decryptor.create(B, I);
          },
          /**
           * Initializes a newly created mode.
           *
           * @param {Cipher} cipher A block cipher instance.
           * @param {Array} iv The IV words.
           *
           * @example
           *
           *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);
           */
          init: function(B, I) {
            this._cipher = B, this._iv = I;
          }
        }), C = p.CBC = function() {
          var B = m.extend();
          B.Encryptor = B.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(w, k) {
              var z = this._cipher, H = z.blockSize;
              I.call(this, w, k, H), z.encryptBlock(w, k), this._prevBlock = w.slice(k, k + H);
            }
          }), B.Decryptor = B.extend({
            /**
             * Processes the data block at offset.
             *
             * @param {Array} words The data words to operate on.
             * @param {number} offset The offset where the block starts.
             *
             * @example
             *
             *     mode.processBlock(data.words, offset);
             */
            processBlock: function(w, k) {
              var z = this._cipher, H = z.blockSize, re = w.slice(k, k + H);
              z.decryptBlock(w, k), I.call(this, w, k, H), this._prevBlock = re;
            }
          });
          function I(w, k, z) {
            var H, re = this._iv;
            re ? (H = re, this._iv = i) : H = this._prevBlock;
            for (var ie = 0; ie < z; ie++)
              w[k + ie] ^= H[ie];
          }
          return B;
        }(), A = n.pad = {}, b = A.Pkcs7 = {
          /**
           * Pads data using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to pad.
           * @param {number} blockSize The multiple that the data should be padded to.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);
           */
          pad: function(B, I) {
            for (var w = I * 4, k = w - B.sigBytes % w, z = k << 24 | k << 16 | k << 8 | k, H = [], re = 0; re < k; re += 4)
              H.push(z);
            var ie = o.create(H, k);
            B.concat(ie);
          },
          /**
           * Unpads data that had been padded using the algorithm defined in PKCS #5/7.
           *
           * @param {WordArray} data The data to unpad.
           *
           * @static
           *
           * @example
           *
           *     CryptoJS.pad.Pkcs7.unpad(wordArray);
           */
          unpad: function(B) {
            var I = B.words[B.sigBytes - 1 >>> 2] & 255;
            B.sigBytes -= I;
          }
        };
        a.BlockCipher = d.extend({
          /**
           * Configuration options.
           *
           * @property {Mode} mode The block mode to use. Default: CBC
           * @property {Padding} padding The padding strategy to use. Default: Pkcs7
           */
          cfg: d.cfg.extend({
            mode: C,
            padding: b
          }),
          reset: function() {
            var B;
            d.reset.call(this);
            var I = this.cfg, w = I.iv, k = I.mode;
            this._xformMode == this._ENC_XFORM_MODE ? B = k.createEncryptor : (B = k.createDecryptor, this._minBufferSize = 1), this._mode && this._mode.__creator == B ? this._mode.init(this, w && w.words) : (this._mode = B.call(k, this, w && w.words), this._mode.__creator = B);
          },
          _doProcessBlock: function(B, I) {
            this._mode.processBlock(B, I);
          },
          _doFinalize: function() {
            var B, I = this.cfg.padding;
            return this._xformMode == this._ENC_XFORM_MODE ? (I.pad(this._data, this.blockSize), B = this._process(!0)) : (B = this._process(!0), I.unpad(B)), B;
          },
          blockSize: 128 / 32
        });
        var x = a.CipherParams = s.extend({
          /**
           * Initializes a newly created cipher params object.
           *
           * @param {Object} cipherParams An object with any of the possible cipher parameters.
           *
           * @example
           *
           *     var cipherParams = CryptoJS.lib.CipherParams.create({
           *         ciphertext: ciphertextWordArray,
           *         key: keyWordArray,
           *         iv: ivWordArray,
           *         salt: saltWordArray,
           *         algorithm: CryptoJS.algo.AES,
           *         mode: CryptoJS.mode.CBC,
           *         padding: CryptoJS.pad.PKCS7,
           *         blockSize: 4,
           *         formatter: CryptoJS.format.OpenSSL
           *     });
           */
          init: function(B) {
            this.mixIn(B);
          },
          /**
           * Converts this cipher params object to a string.
           *
           * @param {Format} formatter (Optional) The formatting strategy to use.
           *
           * @return {string} The stringified cipher params.
           *
           * @throws Error If neither the formatter nor the default formatter is set.
           *
           * @example
           *
           *     var string = cipherParams + '';
           *     var string = cipherParams.toString();
           *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);
           */
          toString: function(B) {
            return (B || this.formatter).stringify(this);
          }
        }), _ = n.format = {}, v = _.OpenSSL = {
          /**
           * Converts a cipher params object to an OpenSSL-compatible string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The OpenSSL-compatible string.
           *
           * @static
           *
           * @example
           *
           *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);
           */
          stringify: function(B) {
            var I, w = B.ciphertext, k = B.salt;
            return k ? I = o.create([1398893684, 1701076831]).concat(k).concat(w) : I = w, I.toString(f);
          },
          /**
           * Converts an OpenSSL-compatible string to a cipher params object.
           *
           * @param {string} openSSLStr The OpenSSL-compatible string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);
           */
          parse: function(B) {
            var I, w = f.parse(B), k = w.words;
            return k[0] == 1398893684 && k[1] == 1701076831 && (I = o.create(k.slice(2, 4)), k.splice(0, 4), w.sigBytes -= 16), x.create({ ciphertext: w, salt: I });
          }
        }, F = a.SerializableCipher = s.extend({
          /**
           * Configuration options.
           *
           * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL
           */
          cfg: s.extend({
            format: v
          }),
          /**
           * Encrypts a message.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(B, I, w, k) {
            k = this.cfg.extend(k);
            var z = B.createEncryptor(w, k), H = z.finalize(I), re = z.cfg;
            return x.create({
              ciphertext: H,
              key: w,
              iv: re.iv,
              algorithm: B,
              mode: re.mode,
              padding: re.padding,
              blockSize: B.blockSize,
              formatter: k.format
            });
          },
          /**
           * Decrypts serialized ciphertext.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {WordArray} key The key.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(B, I, w, k) {
            k = this.cfg.extend(k), I = this._parse(I, k.format);
            var z = B.createDecryptor(w, k).finalize(I.ciphertext);
            return z;
          },
          /**
           * Converts serialized ciphertext to CipherParams,
           * else assumed CipherParams already and returns ciphertext unchanged.
           *
           * @param {CipherParams|string} ciphertext The ciphertext.
           * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.
           *
           * @return {CipherParams} The unserialized ciphertext.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);
           */
          _parse: function(B, I) {
            return typeof B == "string" ? I.parse(B, this) : B;
          }
        }), S = n.kdf = {}, D = S.OpenSSL = {
          /**
           * Derives a key and IV from a password.
           *
           * @param {string} password The password to derive from.
           * @param {number} keySize The size in words of the key to generate.
           * @param {number} ivSize The size in words of the IV to generate.
           * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.
           *
           * @return {CipherParams} A cipher params object with the key, IV, and salt.
           *
           * @static
           *
           * @example
           *
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);
           *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');
           */
          execute: function(B, I, w, k, z) {
            if (k || (k = o.random(64 / 8)), z)
              var H = h.create({ keySize: I + w, hasher: z }).compute(B, k);
            else
              var H = h.create({ keySize: I + w }).compute(B, k);
            var re = o.create(H.words.slice(I), w * 4);
            return H.sigBytes = I * 4, x.create({ key: H, iv: re, salt: k });
          }
        }, P = a.PasswordBasedCipher = F.extend({
          /**
           * Configuration options.
           *
           * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL
           */
          cfg: F.cfg.extend({
            kdf: D
          }),
          /**
           * Encrypts a message using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {WordArray|string} message The message to encrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {CipherParams} A cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');
           *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });
           */
          encrypt: function(B, I, w, k) {
            k = this.cfg.extend(k);
            var z = k.kdf.execute(w, B.keySize, B.ivSize, k.salt, k.hasher);
            k.iv = z.iv;
            var H = F.encrypt.call(this, B, I, z.key, k);
            return H.mixIn(z), H;
          },
          /**
           * Decrypts serialized ciphertext using a password.
           *
           * @param {Cipher} cipher The cipher algorithm to use.
           * @param {CipherParams|string} ciphertext The ciphertext to decrypt.
           * @param {string} password The password.
           * @param {Object} cfg (Optional) The configuration options to use for this operation.
           *
           * @return {WordArray} The plaintext.
           *
           * @static
           *
           * @example
           *
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });
           *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });
           */
          decrypt: function(B, I, w, k) {
            k = this.cfg.extend(k), I = this._parse(I, k.format);
            var z = k.kdf.execute(w, B.keySize, B.ivSize, I.salt, k.hasher);
            k.iv = z.iv;
            var H = F.decrypt.call(this, B, I, z.key, k);
            return H;
          }
        });
      }();
    });
  }(e1)), e1.exports;
}
var t1 = { exports: {} }, kd;
function uT() {
  return kd || (kd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      return r.mode.CFB = function() {
        var i = r.lib.BlockCipherMode.extend();
        i.Encryptor = i.extend({
          processBlock: function(a, s) {
            var o = this._cipher, c = o.blockSize;
            n.call(this, a, s, c, o), this._prevBlock = a.slice(s, s + c);
          }
        }), i.Decryptor = i.extend({
          processBlock: function(a, s) {
            var o = this._cipher, c = o.blockSize, l = a.slice(s, s + c);
            n.call(this, a, s, c, o), this._prevBlock = l;
          }
        });
        function n(a, s, o, c) {
          var l, f = this._iv;
          f ? (l = f.slice(0), this._iv = void 0) : l = this._prevBlock, c.encryptBlock(l, 0);
          for (var u = 0; u < o; u++)
            a[s + u] ^= l[u];
        }
        return i;
      }(), r.mode.CFB;
    });
  }(t1)), t1.exports;
}
var r1 = { exports: {} }, Fd;
function hT() {
  return Fd || (Fd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      return r.mode.CTR = function() {
        var i = r.lib.BlockCipherMode.extend(), n = i.Encryptor = i.extend({
          processBlock: function(a, s) {
            var o = this._cipher, c = o.blockSize, l = this._iv, f = this._counter;
            l && (f = this._counter = l.slice(0), this._iv = void 0);
            var u = f.slice(0);
            o.encryptBlock(u, 0), f[c - 1] = f[c - 1] + 1 | 0;
            for (var h = 0; h < c; h++)
              a[s + h] ^= u[h];
          }
        });
        return i.Decryptor = n, i;
      }(), r.mode.CTR;
    });
  }(r1)), r1.exports;
}
var i1 = { exports: {} }, Od;
function dT() {
  return Od || (Od = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      /** @preserve
       * Counter block mode compatible with  Dr Brian Gladman fileenc.c
       * derived from CryptoJS.mode.CTR
       * Jan Hruby jhruby.web@gmail.com
       */
      return r.mode.CTRGladman = function() {
        var i = r.lib.BlockCipherMode.extend();
        function n(o) {
          if ((o >> 24 & 255) === 255) {
            var c = o >> 16 & 255, l = o >> 8 & 255, f = o & 255;
            c === 255 ? (c = 0, l === 255 ? (l = 0, f === 255 ? f = 0 : ++f) : ++l) : ++c, o = 0, o += c << 16, o += l << 8, o += f;
          } else
            o += 1 << 24;
          return o;
        }
        function a(o) {
          return (o[0] = n(o[0])) === 0 && (o[1] = n(o[1])), o;
        }
        var s = i.Encryptor = i.extend({
          processBlock: function(o, c) {
            var l = this._cipher, f = l.blockSize, u = this._iv, h = this._counter;
            u && (h = this._counter = u.slice(0), this._iv = void 0), a(h);
            var d = h.slice(0);
            l.encryptBlock(d, 0);
            for (var p = 0; p < f; p++)
              o[c + p] ^= d[p];
          }
        });
        return i.Decryptor = s, i;
      }(), r.mode.CTRGladman;
    });
  }(i1)), i1.exports;
}
var n1 = { exports: {} }, Dd;
function gT() {
  return Dd || (Dd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      return r.mode.OFB = function() {
        var i = r.lib.BlockCipherMode.extend(), n = i.Encryptor = i.extend({
          processBlock: function(a, s) {
            var o = this._cipher, c = o.blockSize, l = this._iv, f = this._keystream;
            l && (f = this._keystream = l.slice(0), this._iv = void 0), o.encryptBlock(f, 0);
            for (var u = 0; u < c; u++)
              a[s + u] ^= f[u];
          }
        });
        return i.Decryptor = n, i;
      }(), r.mode.OFB;
    });
  }(n1)), n1.exports;
}
var a1 = { exports: {} }, Bd;
function pT() {
  return Bd || (Bd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      return r.mode.ECB = function() {
        var i = r.lib.BlockCipherMode.extend();
        return i.Encryptor = i.extend({
          processBlock: function(n, a) {
            this._cipher.encryptBlock(n, a);
          }
        }), i.Decryptor = i.extend({
          processBlock: function(n, a) {
            this._cipher.decryptBlock(n, a);
          }
        }), i;
      }(), r.mode.ECB;
    });
  }(a1)), a1.exports;
}
var s1 = { exports: {} }, Id;
function vT() {
  return Id || (Id = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      return r.pad.AnsiX923 = {
        pad: function(i, n) {
          var a = i.sigBytes, s = n * 4, o = s - a % s, c = a + o - 1;
          i.clamp(), i.words[c >>> 2] |= o << 24 - c % 4 * 8, i.sigBytes += o;
        },
        unpad: function(i) {
          var n = i.words[i.sigBytes - 1 >>> 2] & 255;
          i.sigBytes -= n;
        }
      }, r.pad.Ansix923;
    });
  }(s1)), s1.exports;
}
var o1 = { exports: {} }, Rd;
function mT() {
  return Rd || (Rd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      return r.pad.Iso10126 = {
        pad: function(i, n) {
          var a = n * 4, s = a - i.sigBytes % a;
          i.concat(r.lib.WordArray.random(s - 1)).concat(r.lib.WordArray.create([s << 24], 1));
        },
        unpad: function(i) {
          var n = i.words[i.sigBytes - 1 >>> 2] & 255;
          i.sigBytes -= n;
        }
      }, r.pad.Iso10126;
    });
  }(o1)), o1.exports;
}
var l1 = { exports: {} }, Pd;
function bT() {
  return Pd || (Pd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      return r.pad.Iso97971 = {
        pad: function(i, n) {
          i.concat(r.lib.WordArray.create([2147483648], 1)), r.pad.ZeroPadding.pad(i, n);
        },
        unpad: function(i) {
          r.pad.ZeroPadding.unpad(i), i.sigBytes--;
        }
      }, r.pad.Iso97971;
    });
  }(l1)), l1.exports;
}
var c1 = { exports: {} }, Ld;
function xT() {
  return Ld || (Ld = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      return r.pad.ZeroPadding = {
        pad: function(i, n) {
          var a = n * 4;
          i.clamp(), i.sigBytes += a - (i.sigBytes % a || a);
        },
        unpad: function(i) {
          for (var n = i.words, a = i.sigBytes - 1, a = i.sigBytes - 1; a >= 0; a--)
            if (n[a >>> 2] >>> 24 - a % 4 * 8 & 255) {
              i.sigBytes = a + 1;
              break;
            }
        }
      }, r.pad.ZeroPadding;
    });
  }(c1)), c1.exports;
}
var f1 = { exports: {} }, Nd;
function wT() {
  return Nd || (Nd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      return r.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      }, r.pad.NoPadding;
    });
  }(f1)), f1.exports;
}
var u1 = { exports: {} }, Md;
function yT() {
  return Md || (Md = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), _0());
    })(Pe, function(r) {
      return function(i) {
        var n = r, a = n.lib, s = a.CipherParams, o = n.enc, c = o.Hex, l = n.format;
        l.Hex = {
          /**
           * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.
           *
           * @param {CipherParams} cipherParams The cipher params object.
           *
           * @return {string} The hexadecimally encoded string.
           *
           * @static
           *
           * @example
           *
           *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);
           */
          stringify: function(f) {
            return f.ciphertext.toString(c);
          },
          /**
           * Converts a hexadecimally encoded ciphertext string to a cipher params object.
           *
           * @param {string} input The hexadecimally encoded string.
           *
           * @return {CipherParams} The cipher params object.
           *
           * @static
           *
           * @example
           *
           *     var cipherParams = CryptoJS.format.Hex.parse(hexString);
           */
          parse: function(f) {
            var u = c.parse(f);
            return s.create({ ciphertext: u });
          }
        };
      }(), r.format.Hex;
    });
  }(u1)), u1.exports;
}
var h1 = { exports: {} }, Ud;
function _T() {
  return Ud || (Ud = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), Ki(), ii, ai(), _0());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.BlockCipher, s = i.algo, o = [], c = [], l = [], f = [], u = [], h = [], d = [], p = [], m = [], C = [];
        (function() {
          for (var x = [], _ = 0; _ < 256; _++)
            _ < 128 ? x[_] = _ << 1 : x[_] = _ << 1 ^ 283;
          for (var v = 0, F = 0, _ = 0; _ < 256; _++) {
            var S = F ^ F << 1 ^ F << 2 ^ F << 3 ^ F << 4;
            S = S >>> 8 ^ S & 255 ^ 99, o[v] = S, c[S] = v;
            var D = x[v], P = x[D], B = x[P], I = x[S] * 257 ^ S * 16843008;
            l[v] = I << 24 | I >>> 8, f[v] = I << 16 | I >>> 16, u[v] = I << 8 | I >>> 24, h[v] = I;
            var I = B * 16843009 ^ P * 65537 ^ D * 257 ^ v * 16843008;
            d[S] = I << 24 | I >>> 8, p[S] = I << 16 | I >>> 16, m[S] = I << 8 | I >>> 24, C[S] = I, v ? (v = D ^ x[x[x[B ^ D]]], F ^= x[x[F]]) : v = F = 1;
          }
        })();
        var A = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54], b = s.AES = a.extend({
          _doReset: function() {
            var x;
            if (!(this._nRounds && this._keyPriorReset === this._key)) {
              for (var _ = this._keyPriorReset = this._key, v = _.words, F = _.sigBytes / 4, S = this._nRounds = F + 6, D = (S + 1) * 4, P = this._keySchedule = [], B = 0; B < D; B++)
                B < F ? P[B] = v[B] : (x = P[B - 1], B % F ? F > 6 && B % F == 4 && (x = o[x >>> 24] << 24 | o[x >>> 16 & 255] << 16 | o[x >>> 8 & 255] << 8 | o[x & 255]) : (x = x << 8 | x >>> 24, x = o[x >>> 24] << 24 | o[x >>> 16 & 255] << 16 | o[x >>> 8 & 255] << 8 | o[x & 255], x ^= A[B / F | 0] << 24), P[B] = P[B - F] ^ x);
              for (var I = this._invKeySchedule = [], w = 0; w < D; w++) {
                var B = D - w;
                if (w % 4)
                  var x = P[B];
                else
                  var x = P[B - 4];
                w < 4 || B <= 4 ? I[w] = x : I[w] = d[o[x >>> 24]] ^ p[o[x >>> 16 & 255]] ^ m[o[x >>> 8 & 255]] ^ C[o[x & 255]];
              }
            }
          },
          encryptBlock: function(x, _) {
            this._doCryptBlock(x, _, this._keySchedule, l, f, u, h, o);
          },
          decryptBlock: function(x, _) {
            var v = x[_ + 1];
            x[_ + 1] = x[_ + 3], x[_ + 3] = v, this._doCryptBlock(x, _, this._invKeySchedule, d, p, m, C, c);
            var v = x[_ + 1];
            x[_ + 1] = x[_ + 3], x[_ + 3] = v;
          },
          _doCryptBlock: function(x, _, v, F, S, D, P, B) {
            for (var I = this._nRounds, w = x[_] ^ v[0], k = x[_ + 1] ^ v[1], z = x[_ + 2] ^ v[2], H = x[_ + 3] ^ v[3], re = 4, ie = 1; ie < I; ie++) {
              var X = F[w >>> 24] ^ S[k >>> 16 & 255] ^ D[z >>> 8 & 255] ^ P[H & 255] ^ v[re++], oe = F[k >>> 24] ^ S[z >>> 16 & 255] ^ D[H >>> 8 & 255] ^ P[w & 255] ^ v[re++], ae = F[z >>> 24] ^ S[H >>> 16 & 255] ^ D[w >>> 8 & 255] ^ P[k & 255] ^ v[re++], V = F[H >>> 24] ^ S[w >>> 16 & 255] ^ D[k >>> 8 & 255] ^ P[z & 255] ^ v[re++];
              w = X, k = oe, z = ae, H = V;
            }
            var X = (B[w >>> 24] << 24 | B[k >>> 16 & 255] << 16 | B[z >>> 8 & 255] << 8 | B[H & 255]) ^ v[re++], oe = (B[k >>> 24] << 24 | B[z >>> 16 & 255] << 16 | B[H >>> 8 & 255] << 8 | B[w & 255]) ^ v[re++], ae = (B[z >>> 24] << 24 | B[H >>> 16 & 255] << 16 | B[w >>> 8 & 255] << 8 | B[k & 255]) ^ v[re++], V = (B[H >>> 24] << 24 | B[w >>> 16 & 255] << 16 | B[k >>> 8 & 255] << 8 | B[z & 255]) ^ v[re++];
            x[_] = X, x[_ + 1] = oe, x[_ + 2] = ae, x[_ + 3] = V;
          },
          keySize: 256 / 32
        });
        i.AES = a._createHelper(b);
      }(), r.AES;
    });
  }(h1)), h1.exports;
}
var d1 = { exports: {} }, $d;
function AT() {
  return $d || ($d = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), Ki(), ii, ai(), _0());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.WordArray, s = n.BlockCipher, o = i.algo, c = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ], l = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ], f = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28], u = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ], h = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ], d = o.DES = s.extend({
          _doReset: function() {
            for (var A = this._key, b = A.words, x = [], _ = 0; _ < 56; _++) {
              var v = c[_] - 1;
              x[_] = b[v >>> 5] >>> 31 - v % 32 & 1;
            }
            for (var F = this._subKeys = [], S = 0; S < 16; S++) {
              for (var D = F[S] = [], P = f[S], _ = 0; _ < 24; _++)
                D[_ / 6 | 0] |= x[(l[_] - 1 + P) % 28] << 31 - _ % 6, D[4 + (_ / 6 | 0)] |= x[28 + (l[_ + 24] - 1 + P) % 28] << 31 - _ % 6;
              D[0] = D[0] << 1 | D[0] >>> 31;
              for (var _ = 1; _ < 7; _++)
                D[_] = D[_] >>> (_ - 1) * 4 + 3;
              D[7] = D[7] << 5 | D[7] >>> 27;
            }
            for (var B = this._invSubKeys = [], _ = 0; _ < 16; _++)
              B[_] = F[15 - _];
          },
          encryptBlock: function(A, b) {
            this._doCryptBlock(A, b, this._subKeys);
          },
          decryptBlock: function(A, b) {
            this._doCryptBlock(A, b, this._invSubKeys);
          },
          _doCryptBlock: function(A, b, x) {
            this._lBlock = A[b], this._rBlock = A[b + 1], p.call(this, 4, 252645135), p.call(this, 16, 65535), m.call(this, 2, 858993459), m.call(this, 8, 16711935), p.call(this, 1, 1431655765);
            for (var _ = 0; _ < 16; _++) {
              for (var v = x[_], F = this._lBlock, S = this._rBlock, D = 0, P = 0; P < 8; P++)
                D |= u[P][((S ^ v[P]) & h[P]) >>> 0];
              this._lBlock = S, this._rBlock = F ^ D;
            }
            var B = this._lBlock;
            this._lBlock = this._rBlock, this._rBlock = B, p.call(this, 1, 1431655765), m.call(this, 8, 16711935), m.call(this, 2, 858993459), p.call(this, 16, 65535), p.call(this, 4, 252645135), A[b] = this._lBlock, A[b + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function p(A, b) {
          var x = (this._lBlock >>> A ^ this._rBlock) & b;
          this._rBlock ^= x, this._lBlock ^= x << A;
        }
        function m(A, b) {
          var x = (this._rBlock >>> A ^ this._lBlock) & b;
          this._lBlock ^= x, this._rBlock ^= x << A;
        }
        i.DES = s._createHelper(d);
        var C = o.TripleDES = s.extend({
          _doReset: function() {
            var A = this._key, b = A.words;
            if (b.length !== 2 && b.length !== 4 && b.length < 6)
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            var x = b.slice(0, 2), _ = b.length < 4 ? b.slice(0, 2) : b.slice(2, 4), v = b.length < 6 ? b.slice(0, 2) : b.slice(4, 6);
            this._des1 = d.createEncryptor(a.create(x)), this._des2 = d.createEncryptor(a.create(_)), this._des3 = d.createEncryptor(a.create(v));
          },
          encryptBlock: function(A, b) {
            this._des1.encryptBlock(A, b), this._des2.decryptBlock(A, b), this._des3.encryptBlock(A, b);
          },
          decryptBlock: function(A, b) {
            this._des3.decryptBlock(A, b), this._des2.encryptBlock(A, b), this._des1.decryptBlock(A, b);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        i.TripleDES = s._createHelper(C);
      }(), r.TripleDES;
    });
  }(d1)), d1.exports;
}
var g1 = { exports: {} }, zd;
function ET() {
  return zd || (zd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), Ki(), ii, ai(), _0());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.StreamCipher, s = i.algo, o = s.RC4 = a.extend({
          _doReset: function() {
            for (var f = this._key, u = f.words, h = f.sigBytes, d = this._S = [], p = 0; p < 256; p++)
              d[p] = p;
            for (var p = 0, m = 0; p < 256; p++) {
              var C = p % h, A = u[C >>> 2] >>> 24 - C % 4 * 8 & 255;
              m = (m + d[p] + A) % 256;
              var b = d[p];
              d[p] = d[m], d[m] = b;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(f, u) {
            f[u] ^= c.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function c() {
          for (var f = this._S, u = this._i, h = this._j, d = 0, p = 0; p < 4; p++) {
            u = (u + 1) % 256, h = (h + f[u]) % 256;
            var m = f[u];
            f[u] = f[h], f[h] = m, d |= f[(f[u] + f[h]) % 256] << 24 - p * 8;
          }
          return this._i = u, this._j = h, d;
        }
        i.RC4 = a._createHelper(o);
        var l = s.RC4Drop = o.extend({
          /**
           * Configuration options.
           *
           * @property {number} drop The number of keystream words to drop. Default 192
           */
          cfg: o.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            o._doReset.call(this);
            for (var f = this.cfg.drop; f > 0; f--)
              c.call(this);
          }
        });
        i.RC4Drop = a._createHelper(l);
      }(), r.RC4;
    });
  }(g1)), g1.exports;
}
var p1 = { exports: {} }, Wd;
function CT() {
  return Wd || (Wd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), Ki(), ii, ai(), _0());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.StreamCipher, s = i.algo, o = [], c = [], l = [], f = s.Rabbit = a.extend({
          _doReset: function() {
            for (var h = this._key.words, d = this.cfg.iv, p = 0; p < 4; p++)
              h[p] = (h[p] << 8 | h[p] >>> 24) & 16711935 | (h[p] << 24 | h[p] >>> 8) & 4278255360;
            var m = this._X = [
              h[0],
              h[3] << 16 | h[2] >>> 16,
              h[1],
              h[0] << 16 | h[3] >>> 16,
              h[2],
              h[1] << 16 | h[0] >>> 16,
              h[3],
              h[2] << 16 | h[1] >>> 16
            ], C = this._C = [
              h[2] << 16 | h[2] >>> 16,
              h[0] & 4294901760 | h[1] & 65535,
              h[3] << 16 | h[3] >>> 16,
              h[1] & 4294901760 | h[2] & 65535,
              h[0] << 16 | h[0] >>> 16,
              h[2] & 4294901760 | h[3] & 65535,
              h[1] << 16 | h[1] >>> 16,
              h[3] & 4294901760 | h[0] & 65535
            ];
            this._b = 0;
            for (var p = 0; p < 4; p++)
              u.call(this);
            for (var p = 0; p < 8; p++)
              C[p] ^= m[p + 4 & 7];
            if (d) {
              var A = d.words, b = A[0], x = A[1], _ = (b << 8 | b >>> 24) & 16711935 | (b << 24 | b >>> 8) & 4278255360, v = (x << 8 | x >>> 24) & 16711935 | (x << 24 | x >>> 8) & 4278255360, F = _ >>> 16 | v & 4294901760, S = v << 16 | _ & 65535;
              C[0] ^= _, C[1] ^= F, C[2] ^= v, C[3] ^= S, C[4] ^= _, C[5] ^= F, C[6] ^= v, C[7] ^= S;
              for (var p = 0; p < 4; p++)
                u.call(this);
            }
          },
          _doProcessBlock: function(h, d) {
            var p = this._X;
            u.call(this), o[0] = p[0] ^ p[5] >>> 16 ^ p[3] << 16, o[1] = p[2] ^ p[7] >>> 16 ^ p[5] << 16, o[2] = p[4] ^ p[1] >>> 16 ^ p[7] << 16, o[3] = p[6] ^ p[3] >>> 16 ^ p[1] << 16;
            for (var m = 0; m < 4; m++)
              o[m] = (o[m] << 8 | o[m] >>> 24) & 16711935 | (o[m] << 24 | o[m] >>> 8) & 4278255360, h[d + m] ^= o[m];
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function u() {
          for (var h = this._X, d = this._C, p = 0; p < 8; p++)
            c[p] = d[p];
          d[0] = d[0] + 1295307597 + this._b | 0, d[1] = d[1] + 3545052371 + (d[0] >>> 0 < c[0] >>> 0 ? 1 : 0) | 0, d[2] = d[2] + 886263092 + (d[1] >>> 0 < c[1] >>> 0 ? 1 : 0) | 0, d[3] = d[3] + 1295307597 + (d[2] >>> 0 < c[2] >>> 0 ? 1 : 0) | 0, d[4] = d[4] + 3545052371 + (d[3] >>> 0 < c[3] >>> 0 ? 1 : 0) | 0, d[5] = d[5] + 886263092 + (d[4] >>> 0 < c[4] >>> 0 ? 1 : 0) | 0, d[6] = d[6] + 1295307597 + (d[5] >>> 0 < c[5] >>> 0 ? 1 : 0) | 0, d[7] = d[7] + 3545052371 + (d[6] >>> 0 < c[6] >>> 0 ? 1 : 0) | 0, this._b = d[7] >>> 0 < c[7] >>> 0 ? 1 : 0;
          for (var p = 0; p < 8; p++) {
            var m = h[p] + d[p], C = m & 65535, A = m >>> 16, b = ((C * C >>> 17) + C * A >>> 15) + A * A, x = ((m & 4294901760) * m | 0) + ((m & 65535) * m | 0);
            l[p] = b ^ x;
          }
          h[0] = l[0] + (l[7] << 16 | l[7] >>> 16) + (l[6] << 16 | l[6] >>> 16) | 0, h[1] = l[1] + (l[0] << 8 | l[0] >>> 24) + l[7] | 0, h[2] = l[2] + (l[1] << 16 | l[1] >>> 16) + (l[0] << 16 | l[0] >>> 16) | 0, h[3] = l[3] + (l[2] << 8 | l[2] >>> 24) + l[1] | 0, h[4] = l[4] + (l[3] << 16 | l[3] >>> 16) + (l[2] << 16 | l[2] >>> 16) | 0, h[5] = l[5] + (l[4] << 8 | l[4] >>> 24) + l[3] | 0, h[6] = l[6] + (l[5] << 16 | l[5] >>> 16) + (l[4] << 16 | l[4] >>> 16) | 0, h[7] = l[7] + (l[6] << 8 | l[6] >>> 24) + l[5] | 0;
        }
        i.Rabbit = a._createHelper(f);
      }(), r.Rabbit;
    });
  }(p1)), p1.exports;
}
var v1 = { exports: {} }, Hd;
function ST() {
  return Hd || (Hd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), Ki(), ii, ai(), _0());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.StreamCipher, s = i.algo, o = [], c = [], l = [], f = s.RabbitLegacy = a.extend({
          _doReset: function() {
            var h = this._key.words, d = this.cfg.iv, p = this._X = [
              h[0],
              h[3] << 16 | h[2] >>> 16,
              h[1],
              h[0] << 16 | h[3] >>> 16,
              h[2],
              h[1] << 16 | h[0] >>> 16,
              h[3],
              h[2] << 16 | h[1] >>> 16
            ], m = this._C = [
              h[2] << 16 | h[2] >>> 16,
              h[0] & 4294901760 | h[1] & 65535,
              h[3] << 16 | h[3] >>> 16,
              h[1] & 4294901760 | h[2] & 65535,
              h[0] << 16 | h[0] >>> 16,
              h[2] & 4294901760 | h[3] & 65535,
              h[1] << 16 | h[1] >>> 16,
              h[3] & 4294901760 | h[0] & 65535
            ];
            this._b = 0;
            for (var C = 0; C < 4; C++)
              u.call(this);
            for (var C = 0; C < 8; C++)
              m[C] ^= p[C + 4 & 7];
            if (d) {
              var A = d.words, b = A[0], x = A[1], _ = (b << 8 | b >>> 24) & 16711935 | (b << 24 | b >>> 8) & 4278255360, v = (x << 8 | x >>> 24) & 16711935 | (x << 24 | x >>> 8) & 4278255360, F = _ >>> 16 | v & 4294901760, S = v << 16 | _ & 65535;
              m[0] ^= _, m[1] ^= F, m[2] ^= v, m[3] ^= S, m[4] ^= _, m[5] ^= F, m[6] ^= v, m[7] ^= S;
              for (var C = 0; C < 4; C++)
                u.call(this);
            }
          },
          _doProcessBlock: function(h, d) {
            var p = this._X;
            u.call(this), o[0] = p[0] ^ p[5] >>> 16 ^ p[3] << 16, o[1] = p[2] ^ p[7] >>> 16 ^ p[5] << 16, o[2] = p[4] ^ p[1] >>> 16 ^ p[7] << 16, o[3] = p[6] ^ p[3] >>> 16 ^ p[1] << 16;
            for (var m = 0; m < 4; m++)
              o[m] = (o[m] << 8 | o[m] >>> 24) & 16711935 | (o[m] << 24 | o[m] >>> 8) & 4278255360, h[d + m] ^= o[m];
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function u() {
          for (var h = this._X, d = this._C, p = 0; p < 8; p++)
            c[p] = d[p];
          d[0] = d[0] + 1295307597 + this._b | 0, d[1] = d[1] + 3545052371 + (d[0] >>> 0 < c[0] >>> 0 ? 1 : 0) | 0, d[2] = d[2] + 886263092 + (d[1] >>> 0 < c[1] >>> 0 ? 1 : 0) | 0, d[3] = d[3] + 1295307597 + (d[2] >>> 0 < c[2] >>> 0 ? 1 : 0) | 0, d[4] = d[4] + 3545052371 + (d[3] >>> 0 < c[3] >>> 0 ? 1 : 0) | 0, d[5] = d[5] + 886263092 + (d[4] >>> 0 < c[4] >>> 0 ? 1 : 0) | 0, d[6] = d[6] + 1295307597 + (d[5] >>> 0 < c[5] >>> 0 ? 1 : 0) | 0, d[7] = d[7] + 3545052371 + (d[6] >>> 0 < c[6] >>> 0 ? 1 : 0) | 0, this._b = d[7] >>> 0 < c[7] >>> 0 ? 1 : 0;
          for (var p = 0; p < 8; p++) {
            var m = h[p] + d[p], C = m & 65535, A = m >>> 16, b = ((C * C >>> 17) + C * A >>> 15) + A * A, x = ((m & 4294901760) * m | 0) + ((m & 65535) * m | 0);
            l[p] = b ^ x;
          }
          h[0] = l[0] + (l[7] << 16 | l[7] >>> 16) + (l[6] << 16 | l[6] >>> 16) | 0, h[1] = l[1] + (l[0] << 8 | l[0] >>> 24) + l[7] | 0, h[2] = l[2] + (l[1] << 16 | l[1] >>> 16) + (l[0] << 16 | l[0] >>> 16) | 0, h[3] = l[3] + (l[2] << 8 | l[2] >>> 24) + l[1] | 0, h[4] = l[4] + (l[3] << 16 | l[3] >>> 16) + (l[2] << 16 | l[2] >>> 16) | 0, h[5] = l[5] + (l[4] << 8 | l[4] >>> 24) + l[3] | 0, h[6] = l[6] + (l[5] << 16 | l[5] >>> 16) + (l[4] << 16 | l[4] >>> 16) | 0, h[7] = l[7] + (l[6] << 8 | l[6] >>> 24) + l[5] | 0;
        }
        i.RabbitLegacy = a._createHelper(f);
      }(), r.RabbitLegacy;
    });
  }(v1)), v1.exports;
}
var m1 = { exports: {} }, qd;
function TT() {
  return qd || (qd = 1, function(t, e) {
    (function(r, i, n) {
      t.exports = i($e(), Ki(), ii, ai(), _0());
    })(Pe, function(r) {
      return function() {
        var i = r, n = i.lib, a = n.BlockCipher, s = i.algo;
        const o = 16, c = [
          608135816,
          2242054355,
          320440878,
          57701188,
          2752067618,
          698298832,
          137296536,
          3964562569,
          1160258022,
          953160567,
          3193202383,
          887688300,
          3232508343,
          3380367581,
          1065670069,
          3041331479,
          2450970073,
          2306472731
        ], l = [
          [
            3509652390,
            2564797868,
            805139163,
            3491422135,
            3101798381,
            1780907670,
            3128725573,
            4046225305,
            614570311,
            3012652279,
            134345442,
            2240740374,
            1667834072,
            1901547113,
            2757295779,
            4103290238,
            227898511,
            1921955416,
            1904987480,
            2182433518,
            2069144605,
            3260701109,
            2620446009,
            720527379,
            3318853667,
            677414384,
            3393288472,
            3101374703,
            2390351024,
            1614419982,
            1822297739,
            2954791486,
            3608508353,
            3174124327,
            2024746970,
            1432378464,
            3864339955,
            2857741204,
            1464375394,
            1676153920,
            1439316330,
            715854006,
            3033291828,
            289532110,
            2706671279,
            2087905683,
            3018724369,
            1668267050,
            732546397,
            1947742710,
            3462151702,
            2609353502,
            2950085171,
            1814351708,
            2050118529,
            680887927,
            999245976,
            1800124847,
            3300911131,
            1713906067,
            1641548236,
            4213287313,
            1216130144,
            1575780402,
            4018429277,
            3917837745,
            3693486850,
            3949271944,
            596196993,
            3549867205,
            258830323,
            2213823033,
            772490370,
            2760122372,
            1774776394,
            2652871518,
            566650946,
            4142492826,
            1728879713,
            2882767088,
            1783734482,
            3629395816,
            2517608232,
            2874225571,
            1861159788,
            326777828,
            3124490320,
            2130389656,
            2716951837,
            967770486,
            1724537150,
            2185432712,
            2364442137,
            1164943284,
            2105845187,
            998989502,
            3765401048,
            2244026483,
            1075463327,
            1455516326,
            1322494562,
            910128902,
            469688178,
            1117454909,
            936433444,
            3490320968,
            3675253459,
            1240580251,
            122909385,
            2157517691,
            634681816,
            4142456567,
            3825094682,
            3061402683,
            2540495037,
            79693498,
            3249098678,
            1084186820,
            1583128258,
            426386531,
            1761308591,
            1047286709,
            322548459,
            995290223,
            1845252383,
            2603652396,
            3431023940,
            2942221577,
            3202600964,
            3727903485,
            1712269319,
            422464435,
            3234572375,
            1170764815,
            3523960633,
            3117677531,
            1434042557,
            442511882,
            3600875718,
            1076654713,
            1738483198,
            4213154764,
            2393238008,
            3677496056,
            1014306527,
            4251020053,
            793779912,
            2902807211,
            842905082,
            4246964064,
            1395751752,
            1040244610,
            2656851899,
            3396308128,
            445077038,
            3742853595,
            3577915638,
            679411651,
            2892444358,
            2354009459,
            1767581616,
            3150600392,
            3791627101,
            3102740896,
            284835224,
            4246832056,
            1258075500,
            768725851,
            2589189241,
            3069724005,
            3532540348,
            1274779536,
            3789419226,
            2764799539,
            1660621633,
            3471099624,
            4011903706,
            913787905,
            3497959166,
            737222580,
            2514213453,
            2928710040,
            3937242737,
            1804850592,
            3499020752,
            2949064160,
            2386320175,
            2390070455,
            2415321851,
            4061277028,
            2290661394,
            2416832540,
            1336762016,
            1754252060,
            3520065937,
            3014181293,
            791618072,
            3188594551,
            3933548030,
            2332172193,
            3852520463,
            3043980520,
            413987798,
            3465142937,
            3030929376,
            4245938359,
            2093235073,
            3534596313,
            375366246,
            2157278981,
            2479649556,
            555357303,
            3870105701,
            2008414854,
            3344188149,
            4221384143,
            3956125452,
            2067696032,
            3594591187,
            2921233993,
            2428461,
            544322398,
            577241275,
            1471733935,
            610547355,
            4027169054,
            1432588573,
            1507829418,
            2025931657,
            3646575487,
            545086370,
            48609733,
            2200306550,
            1653985193,
            298326376,
            1316178497,
            3007786442,
            2064951626,
            458293330,
            2589141269,
            3591329599,
            3164325604,
            727753846,
            2179363840,
            146436021,
            1461446943,
            4069977195,
            705550613,
            3059967265,
            3887724982,
            4281599278,
            3313849956,
            1404054877,
            2845806497,
            146425753,
            1854211946
          ],
          [
            1266315497,
            3048417604,
            3681880366,
            3289982499,
            290971e4,
            1235738493,
            2632868024,
            2414719590,
            3970600049,
            1771706367,
            1449415276,
            3266420449,
            422970021,
            1963543593,
            2690192192,
            3826793022,
            1062508698,
            1531092325,
            1804592342,
            2583117782,
            2714934279,
            4024971509,
            1294809318,
            4028980673,
            1289560198,
            2221992742,
            1669523910,
            35572830,
            157838143,
            1052438473,
            1016535060,
            1802137761,
            1753167236,
            1386275462,
            3080475397,
            2857371447,
            1040679964,
            2145300060,
            2390574316,
            1461121720,
            2956646967,
            4031777805,
            4028374788,
            33600511,
            2920084762,
            1018524850,
            629373528,
            3691585981,
            3515945977,
            2091462646,
            2486323059,
            586499841,
            988145025,
            935516892,
            3367335476,
            2599673255,
            2839830854,
            265290510,
            3972581182,
            2759138881,
            3795373465,
            1005194799,
            847297441,
            406762289,
            1314163512,
            1332590856,
            1866599683,
            4127851711,
            750260880,
            613907577,
            1450815602,
            3165620655,
            3734664991,
            3650291728,
            3012275730,
            3704569646,
            1427272223,
            778793252,
            1343938022,
            2676280711,
            2052605720,
            1946737175,
            3164576444,
            3914038668,
            3967478842,
            3682934266,
            1661551462,
            3294938066,
            4011595847,
            840292616,
            3712170807,
            616741398,
            312560963,
            711312465,
            1351876610,
            322626781,
            1910503582,
            271666773,
            2175563734,
            1594956187,
            70604529,
            3617834859,
            1007753275,
            1495573769,
            4069517037,
            2549218298,
            2663038764,
            504708206,
            2263041392,
            3941167025,
            2249088522,
            1514023603,
            1998579484,
            1312622330,
            694541497,
            2582060303,
            2151582166,
            1382467621,
            776784248,
            2618340202,
            3323268794,
            2497899128,
            2784771155,
            503983604,
            4076293799,
            907881277,
            423175695,
            432175456,
            1378068232,
            4145222326,
            3954048622,
            3938656102,
            3820766613,
            2793130115,
            2977904593,
            26017576,
            3274890735,
            3194772133,
            1700274565,
            1756076034,
            4006520079,
            3677328699,
            720338349,
            1533947780,
            354530856,
            688349552,
            3973924725,
            1637815568,
            332179504,
            3949051286,
            53804574,
            2852348879,
            3044236432,
            1282449977,
            3583942155,
            3416972820,
            4006381244,
            1617046695,
            2628476075,
            3002303598,
            1686838959,
            431878346,
            2686675385,
            1700445008,
            1080580658,
            1009431731,
            832498133,
            3223435511,
            2605976345,
            2271191193,
            2516031870,
            1648197032,
            4164389018,
            2548247927,
            300782431,
            375919233,
            238389289,
            3353747414,
            2531188641,
            2019080857,
            1475708069,
            455242339,
            2609103871,
            448939670,
            3451063019,
            1395535956,
            2413381860,
            1841049896,
            1491858159,
            885456874,
            4264095073,
            4001119347,
            1565136089,
            3898914787,
            1108368660,
            540939232,
            1173283510,
            2745871338,
            3681308437,
            4207628240,
            3343053890,
            4016749493,
            1699691293,
            1103962373,
            3625875870,
            2256883143,
            3830138730,
            1031889488,
            3479347698,
            1535977030,
            4236805024,
            3251091107,
            2132092099,
            1774941330,
            1199868427,
            1452454533,
            157007616,
            2904115357,
            342012276,
            595725824,
            1480756522,
            206960106,
            497939518,
            591360097,
            863170706,
            2375253569,
            3596610801,
            1814182875,
            2094937945,
            3421402208,
            1082520231,
            3463918190,
            2785509508,
            435703966,
            3908032597,
            1641649973,
            2842273706,
            3305899714,
            1510255612,
            2148256476,
            2655287854,
            3276092548,
            4258621189,
            236887753,
            3681803219,
            274041037,
            1734335097,
            3815195456,
            3317970021,
            1899903192,
            1026095262,
            4050517792,
            356393447,
            2410691914,
            3873677099,
            3682840055
          ],
          [
            3913112168,
            2491498743,
            4132185628,
            2489919796,
            1091903735,
            1979897079,
            3170134830,
            3567386728,
            3557303409,
            857797738,
            1136121015,
            1342202287,
            507115054,
            2535736646,
            337727348,
            3213592640,
            1301675037,
            2528481711,
            1895095763,
            1721773893,
            3216771564,
            62756741,
            2142006736,
            835421444,
            2531993523,
            1442658625,
            3659876326,
            2882144922,
            676362277,
            1392781812,
            170690266,
            3921047035,
            1759253602,
            3611846912,
            1745797284,
            664899054,
            1329594018,
            3901205900,
            3045908486,
            2062866102,
            2865634940,
            3543621612,
            3464012697,
            1080764994,
            553557557,
            3656615353,
            3996768171,
            991055499,
            499776247,
            1265440854,
            648242737,
            3940784050,
            980351604,
            3713745714,
            1749149687,
            3396870395,
            4211799374,
            3640570775,
            1161844396,
            3125318951,
            1431517754,
            545492359,
            4268468663,
            3499529547,
            1437099964,
            2702547544,
            3433638243,
            2581715763,
            2787789398,
            1060185593,
            1593081372,
            2418618748,
            4260947970,
            69676912,
            2159744348,
            86519011,
            2512459080,
            3838209314,
            1220612927,
            3339683548,
            133810670,
            1090789135,
            1078426020,
            1569222167,
            845107691,
            3583754449,
            4072456591,
            1091646820,
            628848692,
            1613405280,
            3757631651,
            526609435,
            236106946,
            48312990,
            2942717905,
            3402727701,
            1797494240,
            859738849,
            992217954,
            4005476642,
            2243076622,
            3870952857,
            3732016268,
            765654824,
            3490871365,
            2511836413,
            1685915746,
            3888969200,
            1414112111,
            2273134842,
            3281911079,
            4080962846,
            172450625,
            2569994100,
            980381355,
            4109958455,
            2819808352,
            2716589560,
            2568741196,
            3681446669,
            3329971472,
            1835478071,
            660984891,
            3704678404,
            4045999559,
            3422617507,
            3040415634,
            1762651403,
            1719377915,
            3470491036,
            2693910283,
            3642056355,
            3138596744,
            1364962596,
            2073328063,
            1983633131,
            926494387,
            3423689081,
            2150032023,
            4096667949,
            1749200295,
            3328846651,
            309677260,
            2016342300,
            1779581495,
            3079819751,
            111262694,
            1274766160,
            443224088,
            298511866,
            1025883608,
            3806446537,
            1145181785,
            168956806,
            3641502830,
            3584813610,
            1689216846,
            3666258015,
            3200248200,
            1692713982,
            2646376535,
            4042768518,
            1618508792,
            1610833997,
            3523052358,
            4130873264,
            2001055236,
            3610705100,
            2202168115,
            4028541809,
            2961195399,
            1006657119,
            2006996926,
            3186142756,
            1430667929,
            3210227297,
            1314452623,
            4074634658,
            4101304120,
            2273951170,
            1399257539,
            3367210612,
            3027628629,
            1190975929,
            2062231137,
            2333990788,
            2221543033,
            2438960610,
            1181637006,
            548689776,
            2362791313,
            3372408396,
            3104550113,
            3145860560,
            296247880,
            1970579870,
            3078560182,
            3769228297,
            1714227617,
            3291629107,
            3898220290,
            166772364,
            1251581989,
            493813264,
            448347421,
            195405023,
            2709975567,
            677966185,
            3703036547,
            1463355134,
            2715995803,
            1338867538,
            1343315457,
            2802222074,
            2684532164,
            233230375,
            2599980071,
            2000651841,
            3277868038,
            1638401717,
            4028070440,
            3237316320,
            6314154,
            819756386,
            300326615,
            590932579,
            1405279636,
            3267499572,
            3150704214,
            2428286686,
            3959192993,
            3461946742,
            1862657033,
            1266418056,
            963775037,
            2089974820,
            2263052895,
            1917689273,
            448879540,
            3550394620,
            3981727096,
            150775221,
            3627908307,
            1303187396,
            508620638,
            2975983352,
            2726630617,
            1817252668,
            1876281319,
            1457606340,
            908771278,
            3720792119,
            3617206836,
            2455994898,
            1729034894,
            1080033504
          ],
          [
            976866871,
            3556439503,
            2881648439,
            1522871579,
            1555064734,
            1336096578,
            3548522304,
            2579274686,
            3574697629,
            3205460757,
            3593280638,
            3338716283,
            3079412587,
            564236357,
            2993598910,
            1781952180,
            1464380207,
            3163844217,
            3332601554,
            1699332808,
            1393555694,
            1183702653,
            3581086237,
            1288719814,
            691649499,
            2847557200,
            2895455976,
            3193889540,
            2717570544,
            1781354906,
            1676643554,
            2592534050,
            3230253752,
            1126444790,
            2770207658,
            2633158820,
            2210423226,
            2615765581,
            2414155088,
            3127139286,
            673620729,
            2805611233,
            1269405062,
            4015350505,
            3341807571,
            4149409754,
            1057255273,
            2012875353,
            2162469141,
            2276492801,
            2601117357,
            993977747,
            3918593370,
            2654263191,
            753973209,
            36408145,
            2530585658,
            25011837,
            3520020182,
            2088578344,
            530523599,
            2918365339,
            1524020338,
            1518925132,
            3760827505,
            3759777254,
            1202760957,
            3985898139,
            3906192525,
            674977740,
            4174734889,
            2031300136,
            2019492241,
            3983892565,
            4153806404,
            3822280332,
            352677332,
            2297720250,
            60907813,
            90501309,
            3286998549,
            1016092578,
            2535922412,
            2839152426,
            457141659,
            509813237,
            4120667899,
            652014361,
            1966332200,
            2975202805,
            55981186,
            2327461051,
            676427537,
            3255491064,
            2882294119,
            3433927263,
            1307055953,
            942726286,
            933058658,
            2468411793,
            3933900994,
            4215176142,
            1361170020,
            2001714738,
            2830558078,
            3274259782,
            1222529897,
            1679025792,
            2729314320,
            3714953764,
            1770335741,
            151462246,
            3013232138,
            1682292957,
            1483529935,
            471910574,
            1539241949,
            458788160,
            3436315007,
            1807016891,
            3718408830,
            978976581,
            1043663428,
            3165965781,
            1927990952,
            4200891579,
            2372276910,
            3208408903,
            3533431907,
            1412390302,
            2931980059,
            4132332400,
            1947078029,
            3881505623,
            4168226417,
            2941484381,
            1077988104,
            1320477388,
            886195818,
            18198404,
            3786409e3,
            2509781533,
            112762804,
            3463356488,
            1866414978,
            891333506,
            18488651,
            661792760,
            1628790961,
            3885187036,
            3141171499,
            876946877,
            2693282273,
            1372485963,
            791857591,
            2686433993,
            3759982718,
            3167212022,
            3472953795,
            2716379847,
            445679433,
            3561995674,
            3504004811,
            3574258232,
            54117162,
            3331405415,
            2381918588,
            3769707343,
            4154350007,
            1140177722,
            4074052095,
            668550556,
            3214352940,
            367459370,
            261225585,
            2610173221,
            4209349473,
            3468074219,
            3265815641,
            314222801,
            3066103646,
            3808782860,
            282218597,
            3406013506,
            3773591054,
            379116347,
            1285071038,
            846784868,
            2669647154,
            3771962079,
            3550491691,
            2305946142,
            453669953,
            1268987020,
            3317592352,
            3279303384,
            3744833421,
            2610507566,
            3859509063,
            266596637,
            3847019092,
            517658769,
            3462560207,
            3443424879,
            370717030,
            4247526661,
            2224018117,
            4143653529,
            4112773975,
            2788324899,
            2477274417,
            1456262402,
            2901442914,
            1517677493,
            1846949527,
            2295493580,
            3734397586,
            2176403920,
            1280348187,
            1908823572,
            3871786941,
            846861322,
            1172426758,
            3287448474,
            3383383037,
            1655181056,
            3139813346,
            901632758,
            1897031941,
            2986607138,
            3066810236,
            3447102507,
            1393639104,
            373351379,
            950779232,
            625454576,
            3124240540,
            4148612726,
            2007998917,
            544563296,
            2244738638,
            2330496472,
            2058025392,
            1291430526,
            424198748,
            50039436,
            29584100,
            3605783033,
            2429876329,
            2791104160,
            1057563949,
            3255363231,
            3075367218,
            3463963227,
            1469046755,
            985887462
          ]
        ];
        var f = {
          pbox: [],
          sbox: []
        };
        function u(C, A) {
          let b = A >> 24 & 255, x = A >> 16 & 255, _ = A >> 8 & 255, v = A & 255, F = C.sbox[0][b] + C.sbox[1][x];
          return F = F ^ C.sbox[2][_], F = F + C.sbox[3][v], F;
        }
        function h(C, A, b) {
          let x = A, _ = b, v;
          for (let F = 0; F < o; ++F)
            x = x ^ C.pbox[F], _ = u(C, x) ^ _, v = x, x = _, _ = v;
          return v = x, x = _, _ = v, _ = _ ^ C.pbox[o], x = x ^ C.pbox[o + 1], { left: x, right: _ };
        }
        function d(C, A, b) {
          let x = A, _ = b, v;
          for (let F = o + 1; F > 1; --F)
            x = x ^ C.pbox[F], _ = u(C, x) ^ _, v = x, x = _, _ = v;
          return v = x, x = _, _ = v, _ = _ ^ C.pbox[1], x = x ^ C.pbox[0], { left: x, right: _ };
        }
        function p(C, A, b) {
          for (let S = 0; S < 4; S++) {
            C.sbox[S] = [];
            for (let D = 0; D < 256; D++)
              C.sbox[S][D] = l[S][D];
          }
          let x = 0;
          for (let S = 0; S < o + 2; S++)
            C.pbox[S] = c[S] ^ A[x], x++, x >= b && (x = 0);
          let _ = 0, v = 0, F = 0;
          for (let S = 0; S < o + 2; S += 2)
            F = h(C, _, v), _ = F.left, v = F.right, C.pbox[S] = _, C.pbox[S + 1] = v;
          for (let S = 0; S < 4; S++)
            for (let D = 0; D < 256; D += 2)
              F = h(C, _, v), _ = F.left, v = F.right, C.sbox[S][D] = _, C.sbox[S][D + 1] = v;
          return !0;
        }
        var m = s.Blowfish = a.extend({
          _doReset: function() {
            if (this._keyPriorReset !== this._key) {
              var C = this._keyPriorReset = this._key, A = C.words, b = C.sigBytes / 4;
              p(f, A, b);
            }
          },
          encryptBlock: function(C, A) {
            var b = h(f, C[A], C[A + 1]);
            C[A] = b.left, C[A + 1] = b.right;
          },
          decryptBlock: function(C, A) {
            var b = d(f, C[A], C[A + 1]);
            C[A] = b.left, C[A + 1] = b.right;
          },
          blockSize: 64 / 32,
          keySize: 128 / 32,
          ivSize: 64 / 32
        });
        i.Blowfish = a._createHelper(m);
      }(), r.Blowfish;
    });
  }(m1)), m1.exports;
}
(function(t, e) {
  (function(r, i, n) {
    t.exports = i($e(), pl(), iT(), nT(), Ki(), aT(), ii, K6(), mu(), sT(), J6(), oT(), lT(), cT(), bu(), fT(), ai(), _0(), uT(), hT(), dT(), gT(), pT(), vT(), mT(), bT(), xT(), wT(), yT(), _T(), AT(), ET(), CT(), ST(), TT());
  })(Pe, function(r) {
    return r;
  });
})(X6);
var kT = X6.exports;
const Vd = /* @__PURE__ */ Dt(kT);
var Wi = typeof window < "u" ? window : typeof self < "u" ? self : typeof window < "u" ? window : {}, Kt = [], ut = [], FT = typeof Uint8Array < "u" ? Uint8Array : Array, xu = !1;
function Q6() {
  xu = !0;
  for (var t = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", e = 0, r = t.length; e < r; ++e)
    Kt[e] = t[e], ut[t.charCodeAt(e)] = e;
  ut[45] = 62, ut[95] = 63;
}
function OT(t) {
  xu || Q6();
  var e, r, i, n, a, s, o = t.length;
  if (o % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  a = t[o - 2] === "=" ? 2 : t[o - 1] === "=" ? 1 : 0, s = new FT(o * 3 / 4 - a), i = a > 0 ? o - 4 : o;
  var c = 0;
  for (e = 0, r = 0; e < i; e += 4, r += 3)
    n = ut[t.charCodeAt(e)] << 18 | ut[t.charCodeAt(e + 1)] << 12 | ut[t.charCodeAt(e + 2)] << 6 | ut[t.charCodeAt(e + 3)], s[c++] = n >> 16 & 255, s[c++] = n >> 8 & 255, s[c++] = n & 255;
  return a === 2 ? (n = ut[t.charCodeAt(e)] << 2 | ut[t.charCodeAt(e + 1)] >> 4, s[c++] = n & 255) : a === 1 && (n = ut[t.charCodeAt(e)] << 10 | ut[t.charCodeAt(e + 1)] << 4 | ut[t.charCodeAt(e + 2)] >> 2, s[c++] = n >> 8 & 255, s[c++] = n & 255), s;
}
function DT(t) {
  return Kt[t >> 18 & 63] + Kt[t >> 12 & 63] + Kt[t >> 6 & 63] + Kt[t & 63];
}
function BT(t, e, r) {
  for (var i, n = [], a = e; a < r; a += 3)
    i = (t[a] << 16) + (t[a + 1] << 8) + t[a + 2], n.push(DT(i));
  return n.join("");
}
function Yd(t) {
  xu || Q6();
  for (var e, r = t.length, i = r % 3, n = "", a = [], s = 16383, o = 0, c = r - i; o < c; o += s)
    a.push(BT(t, o, o + s > c ? c : o + s));
  return i === 1 ? (e = t[r - 1], n += Kt[e >> 2], n += Kt[e << 4 & 63], n += "==") : i === 2 && (e = (t[r - 2] << 8) + t[r - 1], n += Kt[e >> 10], n += Kt[e >> 4 & 63], n += Kt[e << 2 & 63], n += "="), a.push(n), a.join("");
}
function vl(t, e, r, i, n) {
  var a, s, o = n * 8 - i - 1, c = (1 << o) - 1, l = c >> 1, f = -7, u = r ? n - 1 : 0, h = r ? -1 : 1, d = t[e + u];
  for (u += h, a = d & (1 << -f) - 1, d >>= -f, f += o; f > 0; a = a * 256 + t[e + u], u += h, f -= 8)
    ;
  for (s = a & (1 << -f) - 1, a >>= -f, f += i; f > 0; s = s * 256 + t[e + u], u += h, f -= 8)
    ;
  if (a === 0)
    a = 1 - l;
  else {
    if (a === c)
      return s ? NaN : (d ? -1 : 1) * (1 / 0);
    s = s + Math.pow(2, i), a = a - l;
  }
  return (d ? -1 : 1) * s * Math.pow(2, a - i);
}
function ep(t, e, r, i, n, a) {
  var s, o, c, l = a * 8 - n - 1, f = (1 << l) - 1, u = f >> 1, h = n === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, d = i ? 0 : a - 1, p = i ? 1 : -1, m = e < 0 || e === 0 && 1 / e < 0 ? 1 : 0;
  for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (o = isNaN(e) ? 1 : 0, s = f) : (s = Math.floor(Math.log(e) / Math.LN2), e * (c = Math.pow(2, -s)) < 1 && (s--, c *= 2), s + u >= 1 ? e += h / c : e += h * Math.pow(2, 1 - u), e * c >= 2 && (s++, c /= 2), s + u >= f ? (o = 0, s = f) : s + u >= 1 ? (o = (e * c - 1) * Math.pow(2, n), s = s + u) : (o = e * Math.pow(2, u - 1) * Math.pow(2, n), s = 0)); n >= 8; t[r + d] = o & 255, d += p, o /= 256, n -= 8)
    ;
  for (s = s << n | o, l += n; l > 0; t[r + d] = s & 255, d += p, s /= 256, l -= 8)
    ;
  t[r + d - p] |= m * 128;
}
var IT = {}.toString, tp = Array.isArray || function(t) {
  return IT.call(t) == "[object Array]";
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var rp = 50;
j.TYPED_ARRAY_SUPPORT = Wi.TYPED_ARRAY_SUPPORT !== void 0 ? Wi.TYPED_ARRAY_SUPPORT : !0;
var RT = Lo();
function Lo() {
  return j.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
}
function yr(t, e) {
  if (Lo() < e)
    throw new RangeError("Invalid typed array length");
  return j.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e), t.__proto__ = j.prototype) : (t === null && (t = new j(e)), t.length = e), t;
}
function j(t, e, r) {
  if (!j.TYPED_ARRAY_SUPPORT && !(this instanceof j))
    return new j(t, e, r);
  if (typeof t == "number") {
    if (typeof e == "string")
      throw new Error(
        "If encoding is specified then the first argument must be a string"
      );
    return wu(this, t);
  }
  return ip(this, t, e, r);
}
j.poolSize = 8192;
j._augment = function(t) {
  return t.__proto__ = j.prototype, t;
};
function ip(t, e, r, i) {
  if (typeof e == "number")
    throw new TypeError('"value" argument must not be a number');
  return typeof ArrayBuffer < "u" && e instanceof ArrayBuffer ? NT(t, e, r, i) : typeof e == "string" ? LT(t, e, r) : MT(t, e);
}
j.from = function(t, e, r) {
  return ip(null, t, e, r);
};
j.TYPED_ARRAY_SUPPORT && (j.prototype.__proto__ = Uint8Array.prototype, j.__proto__ = Uint8Array, typeof Symbol < "u" && Symbol.species && j[Symbol.species]);
function np(t) {
  if (typeof t != "number")
    throw new TypeError('"size" argument must be a number');
  if (t < 0)
    throw new RangeError('"size" argument must not be negative');
}
function PT(t, e, r, i) {
  return np(e), e <= 0 ? yr(t, e) : r !== void 0 ? typeof i == "string" ? yr(t, e).fill(r, i) : yr(t, e).fill(r) : yr(t, e);
}
j.alloc = function(t, e, r) {
  return PT(null, t, e, r);
};
function wu(t, e) {
  if (np(e), t = yr(t, e < 0 ? 0 : yu(e) | 0), !j.TYPED_ARRAY_SUPPORT)
    for (var r = 0; r < e; ++r)
      t[r] = 0;
  return t;
}
j.allocUnsafe = function(t) {
  return wu(null, t);
};
j.allocUnsafeSlow = function(t) {
  return wu(null, t);
};
function LT(t, e, r) {
  if ((typeof r != "string" || r === "") && (r = "utf8"), !j.isEncoding(r))
    throw new TypeError('"encoding" must be a valid string encoding');
  var i = ap(e, r) | 0;
  t = yr(t, i);
  var n = t.write(e, r);
  return n !== i && (t = t.slice(0, n)), t;
}
function vf(t, e) {
  var r = e.length < 0 ? 0 : yu(e.length) | 0;
  t = yr(t, r);
  for (var i = 0; i < r; i += 1)
    t[i] = e[i] & 255;
  return t;
}
function NT(t, e, r, i) {
  if (e.byteLength, r < 0 || e.byteLength < r)
    throw new RangeError("'offset' is out of bounds");
  if (e.byteLength < r + (i || 0))
    throw new RangeError("'length' is out of bounds");
  return r === void 0 && i === void 0 ? e = new Uint8Array(e) : i === void 0 ? e = new Uint8Array(e, r) : e = new Uint8Array(e, r, i), j.TYPED_ARRAY_SUPPORT ? (t = e, t.__proto__ = j.prototype) : t = vf(t, e), t;
}
function MT(t, e) {
  if (nr(e)) {
    var r = yu(e.length) | 0;
    return t = yr(t, r), t.length === 0 || e.copy(t, 0, 0, r), t;
  }
  if (e) {
    if (typeof ArrayBuffer < "u" && e.buffer instanceof ArrayBuffer || "length" in e)
      return typeof e.length != "number" || nk(e.length) ? yr(t, 0) : vf(t, e);
    if (e.type === "Buffer" && tp(e.data))
      return vf(t, e.data);
  }
  throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function yu(t) {
  if (t >= Lo())
    throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + Lo().toString(16) + " bytes");
  return t | 0;
}
function UT(t) {
  return +t != t && (t = 0), j.alloc(+t);
}
j.isBuffer = Si;
function nr(t) {
  return !!(t != null && t._isBuffer);
}
j.compare = function(e, r) {
  if (!nr(e) || !nr(r))
    throw new TypeError("Arguments must be Buffers");
  if (e === r) return 0;
  for (var i = e.length, n = r.length, a = 0, s = Math.min(i, n); a < s; ++a)
    if (e[a] !== r[a]) {
      i = e[a], n = r[a];
      break;
    }
  return i < n ? -1 : n < i ? 1 : 0;
};
j.isEncoding = function(e) {
  switch (String(e).toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "latin1":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
      return !0;
    default:
      return !1;
  }
};
j.concat = function(e, r) {
  if (!tp(e))
    throw new TypeError('"list" argument must be an Array of Buffers');
  if (e.length === 0)
    return j.alloc(0);
  var i;
  if (r === void 0)
    for (r = 0, i = 0; i < e.length; ++i)
      r += e[i].length;
  var n = j.allocUnsafe(r), a = 0;
  for (i = 0; i < e.length; ++i) {
    var s = e[i];
    if (!nr(s))
      throw new TypeError('"list" argument must be an Array of Buffers');
    s.copy(n, a), a += s.length;
  }
  return n;
};
function ap(t, e) {
  if (nr(t))
    return t.length;
  if (typeof ArrayBuffer < "u" && typeof ArrayBuffer.isView == "function" && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer))
    return t.byteLength;
  typeof t != "string" && (t = "" + t);
  var r = t.length;
  if (r === 0) return 0;
  for (var i = !1; ; )
    switch (e) {
      case "ascii":
      case "latin1":
      case "binary":
        return r;
      case "utf8":
      case "utf-8":
      case void 0:
        return No(t).length;
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return r * 2;
      case "hex":
        return r >>> 1;
      case "base64":
        return hp(t).length;
      default:
        if (i) return No(t).length;
        e = ("" + e).toLowerCase(), i = !0;
    }
}
j.byteLength = ap;
function $T(t, e, r) {
  var i = !1;
  if ((e === void 0 || e < 0) && (e = 0), e > this.length || ((r === void 0 || r > this.length) && (r = this.length), r <= 0) || (r >>>= 0, e >>>= 0, r <= e))
    return "";
  for (t || (t = "utf8"); ; )
    switch (t) {
      case "hex":
        return XT(this, e, r);
      case "utf8":
      case "utf-8":
        return lp(this, e, r);
      case "ascii":
        return ZT(this, e, r);
      case "latin1":
      case "binary":
        return jT(this, e, r);
      case "base64":
        return YT(this, e, r);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return KT(this, e, r);
      default:
        if (i) throw new TypeError("Unknown encoding: " + t);
        t = (t + "").toLowerCase(), i = !0;
    }
}
j.prototype._isBuffer = !0;
function Ci(t, e, r) {
  var i = t[e];
  t[e] = t[r], t[r] = i;
}
j.prototype.swap16 = function() {
  var e = this.length;
  if (e % 2 !== 0)
    throw new RangeError("Buffer size must be a multiple of 16-bits");
  for (var r = 0; r < e; r += 2)
    Ci(this, r, r + 1);
  return this;
};
j.prototype.swap32 = function() {
  var e = this.length;
  if (e % 4 !== 0)
    throw new RangeError("Buffer size must be a multiple of 32-bits");
  for (var r = 0; r < e; r += 4)
    Ci(this, r, r + 3), Ci(this, r + 1, r + 2);
  return this;
};
j.prototype.swap64 = function() {
  var e = this.length;
  if (e % 8 !== 0)
    throw new RangeError("Buffer size must be a multiple of 64-bits");
  for (var r = 0; r < e; r += 8)
    Ci(this, r, r + 7), Ci(this, r + 1, r + 6), Ci(this, r + 2, r + 5), Ci(this, r + 3, r + 4);
  return this;
};
j.prototype.toString = function() {
  var e = this.length | 0;
  return e === 0 ? "" : arguments.length === 0 ? lp(this, 0, e) : $T.apply(this, arguments);
};
j.prototype.equals = function(e) {
  if (!nr(e)) throw new TypeError("Argument must be a Buffer");
  return this === e ? !0 : j.compare(this, e) === 0;
};
j.prototype.inspect = function() {
  var e = "", r = rp;
  return this.length > 0 && (e = this.toString("hex", 0, r).match(/.{2}/g).join(" "), this.length > r && (e += " ... ")), "<Buffer " + e + ">";
};
j.prototype.compare = function(e, r, i, n, a) {
  if (!nr(e))
    throw new TypeError("Argument must be a Buffer");
  if (r === void 0 && (r = 0), i === void 0 && (i = e ? e.length : 0), n === void 0 && (n = 0), a === void 0 && (a = this.length), r < 0 || i > e.length || n < 0 || a > this.length)
    throw new RangeError("out of range index");
  if (n >= a && r >= i)
    return 0;
  if (n >= a)
    return -1;
  if (r >= i)
    return 1;
  if (r >>>= 0, i >>>= 0, n >>>= 0, a >>>= 0, this === e) return 0;
  for (var s = a - n, o = i - r, c = Math.min(s, o), l = this.slice(n, a), f = e.slice(r, i), u = 0; u < c; ++u)
    if (l[u] !== f[u]) {
      s = l[u], o = f[u];
      break;
    }
  return s < o ? -1 : o < s ? 1 : 0;
};
function sp(t, e, r, i, n) {
  if (t.length === 0) return -1;
  if (typeof r == "string" ? (i = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = n ? 0 : t.length - 1), r < 0 && (r = t.length + r), r >= t.length) {
    if (n) return -1;
    r = t.length - 1;
  } else if (r < 0)
    if (n) r = 0;
    else return -1;
  if (typeof e == "string" && (e = j.from(e, i)), nr(e))
    return e.length === 0 ? -1 : Gd(t, e, r, i, n);
  if (typeof e == "number")
    return e = e & 255, j.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf == "function" ? n ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : Gd(t, [e], r, i, n);
  throw new TypeError("val must be string, number or Buffer");
}
function Gd(t, e, r, i, n) {
  var a = 1, s = t.length, o = e.length;
  if (i !== void 0 && (i = String(i).toLowerCase(), i === "ucs2" || i === "ucs-2" || i === "utf16le" || i === "utf-16le")) {
    if (t.length < 2 || e.length < 2)
      return -1;
    a = 2, s /= 2, o /= 2, r /= 2;
  }
  function c(d, p) {
    return a === 1 ? d[p] : d.readUInt16BE(p * a);
  }
  var l;
  if (n) {
    var f = -1;
    for (l = r; l < s; l++)
      if (c(t, l) === c(e, f === -1 ? 0 : l - f)) {
        if (f === -1 && (f = l), l - f + 1 === o) return f * a;
      } else
        f !== -1 && (l -= l - f), f = -1;
  } else
    for (r + o > s && (r = s - o), l = r; l >= 0; l--) {
      for (var u = !0, h = 0; h < o; h++)
        if (c(t, l + h) !== c(e, h)) {
          u = !1;
          break;
        }
      if (u) return l;
    }
  return -1;
}
j.prototype.includes = function(e, r, i) {
  return this.indexOf(e, r, i) !== -1;
};
j.prototype.indexOf = function(e, r, i) {
  return sp(this, e, r, i, !0);
};
j.prototype.lastIndexOf = function(e, r, i) {
  return sp(this, e, r, i, !1);
};
function zT(t, e, r, i) {
  r = Number(r) || 0;
  var n = t.length - r;
  i ? (i = Number(i), i > n && (i = n)) : i = n;
  var a = e.length;
  if (a % 2 !== 0) throw new TypeError("Invalid hex string");
  i > a / 2 && (i = a / 2);
  for (var s = 0; s < i; ++s) {
    var o = parseInt(e.substr(s * 2, 2), 16);
    if (isNaN(o)) return s;
    t[r + s] = o;
  }
  return s;
}
function WT(t, e, r, i) {
  return xl(No(e, t.length - r), t, r, i);
}
function op(t, e, r, i) {
  return xl(rk(e), t, r, i);
}
function HT(t, e, r, i) {
  return op(t, e, r, i);
}
function qT(t, e, r, i) {
  return xl(hp(e), t, r, i);
}
function VT(t, e, r, i) {
  return xl(ik(e, t.length - r), t, r, i);
}
j.prototype.write = function(e, r, i, n) {
  if (r === void 0)
    n = "utf8", i = this.length, r = 0;
  else if (i === void 0 && typeof r == "string")
    n = r, i = this.length, r = 0;
  else if (isFinite(r))
    r = r | 0, isFinite(i) ? (i = i | 0, n === void 0 && (n = "utf8")) : (n = i, i = void 0);
  else
    throw new Error(
      "Buffer.write(string, encoding, offset[, length]) is no longer supported"
    );
  var a = this.length - r;
  if ((i === void 0 || i > a) && (i = a), e.length > 0 && (i < 0 || r < 0) || r > this.length)
    throw new RangeError("Attempt to write outside buffer bounds");
  n || (n = "utf8");
  for (var s = !1; ; )
    switch (n) {
      case "hex":
        return zT(this, e, r, i);
      case "utf8":
      case "utf-8":
        return WT(this, e, r, i);
      case "ascii":
        return op(this, e, r, i);
      case "latin1":
      case "binary":
        return HT(this, e, r, i);
      case "base64":
        return qT(this, e, r, i);
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return VT(this, e, r, i);
      default:
        if (s) throw new TypeError("Unknown encoding: " + n);
        n = ("" + n).toLowerCase(), s = !0;
    }
};
j.prototype.toJSON = function() {
  return {
    type: "Buffer",
    data: Array.prototype.slice.call(this._arr || this, 0)
  };
};
function YT(t, e, r) {
  return e === 0 && r === t.length ? Yd(t) : Yd(t.slice(e, r));
}
function lp(t, e, r) {
  r = Math.min(t.length, r);
  for (var i = [], n = e; n < r; ) {
    var a = t[n], s = null, o = a > 239 ? 4 : a > 223 ? 3 : a > 191 ? 2 : 1;
    if (n + o <= r) {
      var c, l, f, u;
      switch (o) {
        case 1:
          a < 128 && (s = a);
          break;
        case 2:
          c = t[n + 1], (c & 192) === 128 && (u = (a & 31) << 6 | c & 63, u > 127 && (s = u));
          break;
        case 3:
          c = t[n + 1], l = t[n + 2], (c & 192) === 128 && (l & 192) === 128 && (u = (a & 15) << 12 | (c & 63) << 6 | l & 63, u > 2047 && (u < 55296 || u > 57343) && (s = u));
          break;
        case 4:
          c = t[n + 1], l = t[n + 2], f = t[n + 3], (c & 192) === 128 && (l & 192) === 128 && (f & 192) === 128 && (u = (a & 15) << 18 | (c & 63) << 12 | (l & 63) << 6 | f & 63, u > 65535 && u < 1114112 && (s = u));
      }
    }
    s === null ? (s = 65533, o = 1) : s > 65535 && (s -= 65536, i.push(s >>> 10 & 1023 | 55296), s = 56320 | s & 1023), i.push(s), n += o;
  }
  return GT(i);
}
var Zd = 4096;
function GT(t) {
  var e = t.length;
  if (e <= Zd)
    return String.fromCharCode.apply(String, t);
  for (var r = "", i = 0; i < e; )
    r += String.fromCharCode.apply(
      String,
      t.slice(i, i += Zd)
    );
  return r;
}
function ZT(t, e, r) {
  var i = "";
  r = Math.min(t.length, r);
  for (var n = e; n < r; ++n)
    i += String.fromCharCode(t[n] & 127);
  return i;
}
function jT(t, e, r) {
  var i = "";
  r = Math.min(t.length, r);
  for (var n = e; n < r; ++n)
    i += String.fromCharCode(t[n]);
  return i;
}
function XT(t, e, r) {
  var i = t.length;
  (!e || e < 0) && (e = 0), (!r || r < 0 || r > i) && (r = i);
  for (var n = "", a = e; a < r; ++a)
    n += tk(t[a]);
  return n;
}
function KT(t, e, r) {
  for (var i = t.slice(e, r), n = "", a = 0; a < i.length; a += 2)
    n += String.fromCharCode(i[a] + i[a + 1] * 256);
  return n;
}
j.prototype.slice = function(e, r) {
  var i = this.length;
  e = ~~e, r = r === void 0 ? i : ~~r, e < 0 ? (e += i, e < 0 && (e = 0)) : e > i && (e = i), r < 0 ? (r += i, r < 0 && (r = 0)) : r > i && (r = i), r < e && (r = e);
  var n;
  if (j.TYPED_ARRAY_SUPPORT)
    n = this.subarray(e, r), n.__proto__ = j.prototype;
  else {
    var a = r - e;
    n = new j(a, void 0);
    for (var s = 0; s < a; ++s)
      n[s] = this[s + e];
  }
  return n;
};
function A0(t, e, r) {
  if (t % 1 !== 0 || t < 0) throw new RangeError("offset is not uint");
  if (t + e > r) throw new RangeError("Trying to access beyond buffer length");
}
j.prototype.readUIntLE = function(e, r, i) {
  e = e | 0, r = r | 0, i || A0(e, r, this.length);
  for (var n = this[e], a = 1, s = 0; ++s < r && (a *= 256); )
    n += this[e + s] * a;
  return n;
};
j.prototype.readUIntBE = function(e, r, i) {
  e = e | 0, r = r | 0, i || A0(e, r, this.length);
  for (var n = this[e + --r], a = 1; r > 0 && (a *= 256); )
    n += this[e + --r] * a;
  return n;
};
j.prototype.readUInt8 = function(e, r) {
  return r || A0(e, 1, this.length), this[e];
};
j.prototype.readUInt16LE = function(e, r) {
  return r || A0(e, 2, this.length), this[e] | this[e + 1] << 8;
};
j.prototype.readUInt16BE = function(e, r) {
  return r || A0(e, 2, this.length), this[e] << 8 | this[e + 1];
};
j.prototype.readUInt32LE = function(e, r) {
  return r || A0(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + this[e + 3] * 16777216;
};
j.prototype.readUInt32BE = function(e, r) {
  return r || A0(e, 4, this.length), this[e] * 16777216 + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
};
j.prototype.readIntLE = function(e, r, i) {
  e = e | 0, r = r | 0, i || A0(e, r, this.length);
  for (var n = this[e], a = 1, s = 0; ++s < r && (a *= 256); )
    n += this[e + s] * a;
  return a *= 128, n >= a && (n -= Math.pow(2, 8 * r)), n;
};
j.prototype.readIntBE = function(e, r, i) {
  e = e | 0, r = r | 0, i || A0(e, r, this.length);
  for (var n = r, a = 1, s = this[e + --n]; n > 0 && (a *= 256); )
    s += this[e + --n] * a;
  return a *= 128, s >= a && (s -= Math.pow(2, 8 * r)), s;
};
j.prototype.readInt8 = function(e, r) {
  return r || A0(e, 1, this.length), this[e] & 128 ? (255 - this[e] + 1) * -1 : this[e];
};
j.prototype.readInt16LE = function(e, r) {
  r || A0(e, 2, this.length);
  var i = this[e] | this[e + 1] << 8;
  return i & 32768 ? i | 4294901760 : i;
};
j.prototype.readInt16BE = function(e, r) {
  r || A0(e, 2, this.length);
  var i = this[e + 1] | this[e] << 8;
  return i & 32768 ? i | 4294901760 : i;
};
j.prototype.readInt32LE = function(e, r) {
  return r || A0(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
};
j.prototype.readInt32BE = function(e, r) {
  return r || A0(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
};
j.prototype.readFloatLE = function(e, r) {
  return r || A0(e, 4, this.length), vl(this, e, !0, 23, 4);
};
j.prototype.readFloatBE = function(e, r) {
  return r || A0(e, 4, this.length), vl(this, e, !1, 23, 4);
};
j.prototype.readDoubleLE = function(e, r) {
  return r || A0(e, 8, this.length), vl(this, e, !0, 52, 8);
};
j.prototype.readDoubleBE = function(e, r) {
  return r || A0(e, 8, this.length), vl(this, e, !1, 52, 8);
};
function Q0(t, e, r, i, n, a) {
  if (!nr(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
  if (e > n || e < a) throw new RangeError('"value" argument is out of bounds');
  if (r + i > t.length) throw new RangeError("Index out of range");
}
j.prototype.writeUIntLE = function(e, r, i, n) {
  if (e = +e, r = r | 0, i = i | 0, !n) {
    var a = Math.pow(2, 8 * i) - 1;
    Q0(this, e, r, i, a, 0);
  }
  var s = 1, o = 0;
  for (this[r] = e & 255; ++o < i && (s *= 256); )
    this[r + o] = e / s & 255;
  return r + i;
};
j.prototype.writeUIntBE = function(e, r, i, n) {
  if (e = +e, r = r | 0, i = i | 0, !n) {
    var a = Math.pow(2, 8 * i) - 1;
    Q0(this, e, r, i, a, 0);
  }
  var s = i - 1, o = 1;
  for (this[r + s] = e & 255; --s >= 0 && (o *= 256); )
    this[r + s] = e / o & 255;
  return r + i;
};
j.prototype.writeUInt8 = function(e, r, i) {
  return e = +e, r = r | 0, i || Q0(this, e, r, 1, 255, 0), j.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), this[r] = e & 255, r + 1;
};
function ml(t, e, r, i) {
  e < 0 && (e = 65535 + e + 1);
  for (var n = 0, a = Math.min(t.length - r, 2); n < a; ++n)
    t[r + n] = (e & 255 << 8 * (i ? n : 1 - n)) >>> (i ? n : 1 - n) * 8;
}
j.prototype.writeUInt16LE = function(e, r, i) {
  return e = +e, r = r | 0, i || Q0(this, e, r, 2, 65535, 0), j.TYPED_ARRAY_SUPPORT ? (this[r] = e & 255, this[r + 1] = e >>> 8) : ml(this, e, r, !0), r + 2;
};
j.prototype.writeUInt16BE = function(e, r, i) {
  return e = +e, r = r | 0, i || Q0(this, e, r, 2, 65535, 0), j.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 8, this[r + 1] = e & 255) : ml(this, e, r, !1), r + 2;
};
function bl(t, e, r, i) {
  e < 0 && (e = 4294967295 + e + 1);
  for (var n = 0, a = Math.min(t.length - r, 4); n < a; ++n)
    t[r + n] = e >>> (i ? n : 3 - n) * 8 & 255;
}
j.prototype.writeUInt32LE = function(e, r, i) {
  return e = +e, r = r | 0, i || Q0(this, e, r, 4, 4294967295, 0), j.TYPED_ARRAY_SUPPORT ? (this[r + 3] = e >>> 24, this[r + 2] = e >>> 16, this[r + 1] = e >>> 8, this[r] = e & 255) : bl(this, e, r, !0), r + 4;
};
j.prototype.writeUInt32BE = function(e, r, i) {
  return e = +e, r = r | 0, i || Q0(this, e, r, 4, 4294967295, 0), j.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = e & 255) : bl(this, e, r, !1), r + 4;
};
j.prototype.writeIntLE = function(e, r, i, n) {
  if (e = +e, r = r | 0, !n) {
    var a = Math.pow(2, 8 * i - 1);
    Q0(this, e, r, i, a - 1, -a);
  }
  var s = 0, o = 1, c = 0;
  for (this[r] = e & 255; ++s < i && (o *= 256); )
    e < 0 && c === 0 && this[r + s - 1] !== 0 && (c = 1), this[r + s] = (e / o >> 0) - c & 255;
  return r + i;
};
j.prototype.writeIntBE = function(e, r, i, n) {
  if (e = +e, r = r | 0, !n) {
    var a = Math.pow(2, 8 * i - 1);
    Q0(this, e, r, i, a - 1, -a);
  }
  var s = i - 1, o = 1, c = 0;
  for (this[r + s] = e & 255; --s >= 0 && (o *= 256); )
    e < 0 && c === 0 && this[r + s + 1] !== 0 && (c = 1), this[r + s] = (e / o >> 0) - c & 255;
  return r + i;
};
j.prototype.writeInt8 = function(e, r, i) {
  return e = +e, r = r | 0, i || Q0(this, e, r, 1, 127, -128), j.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)), e < 0 && (e = 255 + e + 1), this[r] = e & 255, r + 1;
};
j.prototype.writeInt16LE = function(e, r, i) {
  return e = +e, r = r | 0, i || Q0(this, e, r, 2, 32767, -32768), j.TYPED_ARRAY_SUPPORT ? (this[r] = e & 255, this[r + 1] = e >>> 8) : ml(this, e, r, !0), r + 2;
};
j.prototype.writeInt16BE = function(e, r, i) {
  return e = +e, r = r | 0, i || Q0(this, e, r, 2, 32767, -32768), j.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 8, this[r + 1] = e & 255) : ml(this, e, r, !1), r + 2;
};
j.prototype.writeInt32LE = function(e, r, i) {
  return e = +e, r = r | 0, i || Q0(this, e, r, 4, 2147483647, -2147483648), j.TYPED_ARRAY_SUPPORT ? (this[r] = e & 255, this[r + 1] = e >>> 8, this[r + 2] = e >>> 16, this[r + 3] = e >>> 24) : bl(this, e, r, !0), r + 4;
};
j.prototype.writeInt32BE = function(e, r, i) {
  return e = +e, r = r | 0, i || Q0(this, e, r, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), j.TYPED_ARRAY_SUPPORT ? (this[r] = e >>> 24, this[r + 1] = e >>> 16, this[r + 2] = e >>> 8, this[r + 3] = e & 255) : bl(this, e, r, !1), r + 4;
};
function cp(t, e, r, i, n, a) {
  if (r + i > t.length) throw new RangeError("Index out of range");
  if (r < 0) throw new RangeError("Index out of range");
}
function fp(t, e, r, i, n) {
  return n || cp(t, e, r, 4), ep(t, e, r, i, 23, 4), r + 4;
}
j.prototype.writeFloatLE = function(e, r, i) {
  return fp(this, e, r, !0, i);
};
j.prototype.writeFloatBE = function(e, r, i) {
  return fp(this, e, r, !1, i);
};
function up(t, e, r, i, n) {
  return n || cp(t, e, r, 8), ep(t, e, r, i, 52, 8), r + 8;
}
j.prototype.writeDoubleLE = function(e, r, i) {
  return up(this, e, r, !0, i);
};
j.prototype.writeDoubleBE = function(e, r, i) {
  return up(this, e, r, !1, i);
};
j.prototype.copy = function(e, r, i, n) {
  if (i || (i = 0), !n && n !== 0 && (n = this.length), r >= e.length && (r = e.length), r || (r = 0), n > 0 && n < i && (n = i), n === i || e.length === 0 || this.length === 0) return 0;
  if (r < 0)
    throw new RangeError("targetStart out of bounds");
  if (i < 0 || i >= this.length) throw new RangeError("sourceStart out of bounds");
  if (n < 0) throw new RangeError("sourceEnd out of bounds");
  n > this.length && (n = this.length), e.length - r < n - i && (n = e.length - r + i);
  var a = n - i, s;
  if (this === e && i < r && r < n)
    for (s = a - 1; s >= 0; --s)
      e[s + r] = this[s + i];
  else if (a < 1e3 || !j.TYPED_ARRAY_SUPPORT)
    for (s = 0; s < a; ++s)
      e[s + r] = this[s + i];
  else
    Uint8Array.prototype.set.call(
      e,
      this.subarray(i, i + a),
      r
    );
  return a;
};
j.prototype.fill = function(e, r, i, n) {
  if (typeof e == "string") {
    if (typeof r == "string" ? (n = r, r = 0, i = this.length) : typeof i == "string" && (n = i, i = this.length), e.length === 1) {
      var a = e.charCodeAt(0);
      a < 256 && (e = a);
    }
    if (n !== void 0 && typeof n != "string")
      throw new TypeError("encoding must be a string");
    if (typeof n == "string" && !j.isEncoding(n))
      throw new TypeError("Unknown encoding: " + n);
  } else typeof e == "number" && (e = e & 255);
  if (r < 0 || this.length < r || this.length < i)
    throw new RangeError("Out of range index");
  if (i <= r)
    return this;
  r = r >>> 0, i = i === void 0 ? this.length : i >>> 0, e || (e = 0);
  var s;
  if (typeof e == "number")
    for (s = r; s < i; ++s)
      this[s] = e;
  else {
    var o = nr(e) ? e : No(new j(e, n).toString()), c = o.length;
    for (s = 0; s < i - r; ++s)
      this[s + r] = o[s % c];
  }
  return this;
};
var JT = /[^+\/0-9A-Za-z-_]/g;
function QT(t) {
  if (t = ek(t).replace(JT, ""), t.length < 2) return "";
  for (; t.length % 4 !== 0; )
    t = t + "=";
  return t;
}
function ek(t) {
  return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
}
function tk(t) {
  return t < 16 ? "0" + t.toString(16) : t.toString(16);
}
function No(t, e) {
  e = e || 1 / 0;
  for (var r, i = t.length, n = null, a = [], s = 0; s < i; ++s) {
    if (r = t.charCodeAt(s), r > 55295 && r < 57344) {
      if (!n) {
        if (r > 56319) {
          (e -= 3) > -1 && a.push(239, 191, 189);
          continue;
        } else if (s + 1 === i) {
          (e -= 3) > -1 && a.push(239, 191, 189);
          continue;
        }
        n = r;
        continue;
      }
      if (r < 56320) {
        (e -= 3) > -1 && a.push(239, 191, 189), n = r;
        continue;
      }
      r = (n - 55296 << 10 | r - 56320) + 65536;
    } else n && (e -= 3) > -1 && a.push(239, 191, 189);
    if (n = null, r < 128) {
      if ((e -= 1) < 0) break;
      a.push(r);
    } else if (r < 2048) {
      if ((e -= 2) < 0) break;
      a.push(
        r >> 6 | 192,
        r & 63 | 128
      );
    } else if (r < 65536) {
      if ((e -= 3) < 0) break;
      a.push(
        r >> 12 | 224,
        r >> 6 & 63 | 128,
        r & 63 | 128
      );
    } else if (r < 1114112) {
      if ((e -= 4) < 0) break;
      a.push(
        r >> 18 | 240,
        r >> 12 & 63 | 128,
        r >> 6 & 63 | 128,
        r & 63 | 128
      );
    } else
      throw new Error("Invalid code point");
  }
  return a;
}
function rk(t) {
  for (var e = [], r = 0; r < t.length; ++r)
    e.push(t.charCodeAt(r) & 255);
  return e;
}
function ik(t, e) {
  for (var r, i, n, a = [], s = 0; s < t.length && !((e -= 2) < 0); ++s)
    r = t.charCodeAt(s), i = r >> 8, n = r % 256, a.push(n), a.push(i);
  return a;
}
function hp(t) {
  return OT(QT(t));
}
function xl(t, e, r, i) {
  for (var n = 0; n < i && !(n + r >= e.length || n >= t.length); ++n)
    e[n + r] = t[n];
  return n;
}
function nk(t) {
  return t !== t;
}
function Si(t) {
  return t != null && (!!t._isBuffer || dp(t) || ak(t));
}
function dp(t) {
  return !!t.constructor && typeof t.constructor.isBuffer == "function" && t.constructor.isBuffer(t);
}
function ak(t) {
  return typeof t.readFloatLE == "function" && typeof t.slice == "function" && dp(t.slice(0, 0));
}
var sk = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  Buffer: j,
  INSPECT_MAX_BYTES: rp,
  SlowBuffer: UT,
  isBuffer: Si,
  kMaxLength: RT
}), Mo = typeof globalThis < "u" ? globalThis : typeof window < "u" || typeof window < "u" ? window : typeof self < "u" ? self : {};
function gp(t) {
  return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, "default") ? t.default : t;
}
function Xn(t) {
  if (t.__esModule) return t;
  var e = t.default;
  if (typeof e == "function") {
    var r = function i() {
      return this instanceof i ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
    };
    r.prototype = e.prototype;
  } else r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(t).forEach(function(i) {
    var n = Object.getOwnPropertyDescriptor(t, i);
    Object.defineProperty(r, i, n.get ? n : {
      enumerable: !0,
      get: function() {
        return t[i];
      }
    });
  }), r;
}
var mf = { exports: {} }, Kn = {};
function pp() {
  throw new Error("setTimeout has not been defined");
}
function vp() {
  throw new Error("clearTimeout has not been defined");
}
var Mr = pp, Ur = vp;
typeof Wi.setTimeout == "function" && (Mr = setTimeout);
typeof Wi.clearTimeout == "function" && (Ur = clearTimeout);
function mp(t) {
  if (Mr === setTimeout)
    return setTimeout(t, 0);
  if ((Mr === pp || !Mr) && setTimeout)
    return Mr = setTimeout, setTimeout(t, 0);
  try {
    return Mr(t, 0);
  } catch {
    try {
      return Mr.call(null, t, 0);
    } catch {
      return Mr.call(this, t, 0);
    }
  }
}
function ok(t) {
  if (Ur === clearTimeout)
    return clearTimeout(t);
  if ((Ur === vp || !Ur) && clearTimeout)
    return Ur = clearTimeout, clearTimeout(t);
  try {
    return Ur(t);
  } catch {
    try {
      return Ur.call(null, t);
    } catch {
      return Ur.call(this, t);
    }
  }
}
var _r = [], Sn = !1, Ti, oo = -1;
function lk() {
  !Sn || !Ti || (Sn = !1, Ti.length ? _r = Ti.concat(_r) : oo = -1, _r.length && bp());
}
function bp() {
  if (!Sn) {
    var t = mp(lk);
    Sn = !0;
    for (var e = _r.length; e; ) {
      for (Ti = _r, _r = []; ++oo < e; )
        Ti && Ti[oo].run();
      oo = -1, e = _r.length;
    }
    Ti = null, Sn = !1, ok(t);
  }
}
function ck(t) {
  var e = new Array(arguments.length - 1);
  if (arguments.length > 1)
    for (var r = 1; r < arguments.length; r++)
      e[r - 1] = arguments[r];
  _r.push(new xp(t, e)), _r.length === 1 && !Sn && mp(bp);
}
function xp(t, e) {
  this.fun = t, this.array = e;
}
xp.prototype.run = function() {
  this.fun.apply(null, this.array);
};
var fk = "browser", uk = "browser", hk = !0, dk = {}, gk = [], pk = "", vk = {}, mk = {}, bk = {};
function Ji() {
}
var xk = Ji, wk = Ji, yk = Ji, _k = Ji, Ak = Ji, Ek = Ji, Ck = Ji;
function Sk(t) {
  throw new Error("process.binding is not supported");
}
function Tk() {
  return "/";
}
function kk(t) {
  throw new Error("process.chdir is not supported");
}
function Fk() {
  return 0;
}
var pn = Wi.performance || {}, Ok = pn.now || pn.mozNow || pn.msNow || pn.oNow || pn.webkitNow || function() {
  return (/* @__PURE__ */ new Date()).getTime();
};
function Dk(t) {
  var e = Ok.call(pn) * 1e-3, r = Math.floor(e), i = Math.floor(e % 1 * 1e9);
  return t && (r = r - t[0], i = i - t[1], i < 0 && (r--, i += 1e9)), [r, i];
}
var Bk = /* @__PURE__ */ new Date();
function Ik() {
  var t = /* @__PURE__ */ new Date(), e = t - Bk;
  return e / 1e3;
}
var De = {
  nextTick: ck,
  title: fk,
  browser: hk,
  env: dk,
  argv: gk,
  version: pk,
  versions: vk,
  on: xk,
  addListener: wk,
  once: yk,
  off: _k,
  removeListener: Ak,
  removeAllListeners: Ek,
  emit: Ck,
  binding: Sk,
  cwd: Tk,
  chdir: kk,
  umask: Fk,
  hrtime: Dk,
  platform: uk,
  release: mk,
  config: bk,
  uptime: Ik
}, b1;
function Qr() {
}
Qr.prototype = /* @__PURE__ */ Object.create(null);
function Xe() {
  Xe.init.call(this);
}
Xe.EventEmitter = Xe;
Xe.usingDomains = !1;
Xe.prototype.domain = void 0;
Xe.prototype._events = void 0;
Xe.prototype._maxListeners = void 0;
Xe.defaultMaxListeners = 10;
Xe.init = function() {
  this.domain = null, Xe.usingDomains && b1.active && !(this instanceof b1.Domain) && (this.domain = b1.active), (!this._events || this._events === Object.getPrototypeOf(this)._events) && (this._events = new Qr(), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
Xe.prototype.setMaxListeners = function(e) {
  if (typeof e != "number" || e < 0 || isNaN(e))
    throw new TypeError('"n" argument must be a positive number');
  return this._maxListeners = e, this;
};
function wp(t) {
  return t._maxListeners === void 0 ? Xe.defaultMaxListeners : t._maxListeners;
}
Xe.prototype.getMaxListeners = function() {
  return wp(this);
};
function Rk(t, e, r) {
  if (e)
    t.call(r);
  else
    for (var i = t.length, n = us(t, i), a = 0; a < i; ++a)
      n[a].call(r);
}
function Pk(t, e, r, i) {
  if (e)
    t.call(r, i);
  else
    for (var n = t.length, a = us(t, n), s = 0; s < n; ++s)
      a[s].call(r, i);
}
function Lk(t, e, r, i, n) {
  if (e)
    t.call(r, i, n);
  else
    for (var a = t.length, s = us(t, a), o = 0; o < a; ++o)
      s[o].call(r, i, n);
}
function Nk(t, e, r, i, n, a) {
  if (e)
    t.call(r, i, n, a);
  else
    for (var s = t.length, o = us(t, s), c = 0; c < s; ++c)
      o[c].call(r, i, n, a);
}
function Mk(t, e, r, i) {
  if (e)
    t.apply(r, i);
  else
    for (var n = t.length, a = us(t, n), s = 0; s < n; ++s)
      a[s].apply(r, i);
}
Xe.prototype.emit = function(e) {
  var r, i, n, a, s, o, c, l = e === "error";
  if (o = this._events, o)
    l = l && o.error == null;
  else if (!l)
    return !1;
  if (c = this.domain, l) {
    if (r = arguments[1], c)
      r || (r = new Error('Uncaught, unspecified "error" event')), r.domainEmitter = this, r.domain = c, r.domainThrown = !1, c.emit("error", r);
    else {
      if (r instanceof Error)
        throw r;
      var f = new Error('Uncaught, unspecified "error" event. (' + r + ")");
      throw f.context = r, f;
    }
    return !1;
  }
  if (i = o[e], !i)
    return !1;
  var u = typeof i == "function";
  switch (n = arguments.length, n) {
    case 1:
      Rk(i, u, this);
      break;
    case 2:
      Pk(i, u, this, arguments[1]);
      break;
    case 3:
      Lk(i, u, this, arguments[1], arguments[2]);
      break;
    case 4:
      Nk(i, u, this, arguments[1], arguments[2], arguments[3]);
      break;
    default:
      for (a = new Array(n - 1), s = 1; s < n; s++)
        a[s - 1] = arguments[s];
      Mk(i, u, this, a);
  }
  return !0;
};
function yp(t, e, r, i) {
  var n, a, s;
  if (typeof r != "function")
    throw new TypeError('"listener" argument must be a function');
  if (a = t._events, a ? (a.newListener && (t.emit(
    "newListener",
    e,
    r.listener ? r.listener : r
  ), a = t._events), s = a[e]) : (a = t._events = new Qr(), t._eventsCount = 0), !s)
    s = a[e] = r, ++t._eventsCount;
  else if (typeof s == "function" ? s = a[e] = i ? [r, s] : [s, r] : i ? s.unshift(r) : s.push(r), !s.warned && (n = wp(t), n && n > 0 && s.length > n)) {
    s.warned = !0;
    var o = new Error("Possible EventEmitter memory leak detected. " + s.length + " " + e + " listeners added. Use emitter.setMaxListeners() to increase limit");
    o.name = "MaxListenersExceededWarning", o.emitter = t, o.type = e, o.count = s.length, Uk(o);
  }
  return t;
}
function Uk(t) {
  typeof console.warn == "function" ? console.warn(t) : console.log(t);
}
Xe.prototype.addListener = function(e, r) {
  return yp(this, e, r, !1);
};
Xe.prototype.on = Xe.prototype.addListener;
Xe.prototype.prependListener = function(e, r) {
  return yp(this, e, r, !0);
};
function _p(t, e, r) {
  var i = !1;
  function n() {
    t.removeListener(e, n), i || (i = !0, r.apply(t, arguments));
  }
  return n.listener = r, n;
}
Xe.prototype.once = function(e, r) {
  if (typeof r != "function")
    throw new TypeError('"listener" argument must be a function');
  return this.on(e, _p(this, e, r)), this;
};
Xe.prototype.prependOnceListener = function(e, r) {
  if (typeof r != "function")
    throw new TypeError('"listener" argument must be a function');
  return this.prependListener(e, _p(this, e, r)), this;
};
Xe.prototype.removeListener = function(e, r) {
  var i, n, a, s, o;
  if (typeof r != "function")
    throw new TypeError('"listener" argument must be a function');
  if (n = this._events, !n)
    return this;
  if (i = n[e], !i)
    return this;
  if (i === r || i.listener && i.listener === r)
    --this._eventsCount === 0 ? this._events = new Qr() : (delete n[e], n.removeListener && this.emit("removeListener", e, i.listener || r));
  else if (typeof i != "function") {
    for (a = -1, s = i.length; s-- > 0; )
      if (i[s] === r || i[s].listener && i[s].listener === r) {
        o = i[s].listener, a = s;
        break;
      }
    if (a < 0)
      return this;
    if (i.length === 1) {
      if (i[0] = void 0, --this._eventsCount === 0)
        return this._events = new Qr(), this;
      delete n[e];
    } else
      $k(i, a);
    n.removeListener && this.emit("removeListener", e, o || r);
  }
  return this;
};
Xe.prototype.off = function(t, e) {
  return this.removeListener(t, e);
};
Xe.prototype.removeAllListeners = function(e) {
  var r, i;
  if (i = this._events, !i)
    return this;
  if (!i.removeListener)
    return arguments.length === 0 ? (this._events = new Qr(), this._eventsCount = 0) : i[e] && (--this._eventsCount === 0 ? this._events = new Qr() : delete i[e]), this;
  if (arguments.length === 0) {
    for (var n = Object.keys(i), a = 0, s; a < n.length; ++a)
      s = n[a], s !== "removeListener" && this.removeAllListeners(s);
    return this.removeAllListeners("removeListener"), this._events = new Qr(), this._eventsCount = 0, this;
  }
  if (r = i[e], typeof r == "function")
    this.removeListener(e, r);
  else if (r)
    do
      this.removeListener(e, r[r.length - 1]);
    while (r[0]);
  return this;
};
Xe.prototype.listeners = function(e) {
  var r, i, n = this._events;
  return n ? (r = n[e], r ? typeof r == "function" ? i = [r.listener || r] : i = zk(r) : i = []) : i = [], i;
};
Xe.listenerCount = function(t, e) {
  return typeof t.listenerCount == "function" ? t.listenerCount(e) : Ap.call(t, e);
};
Xe.prototype.listenerCount = Ap;
function Ap(t) {
  var e = this._events;
  if (e) {
    var r = e[t];
    if (typeof r == "function")
      return 1;
    if (r)
      return r.length;
  }
  return 0;
}
Xe.prototype.eventNames = function() {
  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
};
function $k(t, e) {
  for (var r = e, i = r + 1, n = t.length; i < n; r += 1, i += 1)
    t[r] = t[i];
  t.pop();
}
function us(t, e) {
  for (var r = new Array(e); e--; )
    r[e] = t[e];
  return r;
}
function zk(t) {
  for (var e = new Array(t.length), r = 0; r < e.length; ++r)
    e[r] = t[r].listener || t[r];
  return e;
}
var Wk = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  EventEmitter: Xe,
  default: Xe
}), Ep = /* @__PURE__ */ Xn(Wk), Cp = Ep.EventEmitter, qa = /* @__PURE__ */ Xn(sk), Va;
typeof Object.create == "function" ? Va = function(e, r) {
  e.super_ = r, e.prototype = Object.create(r.prototype, {
    constructor: {
      value: e,
      enumerable: !1,
      writable: !0,
      configurable: !0
    }
  });
} : Va = function(e, r) {
  e.super_ = r;
  var i = function() {
  };
  i.prototype = r.prototype, e.prototype = new i(), e.prototype.constructor = e;
};
var Sp = Object.getOwnPropertyDescriptors || function(e) {
  for (var r = Object.keys(e), i = {}, n = 0; n < r.length; n++)
    i[r[n]] = Object.getOwnPropertyDescriptor(e, r[n]);
  return i;
}, Hk = /%[sdj%]/g;
function wl(t) {
  if (!ds(t)) {
    for (var e = [], r = 0; r < arguments.length; r++)
      e.push(St(arguments[r]));
    return e.join(" ");
  }
  for (var r = 1, i = arguments, n = i.length, a = String(t).replace(Hk, function(o) {
    if (o === "%%") return "%";
    if (r >= n) return o;
    switch (o) {
      case "%s":
        return String(i[r++]);
      case "%d":
        return Number(i[r++]);
      case "%j":
        try {
          return JSON.stringify(i[r++]);
        } catch {
          return "[Circular]";
        }
      default:
        return o;
    }
  }), s = i[r]; r < n; s = i[++r])
    hs(s) || !Qi(s) ? a += " " + s : a += " " + St(s);
  return a;
}
function _u(t, e) {
  if (er(Wi.process))
    return function() {
      return _u(t, e).apply(this, arguments);
    };
  if (De.noDeprecation === !0)
    return t;
  var r = !1;
  function i() {
    if (!r) {
      if (De.throwDeprecation)
        throw new Error(e);
      De.traceDeprecation ? console.trace(e) : console.error(e), r = !0;
    }
    return t.apply(this, arguments);
  }
  return i;
}
var qs = {}, x1;
function Tp(t) {
  if (er(x1) && (x1 = De.env.NODE_DEBUG || ""), t = t.toUpperCase(), !qs[t])
    if (new RegExp("\\b" + t + "\\b", "i").test(x1)) {
      var e = 0;
      qs[t] = function() {
        var r = wl.apply(null, arguments);
        console.error("%s %d: %s", t, e, r);
      };
    } else
      qs[t] = function() {
      };
  return qs[t];
}
function St(t, e) {
  var r = {
    seen: [],
    stylize: Vk
  };
  return arguments.length >= 3 && (r.depth = arguments[2]), arguments.length >= 4 && (r.colors = arguments[3]), yl(e) ? r.showHidden = e : e && Su(r, e), er(r.showHidden) && (r.showHidden = !1), er(r.depth) && (r.depth = 2), er(r.colors) && (r.colors = !1), er(r.customInspect) && (r.customInspect = !0), r.colors && (r.stylize = qk), Uo(r, t, r.depth);
}
St.colors = {
  bold: [1, 22],
  italic: [3, 23],
  underline: [4, 24],
  inverse: [7, 27],
  white: [37, 39],
  grey: [90, 39],
  black: [30, 39],
  blue: [34, 39],
  cyan: [36, 39],
  green: [32, 39],
  magenta: [35, 39],
  red: [31, 39],
  yellow: [33, 39]
};
St.styles = {
  special: "cyan",
  number: "yellow",
  boolean: "yellow",
  undefined: "grey",
  null: "bold",
  string: "green",
  date: "magenta",
  // "name": intentionally not styling
  regexp: "red"
};
function qk(t, e) {
  var r = St.styles[e];
  return r ? "\x1B[" + St.colors[r][0] + "m" + t + "\x1B[" + St.colors[r][1] + "m" : t;
}
function Vk(t, e) {
  return t;
}
function Yk(t) {
  var e = {};
  return t.forEach(function(r, i) {
    e[r] = !0;
  }), e;
}
function Uo(t, e, r) {
  if (t.customInspect && e && Ri(e.inspect) && // Filter out the util module, it's inspect function is special
  e.inspect !== St && // Also filter out any prototype objects using the circular check.
  !(e.constructor && e.constructor.prototype === e)) {
    var i = e.inspect(r, t);
    return ds(i) || (i = Uo(t, i, r)), i;
  }
  var n = Gk(t, e);
  if (n)
    return n;
  var a = Object.keys(e), s = Yk(a);
  if (t.showHidden && (a = Object.getOwnPropertyNames(e)), Tn(e) && (a.indexOf("message") >= 0 || a.indexOf("description") >= 0))
    return w1(e);
  if (a.length === 0) {
    if (Ri(e)) {
      var o = e.name ? ": " + e.name : "";
      return t.stylize("[Function" + o + "]", "special");
    }
    if (Ii(e))
      return t.stylize(RegExp.prototype.toString.call(e), "regexp");
    if (Nn(e))
      return t.stylize(Date.prototype.toString.call(e), "date");
    if (Tn(e))
      return w1(e);
  }
  var c = "", l = !1, f = ["{", "}"];
  if (Au(e) && (l = !0, f = ["[", "]"]), Ri(e)) {
    var u = e.name ? ": " + e.name : "";
    c = " [Function" + u + "]";
  }
  if (Ii(e) && (c = " " + RegExp.prototype.toString.call(e)), Nn(e) && (c = " " + Date.prototype.toUTCString.call(e)), Tn(e) && (c = " " + w1(e)), a.length === 0 && (!l || e.length == 0))
    return f[0] + c + f[1];
  if (r < 0)
    return Ii(e) ? t.stylize(RegExp.prototype.toString.call(e), "regexp") : t.stylize("[Object]", "special");
  t.seen.push(e);
  var h;
  return l ? h = Zk(t, e, r, s, a) : h = a.map(function(d) {
    return bf(t, e, r, s, d, l);
  }), t.seen.pop(), jk(h, c, f);
}
function Gk(t, e) {
  if (er(e))
    return t.stylize("undefined", "undefined");
  if (ds(e)) {
    var r = "'" + JSON.stringify(e).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
    return t.stylize(r, "string");
  }
  if (Eu(e))
    return t.stylize("" + e, "number");
  if (yl(e))
    return t.stylize("" + e, "boolean");
  if (hs(e))
    return t.stylize("null", "null");
}
function w1(t) {
  return "[" + Error.prototype.toString.call(t) + "]";
}
function Zk(t, e, r, i, n) {
  for (var a = [], s = 0, o = e.length; s < o; ++s)
    Bp(e, String(s)) ? a.push(bf(
      t,
      e,
      r,
      i,
      String(s),
      !0
    )) : a.push("");
  return n.forEach(function(c) {
    c.match(/^\d+$/) || a.push(bf(
      t,
      e,
      r,
      i,
      c,
      !0
    ));
  }), a;
}
function bf(t, e, r, i, n, a) {
  var s, o, c;
  if (c = Object.getOwnPropertyDescriptor(e, n) || { value: e[n] }, c.get ? c.set ? o = t.stylize("[Getter/Setter]", "special") : o = t.stylize("[Getter]", "special") : c.set && (o = t.stylize("[Setter]", "special")), Bp(i, n) || (s = "[" + n + "]"), o || (t.seen.indexOf(c.value) < 0 ? (hs(r) ? o = Uo(t, c.value, null) : o = Uo(t, c.value, r - 1), o.indexOf(`
`) > -1 && (a ? o = o.split(`
`).map(function(l) {
    return "  " + l;
  }).join(`
`).substr(2) : o = `
` + o.split(`
`).map(function(l) {
    return "   " + l;
  }).join(`
`))) : o = t.stylize("[Circular]", "special")), er(s)) {
    if (a && n.match(/^\d+$/))
      return o;
    s = JSON.stringify("" + n), s.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (s = s.substr(1, s.length - 2), s = t.stylize(s, "name")) : (s = s.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), s = t.stylize(s, "string"));
  }
  return s + ": " + o;
}
function jk(t, e, r) {
  var i = t.reduce(function(n, a) {
    return a.indexOf(`
`) >= 0, n + a.replace(/\u001b\[\d\d?m/g, "").length + 1;
  }, 0);
  return i > 60 ? r[0] + (e === "" ? "" : e + `
 `) + " " + t.join(`,
  `) + " " + r[1] : r[0] + e + " " + t.join(", ") + " " + r[1];
}
function Au(t) {
  return Array.isArray(t);
}
function yl(t) {
  return typeof t == "boolean";
}
function hs(t) {
  return t === null;
}
function kp(t) {
  return t == null;
}
function Eu(t) {
  return typeof t == "number";
}
function ds(t) {
  return typeof t == "string";
}
function Fp(t) {
  return typeof t == "symbol";
}
function er(t) {
  return t === void 0;
}
function Ii(t) {
  return Qi(t) && Cu(t) === "[object RegExp]";
}
function Qi(t) {
  return typeof t == "object" && t !== null;
}
function Nn(t) {
  return Qi(t) && Cu(t) === "[object Date]";
}
function Tn(t) {
  return Qi(t) && (Cu(t) === "[object Error]" || t instanceof Error);
}
function Ri(t) {
  return typeof t == "function";
}
function $o(t) {
  return t === null || typeof t == "boolean" || typeof t == "number" || typeof t == "string" || typeof t == "symbol" || // ES6 symbol
  typeof t > "u";
}
function Op(t) {
  return j.isBuffer(t);
}
function Cu(t) {
  return Object.prototype.toString.call(t);
}
function y1(t) {
  return t < 10 ? "0" + t.toString(10) : t.toString(10);
}
var Xk = [
  "Jan",
  "Feb",
  "Mar",
  "Apr",
  "May",
  "Jun",
  "Jul",
  "Aug",
  "Sep",
  "Oct",
  "Nov",
  "Dec"
];
function Kk() {
  var t = /* @__PURE__ */ new Date(), e = [
    y1(t.getHours()),
    y1(t.getMinutes()),
    y1(t.getSeconds())
  ].join(":");
  return [t.getDate(), Xk[t.getMonth()], e].join(" ");
}
function Dp() {
  console.log("%s - %s", Kk(), wl.apply(null, arguments));
}
function Su(t, e) {
  if (!e || !Qi(e)) return t;
  for (var r = Object.keys(e), i = r.length; i--; )
    t[r[i]] = e[r[i]];
  return t;
}
function Bp(t, e) {
  return Object.prototype.hasOwnProperty.call(t, e);
}
var hi = typeof Symbol < "u" ? Symbol("util.promisify.custom") : void 0;
function Tu(t) {
  if (typeof t != "function")
    throw new TypeError('The "original" argument must be of type Function');
  if (hi && t[hi]) {
    var e = t[hi];
    if (typeof e != "function")
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    return Object.defineProperty(e, hi, {
      value: e,
      enumerable: !1,
      writable: !1,
      configurable: !0
    }), e;
  }
  function e() {
    for (var r, i, n = new Promise(function(o, c) {
      r = o, i = c;
    }), a = [], s = 0; s < arguments.length; s++)
      a.push(arguments[s]);
    a.push(function(o, c) {
      o ? i(o) : r(c);
    });
    try {
      t.apply(this, a);
    } catch (o) {
      i(o);
    }
    return n;
  }
  return Object.setPrototypeOf(e, Object.getPrototypeOf(t)), hi && Object.defineProperty(e, hi, {
    value: e,
    enumerable: !1,
    writable: !1,
    configurable: !0
  }), Object.defineProperties(
    e,
    Sp(t)
  );
}
Tu.custom = hi;
function Jk(t, e) {
  if (!t) {
    var r = new Error("Promise was rejected with a falsy value");
    r.reason = t, t = r;
  }
  return e(t);
}
function Ip(t) {
  if (typeof t != "function")
    throw new TypeError('The "original" argument must be of type Function');
  function e() {
    for (var r = [], i = 0; i < arguments.length; i++)
      r.push(arguments[i]);
    var n = r.pop();
    if (typeof n != "function")
      throw new TypeError("The last argument must be of type Function");
    var a = this, s = function() {
      return n.apply(a, arguments);
    };
    t.apply(this, r).then(
      function(o) {
        De.nextTick(s.bind(null, null, o));
      },
      function(o) {
        De.nextTick(Jk.bind(null, o, s));
      }
    );
  }
  return Object.setPrototypeOf(e, Object.getPrototypeOf(t)), Object.defineProperties(e, Sp(t)), e;
}
var Qk = {
  inherits: Va,
  _extend: Su,
  log: Dp,
  isBuffer: Op,
  isPrimitive: $o,
  isFunction: Ri,
  isError: Tn,
  isDate: Nn,
  isObject: Qi,
  isRegExp: Ii,
  isUndefined: er,
  isSymbol: Fp,
  isString: ds,
  isNumber: Eu,
  isNullOrUndefined: kp,
  isNull: hs,
  isBoolean: yl,
  isArray: Au,
  inspect: St,
  deprecate: _u,
  format: wl,
  debuglog: Tp,
  promisify: Tu,
  callbackify: Ip
}, eF = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  _extend: Su,
  callbackify: Ip,
  debuglog: Tp,
  default: Qk,
  deprecate: _u,
  format: wl,
  inherits: Va,
  inspect: St,
  isArray: Au,
  isBoolean: yl,
  isBuffer: Op,
  isDate: Nn,
  isError: Tn,
  isFunction: Ri,
  isNull: hs,
  isNullOrUndefined: kp,
  isNumber: Eu,
  isObject: Qi,
  isPrimitive: $o,
  isRegExp: Ii,
  isString: ds,
  isSymbol: Fp,
  isUndefined: er,
  log: Dp,
  promisify: Tu
}), ku = /* @__PURE__ */ Xn(eF), _1, jd;
function tF() {
  if (jd) return _1;
  jd = 1;
  function t(h, d) {
    var p = Object.keys(h);
    if (Object.getOwnPropertySymbols) {
      var m = Object.getOwnPropertySymbols(h);
      d && (m = m.filter(function(C) {
        return Object.getOwnPropertyDescriptor(h, C).enumerable;
      })), p.push.apply(p, m);
    }
    return p;
  }
  function e(h) {
    for (var d = 1; d < arguments.length; d++) {
      var p = arguments[d] != null ? arguments[d] : {};
      d % 2 ? t(Object(p), !0).forEach(function(m) {
        r(h, m, p[m]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(h, Object.getOwnPropertyDescriptors(p)) : t(Object(p)).forEach(function(m) {
        Object.defineProperty(h, m, Object.getOwnPropertyDescriptor(p, m));
      });
    }
    return h;
  }
  function r(h, d, p) {
    return d in h ? Object.defineProperty(h, d, {
      value: p,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : h[d] = p, h;
  }
  function i(h, d) {
    if (!(h instanceof d))
      throw new TypeError("Cannot call a class as a function");
  }
  function n(h, d) {
    for (var p = 0; p < d.length; p++) {
      var m = d[p];
      m.enumerable = m.enumerable || !1, m.configurable = !0, "value" in m && (m.writable = !0), Object.defineProperty(h, m.key, m);
    }
  }
  function a(h, d, p) {
    return d && n(h.prototype, d), h;
  }
  var s = qa, o = s.Buffer, c = ku, l = c.inspect, f = l && l.custom || "inspect";
  function u(h, d, p) {
    o.prototype.copy.call(h, d, p);
  }
  return _1 = /* @__PURE__ */ function() {
    function h() {
      i(this, h), this.head = null, this.tail = null, this.length = 0;
    }
    return a(h, [{
      key: "push",
      value: function(p) {
        var m = {
          data: p,
          next: null
        };
        this.length > 0 ? this.tail.next = m : this.head = m, this.tail = m, ++this.length;
      }
    }, {
      key: "unshift",
      value: function(p) {
        var m = {
          data: p,
          next: this.head
        };
        this.length === 0 && (this.tail = m), this.head = m, ++this.length;
      }
    }, {
      key: "shift",
      value: function() {
        if (this.length !== 0) {
          var p = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, p;
        }
      }
    }, {
      key: "clear",
      value: function() {
        this.head = this.tail = null, this.length = 0;
      }
    }, {
      key: "join",
      value: function(p) {
        if (this.length === 0) return "";
        for (var m = this.head, C = "" + m.data; m = m.next; )
          C += p + m.data;
        return C;
      }
    }, {
      key: "concat",
      value: function(p) {
        if (this.length === 0) return o.alloc(0);
        for (var m = o.allocUnsafe(p >>> 0), C = this.head, A = 0; C; )
          u(C.data, m, A), A += C.data.length, C = C.next;
        return m;
      }
      // Consumes a specified amount of bytes or characters from the buffered data.
    }, {
      key: "consume",
      value: function(p, m) {
        var C;
        return p < this.head.data.length ? (C = this.head.data.slice(0, p), this.head.data = this.head.data.slice(p)) : p === this.head.data.length ? C = this.shift() : C = m ? this._getString(p) : this._getBuffer(p), C;
      }
    }, {
      key: "first",
      value: function() {
        return this.head.data;
      }
      // Consumes a specified amount of characters from the buffered data.
    }, {
      key: "_getString",
      value: function(p) {
        var m = this.head, C = 1, A = m.data;
        for (p -= A.length; m = m.next; ) {
          var b = m.data, x = p > b.length ? b.length : p;
          if (x === b.length ? A += b : A += b.slice(0, p), p -= x, p === 0) {
            x === b.length ? (++C, m.next ? this.head = m.next : this.head = this.tail = null) : (this.head = m, m.data = b.slice(x));
            break;
          }
          ++C;
        }
        return this.length -= C, A;
      }
      // Consumes a specified amount of bytes from the buffered data.
    }, {
      key: "_getBuffer",
      value: function(p) {
        var m = o.allocUnsafe(p), C = this.head, A = 1;
        for (C.data.copy(m), p -= C.data.length; C = C.next; ) {
          var b = C.data, x = p > b.length ? b.length : p;
          if (b.copy(m, m.length - p, 0, x), p -= x, p === 0) {
            x === b.length ? (++A, C.next ? this.head = C.next : this.head = this.tail = null) : (this.head = C, C.data = b.slice(x));
            break;
          }
          ++A;
        }
        return this.length -= A, m;
      }
      // Make sure the linked list only shows the minimal necessary information.
    }, {
      key: f,
      value: function(p, m) {
        return l(this, e({}, m, {
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: !1
        }));
      }
    }]), h;
  }(), _1;
}
function rF(t, e) {
  var r = this, i = this._readableState && this._readableState.destroyed, n = this._writableState && this._writableState.destroyed;
  return i || n ? (e ? e(t) : t && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, De.nextTick(xf, this, t)) : De.nextTick(xf, this, t)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(t || null, function(a) {
    !e && a ? r._writableState ? r._writableState.errorEmitted ? De.nextTick(lo, r) : (r._writableState.errorEmitted = !0, De.nextTick(Xd, r, a)) : De.nextTick(Xd, r, a) : e ? (De.nextTick(lo, r), e(a)) : De.nextTick(lo, r);
  }), this);
}
function Xd(t, e) {
  xf(t, e), lo(t);
}
function lo(t) {
  t._writableState && !t._writableState.emitClose || t._readableState && !t._readableState.emitClose || t.emit("close");
}
function iF() {
  this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
}
function xf(t, e) {
  t.emit("error", e);
}
function nF(t, e) {
  var r = t._readableState, i = t._writableState;
  r && r.autoDestroy || i && i.autoDestroy ? t.destroy(e) : t.emit("error", e);
}
var Rp = {
  destroy: rF,
  undestroy: iF,
  errorOrDestroy: nF
}, en = {};
function aF(t, e) {
  t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
}
var Pp = {};
function bt(t, e, r) {
  r || (r = Error);
  function i(a, s, o) {
    return typeof e == "string" ? e : e(a, s, o);
  }
  var n = /* @__PURE__ */ function(a) {
    aF(s, a);
    function s(o, c, l) {
      return a.call(this, i(o, c, l)) || this;
    }
    return s;
  }(r);
  n.prototype.name = r.name, n.prototype.code = t, Pp[t] = n;
}
function Kd(t, e) {
  if (Array.isArray(t)) {
    var r = t.length;
    return t = t.map(function(i) {
      return String(i);
    }), r > 2 ? "one of ".concat(e, " ").concat(t.slice(0, r - 1).join(", "), ", or ") + t[r - 1] : r === 2 ? "one of ".concat(e, " ").concat(t[0], " or ").concat(t[1]) : "of ".concat(e, " ").concat(t[0]);
  } else
    return "of ".concat(e, " ").concat(String(t));
}
function sF(t, e, r) {
  return t.substr(0, e.length) === e;
}
function oF(t, e, r) {
  return (r === void 0 || r > t.length) && (r = t.length), t.substring(r - e.length, r) === e;
}
function lF(t, e, r) {
  return typeof r != "number" && (r = 0), r + e.length > t.length ? !1 : t.indexOf(e, r) !== -1;
}
bt("ERR_INVALID_OPT_VALUE", function(t, e) {
  return 'The value "' + e + '" is invalid for option "' + t + '"';
}, TypeError);
bt("ERR_INVALID_ARG_TYPE", function(t, e, r) {
  var i;
  typeof e == "string" && sF(e, "not ") ? (i = "must not be", e = e.replace(/^not /, "")) : i = "must be";
  var n;
  if (oF(t, " argument"))
    n = "The ".concat(t, " ").concat(i, " ").concat(Kd(e, "type"));
  else {
    var a = lF(t, ".") ? "property" : "argument";
    n = 'The "'.concat(t, '" ').concat(a, " ").concat(i, " ").concat(Kd(e, "type"));
  }
  return n += ". Received type ".concat(typeof r), n;
}, TypeError);
bt("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
bt("ERR_METHOD_NOT_IMPLEMENTED", function(t) {
  return "The " + t + " method is not implemented";
});
bt("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
bt("ERR_STREAM_DESTROYED", function(t) {
  return "Cannot call " + t + " after a stream was destroyed";
});
bt("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
bt("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
bt("ERR_STREAM_WRITE_AFTER_END", "write after end");
bt("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
bt("ERR_UNKNOWN_ENCODING", function(t) {
  return "Unknown encoding: " + t;
}, TypeError);
bt("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
en.codes = Pp;
var cF = en.codes.ERR_INVALID_OPT_VALUE;
function fF(t, e, r) {
  return t.highWaterMark != null ? t.highWaterMark : e ? t[r] : null;
}
function uF(t, e, r, i) {
  var n = fF(e, i, r);
  if (n != null) {
    if (!(isFinite(n) && Math.floor(n) === n) || n < 0) {
      var a = i ? r : "highWaterMark";
      throw new cF(a, n);
    }
    return Math.floor(n);
  }
  return t.objectMode ? 16 : 16 * 1024;
}
var Lp = {
  getHighWaterMark: uF
}, wf;
typeof Object.create == "function" ? wf = function(e, r) {
  e.super_ = r, e.prototype = Object.create(r.prototype, {
    constructor: {
      value: e,
      enumerable: !1,
      writable: !0,
      configurable: !0
    }
  });
} : wf = function(e, r) {
  e.super_ = r;
  var i = function() {
  };
  i.prototype = r.prototype, e.prototype = new i(), e.prototype.constructor = e;
};
var hF = wf, dF = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  default: hF
}), gs = /* @__PURE__ */ Xn(dF), gF = j.isEncoding || function(t) {
  switch (t && t.toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
    case "raw":
      return !0;
    default:
      return !1;
  }
};
function pF(t) {
  if (t && !gF(t))
    throw new Error("Unknown encoding: " + t);
}
function _l(t) {
  switch (this.encoding = (t || "utf8").toLowerCase().replace(/[-_]/, ""), pF(t), this.encoding) {
    case "utf8":
      this.surrogateSize = 3;
      break;
    case "ucs2":
    case "utf16le":
      this.surrogateSize = 2, this.detectIncompleteChar = mF;
      break;
    case "base64":
      this.surrogateSize = 3, this.detectIncompleteChar = bF;
      break;
    default:
      this.write = vF;
      return;
  }
  this.charBuffer = new j(6), this.charReceived = 0, this.charLength = 0;
}
_l.prototype.write = function(t) {
  for (var e = ""; this.charLength; ) {
    var r = t.length >= this.charLength - this.charReceived ? this.charLength - this.charReceived : t.length;
    if (t.copy(this.charBuffer, this.charReceived, 0, r), this.charReceived += r, this.charReceived < this.charLength)
      return "";
    t = t.slice(r, t.length), e = this.charBuffer.slice(0, this.charLength).toString(this.encoding);
    var n = e.charCodeAt(e.length - 1);
    if (n >= 55296 && n <= 56319) {
      this.charLength += this.surrogateSize, e = "";
      continue;
    }
    if (this.charReceived = this.charLength = 0, t.length === 0)
      return e;
    break;
  }
  this.detectIncompleteChar(t);
  var i = t.length;
  this.charLength && (t.copy(this.charBuffer, 0, t.length - this.charReceived, i), i -= this.charReceived), e += t.toString(this.encoding, 0, i);
  var i = e.length - 1, n = e.charCodeAt(i);
  if (n >= 55296 && n <= 56319) {
    var a = this.surrogateSize;
    return this.charLength += a, this.charReceived += a, this.charBuffer.copy(this.charBuffer, a, 0, a), t.copy(this.charBuffer, 0, 0, a), e.substring(0, i);
  }
  return e;
};
_l.prototype.detectIncompleteChar = function(t) {
  for (var e = t.length >= 3 ? 3 : t.length; e > 0; e--) {
    var r = t[t.length - e];
    if (e == 1 && r >> 5 == 6) {
      this.charLength = 2;
      break;
    }
    if (e <= 2 && r >> 4 == 14) {
      this.charLength = 3;
      break;
    }
    if (e <= 3 && r >> 3 == 30) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = e;
};
_l.prototype.end = function(t) {
  var e = "";
  if (t && t.length && (e = this.write(t)), this.charReceived) {
    var r = this.charReceived, i = this.charBuffer, n = this.encoding;
    e += i.slice(0, r).toString(n);
  }
  return e;
};
function vF(t) {
  return t.toString(this.encoding);
}
function mF(t) {
  this.charReceived = t.length % 2, this.charLength = this.charReceived ? 2 : 0;
}
function bF(t) {
  this.charReceived = t.length % 3, this.charLength = this.charReceived ? 3 : 0;
}
var xF = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  StringDecoder: _l
}), Np = /* @__PURE__ */ Xn(xF), Jd = en.codes.ERR_STREAM_PREMATURE_CLOSE;
function wF(t) {
  var e = !1;
  return function() {
    if (!e) {
      e = !0;
      for (var r = arguments.length, i = new Array(r), n = 0; n < r; n++)
        i[n] = arguments[n];
      t.apply(this, i);
    }
  };
}
function yF() {
}
function _F(t) {
  return t.setHeader && typeof t.abort == "function";
}
function Mp(t, e, r) {
  if (typeof e == "function") return Mp(t, null, e);
  e || (e = {}), r = wF(r || yF);
  var i = e.readable || e.readable !== !1 && t.readable, n = e.writable || e.writable !== !1 && t.writable, a = function() {
    t.writable || o();
  }, s = t._writableState && t._writableState.finished, o = function() {
    n = !1, s = !0, i || r.call(t);
  }, c = t._readableState && t._readableState.endEmitted, l = function() {
    i = !1, c = !0, n || r.call(t);
  }, f = function(p) {
    r.call(t, p);
  }, u = function() {
    var p;
    if (i && !c)
      return (!t._readableState || !t._readableState.ended) && (p = new Jd()), r.call(t, p);
    if (n && !s)
      return (!t._writableState || !t._writableState.ended) && (p = new Jd()), r.call(t, p);
  }, h = function() {
    t.req.on("finish", o);
  };
  return _F(t) ? (t.on("complete", o), t.on("abort", u), t.req ? h() : t.on("request", h)) : n && !t._writableState && (t.on("end", a), t.on("close", a)), t.on("end", l), t.on("finish", o), e.error !== !1 && t.on("error", f), t.on("close", u), function() {
    t.removeListener("complete", o), t.removeListener("abort", u), t.removeListener("request", h), t.req && t.req.removeListener("finish", o), t.removeListener("end", a), t.removeListener("close", a), t.removeListener("finish", o), t.removeListener("end", l), t.removeListener("error", f), t.removeListener("close", u);
  };
}
var Fu = Mp, A1, Qd;
function AF() {
  if (Qd) return A1;
  Qd = 1;
  var t;
  function e(A, b, x) {
    return b in A ? Object.defineProperty(A, b, {
      value: x,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }) : A[b] = x, A;
  }
  var r = Fu, i = Symbol("lastResolve"), n = Symbol("lastReject"), a = Symbol("error"), s = Symbol("ended"), o = Symbol("lastPromise"), c = Symbol("handlePromise"), l = Symbol("stream");
  function f(A, b) {
    return {
      value: A,
      done: b
    };
  }
  function u(A) {
    var b = A[i];
    if (b !== null) {
      var x = A[l].read();
      x !== null && (A[o] = null, A[i] = null, A[n] = null, b(f(x, !1)));
    }
  }
  function h(A) {
    De.nextTick(u, A);
  }
  function d(A, b) {
    return function(x, _) {
      A.then(function() {
        if (b[s]) {
          x(f(void 0, !0));
          return;
        }
        b[c](x, _);
      }, _);
    };
  }
  var p = Object.getPrototypeOf(function() {
  }), m = Object.setPrototypeOf((t = {
    get stream() {
      return this[l];
    },
    next: function() {
      var b = this, x = this[a];
      if (x !== null)
        return Promise.reject(x);
      if (this[s])
        return Promise.resolve(f(void 0, !0));
      if (this[l].destroyed)
        return new Promise(function(S, D) {
          De.nextTick(function() {
            b[a] ? D(b[a]) : S(f(void 0, !0));
          });
        });
      var _ = this[o], v;
      if (_)
        v = new Promise(d(_, this));
      else {
        var F = this[l].read();
        if (F !== null)
          return Promise.resolve(f(F, !1));
        v = new Promise(this[c]);
      }
      return this[o] = v, v;
    }
  }, e(t, Symbol.asyncIterator, function() {
    return this;
  }), e(t, "return", function() {
    var b = this;
    return new Promise(function(x, _) {
      b[l].destroy(null, function(v) {
        if (v) {
          _(v);
          return;
        }
        x(f(void 0, !0));
      });
    });
  }), t), p), C = function(b) {
    var x, _ = Object.create(m, (x = {}, e(x, l, {
      value: b,
      writable: !0
    }), e(x, i, {
      value: null,
      writable: !0
    }), e(x, n, {
      value: null,
      writable: !0
    }), e(x, a, {
      value: null,
      writable: !0
    }), e(x, s, {
      value: b._readableState.endEmitted,
      writable: !0
    }), e(x, c, {
      value: function(F, S) {
        var D = _[l].read();
        D ? (_[o] = null, _[i] = null, _[n] = null, F(f(D, !1))) : (_[i] = F, _[n] = S);
      },
      writable: !0
    }), x));
    return _[o] = null, r(b, function(v) {
      if (v && v.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var F = _[n];
        F !== null && (_[o] = null, _[i] = null, _[n] = null, F(v)), _[a] = v;
        return;
      }
      var S = _[i];
      S !== null && (_[o] = null, _[i] = null, _[n] = null, S(f(void 0, !0))), _[s] = !0;
    }), b.on("readable", h.bind(null, _)), _;
  };
  return A1 = C, A1;
}
var E1, e3;
function EF() {
  return e3 || (e3 = 1, E1 = function() {
    throw new Error("Readable.from is not available in the browser");
  }), E1;
}
const Ou = Kn;
Ou.Readable = He;
He.ReadableState = $p;
Ep.EventEmitter;
var Up = function(e, r) {
  return e.listeners(r).length;
}, ps = Cp, Al = qa.Buffer, CF = Mo.Uint8Array || function() {
};
function SF(t) {
  return Al.from(t);
}
function TF(t) {
  return Al.isBuffer(t) || t instanceof CF;
}
var C1 = ku, Oe;
C1 && C1.debuglog ? Oe = C1.debuglog("stream") : Oe = function() {
};
var kF = tF(), Du = Rp, FF = Lp, OF = FF.getHighWaterMark, El = en.codes, DF = El.ERR_INVALID_ARG_TYPE, BF = El.ERR_STREAM_PUSH_AFTER_EOF, IF = El.ERR_METHOD_NOT_IMPLEMENTED, RF = El.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, kn, S1, T1;
gs(He, ps);
var Fa = Du.errorOrDestroy, k1 = ["error", "close", "destroy", "pause", "resume"];
function PF(t, e, r) {
  if (typeof t.prependListener == "function") return t.prependListener(e, r);
  !t._events || !t._events[e] ? t.on(e, r) : Array.isArray(t._events[e]) ? t._events[e].unshift(r) : t._events[e] = [r, t._events[e]];
}
function $p(t, e, r) {
  t = t || {}, typeof r != "boolean" && (r = e instanceof Ou.Duplex), this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.readableObjectMode), this.highWaterMark = OF(this, t, "readableHighWaterMark", r), this.buffer = new kF(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = t.emitClose !== !1, this.autoDestroy = !!t.autoDestroy, this.destroyed = !1, this.defaultEncoding = t.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, t.encoding && (kn || (kn = Np.StringDecoder), this.decoder = new kn(t.encoding), this.encoding = t.encoding);
}
function He(t) {
  if (!(this instanceof He)) return new He(t);
  var e = this instanceof Ou.Duplex;
  this._readableState = new $p(t, this, e), this.readable = !0, t && (typeof t.read == "function" && (this._read = t.read), typeof t.destroy == "function" && (this._destroy = t.destroy)), ps.call(this);
}
Object.defineProperty(He.prototype, "destroyed", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._readableState === void 0 ? !1 : this._readableState.destroyed;
  },
  set: function(e) {
    this._readableState && (this._readableState.destroyed = e);
  }
});
He.prototype.destroy = Du.destroy;
He.prototype._undestroy = Du.undestroy;
He.prototype._destroy = function(t, e) {
  e(t);
};
He.prototype.push = function(t, e) {
  var r = this._readableState, i;
  return r.objectMode ? i = !0 : typeof t == "string" && (e = e || r.defaultEncoding, e !== r.encoding && (t = Al.from(t, e), e = ""), i = !0), zp(this, t, e, !1, i);
};
He.prototype.unshift = function(t) {
  return zp(this, t, null, !0, !1);
};
function zp(t, e, r, i, n) {
  Oe("readableAddChunk", e);
  var a = t._readableState;
  if (e === null)
    a.reading = !1, MF(t, a);
  else {
    var s;
    if (n || (s = LF(a, e)), s)
      Fa(t, s);
    else if (a.objectMode || e && e.length > 0)
      if (typeof e != "string" && !a.objectMode && Object.getPrototypeOf(e) !== Al.prototype && (e = SF(e)), i)
        a.endEmitted ? Fa(t, new RF()) : F1(t, a, e, !0);
      else if (a.ended)
        Fa(t, new BF());
      else {
        if (a.destroyed)
          return !1;
        a.reading = !1, a.decoder && !r ? (e = a.decoder.write(e), a.objectMode || e.length !== 0 ? F1(t, a, e, !1) : yf(t, a)) : F1(t, a, e, !1);
      }
    else i || (a.reading = !1, yf(t, a));
  }
  return !a.ended && (a.length < a.highWaterMark || a.length === 0);
}
function F1(t, e, r, i) {
  e.flowing && e.length === 0 && !e.sync ? (e.awaitDrain = 0, t.emit("data", r)) : (e.length += e.objectMode ? 1 : r.length, i ? e.buffer.unshift(r) : e.buffer.push(r), e.needReadable && Cl(t)), yf(t, e);
}
function LF(t, e) {
  var r;
  return !TF(e) && typeof e != "string" && e !== void 0 && !t.objectMode && (r = new DF("chunk", ["string", "Buffer", "Uint8Array"], e)), r;
}
He.prototype.isPaused = function() {
  return this._readableState.flowing === !1;
};
He.prototype.setEncoding = function(t) {
  kn || (kn = Np.StringDecoder);
  var e = new kn(t);
  this._readableState.decoder = e, this._readableState.encoding = this._readableState.decoder.encoding;
  for (var r = this._readableState.buffer.head, i = ""; r !== null; )
    i += e.write(r.data), r = r.next;
  return this._readableState.buffer.clear(), i !== "" && this._readableState.buffer.push(i), this._readableState.length = i.length, this;
};
var t3 = 1073741824;
function NF(t) {
  return t >= t3 ? t = t3 : (t--, t |= t >>> 1, t |= t >>> 2, t |= t >>> 4, t |= t >>> 8, t |= t >>> 16, t++), t;
}
function r3(t, e) {
  return t <= 0 || e.length === 0 && e.ended ? 0 : e.objectMode ? 1 : t !== t ? e.flowing && e.length ? e.buffer.head.data.length : e.length : (t > e.highWaterMark && (e.highWaterMark = NF(t)), t <= e.length ? t : e.ended ? e.length : (e.needReadable = !0, 0));
}
He.prototype.read = function(t) {
  Oe("read", t), t = parseInt(t, 10);
  var e = this._readableState, r = t;
  if (t !== 0 && (e.emittedReadable = !1), t === 0 && e.needReadable && ((e.highWaterMark !== 0 ? e.length >= e.highWaterMark : e.length > 0) || e.ended))
    return Oe("read: emitReadable", e.length, e.ended), e.length === 0 && e.ended ? O1(this) : Cl(this), null;
  if (t = r3(t, e), t === 0 && e.ended)
    return e.length === 0 && O1(this), null;
  var i = e.needReadable;
  Oe("need readable", i), (e.length === 0 || e.length - t < e.highWaterMark) && (i = !0, Oe("length less than watermark", i)), e.ended || e.reading ? (i = !1, Oe("reading or ended", i)) : i && (Oe("do read"), e.reading = !0, e.sync = !0, e.length === 0 && (e.needReadable = !0), this._read(e.highWaterMark), e.sync = !1, e.reading || (t = r3(r, e)));
  var n;
  return t > 0 ? n = qp(t, e) : n = null, n === null ? (e.needReadable = e.length <= e.highWaterMark, t = 0) : (e.length -= t, e.awaitDrain = 0), e.length === 0 && (e.ended || (e.needReadable = !0), r !== t && e.ended && O1(this)), n !== null && this.emit("data", n), n;
};
function MF(t, e) {
  if (Oe("onEofChunk"), !e.ended) {
    if (e.decoder) {
      var r = e.decoder.end();
      r && r.length && (e.buffer.push(r), e.length += e.objectMode ? 1 : r.length);
    }
    e.ended = !0, e.sync ? Cl(t) : (e.needReadable = !1, e.emittedReadable || (e.emittedReadable = !0, Wp(t)));
  }
}
function Cl(t) {
  var e = t._readableState;
  Oe("emitReadable", e.needReadable, e.emittedReadable), e.needReadable = !1, e.emittedReadable || (Oe("emitReadable", e.flowing), e.emittedReadable = !0, De.nextTick(Wp, t));
}
function Wp(t) {
  var e = t._readableState;
  Oe("emitReadable_", e.destroyed, e.length, e.ended), !e.destroyed && (e.length || e.ended) && (t.emit("readable"), e.emittedReadable = !1), e.needReadable = !e.flowing && !e.ended && e.length <= e.highWaterMark, Bu(t);
}
function yf(t, e) {
  e.readingMore || (e.readingMore = !0, De.nextTick(UF, t, e));
}
function UF(t, e) {
  for (; !e.reading && !e.ended && (e.length < e.highWaterMark || e.flowing && e.length === 0); ) {
    var r = e.length;
    if (Oe("maybeReadMore read 0"), t.read(0), r === e.length)
      break;
  }
  e.readingMore = !1;
}
He.prototype._read = function(t) {
  Fa(this, new IF("_read()"));
};
He.prototype.pipe = function(t, e) {
  var r = this, i = this._readableState;
  switch (i.pipesCount) {
    case 0:
      i.pipes = t;
      break;
    case 1:
      i.pipes = [i.pipes, t];
      break;
    default:
      i.pipes.push(t);
      break;
  }
  i.pipesCount += 1, Oe("pipe count=%d opts=%j", i.pipesCount, e);
  var n = (!e || e.end !== !1) && t !== De.stdout && t !== De.stderr, a = n ? o : m;
  i.endEmitted ? De.nextTick(a) : r.once("end", a), t.on("unpipe", s);
  function s(C, A) {
    Oe("onunpipe"), C === r && A && A.hasUnpiped === !1 && (A.hasUnpiped = !0, f());
  }
  function o() {
    Oe("onend"), t.end();
  }
  var c = $F(r);
  t.on("drain", c);
  var l = !1;
  function f() {
    Oe("cleanup"), t.removeListener("close", d), t.removeListener("finish", p), t.removeListener("drain", c), t.removeListener("error", h), t.removeListener("unpipe", s), r.removeListener("end", o), r.removeListener("end", m), r.removeListener("data", u), l = !0, i.awaitDrain && (!t._writableState || t._writableState.needDrain) && c();
  }
  r.on("data", u);
  function u(C) {
    Oe("ondata");
    var A = t.write(C);
    Oe("dest.write", A), A === !1 && ((i.pipesCount === 1 && i.pipes === t || i.pipesCount > 1 && Vp(i.pipes, t) !== -1) && !l && (Oe("false write response, pause", i.awaitDrain), i.awaitDrain++), r.pause());
  }
  function h(C) {
    Oe("onerror", C), m(), t.removeListener("error", h), Up(t, "error") === 0 && Fa(t, C);
  }
  PF(t, "error", h);
  function d() {
    t.removeListener("finish", p), m();
  }
  t.once("close", d);
  function p() {
    Oe("onfinish"), t.removeListener("close", d), m();
  }
  t.once("finish", p);
  function m() {
    Oe("unpipe"), r.unpipe(t);
  }
  return t.emit("pipe", r), i.flowing || (Oe("pipe resume"), r.resume()), t;
};
function $F(t) {
  return function() {
    var r = t._readableState;
    Oe("pipeOnDrain", r.awaitDrain), r.awaitDrain && r.awaitDrain--, r.awaitDrain === 0 && Up(t, "data") && (r.flowing = !0, Bu(t));
  };
}
He.prototype.unpipe = function(t) {
  var e = this._readableState, r = {
    hasUnpiped: !1
  };
  if (e.pipesCount === 0) return this;
  if (e.pipesCount === 1)
    return t && t !== e.pipes ? this : (t || (t = e.pipes), e.pipes = null, e.pipesCount = 0, e.flowing = !1, t && t.emit("unpipe", this, r), this);
  if (!t) {
    var i = e.pipes, n = e.pipesCount;
    e.pipes = null, e.pipesCount = 0, e.flowing = !1;
    for (var a = 0; a < n; a++)
      i[a].emit("unpipe", this, {
        hasUnpiped: !1
      });
    return this;
  }
  var s = Vp(e.pipes, t);
  return s === -1 ? this : (e.pipes.splice(s, 1), e.pipesCount -= 1, e.pipesCount === 1 && (e.pipes = e.pipes[0]), t.emit("unpipe", this, r), this);
};
He.prototype.on = function(t, e) {
  var r = ps.prototype.on.call(this, t, e), i = this._readableState;
  return t === "data" ? (i.readableListening = this.listenerCount("readable") > 0, i.flowing !== !1 && this.resume()) : t === "readable" && !i.endEmitted && !i.readableListening && (i.readableListening = i.needReadable = !0, i.flowing = !1, i.emittedReadable = !1, Oe("on readable", i.length, i.reading), i.length ? Cl(this) : i.reading || De.nextTick(zF, this)), r;
};
He.prototype.addListener = He.prototype.on;
He.prototype.removeListener = function(t, e) {
  var r = ps.prototype.removeListener.call(this, t, e);
  return t === "readable" && De.nextTick(Hp, this), r;
};
He.prototype.removeAllListeners = function(t) {
  var e = ps.prototype.removeAllListeners.apply(this, arguments);
  return (t === "readable" || t === void 0) && De.nextTick(Hp, this), e;
};
function Hp(t) {
  var e = t._readableState;
  e.readableListening = t.listenerCount("readable") > 0, e.resumeScheduled && !e.paused ? e.flowing = !0 : t.listenerCount("data") > 0 && t.resume();
}
function zF(t) {
  Oe("readable nexttick read 0"), t.read(0);
}
He.prototype.resume = function() {
  var t = this._readableState;
  return t.flowing || (Oe("resume"), t.flowing = !t.readableListening, WF(this, t)), t.paused = !1, this;
};
function WF(t, e) {
  e.resumeScheduled || (e.resumeScheduled = !0, De.nextTick(HF, t, e));
}
function HF(t, e) {
  Oe("resume", e.reading), e.reading || t.read(0), e.resumeScheduled = !1, t.emit("resume"), Bu(t), e.flowing && !e.reading && t.read(0);
}
He.prototype.pause = function() {
  return Oe("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== !1 && (Oe("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;
};
function Bu(t) {
  var e = t._readableState;
  for (Oe("flow", e.flowing); e.flowing && t.read() !== null; )
    ;
}
He.prototype.wrap = function(t) {
  var e = this, r = this._readableState, i = !1;
  t.on("end", function() {
    if (Oe("wrapped end"), r.decoder && !r.ended) {
      var s = r.decoder.end();
      s && s.length && e.push(s);
    }
    e.push(null);
  }), t.on("data", function(s) {
    if (Oe("wrapped data"), r.decoder && (s = r.decoder.write(s)), !(r.objectMode && s == null) && !(!r.objectMode && (!s || !s.length))) {
      var o = e.push(s);
      o || (i = !0, t.pause());
    }
  });
  for (var n in t)
    this[n] === void 0 && typeof t[n] == "function" && (this[n] = /* @__PURE__ */ function(o) {
      return function() {
        return t[o].apply(t, arguments);
      };
    }(n));
  for (var a = 0; a < k1.length; a++)
    t.on(k1[a], this.emit.bind(this, k1[a]));
  return this._read = function(s) {
    Oe("wrapped _read", s), i && (i = !1, t.resume());
  }, this;
};
typeof Symbol == "function" && (He.prototype[Symbol.asyncIterator] = function() {
  return S1 === void 0 && (S1 = AF()), S1(this);
});
Object.defineProperty(He.prototype, "readableHighWaterMark", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._readableState.highWaterMark;
  }
});
Object.defineProperty(He.prototype, "readableBuffer", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._readableState && this._readableState.buffer;
  }
});
Object.defineProperty(He.prototype, "readableFlowing", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._readableState.flowing;
  },
  set: function(e) {
    this._readableState && (this._readableState.flowing = e);
  }
});
He._fromList = qp;
Object.defineProperty(He.prototype, "readableLength", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._readableState.length;
  }
});
function qp(t, e) {
  if (e.length === 0) return null;
  var r;
  return e.objectMode ? r = e.buffer.shift() : !t || t >= e.length ? (e.decoder ? r = e.buffer.join("") : e.buffer.length === 1 ? r = e.buffer.first() : r = e.buffer.concat(e.length), e.buffer.clear()) : r = e.buffer.consume(t, e.decoder), r;
}
function O1(t) {
  var e = t._readableState;
  Oe("endReadable", e.endEmitted), e.endEmitted || (e.ended = !0, De.nextTick(qF, e, t));
}
function qF(t, e) {
  if (Oe("endReadableNT", t.endEmitted, t.length), !t.endEmitted && t.length === 0 && (t.endEmitted = !0, e.readable = !1, e.emit("end"), t.autoDestroy)) {
    var r = e._writableState;
    (!r || r.autoDestroy && r.finished) && e.destroy();
  }
}
typeof Symbol == "function" && (He.from = function(t, e) {
  return T1 === void 0 && (T1 = EF()), T1(He, t, e);
});
function Vp(t, e) {
  for (var r = 0, i = t.length; r < i; r++)
    if (t[r] === e) return r;
  return -1;
}
var VF = YF;
function YF(t, e) {
  if (D1("noDeprecation"))
    return t;
  var r = !1;
  function i() {
    if (!r) {
      if (D1("throwDeprecation"))
        throw new Error(e);
      D1("traceDeprecation") ? console.trace(e) : console.warn(e), r = !0;
    }
    return t.apply(this, arguments);
  }
  return i;
}
function D1(t) {
  try {
    if (!Mo.localStorage) return !1;
  } catch {
    return !1;
  }
  var e = Mo.localStorage[t];
  return e == null ? !1 : String(e).toLowerCase() === "true";
}
const Iu = Kn;
Iu.Writable = u0;
function Yp(t) {
  var e = this;
  this.next = null, this.entry = null, this.finish = function() {
    xO(e, t);
  };
}
u0.WritableState = vs;
var GF = {
  deprecate: VF
}, Gp = Cp, Sl = qa.Buffer, ZF = Mo.Uint8Array || function() {
};
function jF(t) {
  return Sl.from(t);
}
function XF(t) {
  return Sl.isBuffer(t) || t instanceof ZF;
}
var Ru = Rp, KF = Lp, JF = KF.getHighWaterMark, si = en.codes, QF = si.ERR_INVALID_ARG_TYPE, eO = si.ERR_METHOD_NOT_IMPLEMENTED, tO = si.ERR_MULTIPLE_CALLBACK, rO = si.ERR_STREAM_CANNOT_PIPE, iO = si.ERR_STREAM_DESTROYED, nO = si.ERR_STREAM_NULL_VALUES, aO = si.ERR_STREAM_WRITE_AFTER_END, sO = si.ERR_UNKNOWN_ENCODING, Mn = Ru.errorOrDestroy;
gs(u0, Gp);
function oO() {
}
function vs(t, e, r) {
  t = t || {}, typeof r != "boolean" && (r = e instanceof Iu.Duplex), this.objectMode = !!t.objectMode, r && (this.objectMode = this.objectMode || !!t.writableObjectMode), this.highWaterMark = JF(this, t, "writableHighWaterMark", r), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
  var i = t.decodeStrings === !1;
  this.decodeStrings = !i, this.defaultEncoding = t.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(n) {
    gO(e, n);
  }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = t.emitClose !== !1, this.autoDestroy = !!t.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new Yp(this);
}
vs.prototype.getBuffer = function() {
  for (var e = this.bufferedRequest, r = []; e; )
    r.push(e), e = e.next;
  return r;
};
(function() {
  try {
    Object.defineProperty(vs.prototype, "buffer", {
      get: GF.deprecate(function() {
        return this.getBuffer();
      }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
    });
  } catch {
  }
})();
var co;
typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (co = Function.prototype[Symbol.hasInstance], Object.defineProperty(u0, Symbol.hasInstance, {
  value: function(e) {
    return co.call(this, e) ? !0 : this !== u0 ? !1 : e && e._writableState instanceof vs;
  }
})) : co = function(e) {
  return e instanceof this;
};
function u0(t) {
  var e = this instanceof Iu.Duplex;
  if (!e && !co.call(u0, this)) return new u0(t);
  this._writableState = new vs(t, this, e), this.writable = !0, t && (typeof t.write == "function" && (this._write = t.write), typeof t.writev == "function" && (this._writev = t.writev), typeof t.destroy == "function" && (this._destroy = t.destroy), typeof t.final == "function" && (this._final = t.final)), Gp.call(this);
}
u0.prototype.pipe = function() {
  Mn(this, new rO());
};
function lO(t, e) {
  var r = new aO();
  Mn(t, r), De.nextTick(e, r);
}
function cO(t, e, r, i) {
  var n;
  return r === null ? n = new nO() : typeof r != "string" && !e.objectMode && (n = new QF("chunk", ["string", "Buffer"], r)), n ? (Mn(t, n), De.nextTick(i, n), !1) : !0;
}
u0.prototype.write = function(t, e, r) {
  var i = this._writableState, n = !1, a = !i.objectMode && XF(t);
  return a && !Sl.isBuffer(t) && (t = jF(t)), typeof e == "function" && (r = e, e = null), a ? e = "buffer" : e || (e = i.defaultEncoding), typeof r != "function" && (r = oO), i.ending ? lO(this, r) : (a || cO(this, i, t, r)) && (i.pendingcb++, n = uO(this, i, a, t, e, r)), n;
};
u0.prototype.cork = function() {
  this._writableState.corked++;
};
u0.prototype.uncork = function() {
  var t = this._writableState;
  t.corked && (t.corked--, !t.writing && !t.corked && !t.bufferProcessing && t.bufferedRequest && Zp(this, t));
};
u0.prototype.setDefaultEncoding = function(e) {
  if (typeof e == "string" && (e = e.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((e + "").toLowerCase()) > -1)) throw new sO(e);
  return this._writableState.defaultEncoding = e, this;
};
Object.defineProperty(u0.prototype, "writableBuffer", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._writableState && this._writableState.getBuffer();
  }
});
function fO(t, e, r) {
  return !t.objectMode && t.decodeStrings !== !1 && typeof e == "string" && (e = Sl.from(e, r)), e;
}
Object.defineProperty(u0.prototype, "writableHighWaterMark", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._writableState.highWaterMark;
  }
});
function uO(t, e, r, i, n, a) {
  if (!r) {
    var s = fO(e, i, n);
    i !== s && (r = !0, n = "buffer", i = s);
  }
  var o = e.objectMode ? 1 : i.length;
  e.length += o;
  var c = e.length < e.highWaterMark;
  if (c || (e.needDrain = !0), e.writing || e.corked) {
    var l = e.lastBufferedRequest;
    e.lastBufferedRequest = {
      chunk: i,
      encoding: n,
      isBuf: r,
      callback: a,
      next: null
    }, l ? l.next = e.lastBufferedRequest : e.bufferedRequest = e.lastBufferedRequest, e.bufferedRequestCount += 1;
  } else
    _f(t, e, !1, o, i, n, a);
  return c;
}
function _f(t, e, r, i, n, a, s) {
  e.writelen = i, e.writecb = s, e.writing = !0, e.sync = !0, e.destroyed ? e.onwrite(new iO("write")) : r ? t._writev(n, e.onwrite) : t._write(n, a, e.onwrite), e.sync = !1;
}
function hO(t, e, r, i, n) {
  --e.pendingcb, r ? (De.nextTick(n, i), De.nextTick(Ya, t, e), t._writableState.errorEmitted = !0, Mn(t, i)) : (n(i), t._writableState.errorEmitted = !0, Mn(t, i), Ya(t, e));
}
function dO(t) {
  t.writing = !1, t.writecb = null, t.length -= t.writelen, t.writelen = 0;
}
function gO(t, e) {
  var r = t._writableState, i = r.sync, n = r.writecb;
  if (typeof n != "function") throw new tO();
  if (dO(r), e) hO(t, r, i, e, n);
  else {
    var a = jp(r) || t.destroyed;
    !a && !r.corked && !r.bufferProcessing && r.bufferedRequest && Zp(t, r), i ? De.nextTick(i3, t, r, a, n) : i3(t, r, a, n);
  }
}
function i3(t, e, r, i) {
  r || pO(t, e), e.pendingcb--, i(), Ya(t, e);
}
function pO(t, e) {
  e.length === 0 && e.needDrain && (e.needDrain = !1, t.emit("drain"));
}
function Zp(t, e) {
  e.bufferProcessing = !0;
  var r = e.bufferedRequest;
  if (t._writev && r && r.next) {
    var i = e.bufferedRequestCount, n = new Array(i), a = e.corkedRequestsFree;
    a.entry = r;
    for (var s = 0, o = !0; r; )
      n[s] = r, r.isBuf || (o = !1), r = r.next, s += 1;
    n.allBuffers = o, _f(t, e, !0, e.length, n, "", a.finish), e.pendingcb++, e.lastBufferedRequest = null, a.next ? (e.corkedRequestsFree = a.next, a.next = null) : e.corkedRequestsFree = new Yp(e), e.bufferedRequestCount = 0;
  } else {
    for (; r; ) {
      var c = r.chunk, l = r.encoding, f = r.callback, u = e.objectMode ? 1 : c.length;
      if (_f(t, e, !1, u, c, l, f), r = r.next, e.bufferedRequestCount--, e.writing)
        break;
    }
    r === null && (e.lastBufferedRequest = null);
  }
  e.bufferedRequest = r, e.bufferProcessing = !1;
}
u0.prototype._write = function(t, e, r) {
  r(new eO("_write()"));
};
u0.prototype._writev = null;
u0.prototype.end = function(t, e, r) {
  var i = this._writableState;
  return typeof t == "function" ? (r = t, t = null, e = null) : typeof e == "function" && (r = e, e = null), t != null && this.write(t, e), i.corked && (i.corked = 1, this.uncork()), i.ending || bO(this, i, r), this;
};
Object.defineProperty(u0.prototype, "writableLength", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._writableState.length;
  }
});
function jp(t) {
  return t.ending && t.length === 0 && t.bufferedRequest === null && !t.finished && !t.writing;
}
function vO(t, e) {
  t._final(function(r) {
    e.pendingcb--, r && Mn(t, r), e.prefinished = !0, t.emit("prefinish"), Ya(t, e);
  });
}
function mO(t, e) {
  !e.prefinished && !e.finalCalled && (typeof t._final == "function" && !e.destroyed ? (e.pendingcb++, e.finalCalled = !0, De.nextTick(vO, t, e)) : (e.prefinished = !0, t.emit("prefinish")));
}
function Ya(t, e) {
  var r = jp(e);
  if (r && (mO(t, e), e.pendingcb === 0 && (e.finished = !0, t.emit("finish"), e.autoDestroy))) {
    var i = t._readableState;
    (!i || i.autoDestroy && i.endEmitted) && t.destroy();
  }
  return r;
}
function bO(t, e, r) {
  e.ending = !0, Ya(t, e), r && (e.finished ? De.nextTick(r) : t.once("finish", r)), e.ended = !0, t.writable = !1;
}
function xO(t, e, r) {
  var i = t.entry;
  for (t.entry = null; i; ) {
    var n = i.callback;
    e.pendingcb--, n(r), i = i.next;
  }
  e.corkedRequestsFree.next = t;
}
Object.defineProperty(u0.prototype, "destroyed", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._writableState === void 0 ? !1 : this._writableState.destroyed;
  },
  set: function(e) {
    this._writableState && (this._writableState.destroyed = e);
  }
});
u0.prototype.destroy = Ru.destroy;
u0.prototype._undestroy = Ru.undestroy;
u0.prototype._destroy = function(t, e) {
  e(t);
};
var wO = Object.keys || function(t) {
  var e = [];
  for (var r in t)
    e.push(r);
  return e;
};
const Un = Kn;
Un.Duplex = ar;
gs(ar, Un.Readable);
for (var n3 = wO(Un.Writable.prototype), B1 = 0; B1 < n3.length; B1++) {
  var I1 = n3[B1];
  ar.prototype[I1] || (ar.prototype[I1] = Un.Writable.prototype[I1]);
}
function ar(t) {
  if (!(this instanceof ar)) return new ar(t);
  Un.Readable.call(this, t), Un.Writable.call(this, t), this.allowHalfOpen = !0, t && (t.readable === !1 && (this.readable = !1), t.writable === !1 && (this.writable = !1), t.allowHalfOpen === !1 && (this.allowHalfOpen = !1, this.once("end", yO)));
}
Object.defineProperty(ar.prototype, "writableHighWaterMark", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._writableState.highWaterMark;
  }
});
Object.defineProperty(ar.prototype, "writableBuffer", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._writableState && this._writableState.getBuffer();
  }
});
Object.defineProperty(ar.prototype, "writableLength", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._writableState.length;
  }
});
function yO() {
  this._writableState.ended || De.nextTick(_O, this);
}
function _O(t) {
  t.end();
}
Object.defineProperty(ar.prototype, "destroyed", {
  // making it explicit this property is not enumerable
  // because otherwise some prototype manipulation in
  // userland will fail
  enumerable: !1,
  get: function() {
    return this._readableState === void 0 || this._writableState === void 0 ? !1 : this._readableState.destroyed && this._writableState.destroyed;
  },
  set: function(e) {
    this._readableState === void 0 || this._writableState === void 0 || (this._readableState.destroyed = e, this._writableState.destroyed = e);
  }
});
const ms = Kn;
ms.Transform = Ar;
var Tl = en.codes, AO = Tl.ERR_METHOD_NOT_IMPLEMENTED, EO = Tl.ERR_MULTIPLE_CALLBACK, CO = Tl.ERR_TRANSFORM_ALREADY_TRANSFORMING, SO = Tl.ERR_TRANSFORM_WITH_LENGTH_0;
gs(Ar, ms.Duplex);
function TO(t, e) {
  var r = this._transformState;
  r.transforming = !1;
  var i = r.writecb;
  if (i === null)
    return this.emit("error", new EO());
  r.writechunk = null, r.writecb = null, e != null && this.push(e), i(t);
  var n = this._readableState;
  n.reading = !1, (n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark);
}
function Ar(t) {
  if (!(this instanceof Ar)) return new Ar(t);
  ms.Duplex.call(this, t), this._transformState = {
    afterTransform: TO.bind(this),
    needTransform: !1,
    transforming: !1,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }, this._readableState.needReadable = !0, this._readableState.sync = !1, t && (typeof t.transform == "function" && (this._transform = t.transform), typeof t.flush == "function" && (this._flush = t.flush)), this.on("prefinish", kO);
}
function kO() {
  var t = this;
  typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(e, r) {
    a3(t, e, r);
  }) : a3(this, null, null);
}
Ar.prototype.push = function(t, e) {
  return this._transformState.needTransform = !1, ms.Duplex.prototype.push.call(this, t, e);
};
Ar.prototype._transform = function(t, e, r) {
  r(new AO("_transform()"));
};
Ar.prototype._write = function(t, e, r) {
  var i = this._transformState;
  if (i.writecb = r, i.writechunk = t, i.writeencoding = e, !i.transforming) {
    var n = this._readableState;
    (i.needTransform || n.needReadable || n.length < n.highWaterMark) && this._read(n.highWaterMark);
  }
};
Ar.prototype._read = function(t) {
  var e = this._transformState;
  e.writechunk !== null && !e.transforming ? (e.transforming = !0, this._transform(e.writechunk, e.writeencoding, e.afterTransform)) : e.needTransform = !0;
};
Ar.prototype._destroy = function(t, e) {
  ms.Duplex.prototype._destroy.call(this, t, function(r) {
    e(r);
  });
};
function a3(t, e, r) {
  if (e) return t.emit("error", e);
  if (r != null && t.push(r), t._writableState.length) throw new SO();
  if (t._transformState.transforming) throw new CO();
  return t.push(null);
}
const Xp = Kn;
Xp.PassThrough = Ga;
gs(Ga, Xp.Transform);
function Ga(t) {
  if (!(this instanceof Ga)) return new Ga(t);
  Transform.call(this, t);
}
Ga.prototype._transform = function(t, e, r) {
  r(null, t);
};
var R1;
function FO(t) {
  var e = !1;
  return function() {
    e || (e = !0, t.apply(void 0, arguments));
  };
}
var Kp = en.codes, OO = Kp.ERR_MISSING_ARGS, DO = Kp.ERR_STREAM_DESTROYED;
function s3(t) {
  if (t) throw t;
}
function BO(t) {
  return t.setHeader && typeof t.abort == "function";
}
function IO(t, e, r, i) {
  i = FO(i);
  var n = !1;
  t.on("close", function() {
    n = !0;
  }), R1 === void 0 && (R1 = Fu), R1(t, {
    readable: e,
    writable: r
  }, function(s) {
    if (s) return i(s);
    n = !0, i();
  });
  var a = !1;
  return function(s) {
    if (!n && !a) {
      if (a = !0, BO(t)) return t.abort();
      if (typeof t.destroy == "function") return t.destroy();
      i(s || new DO("pipe"));
    }
  };
}
function o3(t) {
  t();
}
function RO(t, e) {
  return t.pipe(e);
}
function PO(t) {
  return !t.length || typeof t[t.length - 1] != "function" ? s3 : t.pop();
}
function LO() {
  for (var t = arguments.length, e = new Array(t), r = 0; r < t; r++)
    e[r] = arguments[r];
  var i = PO(e);
  if (Array.isArray(e[0]) && (e = e[0]), e.length < 2)
    throw new OO("streams");
  var n, a = e.map(function(s, o) {
    var c = o < e.length - 1, l = o > 0;
    return IO(s, c, l, function(f) {
      n || (n = f), f && a.forEach(o3), !c && (a.forEach(o3), i(n));
    });
  });
  return e.reduce(RO);
}
var NO = LO;
(function(t, e) {
  const r = Kn;
  e = t.exports = r.Readable, e.Stream = r.Readable, e.Readable = r.Readable, e.Writable = r.Writable, e.Duplex = r.Duplex, e.Transform = r.Transform, e.PassThrough = r.PassThrough, e.finished = Fu, e.pipeline = NO;
})(mf, mf.exports);
var Jp = mf.exports, Qp = /* @__PURE__ */ gp(Jp), ev = {}, tv = {};
function l3(t, e) {
  if (t === e)
    return 0;
  for (var r = t.length, i = e.length, n = 0, a = Math.min(r, i); n < a; ++n)
    if (t[n] !== e[n]) {
      r = t[n], i = e[n];
      break;
    }
  return r < i ? -1 : i < r ? 1 : 0;
}
var MO = Object.prototype.hasOwnProperty, c3 = Object.keys || function(t) {
  var e = [];
  for (var r in t)
    MO.call(t, r) && e.push(r);
  return e;
}, f3 = Array.prototype.slice, P1;
function rv() {
  return typeof P1 < "u" ? P1 : P1 = function() {
    return (function() {
    }).name === "foo";
  }();
}
function u3(t) {
  return Object.prototype.toString.call(t);
}
function h3(t) {
  return Si(t) || typeof Wi.ArrayBuffer != "function" ? !1 : typeof ArrayBuffer.isView == "function" ? ArrayBuffer.isView(t) : t ? !!(t instanceof DataView || t.buffer && t.buffer instanceof ArrayBuffer) : !1;
}
function q0(t, e) {
  t || W0(t, !0, e, "==", Za);
}
var UO = /\s*function\s+([^\(\s]*)\s*/;
function iv(t) {
  if (Ri(t)) {
    if (rv())
      return t.name;
    var e = t.toString(), r = e.match(UO);
    return r && r[1];
  }
}
q0.AssertionError = kl;
function kl(t) {
  this.name = "AssertionError", this.actual = t.actual, this.expected = t.expected, this.operator = t.operator, t.message ? (this.message = t.message, this.generatedMessage = !1) : (this.message = $O(this), this.generatedMessage = !0);
  var e = t.stackStartFunction || W0;
  if (Error.captureStackTrace)
    Error.captureStackTrace(this, e);
  else {
    var r = new Error();
    if (r.stack) {
      var i = r.stack, n = iv(e), a = i.indexOf(`
` + n);
      if (a >= 0) {
        var s = i.indexOf(`
`, a + 1);
        i = i.substring(s + 1);
      }
      this.stack = i;
    }
  }
}
Va(kl, Error);
function d3(t, e) {
  return typeof t == "string" ? t.length < e ? t : t.slice(0, e) : t;
}
function g3(t) {
  if (rv() || !Ri(t))
    return St(t);
  var e = iv(t), r = e ? ": " + e : "";
  return "[Function" + r + "]";
}
function $O(t) {
  return d3(g3(t.actual), 128) + " " + t.operator + " " + d3(g3(t.expected), 128);
}
function W0(t, e, r, i, n) {
  throw new kl({
    message: r,
    actual: t,
    expected: e,
    operator: i,
    stackStartFunction: n
  });
}
q0.fail = W0;
function Za(t, e) {
  t || W0(t, !0, e, "==", Za);
}
q0.ok = Za;
q0.equal = Pu;
function Pu(t, e, r) {
  t != e && W0(t, e, r, "==", Pu);
}
q0.notEqual = Lu;
function Lu(t, e, r) {
  t == e && W0(t, e, r, "!=", Lu);
}
q0.deepEqual = Nu;
function Nu(t, e, r) {
  $n(t, e, !1) || W0(t, e, r, "deepEqual", Nu);
}
q0.deepStrictEqual = Mu;
function Mu(t, e, r) {
  $n(t, e, !0) || W0(t, e, r, "deepStrictEqual", Mu);
}
function $n(t, e, r, i) {
  if (t === e)
    return !0;
  if (Si(t) && Si(e))
    return l3(t, e) === 0;
  if (Nn(t) && Nn(e))
    return t.getTime() === e.getTime();
  if (Ii(t) && Ii(e))
    return t.source === e.source && t.global === e.global && t.multiline === e.multiline && t.lastIndex === e.lastIndex && t.ignoreCase === e.ignoreCase;
  if ((t === null || typeof t != "object") && (e === null || typeof e != "object"))
    return r ? t === e : t == e;
  if (h3(t) && h3(e) && u3(t) === u3(e) && !(t instanceof Float32Array || t instanceof Float64Array))
    return l3(
      new Uint8Array(t.buffer),
      new Uint8Array(e.buffer)
    ) === 0;
  if (Si(t) !== Si(e))
    return !1;
  i = i || { actual: [], expected: [] };
  var n = i.actual.indexOf(t);
  return n !== -1 && n === i.expected.indexOf(e) ? !0 : (i.actual.push(t), i.expected.push(e), zO(t, e, r, i));
}
function p3(t) {
  return Object.prototype.toString.call(t) == "[object Arguments]";
}
function zO(t, e, r, i) {
  if (t == null || e === null || e === void 0)
    return !1;
  if ($o(t) || $o(e))
    return t === e;
  if (r && Object.getPrototypeOf(t) !== Object.getPrototypeOf(e))
    return !1;
  var n = p3(t), a = p3(e);
  if (n && !a || !n && a)
    return !1;
  if (n)
    return t = f3.call(t), e = f3.call(e), $n(t, e, r);
  var s = c3(t), o = c3(e), c, l;
  if (s.length !== o.length)
    return !1;
  for (s.sort(), o.sort(), l = s.length - 1; l >= 0; l--)
    if (s[l] !== o[l])
      return !1;
  for (l = s.length - 1; l >= 0; l--)
    if (c = s[l], !$n(t[c], e[c], r, i))
      return !1;
  return !0;
}
q0.notDeepEqual = Uu;
function Uu(t, e, r) {
  $n(t, e, !1) && W0(t, e, r, "notDeepEqual", Uu);
}
q0.notDeepStrictEqual = $u;
function $u(t, e, r) {
  $n(t, e, !0) && W0(t, e, r, "notDeepStrictEqual", $u);
}
q0.strictEqual = zu;
function zu(t, e, r) {
  t !== e && W0(t, e, r, "===", zu);
}
q0.notStrictEqual = Wu;
function Wu(t, e, r) {
  t === e && W0(t, e, r, "!==", Wu);
}
function v3(t, e) {
  if (!t || !e)
    return !1;
  if (Object.prototype.toString.call(e) == "[object RegExp]")
    return e.test(t);
  try {
    if (t instanceof e)
      return !0;
  } catch {
  }
  return Error.isPrototypeOf(e) ? !1 : e.call({}, t) === !0;
}
function WO(t) {
  var e;
  try {
    t();
  } catch (r) {
    e = r;
  }
  return e;
}
function nv(t, e, r, i) {
  var n;
  if (typeof e != "function")
    throw new TypeError('"block" argument must be a function');
  typeof r == "string" && (i = r, r = null), n = WO(e), i = (r && r.name ? " (" + r.name + ")." : ".") + (i ? " " + i : "."), t && !n && W0(n, r, "Missing expected exception" + i);
  var a = typeof i == "string", s = !t && Tn(n), o = !t && n && !r;
  if ((s && a && v3(n, r) || o) && W0(n, r, "Got unwanted exception" + i), t && n && r && !v3(n, r) || !t && n)
    throw n;
}
q0.throws = av;
function av(t, e, r) {
  nv(!0, t, e, r);
}
q0.doesNotThrow = sv;
function sv(t, e, r) {
  nv(!1, t, e, r);
}
q0.ifError = ov;
function ov(t) {
  if (t) throw t;
}
var HO = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  AssertionError: kl,
  assert: Za,
  deepEqual: Nu,
  deepStrictEqual: Mu,
  default: q0,
  doesNotThrow: sv,
  equal: Pu,
  fail: W0,
  ifError: ov,
  notDeepEqual: Uu,
  notDeepStrictEqual: $u,
  notEqual: Lu,
  notStrictEqual: Wu,
  ok: Za,
  strictEqual: zu,
  throws: av
}), lv = /* @__PURE__ */ Xn(HO);
(function(t) {
  var e = lv, r = Bv, i = sr, n = Bt, a = c8;
  for (var s in a)
    t[s] = a[s];
  t.NONE = 0, t.DEFLATE = 1, t.INFLATE = 2, t.GZIP = 3, t.GUNZIP = 4, t.DEFLATERAW = 5, t.INFLATERAW = 6, t.UNZIP = 7;
  var o = 31, c = 139;
  function l(f) {
    if (typeof f != "number" || f < t.DEFLATE || f > t.UNZIP)
      throw new TypeError("Bad argument");
    this.dictionary = null, this.err = 0, this.flush = 0, this.init_done = !1, this.level = 0, this.memLevel = 0, this.mode = f, this.strategy = 0, this.windowBits = 0, this.write_in_progress = !1, this.pending_close = !1, this.gzip_id_bytes_read = 0;
  }
  l.prototype.close = function() {
    if (this.write_in_progress) {
      this.pending_close = !0;
      return;
    }
    this.pending_close = !1, e(this.init_done, "close before init"), e(this.mode <= t.UNZIP), this.mode === t.DEFLATE || this.mode === t.GZIP || this.mode === t.DEFLATERAW ? i.deflateEnd(this.strm) : (this.mode === t.INFLATE || this.mode === t.GUNZIP || this.mode === t.INFLATERAW || this.mode === t.UNZIP) && n.inflateEnd(this.strm), this.mode = t.NONE, this.dictionary = null;
  }, l.prototype.write = function(f, u, h, d, p, m, C) {
    return this._write(!0, f, u, h, d, p, m, C);
  }, l.prototype.writeSync = function(f, u, h, d, p, m, C) {
    return this._write(!1, f, u, h, d, p, m, C);
  }, l.prototype._write = function(f, u, h, d, p, m, C, A) {
    if (e.equal(arguments.length, 8), e(this.init_done, "write before init"), e(this.mode !== t.NONE, "already finalized"), e.equal(!1, this.write_in_progress, "write already in progress"), e.equal(!1, this.pending_close, "close is pending"), this.write_in_progress = !0, e.equal(!1, u === void 0, "must provide flush value"), this.write_in_progress = !0, u !== t.Z_NO_FLUSH && u !== t.Z_PARTIAL_FLUSH && u !== t.Z_SYNC_FLUSH && u !== t.Z_FULL_FLUSH && u !== t.Z_FINISH && u !== t.Z_BLOCK)
      throw new Error("Invalid flush value");
    if (h == null && (h = j.alloc(0), p = 0, d = 0), this.strm.avail_in = p, this.strm.input = h, this.strm.next_in = d, this.strm.avail_out = A, this.strm.output = m, this.strm.next_out = C, this.flush = u, !f)
      return this._process(), this._checkError() ? this._afterSync() : void 0;
    var b = this;
    return De.nextTick(function() {
      b._process(), b._after();
    }), this;
  }, l.prototype._afterSync = function() {
    var f = this.strm.avail_out, u = this.strm.avail_in;
    return this.write_in_progress = !1, [u, f];
  }, l.prototype._process = function() {
    var f = null;
    switch (this.mode) {
      case t.DEFLATE:
      case t.GZIP:
      case t.DEFLATERAW:
        this.err = i.deflate(this.strm, this.flush);
        break;
      case t.UNZIP:
        switch (this.strm.avail_in > 0 && (f = this.strm.next_in), this.gzip_id_bytes_read) {
          case 0:
            if (f === null)
              break;
            if (this.strm.input[f] === o) {
              if (this.gzip_id_bytes_read = 1, f++, this.strm.avail_in === 1)
                break;
            } else {
              this.mode = t.INFLATE;
              break;
            }
          case 1:
            if (f === null)
              break;
            this.strm.input[f] === c ? (this.gzip_id_bytes_read = 2, this.mode = t.GUNZIP) : this.mode = t.INFLATE;
            break;
          default:
            throw new Error("invalid number of gzip magic number bytes read");
        }
      case t.INFLATE:
      case t.GUNZIP:
      case t.INFLATERAW:
        for (this.err = n.inflate(
          this.strm,
          this.flush
          // If data was encoded with dictionary
        ), this.err === t.Z_NEED_DICT && this.dictionary && (this.err = n.inflateSetDictionary(this.strm, this.dictionary), this.err === t.Z_OK ? this.err = n.inflate(this.strm, this.flush) : this.err === t.Z_DATA_ERROR && (this.err = t.Z_NEED_DICT)); this.strm.avail_in > 0 && this.mode === t.GUNZIP && this.err === t.Z_STREAM_END && this.strm.next_in[0] !== 0; )
          this.reset(), this.err = n.inflate(this.strm, this.flush);
        break;
      default:
        throw new Error("Unknown mode " + this.mode);
    }
  }, l.prototype._checkError = function() {
    switch (this.err) {
      case t.Z_OK:
      case t.Z_BUF_ERROR:
        if (this.strm.avail_out !== 0 && this.flush === t.Z_FINISH)
          return this._error("unexpected end of file"), !1;
        break;
      case t.Z_STREAM_END:
        break;
      case t.Z_NEED_DICT:
        return this.dictionary == null ? this._error("Missing dictionary") : this._error("Bad dictionary"), !1;
      default:
        return this._error("Zlib error"), !1;
    }
    return !0;
  }, l.prototype._after = function() {
    if (this._checkError()) {
      var f = this.strm.avail_out, u = this.strm.avail_in;
      this.write_in_progress = !1, this.callback(u, f), this.pending_close && this.close();
    }
  }, l.prototype._error = function(f) {
    this.strm.msg && (f = this.strm.msg), this.onerror(
      f,
      this.err
      // no hope of rescue.
    ), this.write_in_progress = !1, this.pending_close && this.close();
  }, l.prototype.init = function(f, u, h, d, p) {
    e(arguments.length === 4 || arguments.length === 5, "init(windowBits, level, memLevel, strategy, [dictionary])"), e(f >= 8 && f <= 15, "invalid windowBits"), e(u >= -1 && u <= 9, "invalid compression level"), e(h >= 1 && h <= 9, "invalid memlevel"), e(d === t.Z_FILTERED || d === t.Z_HUFFMAN_ONLY || d === t.Z_RLE || d === t.Z_FIXED || d === t.Z_DEFAULT_STRATEGY, "invalid strategy"), this._init(u, f, h, d, p), this._setDictionary();
  }, l.prototype.params = function() {
    throw new Error("deflateParams Not supported");
  }, l.prototype.reset = function() {
    this._reset(), this._setDictionary();
  }, l.prototype._init = function(f, u, h, d, p) {
    switch (this.level = f, this.windowBits = u, this.memLevel = h, this.strategy = d, this.flush = t.Z_NO_FLUSH, this.err = t.Z_OK, (this.mode === t.GZIP || this.mode === t.GUNZIP) && (this.windowBits += 16), this.mode === t.UNZIP && (this.windowBits += 32), (this.mode === t.DEFLATERAW || this.mode === t.INFLATERAW) && (this.windowBits = -1 * this.windowBits), this.strm = new r(), this.mode) {
      case t.DEFLATE:
      case t.GZIP:
      case t.DEFLATERAW:
        this.err = i.deflateInit2(this.strm, this.level, t.Z_DEFLATED, this.windowBits, this.memLevel, this.strategy);
        break;
      case t.INFLATE:
      case t.GUNZIP:
      case t.INFLATERAW:
      case t.UNZIP:
        this.err = n.inflateInit2(this.strm, this.windowBits);
        break;
      default:
        throw new Error("Unknown mode " + this.mode);
    }
    this.err !== t.Z_OK && this._error("Init error"), this.dictionary = p, this.write_in_progress = !1, this.init_done = !0;
  }, l.prototype._setDictionary = function() {
    if (this.dictionary != null) {
      switch (this.err = t.Z_OK, this.mode) {
        case t.DEFLATE:
        case t.DEFLATERAW:
          this.err = i.deflateSetDictionary(this.strm, this.dictionary);
          break;
      }
      this.err !== t.Z_OK && this._error("Failed to set dictionary");
    }
  }, l.prototype._reset = function() {
    switch (this.err = t.Z_OK, this.mode) {
      case t.DEFLATE:
      case t.DEFLATERAW:
      case t.GZIP:
        this.err = i.deflateReset(this.strm);
        break;
      case t.INFLATE:
      case t.INFLATERAW:
      case t.GUNZIP:
        this.err = n.inflateReset(this.strm);
        break;
    }
    this.err !== t.Z_OK && this._error("Failed to reset stream");
  }, t.Zlib = l;
})(tv);
(function(t) {
  var e = qa.Buffer, r = Jp.Transform, i = tv, n = ku, a = lv.ok, s = qa.kMaxLength, o = "Cannot create final Buffer. It would be larger than 0x" + s.toString(16) + " bytes";
  i.Z_MIN_WINDOWBITS = 8, i.Z_MAX_WINDOWBITS = 15, i.Z_DEFAULT_WINDOWBITS = 15, i.Z_MIN_CHUNK = 64, i.Z_MAX_CHUNK = 1 / 0, i.Z_DEFAULT_CHUNK = 16 * 1024, i.Z_MIN_MEMLEVEL = 1, i.Z_MAX_MEMLEVEL = 9, i.Z_DEFAULT_MEMLEVEL = 8, i.Z_MIN_LEVEL = -1, i.Z_MAX_LEVEL = 9, i.Z_DEFAULT_LEVEL = i.Z_DEFAULT_COMPRESSION;
  for (var c = Object.keys(i), l = 0; l < c.length; l++) {
    var f = c[l];
    f.match(/^Z/) && Object.defineProperty(t, f, {
      enumerable: !0,
      value: i[f],
      writable: !1
    });
  }
  for (var u = {
    Z_OK: i.Z_OK,
    Z_STREAM_END: i.Z_STREAM_END,
    Z_NEED_DICT: i.Z_NEED_DICT,
    Z_ERRNO: i.Z_ERRNO,
    Z_STREAM_ERROR: i.Z_STREAM_ERROR,
    Z_DATA_ERROR: i.Z_DATA_ERROR,
    Z_MEM_ERROR: i.Z_MEM_ERROR,
    Z_BUF_ERROR: i.Z_BUF_ERROR,
    Z_VERSION_ERROR: i.Z_VERSION_ERROR
  }, h = Object.keys(u), d = 0; d < h.length; d++) {
    var p = h[d];
    u[u[p]] = p;
  }
  Object.defineProperty(t, "codes", {
    enumerable: !0,
    value: Object.freeze(u),
    writable: !1
  }), t.Deflate = A, t.Inflate = b, t.Gzip = x, t.Gunzip = _, t.DeflateRaw = v, t.InflateRaw = F, t.Unzip = S, t.createDeflate = function(w) {
    return new A(w);
  }, t.createInflate = function(w) {
    return new b(w);
  }, t.createDeflateRaw = function(w) {
    return new v(w);
  }, t.createInflateRaw = function(w) {
    return new F(w);
  }, t.createGzip = function(w) {
    return new x(w);
  }, t.createGunzip = function(w) {
    return new _(w);
  }, t.createUnzip = function(w) {
    return new S(w);
  }, t.deflate = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new A(k), w, z);
  }, t.deflateSync = function(w, k) {
    return C(new A(k), w);
  }, t.gzip = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new x(k), w, z);
  }, t.gzipSync = function(w, k) {
    return C(new x(k), w);
  }, t.deflateRaw = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new v(k), w, z);
  }, t.deflateRawSync = function(w, k) {
    return C(new v(k), w);
  }, t.unzip = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new S(k), w, z);
  }, t.unzipSync = function(w, k) {
    return C(new S(k), w);
  }, t.inflate = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new b(k), w, z);
  }, t.inflateSync = function(w, k) {
    return C(new b(k), w);
  }, t.gunzip = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new _(k), w, z);
  }, t.gunzipSync = function(w, k) {
    return C(new _(k), w);
  }, t.inflateRaw = function(w, k, z) {
    return typeof k == "function" && (z = k, k = {}), m(new F(k), w, z);
  }, t.inflateRawSync = function(w, k) {
    return C(new F(k), w);
  };
  function m(w, k, z) {
    var H = [], re = 0;
    w.on("error", X), w.on("end", oe), w.end(k), ie();
    function ie() {
      for (var ae; (ae = w.read()) !== null; )
        H.push(ae), re += ae.length;
      w.once("readable", ie);
    }
    function X(ae) {
      w.removeListener("end", oe), w.removeListener("readable", ie), z(ae);
    }
    function oe() {
      var ae, V = null;
      re >= s ? V = new RangeError(o) : ae = e.concat(H, re), H = [], w.close(), z(V, ae);
    }
  }
  function C(w, k) {
    if (typeof k == "string" && (k = e.from(k)), !e.isBuffer(k)) throw new TypeError("Not a string or buffer");
    var z = w._finishFlushFlag;
    return w._processChunk(k, z);
  }
  function A(w) {
    if (!(this instanceof A)) return new A(w);
    P.call(this, w, i.DEFLATE);
  }
  function b(w) {
    if (!(this instanceof b)) return new b(w);
    P.call(this, w, i.INFLATE);
  }
  function x(w) {
    if (!(this instanceof x)) return new x(w);
    P.call(this, w, i.GZIP);
  }
  function _(w) {
    if (!(this instanceof _)) return new _(w);
    P.call(this, w, i.GUNZIP);
  }
  function v(w) {
    if (!(this instanceof v)) return new v(w);
    P.call(this, w, i.DEFLATERAW);
  }
  function F(w) {
    if (!(this instanceof F)) return new F(w);
    P.call(this, w, i.INFLATERAW);
  }
  function S(w) {
    if (!(this instanceof S)) return new S(w);
    P.call(this, w, i.UNZIP);
  }
  function D(w) {
    return w === i.Z_NO_FLUSH || w === i.Z_PARTIAL_FLUSH || w === i.Z_SYNC_FLUSH || w === i.Z_FULL_FLUSH || w === i.Z_FINISH || w === i.Z_BLOCK;
  }
  function P(w, k) {
    var z = this;
    if (this._opts = w = w || {}, this._chunkSize = w.chunkSize || t.Z_DEFAULT_CHUNK, r.call(this, w), w.flush && !D(w.flush))
      throw new Error("Invalid flush flag: " + w.flush);
    if (w.finishFlush && !D(w.finishFlush))
      throw new Error("Invalid flush flag: " + w.finishFlush);
    if (this._flushFlag = w.flush || i.Z_NO_FLUSH, this._finishFlushFlag = typeof w.finishFlush < "u" ? w.finishFlush : i.Z_FINISH, w.chunkSize && (w.chunkSize < t.Z_MIN_CHUNK || w.chunkSize > t.Z_MAX_CHUNK))
      throw new Error("Invalid chunk size: " + w.chunkSize);
    if (w.windowBits && (w.windowBits < t.Z_MIN_WINDOWBITS || w.windowBits > t.Z_MAX_WINDOWBITS))
      throw new Error("Invalid windowBits: " + w.windowBits);
    if (w.level && (w.level < t.Z_MIN_LEVEL || w.level > t.Z_MAX_LEVEL))
      throw new Error("Invalid compression level: " + w.level);
    if (w.memLevel && (w.memLevel < t.Z_MIN_MEMLEVEL || w.memLevel > t.Z_MAX_MEMLEVEL))
      throw new Error("Invalid memLevel: " + w.memLevel);
    if (w.strategy && w.strategy != t.Z_FILTERED && w.strategy != t.Z_HUFFMAN_ONLY && w.strategy != t.Z_RLE && w.strategy != t.Z_FIXED && w.strategy != t.Z_DEFAULT_STRATEGY)
      throw new Error("Invalid strategy: " + w.strategy);
    if (w.dictionary && !e.isBuffer(w.dictionary))
      throw new Error("Invalid dictionary: it should be a Buffer instance");
    this._handle = new i.Zlib(k);
    var H = this;
    this._hadError = !1, this._handle.onerror = function(X, oe) {
      B(H), H._hadError = !0;
      var ae = new Error(X);
      ae.errno = oe, ae.code = t.codes[oe], H.emit("error", ae);
    };
    var re = t.Z_DEFAULT_COMPRESSION;
    typeof w.level == "number" && (re = w.level);
    var ie = t.Z_DEFAULT_STRATEGY;
    typeof w.strategy == "number" && (ie = w.strategy), this._handle.init(w.windowBits || t.Z_DEFAULT_WINDOWBITS, re, w.memLevel || t.Z_DEFAULT_MEMLEVEL, ie, w.dictionary), this._buffer = e.allocUnsafe(this._chunkSize), this._offset = 0, this._level = re, this._strategy = ie, this.once("end", this.close), Object.defineProperty(this, "_closed", {
      get: function() {
        return !z._handle;
      },
      configurable: !0,
      enumerable: !0
    });
  }
  n.inherits(P, r), P.prototype.params = function(w, k, z) {
    if (w < t.Z_MIN_LEVEL || w > t.Z_MAX_LEVEL)
      throw new RangeError("Invalid compression level: " + w);
    if (k != t.Z_FILTERED && k != t.Z_HUFFMAN_ONLY && k != t.Z_RLE && k != t.Z_FIXED && k != t.Z_DEFAULT_STRATEGY)
      throw new TypeError("Invalid strategy: " + k);
    if (this._level !== w || this._strategy !== k) {
      var H = this;
      this.flush(i.Z_SYNC_FLUSH, function() {
        a(H._handle, "zlib binding closed"), H._handle.params(w, k), H._hadError || (H._level = w, H._strategy = k, z && z());
      });
    } else
      De.nextTick(z);
  }, P.prototype.reset = function() {
    return a(this._handle, "zlib binding closed"), this._handle.reset();
  }, P.prototype._flush = function(w) {
    this._transform(e.alloc(0), "", w);
  }, P.prototype.flush = function(w, k) {
    var z = this, H = this._writableState;
    (typeof w == "function" || w === void 0 && !k) && (k = w, w = i.Z_FULL_FLUSH), H.ended ? k && De.nextTick(k) : H.ending ? k && this.once("end", k) : H.needDrain ? k && this.once("drain", function() {
      return z.flush(w, k);
    }) : (this._flushFlag = w, this.write(e.alloc(0), "", k));
  }, P.prototype.close = function(w) {
    B(this, w), De.nextTick(I, this);
  };
  function B(w, k) {
    k && De.nextTick(k), w._handle && (w._handle.close(), w._handle = null);
  }
  function I(w) {
    w.emit("close");
  }
  P.prototype._transform = function(w, k, z) {
    var H, re = this._writableState, ie = re.ending || re.ended, X = ie && (!w || re.length === w.length);
    if (w !== null && !e.isBuffer(w)) return z(new Error("invalid input"));
    if (!this._handle) return z(new Error("zlib binding closed"));
    X ? H = this._finishFlushFlag : (H = this._flushFlag, w.length >= re.length && (this._flushFlag = this._opts.flush || i.Z_NO_FLUSH)), this._processChunk(w, H, z);
  }, P.prototype._processChunk = function(w, k, z) {
    var H = w && w.length, re = this._chunkSize - this._offset, ie = 0, X = this, oe = typeof z == "function";
    if (!oe) {
      var ae = [], V = 0, Q;
      this.on("error", function(ze) {
        Q = ze;
      }), a(this._handle, "zlib binding closed");
      do
        var ne = this._handle.writeSync(
          k,
          w,
          // in
          ie,
          // in_off
          H,
          // in_len
          this._buffer,
          // out
          this._offset,
          //out_off
          re
        );
      while (!this._hadError && Ae(ne[0], ne[1]));
      if (this._hadError)
        throw Q;
      if (V >= s)
        throw B(this), new RangeError(o);
      var ee = e.concat(ae, V);
      return B(this), ee;
    }
    a(this._handle, "zlib binding closed");
    var Se = this._handle.write(
      k,
      w,
      // in
      ie,
      // in_off
      H,
      // in_len
      this._buffer,
      // out
      this._offset,
      //out_off
      re
    );
    Se.buffer = w, Se.callback = Ae;
    function Ae(ze, Z) {
      if (this && (this.buffer = null, this.callback = null), !X._hadError) {
        var K = re - Z;
        if (a(K >= 0, "have should not go down"), K > 0) {
          var G = X._buffer.slice(X._offset, X._offset + K);
          X._offset += K, oe ? X.push(G) : (ae.push(G), V += G.length);
        }
        if ((Z === 0 || X._offset >= X._chunkSize) && (re = X._chunkSize, X._offset = 0, X._buffer = e.allocUnsafe(X._chunkSize)), Z === 0) {
          if (ie += H - ze, H = ze, !oe) return !0;
          var Y = X._handle.write(k, w, ie, H, X._buffer, X._offset, X._chunkSize);
          Y.callback = Ae, Y.buffer = w;
          return;
        }
        if (!oe) return !1;
        z();
      }
    }
  }, n.inherits(A, P), n.inherits(b, P), n.inherits(x, P), n.inherits(_, P), n.inherits(v, P), n.inherits(F, P), n.inherits(S, P);
})(ev);
var wa = /* @__PURE__ */ gp(ev);
class cv extends Qp.Writable {
  constructor(e, r, i) {
    super({
      decodeStrings: !1
    }), this.finalize = this.finalize.bind(this), this.document = e, this.id = r, i == null && (i = {}), this.data = i, this.gen = 0, this.deflate = null, this.compress = this.document.compress && !this.data.Filter, this.uncompressedLength = 0, this.chunks = [];
  }
  initDeflate() {
    return this.data.Filter = "FlateDecode", this.deflate = wa.createDeflate(), this.deflate.on("data", (e) => (this.chunks.push(e), this.data.Length += e.length)), this.deflate.on("end", this.finalize);
  }
  _write(e, r, i) {
    return e instanceof Uint8Array || (e = j.from(e + `
`, "binary")), this.uncompressedLength += e.length, this.data.Length == null && (this.data.Length = 0), this.compress ? (this.deflate || this.initDeflate(), this.deflate.write(e)) : (this.chunks.push(e), this.data.Length += e.length), i();
  }
  end() {
    return super.end(...arguments), this.deflate ? this.deflate.end() : this.finalize();
  }
  finalize() {
    if (this.offset = this.document._offset, this.document._write(`${this.id} ${this.gen} obj`), this.document._write(at.convert(this.data)), this.chunks.length) {
      this.document._write("stream");
      for (let e of Array.from(this.chunks))
        this.document._write(e);
      this.chunks.length = 0, this.document._write(`
endstream`);
    }
    return this.document._write("endobj"), this.document._refEnd(this);
  }
  toString() {
    return `${this.id} ${this.gen} R`;
  }
}
class fv {
  constructor(e) {
    e === void 0 && (e = {}), this._items = {}, this.limits = typeof e.limits == "boolean" ? e.limits : !0;
  }
  add(e, r) {
    return this._items[e] = r;
  }
  get(e) {
    return this._items[e];
  }
  toString() {
    const e = Object.keys(this._items).sort((i, n) => this._compareKeys(i, n)), r = ["<<"];
    if (this.limits && e.length > 1) {
      const i = e[0], n = e[e.length - 1];
      r.push(`  /Limits ${at.convert([this._dataForKey(i), this._dataForKey(n)])}`);
    }
    r.push(`  /${this._keysName()} [`);
    for (let i of e)
      r.push(`    ${at.convert(this._dataForKey(i))} ${at.convert(this._items[i])}`);
    return r.push("]"), r.push(">>"), r.join(`
`);
  }
  _compareKeys() {
    throw new Error("Must be implemented by subclasses");
  }
  _keysName() {
    throw new Error("Must be implemented by subclasses");
  }
  _dataForKey() {
    throw new Error("Must be implemented by subclasses");
  }
}
class fo extends fv {
  _compareKeys(e, r) {
    return e.localeCompare(r);
  }
  _keysName() {
    return "Names";
  }
  _dataForKey(e) {
    return new String(e);
  }
}
const un = (t, e) => (Array(e + 1).join("0") + t).slice(-e), qO = /[\n\r\t\b\f()\\]/g, VO = {
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\b": "\\b",
  "\f": "\\f",
  "\\": "\\\\",
  "(": "\\(",
  ")": "\\)"
}, YO = function(t) {
  const e = t.length;
  if (e & 1)
    throw new Error("Buffer length must be even");
  for (let r = 0, i = e - 1; r < i; r += 2) {
    const n = t[r];
    t[r] = t[r + 1], t[r + 1] = n;
  }
  return t;
};
class at {
  static convert(e) {
    if (typeof e == "string")
      return `/${e}`;
    if (e instanceof String) {
      let r = e, i = !1;
      for (let n = 0, a = r.length; n < a; n++)
        if (r.charCodeAt(n) > 127) {
          i = !0;
          break;
        }
      return i && (r = YO(j.from(`\uFEFF${r}`, "utf16le")).toString("binary")), r = r.replace(qO, (n) => VO[n]), `(${r})`;
    }
    if (j.isBuffer(e))
      return `<${e.toString("hex")}>`;
    if (e instanceof cv || e instanceof fo)
      return e.toString();
    if (e instanceof Date)
      return `(D:${un(e.getUTCFullYear(), 4)}` + un(e.getUTCMonth() + 1, 2) + un(e.getUTCDate(), 2) + un(e.getUTCHours(), 2) + un(e.getUTCMinutes(), 2) + un(e.getUTCSeconds(), 2) + "Z)";
    if (Array.isArray(e))
      return `[${Array.from(e).map((i) => at.convert(i)).join(" ")}]`;
    if ({}.toString.call(e) === "[object Object]") {
      const r = ["<<"];
      for (let i in e) {
        const n = e[i];
        r.push(`/${i} ${at.convert(n)}`);
      }
      return r.push(">>"), r.join(`
`);
    }
    return typeof e == "number" ? at.number(e) : `${e}`;
  }
  static number(e) {
    if (e > -1e21 && e < 1e21)
      return Math.round(e * 1e6) / 1e6;
    throw new Error(`unsupported number: ${e}`);
  }
}
const GO = {
  top: 72,
  left: 72,
  bottom: 72,
  right: 72
}, ZO = {
  "4A0": [4767.87, 6740.79],
  "2A0": [3370.39, 4767.87],
  A0: [2383.94, 3370.39],
  A1: [1683.78, 2383.94],
  A2: [1190.55, 1683.78],
  A3: [841.89, 1190.55],
  A4: [595.28, 841.89],
  A5: [419.53, 595.28],
  A6: [297.64, 419.53],
  A7: [209.76, 297.64],
  A8: [147.4, 209.76],
  A9: [104.88, 147.4],
  A10: [73.7, 104.88],
  B0: [2834.65, 4008.19],
  B1: [2004.09, 2834.65],
  B2: [1417.32, 2004.09],
  B3: [1000.63, 1417.32],
  B4: [708.66, 1000.63],
  B5: [498.9, 708.66],
  B6: [354.33, 498.9],
  B7: [249.45, 354.33],
  B8: [175.75, 249.45],
  B9: [124.72, 175.75],
  B10: [87.87, 124.72],
  C0: [2599.37, 3676.54],
  C1: [1836.85, 2599.37],
  C2: [1298.27, 1836.85],
  C3: [918.43, 1298.27],
  C4: [649.13, 918.43],
  C5: [459.21, 649.13],
  C6: [323.15, 459.21],
  C7: [229.61, 323.15],
  C8: [161.57, 229.61],
  C9: [113.39, 161.57],
  C10: [79.37, 113.39],
  RA0: [2437.8, 3458.27],
  RA1: [1729.13, 2437.8],
  RA2: [1218.9, 1729.13],
  RA3: [864.57, 1218.9],
  RA4: [609.45, 864.57],
  SRA0: [2551.18, 3628.35],
  SRA1: [1814.17, 2551.18],
  SRA2: [1275.59, 1814.17],
  SRA3: [907.09, 1275.59],
  SRA4: [637.8, 907.09],
  EXECUTIVE: [521.86, 756],
  FOLIO: [612, 936],
  LEGAL: [612, 1008],
  LETTER: [612, 792],
  TABLOID: [792, 1224]
};
class jO {
  constructor(e, r) {
    r === void 0 && (r = {}), this.document = e, this._options = r, this.size = r.size || "letter", this.layout = r.layout || "portrait", this.userUnit = r.userUnit || 1, typeof r.margin == "number" ? this.margins = {
      top: r.margin,
      left: r.margin,
      bottom: r.margin,
      right: r.margin
    } : this.margins = r.margins || GO;
    const i = Array.isArray(this.size) ? this.size : ZO[this.size.toUpperCase()];
    this.width = i[this.layout === "portrait" ? 0 : 1], this.height = i[this.layout === "portrait" ? 1 : 0], this.content = this.document.ref(), r.font && e.font(r.font, r.fontFamily), r.fontSize && e.fontSize(r.fontSize), this.resources = this.document.ref({
      ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"]
    }), this.dictionary = this.document.ref({
      Type: "Page",
      Parent: this.document._root.data.Pages,
      MediaBox: [0, 0, this.width, this.height],
      Contents: this.content,
      Resources: this.resources,
      UserUnit: this.userUnit
    }), this.markings = [];
  }
  // Lazily create these objects
  get fonts() {
    const e = this.resources.data;
    return e.Font != null ? e.Font : e.Font = {};
  }
  get xobjects() {
    const e = this.resources.data;
    return e.XObject != null ? e.XObject : e.XObject = {};
  }
  get ext_gstates() {
    const e = this.resources.data;
    return e.ExtGState != null ? e.ExtGState : e.ExtGState = {};
  }
  get patterns() {
    const e = this.resources.data;
    return e.Pattern != null ? e.Pattern : e.Pattern = {};
  }
  get colorSpaces() {
    const e = this.resources.data;
    return e.ColorSpace || (e.ColorSpace = {});
  }
  get annotations() {
    const e = this.dictionary.data;
    return e.Annots != null ? e.Annots : e.Annots = [];
  }
  get structParentTreeKey() {
    const e = this.dictionary.data;
    return e.StructParents != null ? e.StructParents : e.StructParents = this.document.createStructParentTreeNextKey();
  }
  maxY() {
    return this.height - this.margins.bottom;
  }
  write(e) {
    return this.content.write(e);
  }
  // Set tab order if document is tagged for accessibility.
  _setTabOrder() {
    !this.dictionary.Tabs && this.document.hasMarkInfoDictionary() && (this.dictionary.data.Tabs = "S");
  }
  end() {
    this._setTabOrder(), this.dictionary.end(), this.resources.data.ColorSpace = this.resources.data.ColorSpace || {};
    for (let e of Object.values(this.document.spotColors))
      this.resources.data.ColorSpace[e.id] = e;
    return this.resources.end(), this.content.end();
  }
}
const XO = (t) => {
  const e = [];
  for (let r = 0; r < t.sigBytes; r++)
    e.push(t.words[Math.floor(r / 4)] >> 8 * (3 - r % 4) & 255);
  return j.from(e);
};
class KO {
  static generateFileID(e) {
    e === void 0 && (e = {});
    let r = `${e.CreationDate.getTime()}
`;
    for (let i in e)
      e.hasOwnProperty(i) && (r += `${i}: ${e[i].valueOf()}
`);
    return XO(g8(r));
  }
}
const {
  number: JO
} = at;
let Hu = class {
  constructor(e) {
    this.doc = e, this.stops = [], this.embedded = !1, this.transform = [1, 0, 0, 1, 0, 0];
  }
  stop(e, r, i) {
    if (i == null && (i = 1), r = this.doc._normalizeColor(r), this.stops.length === 0)
      if (r.length === 3)
        this._colorSpace = "DeviceRGB";
      else if (r.length === 4)
        this._colorSpace = "DeviceCMYK";
      else if (r.length === 1)
        this._colorSpace = "DeviceGray";
      else
        throw new Error("Unknown color space");
    else if (this._colorSpace === "DeviceRGB" && r.length !== 3 || this._colorSpace === "DeviceCMYK" && r.length !== 4 || this._colorSpace === "DeviceGray" && r.length !== 1)
      throw new Error("All gradient stops must use the same color space");
    return i = Math.max(0, Math.min(1, i)), this.stops.push([e, r, i]), this;
  }
  setTransform(e, r, i, n, a, s) {
    return this.transform = [e, r, i, n, a, s], this;
  }
  embed(e) {
    let r;
    const i = this.stops.length;
    if (i === 0)
      return;
    this.embedded = !0, this.matrix = e;
    const n = this.stops[i - 1];
    n[0] < 1 && this.stops.push([1, n[1], n[2]]);
    const a = [], s = [], o = [];
    for (let f = 0; f < i - 1; f++)
      s.push(0, 1), f + 2 !== i && a.push(this.stops[f + 1][0]), r = this.doc.ref({
        FunctionType: 2,
        Domain: [0, 1],
        C0: this.stops[f + 0][1],
        C1: this.stops[f + 1][1],
        N: 1
      }), o.push(r), r.end();
    i === 1 ? r = o[0] : (r = this.doc.ref({
      FunctionType: 3,
      // stitching function
      Domain: [0, 1],
      Functions: o,
      Bounds: a,
      Encode: s
    }), r.end()), this.id = `Sh${++this.doc._gradCount}`;
    const c = this.shader(r);
    c.end();
    const l = this.doc.ref({
      Type: "Pattern",
      PatternType: 2,
      Shading: c,
      Matrix: this.matrix.map(JO)
    });
    if (l.end(), this.stops.some((f) => f[2] < 1)) {
      let f = this.opacityGradient();
      f._colorSpace = "DeviceGray";
      for (let m of this.stops)
        f.stop(m[0], [m[2]]);
      f = f.embed(this.matrix);
      const u = [0, 0, this.doc.page.width, this.doc.page.height], h = this.doc.ref({
        Type: "XObject",
        Subtype: "Form",
        FormType: 1,
        BBox: u,
        Group: {
          Type: "Group",
          S: "Transparency",
          CS: "DeviceGray"
        },
        Resources: {
          ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"],
          Pattern: {
            Sh1: f
          }
        }
      });
      h.write("/Pattern cs /Sh1 scn"), h.end(`${u.join(" ")} re f`);
      const d = this.doc.ref({
        Type: "ExtGState",
        SMask: {
          Type: "Mask",
          S: "Luminosity",
          G: h
        }
      });
      d.end();
      const p = this.doc.ref({
        Type: "Pattern",
        PatternType: 1,
        PaintType: 1,
        TilingType: 2,
        BBox: u,
        XStep: u[2],
        YStep: u[3],
        Resources: {
          ProcSet: ["PDF", "Text", "ImageB", "ImageC", "ImageI"],
          Pattern: {
            Sh1: l
          },
          ExtGState: {
            Gs1: d
          }
        }
      });
      p.write("/Gs1 gs /Pattern cs /Sh1 scn"), p.end(`${u.join(" ")} re f`), this.doc.page.patterns[this.id] = p;
    } else
      this.doc.page.patterns[this.id] = l;
    return l;
  }
  apply(e) {
    const [r, i, n, a, s, o] = this.doc._ctm, [c, l, f, u, h, d] = this.transform, p = [r * c + n * l, i * c + a * l, r * f + n * u, i * f + a * u, r * h + n * d + s, i * h + a * d + o];
    (!this.embedded || p.join(" ") !== this.matrix.join(" ")) && this.embed(p), this.doc._setColorSpace("Pattern", e);
    const m = e ? "SCN" : "scn";
    return this.doc.addContent(`/${this.id} ${m}`);
  }
}, QO = class uv extends Hu {
  constructor(e, r, i, n, a) {
    super(e), this.x1 = r, this.y1 = i, this.x2 = n, this.y2 = a;
  }
  shader(e) {
    return this.doc.ref({
      ShadingType: 2,
      ColorSpace: this._colorSpace,
      Coords: [this.x1, this.y1, this.x2, this.y2],
      Function: e,
      Extend: [!0, !0]
    });
  }
  opacityGradient() {
    return new uv(this.doc, this.x1, this.y1, this.x2, this.y2);
  }
}, eD = class hv extends Hu {
  constructor(e, r, i, n, a, s, o) {
    super(e), this.doc = e, this.x1 = r, this.y1 = i, this.r1 = n, this.x2 = a, this.y2 = s, this.r2 = o;
  }
  shader(e) {
    return this.doc.ref({
      ShadingType: 3,
      ColorSpace: this._colorSpace,
      Coords: [this.x1, this.y1, this.r1, this.x2, this.y2, this.r2],
      Function: e,
      Extend: [!0, !0]
    });
  }
  opacityGradient() {
    return new hv(this.doc, this.x1, this.y1, this.r1, this.x2, this.y2, this.r2);
  }
};
var tD = {
  PDFGradient: Hu,
  PDFLinearGradient: QO,
  PDFRadialGradient: eD
};
const rD = ["DeviceCMYK", "DeviceRGB"];
let iD = class {
  constructor(e, r, i, n, a) {
    this.doc = e, this.bBox = r, this.xStep = i, this.yStep = n, this.stream = a;
  }
  createPattern() {
    const e = this.doc.ref();
    e.end();
    const [r, i, n, a, s, o] = this.doc._ctm, [c, l, f, u, h, d] = [1, 0, 0, 1, 0, 0], p = [r * c + n * l, i * c + a * l, r * f + n * u, i * f + a * u, r * h + n * d + s, i * h + a * d + o], m = this.doc.ref({
      Type: "Pattern",
      PatternType: 1,
      // tiling
      PaintType: 2,
      // 1-colored, 2-uncolored
      TilingType: 2,
      // 2-no distortion
      BBox: this.bBox,
      XStep: this.xStep,
      YStep: this.yStep,
      Matrix: p.map((C) => +C.toFixed(5)),
      Resources: e
    });
    return m.end(this.stream), m;
  }
  embedPatternColorSpaces() {
    rD.forEach((e) => {
      const r = this.getPatternColorSpaceId(e);
      if (this.doc.page.colorSpaces[r]) return;
      const i = this.doc.ref(["Pattern", e]);
      i.end(), this.doc.page.colorSpaces[r] = i;
    });
  }
  getPatternColorSpaceId(e) {
    return `CsP${e}`;
  }
  embed() {
    this.id || (this.doc._patternCount = this.doc._patternCount + 1, this.id = "P" + this.doc._patternCount, this.pattern = this.createPattern()), this.doc.page.patterns[this.id] || (this.doc.page.patterns[this.id] = this.pattern);
  }
  apply(e, r) {
    this.embedPatternColorSpaces(), this.embed();
    const i = this.doc._normalizeColor(r);
    if (!i) throw Error(`invalid pattern color. (value: ${r})`);
    const n = this.getPatternColorSpaceId(this.doc._getColorSpace(i));
    this.doc._setColorSpace(n, e);
    const a = e ? "SCN" : "scn";
    return this.doc.addContent(`${i.join(" ")} /${this.id} ${a}`);
  }
};
var nD = {
  PDFTilingPattern: iD
};
class L1 {
  constructor(e, r, i, n, a, s) {
    this.id = "CS" + Object.keys(e.spotColors).length, this.name = r, this.values = [i, n, a, s], this.ref = e.ref(["Separation", this.name, "DeviceCMYK", {
      Range: [0, 1, 0, 1, 0, 1, 0, 1],
      C0: [0, 0, 0, 0],
      C1: this.values.map((o) => o / 100),
      FunctionType: 2,
      Domain: [0, 1],
      N: 1
    }]), this.ref.end();
  }
  toString() {
    return `${this.ref.id} 0 R`;
  }
}
const {
  PDFGradient: aD,
  PDFLinearGradient: sD,
  PDFRadialGradient: oD
} = tD, {
  PDFTilingPattern: m3
} = nD;
var lD = {
  initColor() {
    return this.spotColors = {}, this._opacityRegistry = {}, this._opacityCount = 0, this._patternCount = 0, this._gradCount = 0;
  },
  _normalizeColor(t) {
    if (typeof t == "string") {
      if (t.charAt(0) === "#") {
        t.length === 4 && (t = t.replace(/#([0-9A-F])([0-9A-F])([0-9A-F])/i, "#$1$1$2$2$3$3"));
        const e = parseInt(t.slice(1), 16);
        t = [e >> 16, e >> 8 & 255, e & 255];
      } else if (b3[t])
        t = b3[t];
      else if (this.spotColors[t])
        return this.spotColors[t];
    }
    return Array.isArray(t) ? (t.length === 3 ? t = t.map((e) => e / 255) : t.length === 4 && (t = t.map((e) => e / 100)), t) : null;
  },
  _setColor(t, e) {
    return t instanceof aD ? (t.apply(e), !0) : Array.isArray(t) && t[0] instanceof m3 ? (t[0].apply(e, t[1]), !0) : this._setColorCore(t, e);
  },
  _setColorCore(t, e) {
    if (t = this._normalizeColor(t), !t)
      return !1;
    const r = e ? "SCN" : "scn", i = this._getColorSpace(t);
    return this._setColorSpace(i, e), t instanceof L1 ? (this.page.colorSpaces[t.id] = t.ref, this.addContent(`1 ${r}`)) : this.addContent(`${t.join(" ")} ${r}`), !0;
  },
  _setColorSpace(t, e) {
    const r = e ? "CS" : "cs";
    return this.addContent(`/${t} ${r}`);
  },
  _getColorSpace(t) {
    return t instanceof L1 ? t.id : t.length === 4 ? "DeviceCMYK" : "DeviceRGB";
  },
  fillColor(t, e) {
    return this._setColor(t, !1) && this.fillOpacity(e), this._fillColor = [t, e], this;
  },
  strokeColor(t, e) {
    return this._setColor(t, !0) && this.strokeOpacity(e), this;
  },
  opacity(t) {
    return this._doOpacity(t, t), this;
  },
  fillOpacity(t) {
    return this._doOpacity(t, null), this;
  },
  strokeOpacity(t) {
    return this._doOpacity(null, t), this;
  },
  _doOpacity(t, e) {
    let r, i;
    if (t == null && e == null)
      return;
    t != null && (t = Math.max(0, Math.min(1, t))), e != null && (e = Math.max(0, Math.min(1, e)));
    const n = `${t}_${e}`;
    return this._opacityRegistry[n] ? [r, i] = this._opacityRegistry[n] : (r = {
      Type: "ExtGState"
    }, t != null && (r.ca = t), e != null && (r.CA = e), r = this.ref(r), r.end(), i = `Gs${++this._opacityCount}`, this._opacityRegistry[n] = [r, i]), this.page.ext_gstates[i] = r, this.addContent(`/${i} gs`);
  },
  linearGradient(t, e, r, i) {
    return new sD(this, t, e, r, i);
  },
  radialGradient(t, e, r, i, n, a) {
    return new oD(this, t, e, r, i, n, a);
  },
  pattern(t, e, r, i) {
    return new m3(this, t, e, r, i);
  },
  addSpotColor(t, e, r, i, n) {
    const a = new L1(this, t, e, r, i, n);
    return this.spotColors[t] = a, this;
  }
}, b3 = {
  aliceblue: [240, 248, 255],
  antiquewhite: [250, 235, 215],
  aqua: [0, 255, 255],
  aquamarine: [127, 255, 212],
  azure: [240, 255, 255],
  beige: [245, 245, 220],
  bisque: [255, 228, 196],
  black: [0, 0, 0],
  blanchedalmond: [255, 235, 205],
  blue: [0, 0, 255],
  blueviolet: [138, 43, 226],
  brown: [165, 42, 42],
  burlywood: [222, 184, 135],
  cadetblue: [95, 158, 160],
  chartreuse: [127, 255, 0],
  chocolate: [210, 105, 30],
  coral: [255, 127, 80],
  cornflowerblue: [100, 149, 237],
  cornsilk: [255, 248, 220],
  crimson: [220, 20, 60],
  cyan: [0, 255, 255],
  darkblue: [0, 0, 139],
  darkcyan: [0, 139, 139],
  darkgoldenrod: [184, 134, 11],
  darkgray: [169, 169, 169],
  darkgreen: [0, 100, 0],
  darkgrey: [169, 169, 169],
  darkkhaki: [189, 183, 107],
  darkmagenta: [139, 0, 139],
  darkolivegreen: [85, 107, 47],
  darkorange: [255, 140, 0],
  darkorchid: [153, 50, 204],
  darkred: [139, 0, 0],
  darksalmon: [233, 150, 122],
  darkseagreen: [143, 188, 143],
  darkslateblue: [72, 61, 139],
  darkslategray: [47, 79, 79],
  darkslategrey: [47, 79, 79],
  darkturquoise: [0, 206, 209],
  darkviolet: [148, 0, 211],
  deeppink: [255, 20, 147],
  deepskyblue: [0, 191, 255],
  dimgray: [105, 105, 105],
  dimgrey: [105, 105, 105],
  dodgerblue: [30, 144, 255],
  firebrick: [178, 34, 34],
  floralwhite: [255, 250, 240],
  forestgreen: [34, 139, 34],
  fuchsia: [255, 0, 255],
  gainsboro: [220, 220, 220],
  ghostwhite: [248, 248, 255],
  gold: [255, 215, 0],
  goldenrod: [218, 165, 32],
  gray: [128, 128, 128],
  grey: [128, 128, 128],
  green: [0, 128, 0],
  greenyellow: [173, 255, 47],
  honeydew: [240, 255, 240],
  hotpink: [255, 105, 180],
  indianred: [205, 92, 92],
  indigo: [75, 0, 130],
  ivory: [255, 255, 240],
  khaki: [240, 230, 140],
  lavender: [230, 230, 250],
  lavenderblush: [255, 240, 245],
  lawngreen: [124, 252, 0],
  lemonchiffon: [255, 250, 205],
  lightblue: [173, 216, 230],
  lightcoral: [240, 128, 128],
  lightcyan: [224, 255, 255],
  lightgoldenrodyellow: [250, 250, 210],
  lightgray: [211, 211, 211],
  lightgreen: [144, 238, 144],
  lightgrey: [211, 211, 211],
  lightpink: [255, 182, 193],
  lightsalmon: [255, 160, 122],
  lightseagreen: [32, 178, 170],
  lightskyblue: [135, 206, 250],
  lightslategray: [119, 136, 153],
  lightslategrey: [119, 136, 153],
  lightsteelblue: [176, 196, 222],
  lightyellow: [255, 255, 224],
  lime: [0, 255, 0],
  limegreen: [50, 205, 50],
  linen: [250, 240, 230],
  magenta: [255, 0, 255],
  maroon: [128, 0, 0],
  mediumaquamarine: [102, 205, 170],
  mediumblue: [0, 0, 205],
  mediumorchid: [186, 85, 211],
  mediumpurple: [147, 112, 219],
  mediumseagreen: [60, 179, 113],
  mediumslateblue: [123, 104, 238],
  mediumspringgreen: [0, 250, 154],
  mediumturquoise: [72, 209, 204],
  mediumvioletred: [199, 21, 133],
  midnightblue: [25, 25, 112],
  mintcream: [245, 255, 250],
  mistyrose: [255, 228, 225],
  moccasin: [255, 228, 181],
  navajowhite: [255, 222, 173],
  navy: [0, 0, 128],
  oldlace: [253, 245, 230],
  olive: [128, 128, 0],
  olivedrab: [107, 142, 35],
  orange: [255, 165, 0],
  orangered: [255, 69, 0],
  orchid: [218, 112, 214],
  palegoldenrod: [238, 232, 170],
  palegreen: [152, 251, 152],
  paleturquoise: [175, 238, 238],
  palevioletred: [219, 112, 147],
  papayawhip: [255, 239, 213],
  peachpuff: [255, 218, 185],
  peru: [205, 133, 63],
  pink: [255, 192, 203],
  plum: [221, 160, 221],
  powderblue: [176, 224, 230],
  purple: [128, 0, 128],
  red: [255, 0, 0],
  rosybrown: [188, 143, 143],
  royalblue: [65, 105, 225],
  saddlebrown: [139, 69, 19],
  salmon: [250, 128, 114],
  sandybrown: [244, 164, 96],
  seagreen: [46, 139, 87],
  seashell: [255, 245, 238],
  sienna: [160, 82, 45],
  silver: [192, 192, 192],
  skyblue: [135, 206, 235],
  slateblue: [106, 90, 205],
  slategray: [112, 128, 144],
  slategrey: [112, 128, 144],
  snow: [255, 250, 250],
  springgreen: [0, 255, 127],
  steelblue: [70, 130, 180],
  tan: [210, 180, 140],
  teal: [0, 128, 128],
  thistle: [216, 191, 216],
  tomato: [255, 99, 71],
  turquoise: [64, 224, 208],
  violet: [238, 130, 238],
  wheat: [245, 222, 179],
  white: [255, 255, 255],
  whitesmoke: [245, 245, 245],
  yellow: [255, 255, 0],
  yellowgreen: [154, 205, 50]
};
let ve, me, Be, We, wn, yn;
ve = me = Be = We = wn = yn = 0;
const dv = {
  M: 2,
  m: 2,
  Z: 0,
  z: 0,
  L: 2,
  l: 2,
  H: 1,
  h: 1,
  V: 1,
  v: 1,
  C: 6,
  c: 6,
  S: 4,
  s: 4,
  Q: 4,
  q: 4,
  T: 2,
  t: 2,
  A: 7,
  a: 7
}, cD = (t) => t in dv, fD = (t) => {
  const e = t.codePointAt(0);
  return e === 32 || e === 9 || e === 13 || e === 10;
}, uD = (t) => {
  const e = t.codePointAt(0);
  return e == null ? !1 : 48 <= e && e <= 57;
}, N1 = (t, e) => {
  let r = e, i = "", n = (
    /** @type {ReadNumberState} */
    "none"
  );
  for (; r < t.length; r += 1) {
    const s = t[r];
    if (s === "+" || s === "-") {
      if (n === "none") {
        n = "sign", i += s;
        continue;
      }
      if (n === "e") {
        n = "exponent_sign", i += s;
        continue;
      }
    }
    if (uD(s)) {
      if (n === "none" || n === "sign" || n === "whole") {
        n = "whole", i += s;
        continue;
      }
      if (n === "decimal_point" || n === "decimal") {
        n = "decimal", i += s;
        continue;
      }
      if (n === "e" || n === "exponent_sign" || n === "exponent") {
        n = "exponent", i += s;
        continue;
      }
    }
    if (s === "." && (n === "none" || n === "sign" || n === "whole")) {
      n = "decimal_point", i += s;
      continue;
    }
    if ((s === "E" || s === "e") && (n === "whole" || n === "decimal_point" || n === "decimal")) {
      n = "e", i += s;
      continue;
    }
    break;
  }
  const a = Number.parseFloat(i);
  return Number.isNaN(a) ? [e, null] : [r - 1, a];
}, hD = (t) => {
  const e = [];
  let r = null, i = (
    /** @type {number[]} */
    []
  ), n = 0, a = !1, s = !1;
  for (let o = 0; o < t.length; o += 1) {
    const c = t.charAt(o);
    if (fD(c))
      continue;
    if (a && c === ",") {
      if (s)
        break;
      s = !0;
      continue;
    }
    if (cD(c)) {
      if (s)
        return e;
      if (r == null) {
        if (c !== "M" && c !== "m")
          return e;
      } else if (i.length !== 0)
        return e;
      r = c, i = [], n = dv[r], a = !1, n === 0 && e.push({
        command: r,
        args: i
      });
      continue;
    }
    if (r == null)
      return e;
    let l = o, f = null;
    if (r === "A" || r === "a") {
      const u = i.length;
      (u === 0 || u === 1) && c !== "+" && c !== "-" && ([l, f] = N1(t, o)), (u === 2 || u === 5 || u === 6) && ([l, f] = N1(t, o)), (u === 3 || u === 4) && (c === "0" && (f = 0), c === "1" && (f = 1));
    } else
      [l, f] = N1(t, o);
    if (f == null)
      return e;
    i.push(f), a = !0, s = !1, o = l, i.length === n && (e.push({
      command: r,
      args: i
    }), r === "M" && (r = "L"), r === "m" && (r = "l"), i = []);
  }
  return e;
}, dD = function(t, e) {
  ve = me = Be = We = wn = yn = 0;
  for (let r = 0; r < t.length; r++) {
    const {
      command: i,
      args: n
    } = t[r];
    typeof x3[i] == "function" && x3[i](e, n);
  }
}, x3 = {
  M(t, e) {
    return ve = e[0], me = e[1], Be = We = null, wn = ve, yn = me, t.moveTo(ve, me);
  },
  m(t, e) {
    return ve += e[0], me += e[1], Be = We = null, wn = ve, yn = me, t.moveTo(ve, me);
  },
  C(t, e) {
    return ve = e[4], me = e[5], Be = e[2], We = e[3], t.bezierCurveTo(...e);
  },
  c(t, e) {
    return t.bezierCurveTo(e[0] + ve, e[1] + me, e[2] + ve, e[3] + me, e[4] + ve, e[5] + me), Be = ve + e[2], We = me + e[3], ve += e[4], me += e[5];
  },
  S(t, e) {
    return Be === null && (Be = ve, We = me), t.bezierCurveTo(ve - (Be - ve), me - (We - me), e[0], e[1], e[2], e[3]), Be = e[0], We = e[1], ve = e[2], me = e[3];
  },
  s(t, e) {
    return Be === null && (Be = ve, We = me), t.bezierCurveTo(ve - (Be - ve), me - (We - me), ve + e[0], me + e[1], ve + e[2], me + e[3]), Be = ve + e[0], We = me + e[1], ve += e[2], me += e[3];
  },
  Q(t, e) {
    return Be = e[0], We = e[1], ve = e[2], me = e[3], t.quadraticCurveTo(e[0], e[1], ve, me);
  },
  q(t, e) {
    return t.quadraticCurveTo(e[0] + ve, e[1] + me, e[2] + ve, e[3] + me), Be = ve + e[0], We = me + e[1], ve += e[2], me += e[3];
  },
  T(t, e) {
    return Be === null ? (Be = ve, We = me) : (Be = ve - (Be - ve), We = me - (We - me)), t.quadraticCurveTo(Be, We, e[0], e[1]), Be = ve - (Be - ve), We = me - (We - me), ve = e[0], me = e[1];
  },
  t(t, e) {
    return Be === null ? (Be = ve, We = me) : (Be = ve - (Be - ve), We = me - (We - me)), t.quadraticCurveTo(Be, We, ve + e[0], me + e[1]), ve += e[0], me += e[1];
  },
  A(t, e) {
    return w3(t, ve, me, e), ve = e[5], me = e[6];
  },
  a(t, e) {
    return e[5] += ve, e[6] += me, w3(t, ve, me, e), ve = e[5], me = e[6];
  },
  L(t, e) {
    return ve = e[0], me = e[1], Be = We = null, t.lineTo(ve, me);
  },
  l(t, e) {
    return ve += e[0], me += e[1], Be = We = null, t.lineTo(ve, me);
  },
  H(t, e) {
    return ve = e[0], Be = We = null, t.lineTo(ve, me);
  },
  h(t, e) {
    return ve += e[0], Be = We = null, t.lineTo(ve, me);
  },
  V(t, e) {
    return me = e[0], Be = We = null, t.lineTo(ve, me);
  },
  v(t, e) {
    return me += e[0], Be = We = null, t.lineTo(ve, me);
  },
  Z(t) {
    return t.closePath(), ve = wn, me = yn;
  },
  z(t) {
    return t.closePath(), ve = wn, me = yn;
  }
}, w3 = function(t, e, r, i) {
  const [n, a, s, o, c, l, f] = i, u = gD(l, f, n, a, o, c, s, e, r);
  for (let h of u) {
    const d = pD(...h);
    t.bezierCurveTo(...d);
  }
}, gD = function(t, e, r, i, n, a, s, o, c) {
  const l = s * (Math.PI / 180), f = Math.sin(l), u = Math.cos(l);
  r = Math.abs(r), i = Math.abs(i), Be = u * (o - t) * 0.5 + f * (c - e) * 0.5, We = u * (c - e) * 0.5 - f * (o - t) * 0.5;
  let h = Be * Be / (r * r) + We * We / (i * i);
  h > 1 && (h = Math.sqrt(h), r *= h, i *= h);
  const d = u / r, p = f / r, m = -f / i, C = u / i, A = d * o + p * c, b = m * o + C * c, x = d * t + p * e, _ = m * t + C * e;
  let F = 1 / ((x - A) * (x - A) + (_ - b) * (_ - b)) - 0.25;
  F < 0 && (F = 0);
  let S = Math.sqrt(F);
  a === n && (S = -S);
  const D = 0.5 * (A + x) - S * (_ - b), P = 0.5 * (b + _) + S * (x - A), B = Math.atan2(b - P, A - D);
  let w = Math.atan2(_ - P, x - D) - B;
  w < 0 && a === 1 ? w += 2 * Math.PI : w > 0 && a === 0 && (w -= 2 * Math.PI);
  const k = Math.ceil(Math.abs(w / (Math.PI * 0.5 + 1e-3))), z = [];
  for (let H = 0; H < k; H++) {
    const re = B + H * w / k, ie = B + (H + 1) * w / k;
    z[H] = [D, P, re, ie, r, i, f, u];
  }
  return z;
}, pD = function(t, e, r, i, n, a, s, o) {
  const c = o * n, l = -s * a, f = s * n, u = o * a, h = 0.5 * (i - r), d = 8 / 3 * Math.sin(h * 0.5) * Math.sin(h * 0.5) / Math.sin(h), p = t + Math.cos(r) - d * Math.sin(r), m = e + Math.sin(r) + d * Math.cos(r), C = t + Math.cos(i), A = e + Math.sin(i), b = C + d * Math.sin(i), x = A - d * Math.cos(i);
  return [c * p + l * m, f * p + u * m, c * b + l * x, f * b + u * x, c * C + l * A, f * C + u * A];
};
class vD {
  static apply(e, r) {
    const i = hD(r);
    dD(i, e);
  }
}
const {
  number: l0
} = at, Vs = 4 * ((Math.sqrt(2) - 1) / 3);
var mD = {
  initVector() {
    return this._ctm = [1, 0, 0, 1, 0, 0], this._ctmStack = [];
  },
  save() {
    return this._ctmStack.push(this._ctm.slice()), this.addContent("q");
  },
  restore() {
    return this._ctm = this._ctmStack.pop() || [1, 0, 0, 1, 0, 0], this.addContent("Q");
  },
  closePath() {
    return this.addContent("h");
  },
  lineWidth(t) {
    return this.addContent(`${l0(t)} w`);
  },
  _CAP_STYLES: {
    BUTT: 0,
    ROUND: 1,
    SQUARE: 2
  },
  lineCap(t) {
    return typeof t == "string" && (t = this._CAP_STYLES[t.toUpperCase()]), this.addContent(`${t} J`);
  },
  _JOIN_STYLES: {
    MITER: 0,
    ROUND: 1,
    BEVEL: 2
  },
  lineJoin(t) {
    return typeof t == "string" && (t = this._JOIN_STYLES[t.toUpperCase()]), this.addContent(`${t} j`);
  },
  miterLimit(t) {
    return this.addContent(`${l0(t)} M`);
  },
  dash(t, e) {
    e === void 0 && (e = {});
    const r = t;
    if (Array.isArray(t) || (t = [t, e.space || t]), !t.every((n) => Number.isFinite(n) && n > 0))
      throw new Error(`dash(${JSON.stringify(r)}, ${JSON.stringify(e)}) invalid, lengths must be numeric and greater than zero`);
    return t = t.map(l0).join(" "), this.addContent(`[${t}] ${l0(e.phase || 0)} d`);
  },
  undash() {
    return this.addContent("[] 0 d");
  },
  moveTo(t, e) {
    return this.addContent(`${l0(t)} ${l0(e)} m`);
  },
  lineTo(t, e) {
    return this.addContent(`${l0(t)} ${l0(e)} l`);
  },
  bezierCurveTo(t, e, r, i, n, a) {
    return this.addContent(`${l0(t)} ${l0(e)} ${l0(r)} ${l0(i)} ${l0(n)} ${l0(a)} c`);
  },
  quadraticCurveTo(t, e, r, i) {
    return this.addContent(`${l0(t)} ${l0(e)} ${l0(r)} ${l0(i)} v`);
  },
  rect(t, e, r, i) {
    return this.addContent(`${l0(t)} ${l0(e)} ${l0(r)} ${l0(i)} re`);
  },
  roundedRect(t, e, r, i, n) {
    n == null && (n = 0), n = Math.min(n, 0.5 * r, 0.5 * i);
    const a = n * (1 - Vs);
    return this.moveTo(t + n, e), this.lineTo(t + r - n, e), this.bezierCurveTo(t + r - a, e, t + r, e + a, t + r, e + n), this.lineTo(t + r, e + i - n), this.bezierCurveTo(t + r, e + i - a, t + r - a, e + i, t + r - n, e + i), this.lineTo(t + n, e + i), this.bezierCurveTo(t + a, e + i, t, e + i - a, t, e + i - n), this.lineTo(t, e + n), this.bezierCurveTo(t, e + a, t + a, e, t + n, e), this.closePath();
  },
  ellipse(t, e, r, i) {
    i == null && (i = r), t -= r, e -= i;
    const n = r * Vs, a = i * Vs, s = t + r * 2, o = e + i * 2, c = t + r, l = e + i;
    return this.moveTo(t, l), this.bezierCurveTo(t, l - a, c - n, e, c, e), this.bezierCurveTo(c + n, e, s, l - a, s, l), this.bezierCurveTo(s, l + a, c + n, o, c, o), this.bezierCurveTo(c - n, o, t, l + a, t, l), this.closePath();
  },
  circle(t, e, r) {
    return this.ellipse(t, e, r);
  },
  arc(t, e, r, i, n, a) {
    a == null && (a = !1);
    const s = 2 * Math.PI, o = 0.5 * Math.PI;
    let c = n - i;
    Math.abs(c) > s ? c = s : c !== 0 && a !== c < 0 && (c = (a ? -1 : 1) * s + c);
    const l = Math.ceil(Math.abs(c) / o), f = c / l, u = f / o * Vs * r;
    let h = i, d = -Math.sin(h) * u, p = Math.cos(h) * u, m = t + Math.cos(h) * r, C = e + Math.sin(h) * r;
    this.moveTo(m, C);
    for (let A = 0; A < l; A++) {
      const b = m + d, x = C + p;
      h += f, m = t + Math.cos(h) * r, C = e + Math.sin(h) * r, d = -Math.sin(h) * u, p = Math.cos(h) * u;
      const _ = m - d, v = C - p;
      this.bezierCurveTo(b, x, _, v, m, C);
    }
    return this;
  },
  polygon() {
    for (var t = arguments.length, e = new Array(t), r = 0; r < t; r++)
      e[r] = arguments[r];
    this.moveTo(...e.shift() || []);
    for (let i of e)
      this.lineTo(...i || []);
    return this.closePath();
  },
  path(t) {
    return vD.apply(this, t), this;
  },
  _windingRule(t) {
    return /even-?odd/.test(t) ? "*" : "";
  },
  fill(t, e) {
    return /(even-?odd)|(non-?zero)/.test(t) && (e = t, t = null), t && this.fillColor(t), this.addContent(`f${this._windingRule(e)}`);
  },
  stroke(t) {
    return t && this.strokeColor(t), this.addContent("S");
  },
  fillAndStroke(t, e, r) {
    e == null && (e = t);
    const i = /(even-?odd)|(non-?zero)/;
    return i.test(t) && (r = t, t = null), i.test(e) && (r = e, e = t), t && (this.fillColor(t), this.strokeColor(e)), this.addContent(`B${this._windingRule(r)}`);
  },
  clip(t) {
    return this.addContent(`W${this._windingRule(t)} n`);
  },
  transform(t, e, r, i, n, a) {
    if (t === 1 && e === 0 && r === 0 && i === 1 && n === 0 && a === 0)
      return this;
    const s = this._ctm, [o, c, l, f, u, h] = s;
    s[0] = o * t + l * e, s[1] = c * t + f * e, s[2] = o * r + l * i, s[3] = c * r + f * i, s[4] = o * n + l * a + u, s[5] = c * n + f * a + h;
    const d = [t, e, r, i, n, a].map((p) => l0(p)).join(" ");
    return this.addContent(`${d} cm`);
  },
  translate(t, e) {
    return this.transform(1, 0, 0, 1, t, e);
  },
  rotate(t, e) {
    e === void 0 && (e = {});
    let r;
    const i = t * Math.PI / 180, n = Math.cos(i), a = Math.sin(i);
    let s = r = 0;
    if (e.origin != null) {
      [s, r] = e.origin;
      const o = s * n - r * a, c = s * a + r * n;
      s -= o, r -= c;
    }
    return this.transform(n, a, -a, n, s, r);
  },
  scale(t, e, r) {
    r === void 0 && (r = {});
    let i;
    e == null && (e = t), typeof e == "object" && (r = e, e = t);
    let n = i = 0;
    return r.origin != null && ([n, i] = r.origin, n -= t * n, i -= e * i), this.transform(t, 0, 0, e, n, i);
  }
}, zo = {};
const bD = (t, e, r) => {
  let i = [], n = e + 1;
  for (let a = t; a < n; a++)
    i.push(a);
  return i;
}, y3 = {
  402: 131,
  8211: 150,
  8212: 151,
  8216: 145,
  8217: 146,
  8218: 130,
  8220: 147,
  8221: 148,
  8222: 132,
  8224: 134,
  8225: 135,
  8226: 149,
  8230: 133,
  8364: 128,
  8240: 137,
  8249: 139,
  8250: 155,
  710: 136,
  8482: 153,
  338: 140,
  339: 156,
  732: 152,
  352: 138,
  353: 154,
  376: 159,
  381: 142,
  382: 158
}, _3 = `.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef
.notdef       .notdef        .notdef        .notdef

space         exclam         quotedbl       numbersign
dollar        percent        ampersand      quotesingle
parenleft     parenright     asterisk       plus
comma         hyphen         period         slash
zero          one            two            three
four          five           six            seven
eight         nine           colon          semicolon
less          equal          greater        question

at            A              B              C
D             E              F              G
H             I              J              K
L             M              N              O
P             Q              R              S
T             U              V              W
X             Y              Z              bracketleft
backslash     bracketright   asciicircum    underscore

grave         a              b              c
d             e              f              g
h             i              j              k
l             m              n              o
p             q              r              s
t             u              v              w
x             y              z              braceleft
bar           braceright     asciitilde     .notdef

Euro          .notdef        quotesinglbase florin
quotedblbase  ellipsis       dagger         daggerdbl
circumflex    perthousand    Scaron         guilsinglleft
OE            .notdef        Zcaron         .notdef
.notdef       quoteleft      quoteright     quotedblleft
quotedblright bullet         endash         emdash
tilde         trademark      scaron         guilsinglright
oe            .notdef        zcaron         ydieresis

space         exclamdown     cent           sterling
currency      yen            brokenbar      section
dieresis      copyright      ordfeminine    guillemotleft
logicalnot    hyphen         registered     macron
degree        plusminus      twosuperior    threesuperior
acute         mu             paragraph      periodcentered
cedilla       onesuperior    ordmasculine   guillemotright
onequarter    onehalf        threequarters  questiondown

Agrave        Aacute         Acircumflex    Atilde
Adieresis     Aring          AE             Ccedilla
Egrave        Eacute         Ecircumflex    Edieresis
Igrave        Iacute         Icircumflex    Idieresis
Eth           Ntilde         Ograve         Oacute
Ocircumflex   Otilde         Odieresis      multiply
Oslash        Ugrave         Uacute         Ucircumflex
Udieresis     Yacute         Thorn          germandbls

agrave        aacute         acircumflex    atilde
adieresis     aring          ae             ccedilla
egrave        eacute         ecircumflex    edieresis
igrave        iacute         icircumflex    idieresis
eth           ntilde         ograve         oacute
ocircumflex   otilde         odieresis      divide
oslash        ugrave         uacute         ucircumflex
udieresis     yacute         thorn          ydieresis`.split(/\s+/);
function xD(t) {
  const e = {
    attributes: {},
    glyphWidths: {},
    kernPairs: {}
  };
  let r = "";
  for (let c of t.split(`
`)) {
    var i, n;
    if (i = c.match(/^Start(\w+)/)) {
      r = i[1];
      continue;
    } else if (i = c.match(/^End(\w+)/)) {
      r = "";
      continue;
    }
    switch (r) {
      case "FontMetrics":
        i = c.match(/(^\w+)\s+(.*)/);
        var a = i[1], s = i[2];
        (n = e.attributes[a]) ? (Array.isArray(n) || (n = e.attributes[a] = [n]), n.push(s)) : e.attributes[a] = s;
        break;
      case "CharMetrics":
        if (!/^CH?\s/.test(c))
          continue;
        var o = c.match(/\bN\s+(\.?\w+)\s*;/)[1];
        e.glyphWidths[o] = +c.match(/\bWX\s+(\d+)\s*;/)[1];
        break;
      case "KernPairs":
        i = c.match(/^KPX\s+(\.?\w+)\s+(\.?\w+)\s+(-?\d+)/), i && (e.kernPairs[i[1] + i[2]] = parseInt(i[3]));
        break;
    }
  }
  return e;
}
class qu {
  static open(e) {
    throw new Error("AFMFont.open not available on browser build");
  }
  static fromJson(e) {
    return new qu(e);
  }
  constructor(e) {
    typeof e == "string" ? (this.contents = e, this.parse()) : (this.attributes = e.attributes, this.glyphWidths = e.glyphWidths, this.kernPairs = e.kernPairs), this.charWidths = bD(0, 255).map((r) => this.glyphWidths[_3[r]]), this.bbox = Array.from(this.attributes.FontBBox.split(/\s+/)).map((r) => +r), this.ascender = +(this.attributes.Ascender || 0), this.descender = +(this.attributes.Descender || 0), this.xHeight = +(this.attributes.XHeight || 0), this.capHeight = +(this.attributes.CapHeight || 0), this.lineGap = this.bbox[3] - this.bbox[1] - (this.ascender - this.descender);
  }
  parse() {
    const e = xD(this.contents);
    this.attributes = e.attributes, this.glyphWidths = e.glyphWidths, this.kernPairs = e.kernPairs;
  }
  encodeText(e) {
    const r = [];
    for (let i = 0, n = e.length, a = 0 <= n; a ? i < n : i > n; a ? i++ : i--) {
      let s = e.charCodeAt(i);
      s = y3[s] || s, r.push(s.toString(16));
    }
    return r;
  }
  glyphsForString(e) {
    const r = [];
    for (let i = 0, n = e.length, a = 0 <= n; a ? i < n : i > n; a ? i++ : i--) {
      const s = e.charCodeAt(i);
      r.push(this.characterToGlyph(s));
    }
    return r;
  }
  characterToGlyph(e) {
    return _3[y3[e] || e] || ".notdef";
  }
  widthOfGlyph(e) {
    return this.glyphWidths[e] || 0;
  }
  getKernPair(e, r) {
    return this.kernPairs[e + r] || 0;
  }
  advancesForGlyphs(e) {
    const r = [];
    for (let i = 0; i < e.length; i++) {
      const n = e[i], a = e[i + 1];
      r.push(this.widthOfGlyph(n) + this.getKernPair(n, a));
    }
    return r;
  }
}
var wD = [
  {
    Comment: [
      "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Thu May  1 12:43:52 1997",
      "UniqueID 43052",
      "VMusage 37169 48194"
    ],
    FontName: "Helvetica-Bold",
    FullName: "Helvetica Bold",
    FamilyName: "Helvetica",
    Weight: "Bold",
    ItalicAngle: "0",
    IsFixedPitch: "false",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-170 -228 1003 962 ",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "002.000",
    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "718",
    XHeight: "532",
    Ascender: "718",
    Descender: "-207",
    StdHW: "118",
    StdVW: "140"
  },
  {
    Comment: [
      "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Thu May  1 12:45:12 1997",
      "UniqueID 43053",
      "VMusage 14482 68586"
    ],
    FontName: "Helvetica-BoldOblique",
    FullName: "Helvetica Bold Oblique",
    FamilyName: "Helvetica",
    Weight: "Bold",
    ItalicAngle: "-12",
    IsFixedPitch: "false",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-174 -228 1114 962",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "002.000",
    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "718",
    XHeight: "532",
    Ascender: "718",
    Descender: "-207",
    StdHW: "118",
    StdVW: "140"
  },
  {
    Comment: [
      "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Thu May  1 12:44:31 1997",
      "UniqueID 43055",
      "VMusage 14960 69346"
    ],
    FontName: "Helvetica-Oblique",
    FullName: "Helvetica Oblique",
    FamilyName: "Helvetica",
    Weight: "Medium",
    ItalicAngle: "-12",
    IsFixedPitch: "false",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-170 -225 1116 931 ",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "002.000",
    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "718",
    XHeight: "523",
    Ascender: "718",
    Descender: "-207",
    StdHW: "76",
    StdVW: "88"
  },
  {
    Comment: [
      "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Thu May  1 12:38:23 1997",
      "UniqueID 43054",
      "VMusage 37069 48094"
    ],
    FontName: "Helvetica",
    FullName: "Helvetica",
    FamilyName: "Helvetica",
    Weight: "Medium",
    ItalicAngle: "0",
    IsFixedPitch: "false",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-166 -225 1000 931 ",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "002.000",
    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "718",
    XHeight: "523",
    Ascender: "718",
    Descender: "-207",
    StdHW: "76",
    StdVW: "88"
  },
  {
    Comment: [
      "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Thu May  1 12:52:56 1997",
      "UniqueID 43065",
      "VMusage 41636 52661"
    ],
    FontName: "Times-Bold",
    FullName: "Times Bold",
    FamilyName: "Times",
    Weight: "Bold",
    ItalicAngle: "0",
    IsFixedPitch: "false",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-168 -218 1000 935 ",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "002.000",
    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "676",
    XHeight: "461",
    Ascender: "683",
    Descender: "-217",
    StdHW: "44",
    StdVW: "139"
  },
  {
    Comment: [
      "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Thu May  1 13:04:06 1997",
      "UniqueID 43066",
      "VMusage 45874 56899"
    ],
    FontName: "Times-BoldItalic",
    FullName: "Times Bold Italic",
    FamilyName: "Times",
    Weight: "Bold",
    ItalicAngle: "-15",
    IsFixedPitch: "false",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-200 -218 996 921",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "002.000",
    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "669",
    XHeight: "462",
    Ascender: "683",
    Descender: "-217",
    StdHW: "42",
    StdVW: "121"
  },
  {
    Comment: [
      "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Thu May  1 12:56:55 1997",
      "UniqueID 43067",
      "VMusage 47727 58752"
    ],
    FontName: "Times-Italic",
    FullName: "Times Italic",
    FamilyName: "Times",
    Weight: "Medium",
    ItalicAngle: "-15.5",
    IsFixedPitch: "false",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-169 -217 1010 883 ",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "002.000",
    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "653",
    XHeight: "441",
    Ascender: "683",
    Descender: "-217",
    StdHW: "32",
    StdVW: "76"
  },
  {
    Comment: [
      "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Thu May  1 12:49:17 1997",
      "UniqueID 43068",
      "VMusage 43909 54934"
    ],
    FontName: "Times-Roman",
    FullName: "Times Roman",
    FamilyName: "Times",
    Weight: "Roman",
    ItalicAngle: "0",
    IsFixedPitch: "false",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-168 -218 1000 898 ",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "002.000",
    Notice: "Copyright (c) 1985, 1987, 1989, 1990, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.Times is a trademark of Linotype-Hell AG and/or its subsidiaries.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "662",
    XHeight: "450",
    Ascender: "683",
    Descender: "-217",
    StdHW: "28",
    StdVW: "84"
  },
  {
    Comment: [
      "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Mon Jun 23 16:28:00 1997",
      "UniqueID 43048",
      "VMusage 41139 52164"
    ],
    FontName: "Courier-Bold",
    FullName: "Courier Bold",
    FamilyName: "Courier",
    Weight: "Bold",
    ItalicAngle: "0",
    IsFixedPitch: "true",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-113 -250 749 801 ",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "003.000",
    Notice: "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "562",
    XHeight: "439",
    Ascender: "629",
    Descender: "-157",
    StdHW: "84",
    StdVW: "106"
  },
  {
    Comment: [
      "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Mon Jun 23 16:28:46 1997",
      "UniqueID 43049",
      "VMusage 17529 79244"
    ],
    FontName: "Courier-BoldOblique",
    FullName: "Courier Bold Oblique",
    FamilyName: "Courier",
    Weight: "Bold",
    ItalicAngle: "-12",
    IsFixedPitch: "true",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-57 -250 869 801",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "003.000",
    Notice: "Copyright (c) 1989, 1990, 1991, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "562",
    XHeight: "439",
    Ascender: "629",
    Descender: "-157",
    StdHW: "84",
    StdVW: "106"
  },
  {
    Comment: [
      "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Thu May  1 17:37:52 1997",
      "UniqueID 43051",
      "VMusage 16248 75829"
    ],
    FontName: "Courier-Oblique",
    FullName: "Courier Oblique",
    FamilyName: "Courier",
    Weight: "Medium",
    ItalicAngle: "-12",
    IsFixedPitch: "true",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-27 -250 849 805 ",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "003.000",
    Notice: "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "562",
    XHeight: "426",
    Ascender: "629",
    Descender: "-157",
    StdHW: "51",
    StdVW: "51"
  },
  {
    Comment: [
      "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
      "Creation Date: Thu May  1 17:27:09 1997",
      "UniqueID 43050",
      "VMusage 39754 50779"
    ],
    FontName: "Courier",
    FullName: "Courier",
    FamilyName: "Courier",
    Weight: "Medium",
    ItalicAngle: "0",
    IsFixedPitch: "true",
    CharacterSet: "ExtendedRoman",
    FontBBox: "-23 -250 715 805 ",
    UnderlinePosition: "-100",
    UnderlineThickness: "50",
    Version: "003.000",
    Notice: "Copyright (c) 1989, 1990, 1991, 1992, 1993, 1997 Adobe Systems Incorporated.  All Rights Reserved.",
    EncodingScheme: "AdobeStandardEncoding",
    CapHeight: "562",
    XHeight: "426",
    Ascender: "629",
    Descender: "-157",
    StdHW: "51",
    StdVW: "51"
  }
], yD = {
  space: [
    278,
    278,
    278,
    278,
    250,
    250,
    250,
    250,
    600,
    600,
    600,
    600
  ],
  exclam: [
    333,
    333,
    278,
    278,
    333,
    389,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  quotedbl: [
    474,
    474,
    355,
    355,
    555,
    555,
    420,
    408,
    600,
    600,
    600,
    600
  ],
  numbersign: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  dollar: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  percent: [
    889,
    889,
    889,
    889,
    1e3,
    833,
    833,
    833,
    600,
    600,
    600,
    600
  ],
  ampersand: [
    722,
    722,
    667,
    667,
    833,
    778,
    778,
    778,
    600,
    600,
    600,
    600
  ],
  quoteright: [
    278,
    278,
    222,
    222,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  parenleft: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  parenright: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  asterisk: [
    389,
    389,
    389,
    389,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  plus: [
    584,
    584,
    584,
    584,
    570,
    570,
    675,
    564,
    600,
    600,
    600,
    600
  ],
  comma: [
    278,
    278,
    278,
    278,
    250,
    250,
    250,
    250,
    600,
    600,
    600,
    600
  ],
  hyphen: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  period: [
    278,
    278,
    278,
    278,
    250,
    250,
    250,
    250,
    600,
    600,
    600,
    600
  ],
  slash: [
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  zero: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  one: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  two: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  three: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  four: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  five: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  six: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  seven: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  eight: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  nine: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  colon: [
    333,
    333,
    278,
    278,
    333,
    333,
    333,
    278,
    600,
    600,
    600,
    600
  ],
  semicolon: [
    333,
    333,
    278,
    278,
    333,
    333,
    333,
    278,
    600,
    600,
    600,
    600
  ],
  less: [
    584,
    584,
    584,
    584,
    570,
    570,
    675,
    564,
    600,
    600,
    600,
    600
  ],
  equal: [
    584,
    584,
    584,
    584,
    570,
    570,
    675,
    564,
    600,
    600,
    600,
    600
  ],
  greater: [
    584,
    584,
    584,
    584,
    570,
    570,
    675,
    564,
    600,
    600,
    600,
    600
  ],
  question: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  at: [
    975,
    975,
    1015,
    1015,
    930,
    832,
    920,
    921,
    600,
    600,
    600,
    600
  ],
  A: [
    722,
    722,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  B: [
    722,
    722,
    667,
    667,
    667,
    667,
    611,
    667,
    600,
    600,
    600,
    600
  ],
  C: [
    722,
    722,
    722,
    722,
    722,
    667,
    667,
    667,
    600,
    600,
    600,
    600
  ],
  D: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  E: [
    667,
    667,
    667,
    667,
    667,
    667,
    611,
    611,
    600,
    600,
    600,
    600
  ],
  F: [
    611,
    611,
    611,
    611,
    611,
    667,
    611,
    556,
    600,
    600,
    600,
    600
  ],
  G: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  H: [
    722,
    722,
    722,
    722,
    778,
    778,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  I: [
    278,
    278,
    278,
    278,
    389,
    389,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  J: [
    556,
    556,
    500,
    500,
    500,
    500,
    444,
    389,
    600,
    600,
    600,
    600
  ],
  K: [
    722,
    722,
    667,
    667,
    778,
    667,
    667,
    722,
    600,
    600,
    600,
    600
  ],
  L: [
    611,
    611,
    556,
    556,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  M: [
    833,
    833,
    833,
    833,
    944,
    889,
    833,
    889,
    600,
    600,
    600,
    600
  ],
  N: [
    722,
    722,
    722,
    722,
    722,
    722,
    667,
    722,
    600,
    600,
    600,
    600
  ],
  O: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  P: [
    667,
    667,
    667,
    667,
    611,
    611,
    611,
    556,
    600,
    600,
    600,
    600
  ],
  Q: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  R: [
    722,
    722,
    722,
    722,
    722,
    667,
    611,
    667,
    600,
    600,
    600,
    600
  ],
  S: [
    667,
    667,
    667,
    667,
    556,
    556,
    500,
    556,
    600,
    600,
    600,
    600
  ],
  T: [
    611,
    611,
    611,
    611,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  U: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  V: [
    667,
    667,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  W: [
    944,
    944,
    944,
    944,
    1e3,
    889,
    833,
    944,
    600,
    600,
    600,
    600
  ],
  X: [
    667,
    667,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  Y: [
    667,
    667,
    667,
    667,
    722,
    611,
    556,
    722,
    600,
    600,
    600,
    600
  ],
  Z: [
    611,
    611,
    611,
    611,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  bracketleft: [
    333,
    333,
    278,
    278,
    333,
    333,
    389,
    333,
    600,
    600,
    600,
    600
  ],
  backslash: [
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  bracketright: [
    333,
    333,
    278,
    278,
    333,
    333,
    389,
    333,
    600,
    600,
    600,
    600
  ],
  asciicircum: [
    584,
    584,
    469,
    469,
    581,
    570,
    422,
    469,
    600,
    600,
    600,
    600
  ],
  underscore: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  quoteleft: [
    278,
    278,
    222,
    222,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  a: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  b: [
    611,
    611,
    556,
    556,
    556,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  c: [
    556,
    556,
    500,
    500,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  d: [
    611,
    611,
    556,
    556,
    556,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  e: [
    556,
    556,
    556,
    556,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  f: [
    333,
    333,
    278,
    278,
    333,
    333,
    278,
    333,
    600,
    600,
    600,
    600
  ],
  g: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  h: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  i: [
    278,
    278,
    222,
    222,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  j: [
    278,
    278,
    222,
    222,
    333,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  k: [
    556,
    556,
    500,
    500,
    556,
    500,
    444,
    500,
    600,
    600,
    600,
    600
  ],
  l: [
    278,
    278,
    222,
    222,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  m: [
    889,
    889,
    833,
    833,
    833,
    778,
    722,
    778,
    600,
    600,
    600,
    600
  ],
  n: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  o: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  p: [
    611,
    611,
    556,
    556,
    556,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  q: [
    611,
    611,
    556,
    556,
    556,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  r: [
    389,
    389,
    333,
    333,
    444,
    389,
    389,
    333,
    600,
    600,
    600,
    600
  ],
  s: [
    556,
    556,
    500,
    500,
    389,
    389,
    389,
    389,
    600,
    600,
    600,
    600
  ],
  t: [
    333,
    333,
    278,
    278,
    333,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  u: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  v: [
    556,
    556,
    500,
    500,
    500,
    444,
    444,
    500,
    600,
    600,
    600,
    600
  ],
  w: [
    778,
    778,
    722,
    722,
    722,
    667,
    667,
    722,
    600,
    600,
    600,
    600
  ],
  x: [
    556,
    556,
    500,
    500,
    500,
    500,
    444,
    500,
    600,
    600,
    600,
    600
  ],
  y: [
    556,
    556,
    500,
    500,
    500,
    444,
    444,
    500,
    600,
    600,
    600,
    600
  ],
  z: [
    500,
    500,
    500,
    500,
    444,
    389,
    389,
    444,
    600,
    600,
    600,
    600
  ],
  braceleft: [
    389,
    389,
    334,
    334,
    394,
    348,
    400,
    480,
    600,
    600,
    600,
    600
  ],
  bar: [
    280,
    280,
    260,
    260,
    220,
    220,
    275,
    200,
    600,
    600,
    600,
    600
  ],
  braceright: [
    389,
    389,
    334,
    334,
    394,
    348,
    400,
    480,
    600,
    600,
    600,
    600
  ],
  asciitilde: [
    584,
    584,
    584,
    584,
    520,
    570,
    541,
    541,
    600,
    600,
    600,
    600
  ],
  exclamdown: [
    333,
    333,
    333,
    333,
    333,
    389,
    389,
    333,
    600,
    600,
    600,
    600
  ],
  cent: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  sterling: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  fraction: [
    167,
    167,
    167,
    167,
    167,
    167,
    167,
    167,
    600,
    600,
    600,
    600
  ],
  yen: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  florin: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  section: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  currency: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  quotesingle: [
    238,
    238,
    191,
    191,
    278,
    278,
    214,
    180,
    600,
    600,
    600,
    600
  ],
  quotedblleft: [
    500,
    500,
    333,
    333,
    500,
    500,
    556,
    444,
    600,
    600,
    600,
    600
  ],
  guillemotleft: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  guilsinglleft: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  guilsinglright: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  fi: [
    611,
    611,
    500,
    500,
    556,
    556,
    500,
    556,
    600,
    600,
    600,
    600
  ],
  fl: [
    611,
    611,
    500,
    500,
    556,
    556,
    500,
    556,
    600,
    600,
    600,
    600
  ],
  endash: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  dagger: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  daggerdbl: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  periodcentered: [
    278,
    278,
    278,
    278,
    250,
    250,
    250,
    250,
    600,
    600,
    600,
    600
  ],
  paragraph: [
    556,
    556,
    537,
    537,
    540,
    500,
    523,
    453,
    600,
    600,
    600,
    600
  ],
  bullet: [
    350,
    350,
    350,
    350,
    350,
    350,
    350,
    350,
    600,
    600,
    600,
    600
  ],
  quotesinglbase: [
    278,
    278,
    222,
    222,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  quotedblbase: [
    500,
    500,
    333,
    333,
    500,
    500,
    556,
    444,
    600,
    600,
    600,
    600
  ],
  quotedblright: [
    500,
    500,
    333,
    333,
    500,
    500,
    556,
    444,
    600,
    600,
    600,
    600
  ],
  guillemotright: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  ellipsis: [
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    889,
    1e3,
    600,
    600,
    600,
    600
  ],
  perthousand: [
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    600,
    600,
    600,
    600
  ],
  questiondown: [
    611,
    611,
    611,
    611,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  grave: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  acute: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  circumflex: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  tilde: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  macron: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  breve: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  dotaccent: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  dieresis: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  ring: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  cedilla: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  hungarumlaut: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  ogonek: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  caron: [
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  emdash: [
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    889,
    1e3,
    600,
    600,
    600,
    600
  ],
  AE: [
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    944,
    889,
    889,
    600,
    600,
    600,
    600
  ],
  ordfeminine: [
    370,
    370,
    370,
    370,
    300,
    266,
    276,
    276,
    600,
    600,
    600,
    600
  ],
  Lslash: [
    611,
    611,
    556,
    556,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  Oslash: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  OE: [
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    944,
    944,
    889,
    600,
    600,
    600,
    600
  ],
  ordmasculine: [
    365,
    365,
    365,
    365,
    330,
    300,
    310,
    310,
    600,
    600,
    600,
    600
  ],
  ae: [
    889,
    889,
    889,
    889,
    722,
    722,
    667,
    667,
    600,
    600,
    600,
    600
  ],
  dotlessi: [
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  lslash: [
    278,
    278,
    222,
    222,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  oslash: [
    611,
    611,
    611,
    611,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  oe: [
    944,
    944,
    944,
    944,
    722,
    722,
    667,
    722,
    600,
    600,
    600,
    600
  ],
  germandbls: [
    611,
    611,
    611,
    611,
    556,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  Idieresis: [
    278,
    278,
    278,
    278,
    389,
    389,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  eacute: [
    556,
    556,
    556,
    556,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  abreve: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  uhungarumlaut: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  ecaron: [
    556,
    556,
    556,
    556,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  Ydieresis: [
    667,
    667,
    667,
    667,
    722,
    611,
    556,
    722,
    600,
    600,
    600,
    600
  ],
  divide: [
    584,
    584,
    584,
    584,
    570,
    570,
    675,
    564,
    600,
    600,
    600,
    600
  ],
  Yacute: [
    667,
    667,
    667,
    667,
    722,
    611,
    556,
    722,
    600,
    600,
    600,
    600
  ],
  Acircumflex: [
    722,
    722,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  aacute: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  Ucircumflex: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  yacute: [
    556,
    556,
    500,
    500,
    500,
    444,
    444,
    500,
    600,
    600,
    600,
    600
  ],
  scommaaccent: [
    556,
    556,
    500,
    500,
    389,
    389,
    389,
    389,
    600,
    600,
    600,
    600
  ],
  ecircumflex: [
    556,
    556,
    556,
    556,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  Uring: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  Udieresis: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  aogonek: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  Uacute: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  uogonek: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  Edieresis: [
    667,
    667,
    667,
    667,
    667,
    667,
    611,
    611,
    600,
    600,
    600,
    600
  ],
  Dcroat: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  commaaccent: [
    250,
    250,
    250,
    250,
    250,
    250,
    250,
    250,
    600,
    600,
    600,
    600
  ],
  copyright: [
    737,
    737,
    737,
    737,
    747,
    747,
    760,
    760,
    600,
    600,
    600,
    600
  ],
  Emacron: [
    667,
    667,
    667,
    667,
    667,
    667,
    611,
    611,
    600,
    600,
    600,
    600
  ],
  ccaron: [
    556,
    556,
    500,
    500,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  aring: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  Ncommaaccent: [
    722,
    722,
    722,
    722,
    722,
    722,
    667,
    722,
    600,
    600,
    600,
    600
  ],
  lacute: [
    278,
    278,
    222,
    222,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  agrave: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  Tcommaaccent: [
    611,
    611,
    611,
    611,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  Cacute: [
    722,
    722,
    722,
    722,
    722,
    667,
    667,
    667,
    600,
    600,
    600,
    600
  ],
  atilde: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  Edotaccent: [
    667,
    667,
    667,
    667,
    667,
    667,
    611,
    611,
    600,
    600,
    600,
    600
  ],
  scaron: [
    556,
    556,
    500,
    500,
    389,
    389,
    389,
    389,
    600,
    600,
    600,
    600
  ],
  scedilla: [
    556,
    556,
    500,
    500,
    389,
    389,
    389,
    389,
    600,
    600,
    600,
    600
  ],
  iacute: [
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  lozenge: [
    494,
    494,
    471,
    471,
    494,
    494,
    471,
    471,
    600,
    600,
    600,
    600
  ],
  Rcaron: [
    722,
    722,
    722,
    722,
    722,
    667,
    611,
    667,
    600,
    600,
    600,
    600
  ],
  Gcommaaccent: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  ucircumflex: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  acircumflex: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  Amacron: [
    722,
    722,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  rcaron: [
    389,
    389,
    333,
    333,
    444,
    389,
    389,
    333,
    600,
    600,
    600,
    600
  ],
  ccedilla: [
    556,
    556,
    500,
    500,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  Zdotaccent: [
    611,
    611,
    611,
    611,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  Thorn: [
    667,
    667,
    667,
    667,
    611,
    611,
    611,
    556,
    600,
    600,
    600,
    600
  ],
  Omacron: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  Racute: [
    722,
    722,
    722,
    722,
    722,
    667,
    611,
    667,
    600,
    600,
    600,
    600
  ],
  Sacute: [
    667,
    667,
    667,
    667,
    556,
    556,
    500,
    556,
    600,
    600,
    600,
    600
  ],
  dcaron: [
    743,
    743,
    643,
    643,
    672,
    608,
    544,
    588,
    600,
    600,
    600,
    600
  ],
  Umacron: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  uring: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  threesuperior: [
    333,
    333,
    333,
    333,
    300,
    300,
    300,
    300,
    600,
    600,
    600,
    600
  ],
  Ograve: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  Agrave: [
    722,
    722,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  Abreve: [
    722,
    722,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  multiply: [
    584,
    584,
    584,
    584,
    570,
    570,
    675,
    564,
    600,
    600,
    600,
    600
  ],
  uacute: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  Tcaron: [
    611,
    611,
    611,
    611,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  partialdiff: [
    494,
    494,
    476,
    476,
    494,
    494,
    476,
    476,
    600,
    600,
    600,
    600
  ],
  ydieresis: [
    556,
    556,
    500,
    500,
    500,
    444,
    444,
    500,
    600,
    600,
    600,
    600
  ],
  Nacute: [
    722,
    722,
    722,
    722,
    722,
    722,
    667,
    722,
    600,
    600,
    600,
    600
  ],
  icircumflex: [
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  Ecircumflex: [
    667,
    667,
    667,
    667,
    667,
    667,
    611,
    611,
    600,
    600,
    600,
    600
  ],
  adieresis: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  edieresis: [
    556,
    556,
    556,
    556,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  cacute: [
    556,
    556,
    500,
    500,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  nacute: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  umacron: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  Ncaron: [
    722,
    722,
    722,
    722,
    722,
    722,
    667,
    722,
    600,
    600,
    600,
    600
  ],
  Iacute: [
    278,
    278,
    278,
    278,
    389,
    389,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  plusminus: [
    584,
    584,
    584,
    584,
    570,
    570,
    675,
    564,
    600,
    600,
    600,
    600
  ],
  brokenbar: [
    280,
    280,
    260,
    260,
    220,
    220,
    275,
    200,
    600,
    600,
    600,
    600
  ],
  registered: [
    737,
    737,
    737,
    737,
    747,
    747,
    760,
    760,
    600,
    600,
    600,
    600
  ],
  Gbreve: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  Idotaccent: [
    278,
    278,
    278,
    278,
    389,
    389,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  summation: [
    600,
    600,
    600,
    600,
    600,
    600,
    600,
    600,
    600,
    600,
    600,
    600
  ],
  Egrave: [
    667,
    667,
    667,
    667,
    667,
    667,
    611,
    611,
    600,
    600,
    600,
    600
  ],
  racute: [
    389,
    389,
    333,
    333,
    444,
    389,
    389,
    333,
    600,
    600,
    600,
    600
  ],
  omacron: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  Zacute: [
    611,
    611,
    611,
    611,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  Zcaron: [
    611,
    611,
    611,
    611,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  greaterequal: [
    549,
    549,
    549,
    549,
    549,
    549,
    549,
    549,
    600,
    600,
    600,
    600
  ],
  Eth: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  Ccedilla: [
    722,
    722,
    722,
    722,
    722,
    667,
    667,
    667,
    600,
    600,
    600,
    600
  ],
  lcommaaccent: [
    278,
    278,
    222,
    222,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  tcaron: [
    389,
    389,
    317,
    317,
    416,
    366,
    300,
    326,
    600,
    600,
    600,
    600
  ],
  eogonek: [
    556,
    556,
    556,
    556,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  Uogonek: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  Aacute: [
    722,
    722,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  Adieresis: [
    722,
    722,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  egrave: [
    556,
    556,
    556,
    556,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  zacute: [
    500,
    500,
    500,
    500,
    444,
    389,
    389,
    444,
    600,
    600,
    600,
    600
  ],
  iogonek: [
    278,
    278,
    222,
    222,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  Oacute: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  oacute: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  amacron: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    444,
    600,
    600,
    600,
    600
  ],
  sacute: [
    556,
    556,
    500,
    500,
    389,
    389,
    389,
    389,
    600,
    600,
    600,
    600
  ],
  idieresis: [
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  Ocircumflex: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  Ugrave: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  Delta: [
    612,
    612,
    612,
    612,
    612,
    612,
    612,
    612,
    600,
    600,
    600,
    600
  ],
  thorn: [
    611,
    611,
    556,
    556,
    556,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  twosuperior: [
    333,
    333,
    333,
    333,
    300,
    300,
    300,
    300,
    600,
    600,
    600,
    600
  ],
  Odieresis: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  mu: [
    611,
    611,
    556,
    556,
    556,
    576,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  igrave: [
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  ohungarumlaut: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  Eogonek: [
    667,
    667,
    667,
    667,
    667,
    667,
    611,
    611,
    600,
    600,
    600,
    600
  ],
  dcroat: [
    611,
    611,
    556,
    556,
    556,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  threequarters: [
    834,
    834,
    834,
    834,
    750,
    750,
    750,
    750,
    600,
    600,
    600,
    600
  ],
  Scedilla: [
    667,
    667,
    667,
    667,
    556,
    556,
    500,
    556,
    600,
    600,
    600,
    600
  ],
  lcaron: [
    400,
    400,
    299,
    299,
    394,
    382,
    300,
    344,
    600,
    600,
    600,
    600
  ],
  Kcommaaccent: [
    722,
    722,
    667,
    667,
    778,
    667,
    667,
    722,
    600,
    600,
    600,
    600
  ],
  Lacute: [
    611,
    611,
    556,
    556,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  trademark: [
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    1e3,
    980,
    980,
    600,
    600,
    600,
    600
  ],
  edotaccent: [
    556,
    556,
    556,
    556,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  Igrave: [
    278,
    278,
    278,
    278,
    389,
    389,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  Imacron: [
    278,
    278,
    278,
    278,
    389,
    389,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  Lcaron: [
    611,
    611,
    556,
    556,
    667,
    611,
    611,
    611,
    600,
    600,
    600,
    600
  ],
  onehalf: [
    834,
    834,
    834,
    834,
    750,
    750,
    750,
    750,
    600,
    600,
    600,
    600
  ],
  lessequal: [
    549,
    549,
    549,
    549,
    549,
    549,
    549,
    549,
    600,
    600,
    600,
    600
  ],
  ocircumflex: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  ntilde: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  Uhungarumlaut: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  Eacute: [
    667,
    667,
    667,
    667,
    667,
    667,
    611,
    611,
    600,
    600,
    600,
    600
  ],
  emacron: [
    556,
    556,
    556,
    556,
    444,
    444,
    444,
    444,
    600,
    600,
    600,
    600
  ],
  gbreve: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  onequarter: [
    834,
    834,
    834,
    834,
    750,
    750,
    750,
    750,
    600,
    600,
    600,
    600
  ],
  Scaron: [
    667,
    667,
    667,
    667,
    556,
    556,
    500,
    556,
    600,
    600,
    600,
    600
  ],
  Scommaaccent: [
    667,
    667,
    667,
    667,
    556,
    556,
    500,
    556,
    600,
    600,
    600,
    600
  ],
  Ohungarumlaut: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  degree: [
    400,
    400,
    400,
    400,
    400,
    400,
    400,
    400,
    600,
    600,
    600,
    600
  ],
  ograve: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  Ccaron: [
    722,
    722,
    722,
    722,
    722,
    667,
    667,
    667,
    600,
    600,
    600,
    600
  ],
  ugrave: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  radical: [
    549,
    549,
    453,
    453,
    549,
    549,
    453,
    453,
    600,
    600,
    600,
    600
  ],
  Dcaron: [
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  rcommaaccent: [
    389,
    389,
    333,
    333,
    444,
    389,
    389,
    333,
    600,
    600,
    600,
    600
  ],
  Ntilde: [
    722,
    722,
    722,
    722,
    722,
    722,
    667,
    722,
    600,
    600,
    600,
    600
  ],
  otilde: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  Rcommaaccent: [
    722,
    722,
    722,
    722,
    722,
    667,
    611,
    667,
    600,
    600,
    600,
    600
  ],
  Lcommaaccent: [
    611,
    611,
    556,
    556,
    667,
    611,
    556,
    611,
    600,
    600,
    600,
    600
  ],
  Atilde: [
    722,
    722,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  Aogonek: [
    722,
    722,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  Aring: [
    722,
    722,
    667,
    667,
    722,
    667,
    611,
    722,
    600,
    600,
    600,
    600
  ],
  Otilde: [
    778,
    778,
    778,
    778,
    778,
    722,
    722,
    722,
    600,
    600,
    600,
    600
  ],
  zdotaccent: [
    500,
    500,
    500,
    500,
    444,
    389,
    389,
    444,
    600,
    600,
    600,
    600
  ],
  Ecaron: [
    667,
    667,
    667,
    667,
    667,
    667,
    611,
    611,
    600,
    600,
    600,
    600
  ],
  Iogonek: [
    278,
    278,
    278,
    278,
    389,
    389,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  kcommaaccent: [
    556,
    556,
    500,
    500,
    556,
    500,
    444,
    500,
    600,
    600,
    600,
    600
  ],
  minus: [
    584,
    584,
    584,
    584,
    570,
    606,
    675,
    564,
    600,
    600,
    600,
    600
  ],
  Icircumflex: [
    278,
    278,
    278,
    278,
    389,
    389,
    333,
    333,
    600,
    600,
    600,
    600
  ],
  ncaron: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  tcommaaccent: [
    333,
    333,
    278,
    278,
    333,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  logicalnot: [
    584,
    584,
    584,
    584,
    570,
    606,
    675,
    564,
    600,
    600,
    600,
    600
  ],
  odieresis: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  udieresis: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  notequal: [
    549,
    549,
    549,
    549,
    549,
    549,
    549,
    549,
    600,
    600,
    600,
    600
  ],
  gcommaaccent: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  eth: [
    611,
    611,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  zcaron: [
    500,
    500,
    500,
    500,
    444,
    389,
    389,
    444,
    600,
    600,
    600,
    600
  ],
  ncommaaccent: [
    611,
    611,
    556,
    556,
    556,
    556,
    500,
    500,
    600,
    600,
    600,
    600
  ],
  onesuperior: [
    333,
    333,
    333,
    333,
    300,
    300,
    300,
    300,
    600,
    600,
    600,
    600
  ],
  imacron: [
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    278,
    600,
    600,
    600,
    600
  ],
  Euro: [
    556,
    556,
    556,
    556,
    500,
    500,
    500,
    500,
    600,
    600,
    600,
    600
  ]
}, _D = {
  AC: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  ACacute: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  ACcaron: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  ACcedilla: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AG: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AGbreve: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AGcommaaccent: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AO: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AOacute: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AOcircumflex: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AOdieresis: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AOgrave: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AOhungarumlaut: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AOmacron: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AOslash: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AOtilde: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AQ: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -55,
    -40,
    -55
  ],
  AT: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  ATcaron: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  ATcommaaccent: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AU: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AUacute: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AUcircumflex: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AUdieresis: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AUgrave: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AUhungarumlaut: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AUmacron: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AUogonek: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AUring: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AV: [
    -80,
    -80,
    -70,
    -70,
    -145,
    -95,
    -105,
    -135
  ],
  AW: [
    -60,
    -60,
    -50,
    -50,
    -130,
    -100,
    -95,
    -90
  ],
  AY: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AYacute: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AYdieresis: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  Au: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Auacute: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Audieresis: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Augrave: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Auhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aumacron: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Auogonek: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Auring: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Av: [
    -40,
    -40,
    -40,
    -40,
    -100,
    -74,
    -55,
    -74
  ],
  Aw: [
    -30,
    -30,
    -40,
    -40,
    -90,
    -74,
    -55,
    -92
  ],
  Ay: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Ayacute: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Aydieresis: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  AacuteC: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AacuteCacute: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AacuteCcaron: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AacuteCcedilla: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AacuteG: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AacuteGbreve: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AacuteGcommaaccent: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AacuteO: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AacuteOacute: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AacuteOcircumflex: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AacuteOdieresis: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AacuteOgrave: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AacuteOhungarumlaut: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AacuteOmacron: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AacuteOslash: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AacuteOtilde: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AacuteQ: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -55,
    -40,
    -55
  ],
  AacuteT: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AacuteTcaron: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AacuteTcommaaccent: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AacuteU: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AacuteUacute: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AacuteUcircumflex: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AacuteUdieresis: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AacuteUgrave: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AacuteUhungarumlaut: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AacuteUmacron: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AacuteUogonek: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AacuteUring: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AacuteV: [
    -80,
    -80,
    -70,
    -70,
    -145,
    -95,
    -105,
    -135
  ],
  AacuteW: [
    -60,
    -60,
    -50,
    -50,
    -130,
    -100,
    -95,
    -90
  ],
  AacuteY: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AacuteYacute: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AacuteYdieresis: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  Aacuteu: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aacuteuacute: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aacuteucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aacuteudieresis: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aacuteugrave: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aacuteuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aacuteumacron: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aacuteuogonek: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aacuteuring: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aacutev: [
    -40,
    -40,
    -40,
    -40,
    -100,
    -74,
    -55,
    -74
  ],
  Aacutew: [
    -30,
    -30,
    -40,
    -40,
    -90,
    -74,
    -55,
    -92
  ],
  Aacutey: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Aacuteyacute: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Aacuteydieresis: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  AbreveC: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AbreveCacute: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AbreveCcaron: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AbreveCcedilla: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AbreveG: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AbreveGbreve: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AbreveGcommaaccent: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AbreveO: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AbreveOacute: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AbreveOcircumflex: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AbreveOdieresis: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AbreveOgrave: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AbreveOhungarumlaut: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AbreveOmacron: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AbreveOslash: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AbreveOtilde: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AbreveQ: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -55,
    -40,
    -55
  ],
  AbreveT: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AbreveTcaron: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AbreveTcommaaccent: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AbreveU: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AbreveUacute: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AbreveUcircumflex: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AbreveUdieresis: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AbreveUgrave: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AbreveUhungarumlaut: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AbreveUmacron: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AbreveUogonek: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AbreveUring: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AbreveV: [
    -80,
    -80,
    -70,
    -70,
    -145,
    -95,
    -105,
    -135
  ],
  AbreveW: [
    -60,
    -60,
    -50,
    -50,
    -130,
    -100,
    -95,
    -90
  ],
  AbreveY: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AbreveYacute: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AbreveYdieresis: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  Abreveu: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Abreveuacute: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Abreveucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Abreveudieresis: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Abreveugrave: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Abreveuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Abreveumacron: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Abreveuogonek: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Abreveuring: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Abrevev: [
    -40,
    -40,
    -40,
    -40,
    -100,
    -74,
    -55,
    -74
  ],
  Abrevew: [
    -30,
    -30,
    -40,
    -40,
    -90,
    -74,
    -55,
    -92
  ],
  Abrevey: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Abreveyacute: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Abreveydieresis: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  AcircumflexC: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AcircumflexCacute: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AcircumflexCcaron: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AcircumflexCcedilla: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AcircumflexG: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AcircumflexGbreve: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AcircumflexGcommaaccent: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AcircumflexO: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AcircumflexOacute: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AcircumflexOcircumflex: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AcircumflexOdieresis: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AcircumflexOgrave: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AcircumflexOhungarumlaut: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AcircumflexOmacron: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AcircumflexOslash: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AcircumflexOtilde: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AcircumflexQ: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -55,
    -40,
    -55
  ],
  AcircumflexT: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AcircumflexTcaron: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AcircumflexTcommaaccent: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AcircumflexU: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AcircumflexUacute: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AcircumflexUcircumflex: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AcircumflexUdieresis: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AcircumflexUgrave: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AcircumflexUhungarumlaut: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AcircumflexUmacron: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AcircumflexUogonek: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AcircumflexUring: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AcircumflexV: [
    -80,
    -80,
    -70,
    -70,
    -145,
    -95,
    -105,
    -135
  ],
  AcircumflexW: [
    -60,
    -60,
    -50,
    -50,
    -130,
    -100,
    -95,
    -90
  ],
  AcircumflexY: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AcircumflexYacute: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AcircumflexYdieresis: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  Acircumflexu: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Acircumflexuacute: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Acircumflexucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Acircumflexudieresis: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Acircumflexugrave: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Acircumflexuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Acircumflexumacron: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Acircumflexuogonek: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Acircumflexuring: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Acircumflexv: [
    -40,
    -40,
    -40,
    -40,
    -100,
    -74,
    -55,
    -74
  ],
  Acircumflexw: [
    -30,
    -30,
    -40,
    -40,
    -90,
    -74,
    -55,
    -92
  ],
  Acircumflexy: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Acircumflexyacute: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Acircumflexydieresis: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  AdieresisC: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AdieresisCacute: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AdieresisCcaron: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AdieresisCcedilla: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AdieresisG: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AdieresisGbreve: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AdieresisGcommaaccent: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AdieresisO: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AdieresisOacute: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AdieresisOcircumflex: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AdieresisOdieresis: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AdieresisOgrave: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AdieresisOhungarumlaut: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AdieresisOmacron: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AdieresisOslash: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AdieresisOtilde: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AdieresisQ: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -55,
    -40,
    -55
  ],
  AdieresisT: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AdieresisTcaron: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AdieresisTcommaaccent: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AdieresisU: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AdieresisUacute: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AdieresisUcircumflex: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AdieresisUdieresis: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AdieresisUgrave: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AdieresisUhungarumlaut: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AdieresisUmacron: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AdieresisUogonek: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AdieresisUring: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AdieresisV: [
    -80,
    -80,
    -70,
    -70,
    -145,
    -95,
    -105,
    -135
  ],
  AdieresisW: [
    -60,
    -60,
    -50,
    -50,
    -130,
    -100,
    -95,
    -90
  ],
  AdieresisY: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AdieresisYacute: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AdieresisYdieresis: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  Adieresisu: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Adieresisuacute: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Adieresisucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Adieresisudieresis: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Adieresisugrave: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Adieresisuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Adieresisumacron: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Adieresisuogonek: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Adieresisuring: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Adieresisv: [
    -40,
    -40,
    -40,
    -40,
    -100,
    -74,
    -55,
    -74
  ],
  Adieresisw: [
    -30,
    -30,
    -40,
    -40,
    -90,
    -74,
    -55,
    -92
  ],
  Adieresisy: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Adieresisyacute: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Adieresisydieresis: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  AgraveC: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AgraveCacute: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AgraveCcaron: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AgraveCcedilla: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AgraveG: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AgraveGbreve: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AgraveGcommaaccent: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AgraveO: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AgraveOacute: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AgraveOcircumflex: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AgraveOdieresis: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AgraveOgrave: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AgraveOhungarumlaut: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AgraveOmacron: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AgraveOslash: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AgraveOtilde: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AgraveQ: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -55,
    -40,
    -55
  ],
  AgraveT: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AgraveTcaron: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AgraveTcommaaccent: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AgraveU: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AgraveUacute: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AgraveUcircumflex: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AgraveUdieresis: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AgraveUgrave: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AgraveUhungarumlaut: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AgraveUmacron: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AgraveUogonek: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AgraveUring: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AgraveV: [
    -80,
    -80,
    -70,
    -70,
    -145,
    -95,
    -105,
    -135
  ],
  AgraveW: [
    -60,
    -60,
    -50,
    -50,
    -130,
    -100,
    -95,
    -90
  ],
  AgraveY: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AgraveYacute: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AgraveYdieresis: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  Agraveu: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Agraveuacute: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Agraveucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Agraveudieresis: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Agraveugrave: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Agraveuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Agraveumacron: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Agraveuogonek: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Agraveuring: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Agravev: [
    -40,
    -40,
    -40,
    -40,
    -100,
    -74,
    -55,
    -74
  ],
  Agravew: [
    -30,
    -30,
    -40,
    -40,
    -90,
    -74,
    -55,
    -92
  ],
  Agravey: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Agraveyacute: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Agraveydieresis: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  AmacronC: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AmacronCacute: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AmacronCcaron: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AmacronCcedilla: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AmacronG: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AmacronGbreve: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AmacronGcommaaccent: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AmacronO: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AmacronOacute: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AmacronOcircumflex: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AmacronOdieresis: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AmacronOgrave: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AmacronOhungarumlaut: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AmacronOmacron: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AmacronOslash: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AmacronOtilde: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AmacronQ: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -55,
    -40,
    -55
  ],
  AmacronT: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AmacronTcaron: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AmacronTcommaaccent: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AmacronU: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AmacronUacute: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AmacronUcircumflex: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AmacronUdieresis: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AmacronUgrave: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AmacronUhungarumlaut: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AmacronUmacron: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AmacronUogonek: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AmacronUring: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AmacronV: [
    -80,
    -80,
    -70,
    -70,
    -145,
    -95,
    -105,
    -135
  ],
  AmacronW: [
    -60,
    -60,
    -50,
    -50,
    -130,
    -100,
    -95,
    -90
  ],
  AmacronY: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AmacronYacute: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AmacronYdieresis: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  Amacronu: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Amacronuacute: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Amacronucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Amacronudieresis: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Amacronugrave: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Amacronuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Amacronumacron: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Amacronuogonek: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Amacronuring: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Amacronv: [
    -40,
    -40,
    -40,
    -40,
    -100,
    -74,
    -55,
    -74
  ],
  Amacronw: [
    -30,
    -30,
    -40,
    -40,
    -90,
    -74,
    -55,
    -92
  ],
  Amacrony: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Amacronyacute: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Amacronydieresis: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  AogonekC: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AogonekCacute: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AogonekCcaron: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AogonekCcedilla: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AogonekG: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AogonekGbreve: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AogonekGcommaaccent: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AogonekO: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AogonekOacute: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AogonekOcircumflex: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AogonekOdieresis: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AogonekOgrave: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AogonekOhungarumlaut: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AogonekOmacron: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AogonekOslash: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AogonekOtilde: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AogonekQ: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -55,
    -40,
    -55
  ],
  AogonekT: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AogonekTcaron: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AogonekTcommaaccent: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AogonekU: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AogonekUacute: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AogonekUcircumflex: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AogonekUdieresis: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AogonekUgrave: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AogonekUhungarumlaut: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AogonekUmacron: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AogonekUogonek: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AogonekUring: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AogonekV: [
    -80,
    -80,
    -70,
    -70,
    -145,
    -95,
    -105,
    -135
  ],
  AogonekW: [
    -60,
    -60,
    -50,
    -50,
    -130,
    -100,
    -95,
    -90
  ],
  AogonekY: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AogonekYacute: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AogonekYdieresis: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  Aogoneku: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aogonekuacute: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aogonekucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aogonekudieresis: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aogonekugrave: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aogonekuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aogonekumacron: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aogonekuogonek: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aogonekuring: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aogonekv: [
    -40,
    -40,
    -40,
    -40,
    -100,
    -74,
    -55,
    -74
  ],
  Aogonekw: [
    -30,
    -30,
    -40,
    -40,
    -90,
    -74,
    -55,
    -52
  ],
  Aogoneky: [
    -30,
    -30,
    -40,
    -40,
    -34,
    -34,
    -55,
    -52
  ],
  Aogonekyacute: [
    -30,
    -30,
    -40,
    -40,
    -34,
    -34,
    -55,
    -52
  ],
  Aogonekydieresis: [
    -30,
    -30,
    -40,
    -40,
    -34,
    -34,
    -55,
    -52
  ],
  AringC: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AringCacute: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AringCcaron: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AringCcedilla: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AringG: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AringGbreve: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AringGcommaaccent: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AringO: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AringOacute: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AringOcircumflex: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AringOdieresis: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AringOgrave: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AringOhungarumlaut: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AringOmacron: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AringOslash: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AringOtilde: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AringQ: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -55,
    -40,
    -55
  ],
  AringT: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AringTcaron: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AringTcommaaccent: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AringU: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AringUacute: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AringUcircumflex: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AringUdieresis: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AringUgrave: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AringUhungarumlaut: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AringUmacron: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AringUogonek: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AringUring: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AringV: [
    -80,
    -80,
    -70,
    -70,
    -145,
    -95,
    -105,
    -135
  ],
  AringW: [
    -60,
    -60,
    -50,
    -50,
    -130,
    -100,
    -95,
    -90
  ],
  AringY: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AringYacute: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AringYdieresis: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  Aringu: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aringuacute: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aringucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aringudieresis: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aringugrave: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aringuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aringumacron: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aringuogonek: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aringuring: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Aringv: [
    -40,
    -40,
    -40,
    -40,
    -100,
    -74,
    -55,
    -74
  ],
  Aringw: [
    -30,
    -30,
    -40,
    -40,
    -90,
    -74,
    -55,
    -92
  ],
  Aringy: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Aringyacute: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Aringydieresis: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  AtildeC: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AtildeCacute: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AtildeCcaron: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AtildeCcedilla: [
    -40,
    -40,
    -30,
    -30,
    -55,
    -65,
    -30,
    -40
  ],
  AtildeG: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AtildeGbreve: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AtildeGcommaaccent: [
    -50,
    -50,
    -30,
    -30,
    -55,
    -60,
    -35,
    -40
  ],
  AtildeO: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AtildeOacute: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AtildeOcircumflex: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AtildeOdieresis: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AtildeOgrave: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AtildeOhungarumlaut: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AtildeOmacron: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AtildeOslash: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AtildeOtilde: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -50,
    -40,
    -55
  ],
  AtildeQ: [
    -40,
    -40,
    -30,
    -30,
    -45,
    -55,
    -40,
    -55
  ],
  AtildeT: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AtildeTcaron: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AtildeTcommaaccent: [
    -90,
    -90,
    -120,
    -120,
    -95,
    -55,
    -37,
    -111
  ],
  AtildeU: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AtildeUacute: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AtildeUcircumflex: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AtildeUdieresis: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AtildeUgrave: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AtildeUhungarumlaut: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AtildeUmacron: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AtildeUogonek: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AtildeUring: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -55
  ],
  AtildeV: [
    -80,
    -80,
    -70,
    -70,
    -145,
    -95,
    -105,
    -135
  ],
  AtildeW: [
    -60,
    -60,
    -50,
    -50,
    -130,
    -100,
    -95,
    -90
  ],
  AtildeY: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AtildeYacute: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  AtildeYdieresis: [
    -110,
    -110,
    -100,
    -100,
    -100,
    -70,
    -55,
    -105
  ],
  Atildeu: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Atildeuacute: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Atildeucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Atildeudieresis: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Atildeugrave: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Atildeuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Atildeumacron: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Atildeuogonek: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Atildeuring: [
    -30,
    -30,
    -30,
    -30,
    -50,
    -30,
    -20
  ],
  Atildev: [
    -40,
    -40,
    -40,
    -40,
    -100,
    -74,
    -55,
    -74
  ],
  Atildew: [
    -30,
    -30,
    -40,
    -40,
    -90,
    -74,
    -55,
    -92
  ],
  Atildey: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Atildeyacute: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  Atildeydieresis: [
    -30,
    -30,
    -40,
    -40,
    -74,
    -74,
    -55,
    -92
  ],
  BA: [
    -30,
    -30,
    0,
    0,
    -30,
    -25,
    -25,
    -35
  ],
  BAacute: [
    -30,
    -30,
    0,
    0,
    -30,
    -25,
    -25,
    -35
  ],
  BAbreve: [
    -30,
    -30,
    0,
    0,
    -30,
    -25,
    -25,
    -35
  ],
  BAcircumflex: [
    -30,
    -30,
    0,
    0,
    -30,
    -25,
    -25,
    -35
  ],
  BAdieresis: [
    -30,
    -30,
    0,
    0,
    -30,
    -25,
    -25,
    -35
  ],
  BAgrave: [
    -30,
    -30,
    0,
    0,
    -30,
    -25,
    -25,
    -35
  ],
  BAmacron: [
    -30,
    -30,
    0,
    0,
    -30,
    -25,
    -25,
    -35
  ],
  BAogonek: [
    -30,
    -30,
    0,
    0,
    -30,
    -25,
    -25,
    -35
  ],
  BAring: [
    -30,
    -30,
    0,
    0,
    -30,
    -25,
    -25,
    -35
  ],
  BAtilde: [
    -30,
    -30,
    0,
    0,
    -30,
    -25,
    -25,
    -35
  ],
  BU: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  BUacute: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  BUcircumflex: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  BUdieresis: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  BUgrave: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  BUhungarumlaut: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  BUmacron: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  BUogonek: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  BUring: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  DA: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DAacute: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DAbreve: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DAcircumflex: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DAdieresis: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DAgrave: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DAmacron: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DAogonek: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DAring: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DAtilde: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DV: [
    -40,
    -40,
    -70,
    -70,
    -40,
    -50,
    -40,
    -40
  ],
  DW: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -30
  ],
  DY: [
    -70,
    -70,
    -90,
    -90,
    -40,
    -50,
    -40,
    -55
  ],
  DYacute: [
    -70,
    -70,
    -90,
    -90,
    -40,
    -50,
    -40,
    -55
  ],
  DYdieresis: [
    -70,
    -70,
    -90,
    -90,
    -40,
    -50,
    -40,
    -55
  ],
  Dcomma: [
    -30,
    -30,
    -70,
    -70
  ],
  Dperiod: [
    -30,
    -30,
    -70,
    -70,
    -20
  ],
  DcaronA: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcaronAacute: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcaronAbreve: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcaronAcircumflex: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcaronAdieresis: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcaronAgrave: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcaronAmacron: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcaronAogonek: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcaronAring: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcaronAtilde: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcaronV: [
    -40,
    -40,
    -70,
    -70,
    -40,
    -50,
    -40,
    -40
  ],
  DcaronW: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -30
  ],
  DcaronY: [
    -70,
    -70,
    -90,
    -90,
    -40,
    -50,
    -40,
    -55
  ],
  DcaronYacute: [
    -70,
    -70,
    -90,
    -90,
    -40,
    -50,
    -40,
    -55
  ],
  DcaronYdieresis: [
    -70,
    -70,
    -90,
    -90,
    -40,
    -50,
    -40,
    -55
  ],
  Dcaroncomma: [
    -30,
    -30,
    -70,
    -70
  ],
  Dcaronperiod: [
    -30,
    -30,
    -70,
    -70,
    -20
  ],
  DcroatA: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcroatAacute: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcroatAbreve: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcroatAcircumflex: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcroatAdieresis: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcroatAgrave: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcroatAmacron: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcroatAogonek: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcroatAring: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcroatAtilde: [
    -40,
    -40,
    -40,
    -40,
    -35,
    -25,
    -35,
    -40
  ],
  DcroatV: [
    -40,
    -40,
    -70,
    -70,
    -40,
    -50,
    -40,
    -40
  ],
  DcroatW: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -30
  ],
  DcroatY: [
    -70,
    -70,
    -90,
    -90,
    -40,
    -50,
    -40,
    -55
  ],
  DcroatYacute: [
    -70,
    -70,
    -90,
    -90,
    -40,
    -50,
    -40,
    -55
  ],
  DcroatYdieresis: [
    -70,
    -70,
    -90,
    -90,
    -40,
    -50,
    -40,
    -55
  ],
  Dcroatcomma: [
    -30,
    -30,
    -70,
    -70
  ],
  Dcroatperiod: [
    -30,
    -30,
    -70,
    -70,
    -20
  ],
  FA: [
    -80,
    -80,
    -80,
    -80,
    -90,
    -100,
    -115,
    -74
  ],
  FAacute: [
    -80,
    -80,
    -80,
    -80,
    -90,
    -100,
    -115,
    -74
  ],
  FAbreve: [
    -80,
    -80,
    -80,
    -80,
    -90,
    -100,
    -115,
    -74
  ],
  FAcircumflex: [
    -80,
    -80,
    -80,
    -80,
    -90,
    -100,
    -115,
    -74
  ],
  FAdieresis: [
    -80,
    -80,
    -80,
    -80,
    -90,
    -100,
    -115,
    -74
  ],
  FAgrave: [
    -80,
    -80,
    -80,
    -80,
    -90,
    -100,
    -115,
    -74
  ],
  FAmacron: [
    -80,
    -80,
    -80,
    -80,
    -90,
    -100,
    -115,
    -74
  ],
  FAogonek: [
    -80,
    -80,
    -80,
    -80,
    -90,
    -100,
    -115,
    -74
  ],
  FAring: [
    -80,
    -80,
    -80,
    -80,
    -90,
    -100,
    -115,
    -74
  ],
  FAtilde: [
    -80,
    -80,
    -80,
    -80,
    -90,
    -100,
    -115,
    -74
  ],
  Fa: [
    -20,
    -20,
    -50,
    -50,
    -25,
    -95,
    -75,
    -15
  ],
  Faacute: [
    -20,
    -20,
    -50,
    -50,
    -25,
    -95,
    -75,
    -15
  ],
  Fabreve: [
    -20,
    -20,
    -50,
    -50,
    -25,
    -95,
    -75,
    -15
  ],
  Facircumflex: [
    -20,
    -20,
    -50,
    -50,
    -25,
    -95,
    -75,
    -15
  ],
  Fadieresis: [
    -20,
    -20,
    -50,
    -50,
    -25,
    -95,
    -75,
    -15
  ],
  Fagrave: [
    -20,
    -20,
    -50,
    -50,
    -25,
    -95,
    -75,
    -15
  ],
  Famacron: [
    -20,
    -20,
    -50,
    -50,
    -25,
    -95,
    -75,
    -15
  ],
  Faogonek: [
    -20,
    -20,
    -50,
    -50,
    -25,
    -95,
    -75,
    -15
  ],
  Faring: [
    -20,
    -20,
    -50,
    -50,
    -25,
    -95,
    -75,
    -15
  ],
  Fatilde: [
    -20,
    -20,
    -50,
    -50,
    -25,
    -95,
    -75,
    -15
  ],
  Fcomma: [
    -100,
    -100,
    -150,
    -150,
    -92,
    -129,
    -135,
    -80
  ],
  Fperiod: [
    -100,
    -100,
    -150,
    -150,
    -110,
    -129,
    -135,
    -80
  ],
  JA: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -25,
    -40,
    -60
  ],
  JAacute: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -25,
    -40,
    -60
  ],
  JAbreve: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -25,
    -40,
    -60
  ],
  JAcircumflex: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -25,
    -40,
    -60
  ],
  JAdieresis: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -25,
    -40,
    -60
  ],
  JAgrave: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -25,
    -40,
    -60
  ],
  JAmacron: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -25,
    -40,
    -60
  ],
  JAogonek: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -25,
    -40,
    -60
  ],
  JAring: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -25,
    -40,
    -60
  ],
  JAtilde: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -25,
    -40,
    -60
  ],
  Jcomma: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    -25
  ],
  Jperiod: [
    -20,
    -20,
    -30,
    -30,
    -20,
    -10,
    -25
  ],
  Ju: [
    -20,
    -20,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Juacute: [
    -20,
    -20,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jucircumflex: [
    -20,
    -20,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Judieresis: [
    -20,
    -20,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jugrave: [
    -20,
    -20,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Juhungarumlaut: [
    -20,
    -20,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jumacron: [
    -20,
    -20,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Juogonek: [
    -20,
    -20,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Juring: [
    -20,
    -20,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  KO: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KOacute: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KOcircumflex: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KOdieresis: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KOgrave: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KOhungarumlaut: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KOmacron: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KOslash: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KOtilde: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  Ke: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Keacute: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kecaron: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kecircumflex: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kedieresis: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kedotaccent: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kegrave: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kemacron: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Keogonek: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Ko: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Koacute: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kocircumflex: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kodieresis: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kograve: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kohungarumlaut: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Komacron: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Koslash: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kotilde: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Ku: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kuacute: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kudieresis: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kugrave: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kumacron: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kuogonek: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kuring: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Ky: [
    -40,
    -40,
    -50,
    -50,
    -45,
    -20,
    -40,
    -25
  ],
  Kyacute: [
    -40,
    -40,
    -50,
    -50,
    -45,
    -20,
    -40,
    -25
  ],
  Kydieresis: [
    -40,
    -40,
    -50,
    -50,
    -45,
    -20,
    -40,
    -25
  ],
  KcommaaccentO: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KcommaaccentOacute: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KcommaaccentOcircumflex: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KcommaaccentOdieresis: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KcommaaccentOgrave: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KcommaaccentOhungarumlaut: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KcommaaccentOmacron: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KcommaaccentOslash: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  KcommaaccentOtilde: [
    -30,
    -30,
    -50,
    -50,
    -30,
    -30,
    -50,
    -30
  ],
  Kcommaaccente: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kcommaaccenteacute: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kcommaaccentecaron: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kcommaaccentecircumflex: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kcommaaccentedieresis: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kcommaaccentedotaccent: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kcommaaccentegrave: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kcommaaccentemacron: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kcommaaccenteogonek: [
    -15,
    -15,
    -40,
    -40,
    -25,
    -25,
    -35,
    -25
  ],
  Kcommaaccento: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kcommaaccentoacute: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kcommaaccentocircumflex: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kcommaaccentodieresis: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kcommaaccentograve: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kcommaaccentohungarumlaut: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kcommaaccentomacron: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kcommaaccentoslash: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kcommaaccentotilde: [
    -35,
    -35,
    -40,
    -40,
    -25,
    -25,
    -40,
    -35
  ],
  Kcommaaccentu: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kcommaaccentuacute: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kcommaaccentucircumflex: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kcommaaccentudieresis: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kcommaaccentugrave: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kcommaaccentuhungarumlaut: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kcommaaccentumacron: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kcommaaccentuogonek: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kcommaaccenturing: [
    -30,
    -30,
    -30,
    -30,
    -15,
    -20,
    -40,
    -15
  ],
  Kcommaaccenty: [
    -40,
    -40,
    -50,
    -50,
    -45,
    -20,
    -40,
    -25
  ],
  Kcommaaccentyacute: [
    -40,
    -40,
    -50,
    -50,
    -45,
    -20,
    -40,
    -25
  ],
  Kcommaaccentydieresis: [
    -40,
    -40,
    -50,
    -50,
    -45,
    -20,
    -40,
    -25
  ],
  LT: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LTcaron: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LTcommaaccent: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LV: [
    -110,
    -110,
    -110,
    -110,
    -92,
    -37,
    -55,
    -100
  ],
  LW: [
    -80,
    -80,
    -70,
    -70,
    -92,
    -37,
    -55,
    -74
  ],
  LY: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  LYacute: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  LYdieresis: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  Lquotedblright: [
    -140,
    -140,
    -140,
    -140,
    -20
  ],
  Lquoteright: [
    -140,
    -140,
    -160,
    -160,
    -110,
    -55,
    -37,
    -92
  ],
  Ly: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  Lyacute: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  Lydieresis: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  LacuteT: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LacuteTcaron: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LacuteTcommaaccent: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LacuteV: [
    -110,
    -110,
    -110,
    -110,
    -92,
    -37,
    -55,
    -100
  ],
  LacuteW: [
    -80,
    -80,
    -70,
    -70,
    -92,
    -37,
    -55,
    -74
  ],
  LacuteY: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  LacuteYacute: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  LacuteYdieresis: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  Lacutequotedblright: [
    -140,
    -140,
    -140,
    -140,
    -20
  ],
  Lacutequoteright: [
    -140,
    -140,
    -160,
    -160,
    -110,
    -55,
    -37,
    -92
  ],
  Lacutey: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  Lacuteyacute: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  Lacuteydieresis: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  LcommaaccentT: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LcommaaccentTcaron: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LcommaaccentTcommaaccent: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LcommaaccentV: [
    -110,
    -110,
    -110,
    -110,
    -92,
    -37,
    -55,
    -100
  ],
  LcommaaccentW: [
    -80,
    -80,
    -70,
    -70,
    -92,
    -37,
    -55,
    -74
  ],
  LcommaaccentY: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  LcommaaccentYacute: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  LcommaaccentYdieresis: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  Lcommaaccentquotedblright: [
    -140,
    -140,
    -140,
    -140,
    -20
  ],
  Lcommaaccentquoteright: [
    -140,
    -140,
    -160,
    -160,
    -110,
    -55,
    -37,
    -92
  ],
  Lcommaaccenty: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  Lcommaaccentyacute: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  Lcommaaccentydieresis: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  LslashT: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LslashTcaron: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LslashTcommaaccent: [
    -90,
    -90,
    -110,
    -110,
    -92,
    -18,
    -20,
    -92
  ],
  LslashV: [
    -110,
    -110,
    -110,
    -110,
    -92,
    -37,
    -55,
    -100
  ],
  LslashW: [
    -80,
    -80,
    -70,
    -70,
    -92,
    -37,
    -55,
    -74
  ],
  LslashY: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  LslashYacute: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  LslashYdieresis: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -37,
    -20,
    -100
  ],
  Lslashquotedblright: [
    -140,
    -140,
    -140,
    -140,
    -20
  ],
  Lslashquoteright: [
    -140,
    -140,
    -160,
    -160,
    -110,
    -55,
    -37,
    -92
  ],
  Lslashy: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  Lslashyacute: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  Lslashydieresis: [
    -30,
    -30,
    -30,
    -30,
    -55,
    -37,
    -30,
    -55
  ],
  OA: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OAacute: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OAbreve: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OAcircumflex: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OAdieresis: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OAgrave: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OAmacron: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OAogonek: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OAring: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OAtilde: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OT: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OTcaron: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OTcommaaccent: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OV: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50
  ],
  OW: [
    -50,
    -50,
    -30,
    -30,
    -50,
    -50,
    -50,
    -35
  ],
  OX: [
    -50,
    -50,
    -60,
    -60,
    -40,
    -40,
    -40,
    -40
  ],
  OY: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OYacute: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OYdieresis: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  Ocomma: [
    -40,
    -40,
    -40,
    -40
  ],
  Operiod: [
    -40,
    -40,
    -40,
    -40
  ],
  OacuteA: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OacuteAacute: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OacuteAbreve: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OacuteAcircumflex: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OacuteAdieresis: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OacuteAgrave: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OacuteAmacron: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OacuteAogonek: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OacuteAring: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OacuteAtilde: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OacuteT: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OacuteTcaron: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OacuteTcommaaccent: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OacuteV: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50
  ],
  OacuteW: [
    -50,
    -50,
    -30,
    -30,
    -50,
    -50,
    -50,
    -35
  ],
  OacuteX: [
    -50,
    -50,
    -60,
    -60,
    -40,
    -40,
    -40,
    -40
  ],
  OacuteY: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OacuteYacute: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OacuteYdieresis: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  Oacutecomma: [
    -40,
    -40,
    -40,
    -40
  ],
  Oacuteperiod: [
    -40,
    -40,
    -40,
    -40
  ],
  OcircumflexA: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OcircumflexAacute: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OcircumflexAbreve: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OcircumflexAcircumflex: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OcircumflexAdieresis: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OcircumflexAgrave: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OcircumflexAmacron: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OcircumflexAogonek: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OcircumflexAring: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OcircumflexAtilde: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OcircumflexT: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OcircumflexTcaron: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OcircumflexTcommaaccent: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OcircumflexV: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50
  ],
  OcircumflexW: [
    -50,
    -50,
    -30,
    -30,
    -50,
    -50,
    -50,
    -35
  ],
  OcircumflexX: [
    -50,
    -50,
    -60,
    -60,
    -40,
    -40,
    -40,
    -40
  ],
  OcircumflexY: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OcircumflexYacute: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OcircumflexYdieresis: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  Ocircumflexcomma: [
    -40,
    -40,
    -40,
    -40
  ],
  Ocircumflexperiod: [
    -40,
    -40,
    -40,
    -40
  ],
  OdieresisA: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OdieresisAacute: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OdieresisAbreve: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OdieresisAcircumflex: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OdieresisAdieresis: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OdieresisAgrave: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OdieresisAmacron: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OdieresisAogonek: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OdieresisAring: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OdieresisAtilde: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OdieresisT: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OdieresisTcaron: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OdieresisTcommaaccent: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OdieresisV: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50
  ],
  OdieresisW: [
    -50,
    -50,
    -30,
    -30,
    -50,
    -50,
    -50,
    -35
  ],
  OdieresisX: [
    -50,
    -50,
    -60,
    -60,
    -40,
    -40,
    -40,
    -40
  ],
  OdieresisY: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OdieresisYacute: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OdieresisYdieresis: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  Odieresiscomma: [
    -40,
    -40,
    -40,
    -40
  ],
  Odieresisperiod: [
    -40,
    -40,
    -40,
    -40
  ],
  OgraveA: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OgraveAacute: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OgraveAbreve: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OgraveAcircumflex: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OgraveAdieresis: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OgraveAgrave: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OgraveAmacron: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OgraveAogonek: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OgraveAring: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OgraveAtilde: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OgraveT: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OgraveTcaron: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OgraveTcommaaccent: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OgraveV: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50
  ],
  OgraveW: [
    -50,
    -50,
    -30,
    -30,
    -50,
    -50,
    -50,
    -35
  ],
  OgraveX: [
    -50,
    -50,
    -60,
    -60,
    -40,
    -40,
    -40,
    -40
  ],
  OgraveY: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OgraveYacute: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OgraveYdieresis: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  Ogravecomma: [
    -40,
    -40,
    -40,
    -40
  ],
  Ograveperiod: [
    -40,
    -40,
    -40,
    -40
  ],
  OhungarumlautA: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OhungarumlautAacute: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OhungarumlautAbreve: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OhungarumlautAcircumflex: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OhungarumlautAdieresis: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OhungarumlautAgrave: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OhungarumlautAmacron: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OhungarumlautAogonek: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OhungarumlautAring: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OhungarumlautAtilde: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OhungarumlautT: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OhungarumlautTcaron: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OhungarumlautTcommaaccent: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OhungarumlautV: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50
  ],
  OhungarumlautW: [
    -50,
    -50,
    -30,
    -30,
    -50,
    -50,
    -50,
    -35
  ],
  OhungarumlautX: [
    -50,
    -50,
    -60,
    -60,
    -40,
    -40,
    -40,
    -40
  ],
  OhungarumlautY: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OhungarumlautYacute: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OhungarumlautYdieresis: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  Ohungarumlautcomma: [
    -40,
    -40,
    -40,
    -40
  ],
  Ohungarumlautperiod: [
    -40,
    -40,
    -40,
    -40
  ],
  OmacronA: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OmacronAacute: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OmacronAbreve: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OmacronAcircumflex: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OmacronAdieresis: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OmacronAgrave: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OmacronAmacron: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OmacronAogonek: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OmacronAring: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OmacronAtilde: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OmacronT: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OmacronTcaron: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OmacronTcommaaccent: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OmacronV: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50
  ],
  OmacronW: [
    -50,
    -50,
    -30,
    -30,
    -50,
    -50,
    -50,
    -35
  ],
  OmacronX: [
    -50,
    -50,
    -60,
    -60,
    -40,
    -40,
    -40,
    -40
  ],
  OmacronY: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OmacronYacute: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OmacronYdieresis: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  Omacroncomma: [
    -40,
    -40,
    -40,
    -40
  ],
  Omacronperiod: [
    -40,
    -40,
    -40,
    -40
  ],
  OslashA: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OslashAacute: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OslashAbreve: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OslashAcircumflex: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OslashAdieresis: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OslashAgrave: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OslashAmacron: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OslashAogonek: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OslashAring: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OslashAtilde: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OslashT: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OslashTcaron: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OslashTcommaaccent: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OslashV: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50
  ],
  OslashW: [
    -50,
    -50,
    -30,
    -30,
    -50,
    -50,
    -50,
    -35
  ],
  OslashX: [
    -50,
    -50,
    -60,
    -60,
    -40,
    -40,
    -40,
    -40
  ],
  OslashY: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OslashYacute: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OslashYdieresis: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  Oslashcomma: [
    -40,
    -40,
    -40,
    -40
  ],
  Oslashperiod: [
    -40,
    -40,
    -40,
    -40
  ],
  OtildeA: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OtildeAacute: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OtildeAbreve: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OtildeAcircumflex: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OtildeAdieresis: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OtildeAgrave: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OtildeAmacron: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OtildeAogonek: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OtildeAring: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OtildeAtilde: [
    -50,
    -50,
    -20,
    -20,
    -40,
    -40,
    -55,
    -35
  ],
  OtildeT: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OtildeTcaron: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OtildeTcommaaccent: [
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  OtildeV: [
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50,
    -50
  ],
  OtildeW: [
    -50,
    -50,
    -30,
    -30,
    -50,
    -50,
    -50,
    -35
  ],
  OtildeX: [
    -50,
    -50,
    -60,
    -60,
    -40,
    -40,
    -40,
    -40
  ],
  OtildeY: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OtildeYacute: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  OtildeYdieresis: [
    -70,
    -70,
    -70,
    -70,
    -50,
    -50,
    -50,
    -50
  ],
  Otildecomma: [
    -40,
    -40,
    -40,
    -40
  ],
  Otildeperiod: [
    -40,
    -40,
    -40,
    -40
  ],
  PA: [
    -100,
    -100,
    -120,
    -120,
    -74,
    -85,
    -90,
    -92
  ],
  PAacute: [
    -100,
    -100,
    -120,
    -120,
    -74,
    -85,
    -90,
    -92
  ],
  PAbreve: [
    -100,
    -100,
    -120,
    -120,
    -74,
    -85,
    -90,
    -92
  ],
  PAcircumflex: [
    -100,
    -100,
    -120,
    -120,
    -74,
    -85,
    -90,
    -92
  ],
  PAdieresis: [
    -100,
    -100,
    -120,
    -120,
    -74,
    -85,
    -90,
    -92
  ],
  PAgrave: [
    -100,
    -100,
    -120,
    -120,
    -74,
    -85,
    -90,
    -92
  ],
  PAmacron: [
    -100,
    -100,
    -120,
    -120,
    -74,
    -85,
    -90,
    -92
  ],
  PAogonek: [
    -100,
    -100,
    -120,
    -120,
    -74,
    -85,
    -90,
    -92
  ],
  PAring: [
    -100,
    -100,
    -120,
    -120,
    -74,
    -85,
    -90,
    -92
  ],
  PAtilde: [
    -100,
    -100,
    -120,
    -120,
    -74,
    -85,
    -90,
    -92
  ],
  Pa: [
    -30,
    -30,
    -40,
    -40,
    -10,
    -40,
    -80,
    -15
  ],
  Paacute: [
    -30,
    -30,
    -40,
    -40,
    -10,
    -40,
    -80,
    -15
  ],
  Pabreve: [
    -30,
    -30,
    -40,
    -40,
    -10,
    -40,
    -80,
    -15
  ],
  Pacircumflex: [
    -30,
    -30,
    -40,
    -40,
    -10,
    -40,
    -80,
    -15
  ],
  Padieresis: [
    -30,
    -30,
    -40,
    -40,
    -10,
    -40,
    -80,
    -15
  ],
  Pagrave: [
    -30,
    -30,
    -40,
    -40,
    -10,
    -40,
    -80,
    -15
  ],
  Pamacron: [
    -30,
    -30,
    -40,
    -40,
    -10,
    -40,
    -80,
    -15
  ],
  Paogonek: [
    -30,
    -30,
    -40,
    -40,
    -10,
    -40,
    -80,
    -15
  ],
  Paring: [
    -30,
    -30,
    -40,
    -40,
    -10,
    -40,
    -80,
    -15
  ],
  Patilde: [
    -30,
    -30,
    -40,
    -40,
    -10,
    -40,
    -80,
    -15
  ],
  Pcomma: [
    -120,
    -120,
    -180,
    -180,
    -92,
    -129,
    -135,
    -111
  ],
  Pe: [
    -30,
    -30,
    -50,
    -50,
    -20,
    -50,
    -80
  ],
  Peacute: [
    -30,
    -30,
    -50,
    -50,
    -20,
    -50,
    -80
  ],
  Pecaron: [
    -30,
    -30,
    -50,
    -50,
    -20,
    -50,
    -80
  ],
  Pecircumflex: [
    -30,
    -30,
    -50,
    -50,
    -20,
    -50,
    -80
  ],
  Pedieresis: [
    -30,
    -30,
    -50,
    -50,
    -20,
    -50,
    -80
  ],
  Pedotaccent: [
    -30,
    -30,
    -50,
    -50,
    -20,
    -50,
    -80
  ],
  Pegrave: [
    -30,
    -30,
    -50,
    -50,
    -20,
    -50,
    -80
  ],
  Pemacron: [
    -30,
    -30,
    -50,
    -50,
    -20,
    -50,
    -80
  ],
  Peogonek: [
    -30,
    -30,
    -50,
    -50,
    -20,
    -50,
    -80
  ],
  Po: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -55,
    -80
  ],
  Poacute: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -55,
    -80
  ],
  Pocircumflex: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -55,
    -80
  ],
  Podieresis: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -55,
    -80
  ],
  Pograve: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -55,
    -80
  ],
  Pohungarumlaut: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -55,
    -80
  ],
  Pomacron: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -55,
    -80
  ],
  Poslash: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -55,
    -80
  ],
  Potilde: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -55,
    -80
  ],
  Pperiod: [
    -120,
    -120,
    -180,
    -180,
    -110,
    -129,
    -135,
    -111
  ],
  QU: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  QUacute: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  QUcircumflex: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  QUdieresis: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  QUgrave: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  QUhungarumlaut: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  QUmacron: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  QUogonek: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  QUring: [
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10,
    -10
  ],
  Qcomma: [
    20,
    20
  ],
  Qperiod: [
    20,
    20,
    0,
    0,
    -20
  ],
  RO: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  ROacute: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  ROcircumflex: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  ROdieresis: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  ROgrave: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  ROhungarumlaut: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  ROmacron: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  ROslash: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  ROtilde: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RT: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RTcaron: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RTcommaaccent: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RU: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RUacute: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RUcircumflex: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RUdieresis: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RUgrave: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RUhungarumlaut: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RUmacron: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RUogonek: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RUring: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RV: [
    -50,
    -50,
    -50,
    -50,
    -55,
    -18,
    -18,
    -80
  ],
  RW: [
    -40,
    -40,
    -30,
    -30,
    -35,
    -18,
    -18,
    -55
  ],
  RY: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RYacute: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RYdieresis: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RacuteO: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteOacute: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteOcircumflex: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteOdieresis: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteOgrave: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteOhungarumlaut: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteOmacron: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteOslash: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteOtilde: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteT: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RacuteTcaron: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RacuteTcommaaccent: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RacuteU: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteUacute: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteUcircumflex: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteUdieresis: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteUgrave: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteUhungarumlaut: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteUmacron: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteUogonek: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteUring: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RacuteV: [
    -50,
    -50,
    -50,
    -50,
    -55,
    -18,
    -18,
    -80
  ],
  RacuteW: [
    -40,
    -40,
    -30,
    -30,
    -35,
    -18,
    -18,
    -55
  ],
  RacuteY: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RacuteYacute: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RacuteYdieresis: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RcaronO: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronOacute: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronOcircumflex: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronOdieresis: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronOgrave: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronOhungarumlaut: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronOmacron: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronOslash: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronOtilde: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronT: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RcaronTcaron: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RcaronTcommaaccent: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RcaronU: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronUacute: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronUcircumflex: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronUdieresis: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronUgrave: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronUhungarumlaut: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronUmacron: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronUogonek: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronUring: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcaronV: [
    -50,
    -50,
    -50,
    -50,
    -55,
    -18,
    -18,
    -80
  ],
  RcaronW: [
    -40,
    -40,
    -30,
    -30,
    -35,
    -18,
    -18,
    -55
  ],
  RcaronY: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RcaronYacute: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RcaronYdieresis: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RcommaaccentO: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentOacute: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentOcircumflex: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentOdieresis: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentOgrave: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentOhungarumlaut: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentOmacron: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentOslash: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentOtilde: [
    -20,
    -20,
    -20,
    -20,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentT: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RcommaaccentTcaron: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RcommaaccentTcommaaccent: [
    -20,
    -20,
    -30,
    -30,
    -40,
    -30,
    0,
    -60
  ],
  RcommaaccentU: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentUacute: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentUcircumflex: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentUdieresis: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentUgrave: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentUhungarumlaut: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentUmacron: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentUogonek: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentUring: [
    -20,
    -20,
    -40,
    -40,
    -30,
    -40,
    -40,
    -40
  ],
  RcommaaccentV: [
    -50,
    -50,
    -50,
    -50,
    -55,
    -18,
    -18,
    -80
  ],
  RcommaaccentW: [
    -40,
    -40,
    -30,
    -30,
    -35,
    -18,
    -18,
    -55
  ],
  RcommaaccentY: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RcommaaccentYacute: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  RcommaaccentYdieresis: [
    -50,
    -50,
    -50,
    -50,
    -35,
    -18,
    -18,
    -65
  ],
  TA: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TAacute: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TAbreve: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TAcircumflex: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TAdieresis: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TAgrave: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TAmacron: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TAogonek: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TAring: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TAtilde: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TO: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TOacute: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TOcircumflex: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TOdieresis: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TOgrave: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TOhungarumlaut: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TOmacron: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TOslash: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TOtilde: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  Ta: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Taacute: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Tabreve: [
    -80,
    -80,
    -60,
    -60,
    -52,
    -92,
    -92,
    -80
  ],
  Tacircumflex: [
    -80,
    -80,
    -120,
    -120,
    -52,
    -92,
    -92,
    -80
  ],
  Tadieresis: [
    -80,
    -80,
    -120,
    -120,
    -52,
    -92,
    -92,
    -40
  ],
  Tagrave: [
    -80,
    -80,
    -120,
    -120,
    -52,
    -92,
    -92,
    -40
  ],
  Tamacron: [
    -80,
    -80,
    -60,
    -60,
    -52,
    -92,
    -92,
    -40
  ],
  Taogonek: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Taring: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Tatilde: [
    -80,
    -80,
    -60,
    -60,
    -52,
    -92,
    -92,
    -40
  ],
  Tcolon: [
    -40,
    -40,
    -20,
    -20,
    -74,
    -74,
    -55,
    -50
  ],
  Tcomma: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -92,
    -74,
    -74
  ],
  Te: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Teacute: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tecaron: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tecircumflex: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -52,
    -70
  ],
  Tedieresis: [
    -60,
    -60,
    -120,
    -120,
    -52,
    -52,
    -52,
    -30
  ],
  Tedotaccent: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tegrave: [
    -60,
    -60,
    -60,
    -60,
    -52,
    -52,
    -52,
    -70
  ],
  Temacron: [
    -60,
    -60,
    -60,
    -60,
    -52,
    -52,
    -52,
    -30
  ],
  Teogonek: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Thyphen: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -92,
    -74,
    -92
  ],
  To: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Toacute: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tocircumflex: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Todieresis: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tograve: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tohungarumlaut: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tomacron: [
    -80,
    -80,
    -60,
    -60,
    -92,
    -95,
    -92,
    -80
  ],
  Toslash: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Totilde: [
    -80,
    -80,
    -60,
    -60,
    -92,
    -95,
    -92,
    -80
  ],
  Tperiod: [
    -80,
    -80,
    -120,
    -120,
    -90,
    -92,
    -74,
    -74
  ],
  Tr: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Tracute: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Trcommaaccent: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Tsemicolon: [
    -40,
    -40,
    -20,
    -20,
    -74,
    -74,
    -65,
    -55
  ],
  Tu: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tuacute: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tucircumflex: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tudieresis: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tugrave: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tuhungarumlaut: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tumacron: [
    -90,
    -90,
    -60,
    -60,
    -92,
    -37,
    -55,
    -45
  ],
  Tuogonek: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Turing: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tw: [
    -60,
    -60,
    -120,
    -120,
    -74,
    -37,
    -74,
    -80
  ],
  Ty: [
    -60,
    -60,
    -120,
    -120,
    -34,
    -37,
    -74,
    -80
  ],
  Tyacute: [
    -60,
    -60,
    -120,
    -120,
    -34,
    -37,
    -74,
    -80
  ],
  Tydieresis: [
    -60,
    -60,
    -60,
    -60,
    -34,
    -37,
    -34,
    -80
  ],
  TcaronA: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcaronAacute: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcaronAbreve: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcaronAcircumflex: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcaronAdieresis: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcaronAgrave: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcaronAmacron: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcaronAogonek: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcaronAring: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcaronAtilde: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcaronO: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcaronOacute: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcaronOcircumflex: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcaronOdieresis: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcaronOgrave: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcaronOhungarumlaut: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcaronOmacron: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcaronOslash: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcaronOtilde: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  Tcarona: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Tcaronaacute: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Tcaronabreve: [
    -80,
    -80,
    -60,
    -60,
    -52,
    -92,
    -92,
    -80
  ],
  Tcaronacircumflex: [
    -80,
    -80,
    -120,
    -120,
    -52,
    -92,
    -92,
    -80
  ],
  Tcaronadieresis: [
    -80,
    -80,
    -120,
    -120,
    -52,
    -92,
    -92,
    -40
  ],
  Tcaronagrave: [
    -80,
    -80,
    -120,
    -120,
    -52,
    -92,
    -92,
    -40
  ],
  Tcaronamacron: [
    -80,
    -80,
    -60,
    -60,
    -52,
    -92,
    -92,
    -40
  ],
  Tcaronaogonek: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Tcaronaring: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Tcaronatilde: [
    -80,
    -80,
    -60,
    -60,
    -52,
    -92,
    -92,
    -40
  ],
  Tcaroncolon: [
    -40,
    -40,
    -20,
    -20,
    -74,
    -74,
    -55,
    -50
  ],
  Tcaroncomma: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -92,
    -74,
    -74
  ],
  Tcarone: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tcaroneacute: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tcaronecaron: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tcaronecircumflex: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -52,
    -30
  ],
  Tcaronedieresis: [
    -60,
    -60,
    -120,
    -120,
    -52,
    -52,
    -52,
    -30
  ],
  Tcaronedotaccent: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tcaronegrave: [
    -60,
    -60,
    -60,
    -60,
    -52,
    -52,
    -52,
    -70
  ],
  Tcaronemacron: [
    -60,
    -60,
    -60,
    -60,
    -52,
    -52,
    -52,
    -30
  ],
  Tcaroneogonek: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tcaronhyphen: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -92,
    -74,
    -92
  ],
  Tcarono: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcaronoacute: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcaronocircumflex: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcaronodieresis: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcaronograve: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcaronohungarumlaut: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcaronomacron: [
    -80,
    -80,
    -60,
    -60,
    -92,
    -95,
    -92,
    -80
  ],
  Tcaronoslash: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcaronotilde: [
    -80,
    -80,
    -60,
    -60,
    -92,
    -95,
    -92,
    -80
  ],
  Tcaronperiod: [
    -80,
    -80,
    -120,
    -120,
    -90,
    -92,
    -74,
    -74
  ],
  Tcaronr: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Tcaronracute: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Tcaronrcommaaccent: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Tcaronsemicolon: [
    -40,
    -40,
    -20,
    -20,
    -74,
    -74,
    -65,
    -55
  ],
  Tcaronu: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcaronuacute: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcaronucircumflex: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcaronudieresis: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcaronugrave: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcaronuhungarumlaut: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcaronumacron: [
    -90,
    -90,
    -60,
    -60,
    -92,
    -37,
    -55,
    -45
  ],
  Tcaronuogonek: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcaronuring: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcaronw: [
    -60,
    -60,
    -120,
    -120,
    -74,
    -37,
    -74,
    -80
  ],
  Tcarony: [
    -60,
    -60,
    -120,
    -120,
    -34,
    -37,
    -74,
    -80
  ],
  Tcaronyacute: [
    -60,
    -60,
    -120,
    -120,
    -34,
    -37,
    -74,
    -80
  ],
  Tcaronydieresis: [
    -60,
    -60,
    -60,
    -60,
    -34,
    -37,
    -34,
    -80
  ],
  TcommaaccentA: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcommaaccentAacute: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcommaaccentAbreve: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcommaaccentAcircumflex: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcommaaccentAdieresis: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcommaaccentAgrave: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcommaaccentAmacron: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcommaaccentAogonek: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcommaaccentAring: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcommaaccentAtilde: [
    -90,
    -90,
    -120,
    -120,
    -90,
    -55,
    -50,
    -93
  ],
  TcommaaccentO: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcommaaccentOacute: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcommaaccentOcircumflex: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcommaaccentOdieresis: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcommaaccentOgrave: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcommaaccentOhungarumlaut: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcommaaccentOmacron: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcommaaccentOslash: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  TcommaaccentOtilde: [
    -40,
    -40,
    -40,
    -40,
    -18,
    -18,
    -18,
    -18
  ],
  Tcommaaccenta: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Tcommaaccentaacute: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Tcommaaccentabreve: [
    -80,
    -80,
    -60,
    -60,
    -52,
    -92,
    -92,
    -80
  ],
  Tcommaaccentacircumflex: [
    -80,
    -80,
    -120,
    -120,
    -52,
    -92,
    -92,
    -80
  ],
  Tcommaaccentadieresis: [
    -80,
    -80,
    -120,
    -120,
    -52,
    -92,
    -92,
    -40
  ],
  Tcommaaccentagrave: [
    -80,
    -80,
    -120,
    -120,
    -52,
    -92,
    -92,
    -40
  ],
  Tcommaaccentamacron: [
    -80,
    -80,
    -60,
    -60,
    -52,
    -92,
    -92,
    -40
  ],
  Tcommaaccentaogonek: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Tcommaaccentaring: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -92,
    -92,
    -80
  ],
  Tcommaaccentatilde: [
    -80,
    -80,
    -60,
    -60,
    -52,
    -92,
    -92,
    -40
  ],
  Tcommaaccentcolon: [
    -40,
    -40,
    -20,
    -20,
    -74,
    -74,
    -55,
    -50
  ],
  Tcommaaccentcomma: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -92,
    -74,
    -74
  ],
  Tcommaaccente: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tcommaaccenteacute: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tcommaaccentecaron: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tcommaaccentecircumflex: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -52,
    -30
  ],
  Tcommaaccentedieresis: [
    -60,
    -60,
    -120,
    -120,
    -52,
    -52,
    -52,
    -30
  ],
  Tcommaaccentedotaccent: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tcommaaccentegrave: [
    -60,
    -60,
    -60,
    -60,
    -52,
    -52,
    -52,
    -30
  ],
  Tcommaaccentemacron: [
    -60,
    -60,
    -60,
    -60,
    -52,
    -52,
    -52,
    -70
  ],
  Tcommaaccenteogonek: [
    -60,
    -60,
    -120,
    -120,
    -92,
    -92,
    -92,
    -70
  ],
  Tcommaaccenthyphen: [
    -120,
    -120,
    -140,
    -140,
    -92,
    -92,
    -74,
    -92
  ],
  Tcommaaccento: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcommaaccentoacute: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcommaaccentocircumflex: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcommaaccentodieresis: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcommaaccentograve: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcommaaccentohungarumlaut: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcommaaccentomacron: [
    -80,
    -80,
    -60,
    -60,
    -92,
    -95,
    -92,
    -80
  ],
  Tcommaaccentoslash: [
    -80,
    -80,
    -120,
    -120,
    -92,
    -95,
    -92,
    -80
  ],
  Tcommaaccentotilde: [
    -80,
    -80,
    -60,
    -60,
    -92,
    -95,
    -92,
    -80
  ],
  Tcommaaccentperiod: [
    -80,
    -80,
    -120,
    -120,
    -90,
    -92,
    -74,
    -74
  ],
  Tcommaaccentr: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Tcommaaccentracute: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Tcommaaccentrcommaaccent: [
    -80,
    -80,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Tcommaaccentsemicolon: [
    -40,
    -40,
    -20,
    -20,
    -74,
    -74,
    -65,
    -55
  ],
  Tcommaaccentu: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcommaaccentuacute: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcommaaccentucircumflex: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcommaaccentudieresis: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcommaaccentugrave: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcommaaccentuhungarumlaut: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcommaaccentumacron: [
    -90,
    -90,
    -60,
    -60,
    -92,
    -37,
    -55,
    -45
  ],
  Tcommaaccentuogonek: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcommaaccenturing: [
    -90,
    -90,
    -120,
    -120,
    -92,
    -37,
    -55,
    -45
  ],
  Tcommaaccentw: [
    -60,
    -60,
    -120,
    -120,
    -74,
    -37,
    -74,
    -80
  ],
  Tcommaaccenty: [
    -60,
    -60,
    -120,
    -120,
    -34,
    -37,
    -74,
    -80
  ],
  Tcommaaccentyacute: [
    -60,
    -60,
    -120,
    -120,
    -34,
    -37,
    -74,
    -80
  ],
  Tcommaaccentydieresis: [
    -60,
    -60,
    -60,
    -60,
    -34,
    -37,
    -34,
    -80
  ],
  UA: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UAacute: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UAbreve: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UAcircumflex: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UAdieresis: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UAgrave: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UAmacron: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UAogonek: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UAring: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UAtilde: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  Ucomma: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  Uperiod: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  UacuteA: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UacuteAacute: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UacuteAbreve: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UacuteAcircumflex: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UacuteAdieresis: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UacuteAgrave: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UacuteAmacron: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UacuteAogonek: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UacuteAring: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UacuteAtilde: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  Uacutecomma: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  Uacuteperiod: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  UcircumflexA: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UcircumflexAacute: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UcircumflexAbreve: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UcircumflexAcircumflex: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UcircumflexAdieresis: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UcircumflexAgrave: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UcircumflexAmacron: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UcircumflexAogonek: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UcircumflexAring: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UcircumflexAtilde: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  Ucircumflexcomma: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  Ucircumflexperiod: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  UdieresisA: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UdieresisAacute: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UdieresisAbreve: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UdieresisAcircumflex: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UdieresisAdieresis: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UdieresisAgrave: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UdieresisAmacron: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UdieresisAogonek: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UdieresisAring: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UdieresisAtilde: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  Udieresiscomma: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  Udieresisperiod: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  UgraveA: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UgraveAacute: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UgraveAbreve: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UgraveAcircumflex: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UgraveAdieresis: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UgraveAgrave: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UgraveAmacron: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UgraveAogonek: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UgraveAring: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UgraveAtilde: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  Ugravecomma: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  Ugraveperiod: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  UhungarumlautA: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UhungarumlautAacute: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UhungarumlautAbreve: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UhungarumlautAcircumflex: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UhungarumlautAdieresis: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UhungarumlautAgrave: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UhungarumlautAmacron: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UhungarumlautAogonek: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UhungarumlautAring: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UhungarumlautAtilde: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  Uhungarumlautcomma: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  Uhungarumlautperiod: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  UmacronA: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UmacronAacute: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UmacronAbreve: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UmacronAcircumflex: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UmacronAdieresis: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UmacronAgrave: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UmacronAmacron: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UmacronAogonek: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UmacronAring: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UmacronAtilde: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  Umacroncomma: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  Umacronperiod: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  UogonekA: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UogonekAacute: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UogonekAbreve: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UogonekAcircumflex: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UogonekAdieresis: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UogonekAgrave: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UogonekAmacron: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UogonekAogonek: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UogonekAring: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UogonekAtilde: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  Uogonekcomma: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  Uogonekperiod: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  UringA: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UringAacute: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UringAbreve: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UringAcircumflex: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UringAdieresis: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UringAgrave: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UringAmacron: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UringAogonek: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UringAring: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  UringAtilde: [
    -50,
    -50,
    -40,
    -40,
    -60,
    -45,
    -40,
    -40
  ],
  Uringcomma: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  Uringperiod: [
    -30,
    -30,
    -40,
    -40,
    -50,
    0,
    -25
  ],
  VA: [
    -80,
    -80,
    -80,
    -80,
    -135,
    -85,
    -60,
    -135
  ],
  VAacute: [
    -80,
    -80,
    -80,
    -80,
    -135,
    -85,
    -60,
    -135
  ],
  VAbreve: [
    -80,
    -80,
    -80,
    -80,
    -135,
    -85,
    -60,
    -135
  ],
  VAcircumflex: [
    -80,
    -80,
    -80,
    -80,
    -135,
    -85,
    -60,
    -135
  ],
  VAdieresis: [
    -80,
    -80,
    -80,
    -80,
    -135,
    -85,
    -60,
    -135
  ],
  VAgrave: [
    -80,
    -80,
    -80,
    -80,
    -135,
    -85,
    -60,
    -135
  ],
  VAmacron: [
    -80,
    -80,
    -80,
    -80,
    -135,
    -85,
    -60,
    -135
  ],
  VAogonek: [
    -80,
    -80,
    -80,
    -80,
    -135,
    -85,
    -60,
    -135
  ],
  VAring: [
    -80,
    -80,
    -80,
    -80,
    -135,
    -85,
    -60,
    -135
  ],
  VAtilde: [
    -80,
    -80,
    -80,
    -80,
    -135,
    -85,
    -60,
    -135
  ],
  VG: [
    -50,
    -50,
    -40,
    -40,
    -30,
    -10,
    0,
    -15
  ],
  VGbreve: [
    -50,
    -50,
    -40,
    -40,
    -30,
    -10,
    0,
    -15
  ],
  VGcommaaccent: [
    -50,
    -50,
    -40,
    -40,
    -30,
    -10,
    0,
    -15
  ],
  VO: [
    -50,
    -50,
    -40,
    -40,
    -45,
    -30,
    -30,
    -40
  ],
  VOacute: [
    -50,
    -50,
    -40,
    -40,
    -45,
    -30,
    -30,
    -40
  ],
  VOcircumflex: [
    -50,
    -50,
    -40,
    -40,
    -45,
    -30,
    -30,
    -40
  ],
  VOdieresis: [
    -50,
    -50,
    -40,
    -40,
    -45,
    -30,
    -30,
    -40
  ],
  VOgrave: [
    -50,
    -50,
    -40,
    -40,
    -45,
    -30,
    -30,
    -40
  ],
  VOhungarumlaut: [
    -50,
    -50,
    -40,
    -40,
    -45,
    -30,
    -30,
    -40
  ],
  VOmacron: [
    -50,
    -50,
    -40,
    -40,
    -45,
    -30,
    -30,
    -40
  ],
  VOslash: [
    -50,
    -50,
    -40,
    -40,
    -45,
    -30,
    -30,
    -40
  ],
  VOtilde: [
    -50,
    -50,
    -40,
    -40,
    -45,
    -30,
    -30,
    -40
  ],
  Va: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -111,
    -111,
    -111
  ],
  Vaacute: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -111,
    -111,
    -111
  ],
  Vabreve: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -111,
    -111,
    -111
  ],
  Vacircumflex: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -111,
    -111,
    -71
  ],
  Vadieresis: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -111,
    -111,
    -71
  ],
  Vagrave: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -111,
    -111,
    -71
  ],
  Vamacron: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -111,
    -111,
    -71
  ],
  Vaogonek: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -111,
    -111,
    -111
  ],
  Varing: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -111,
    -111,
    -111
  ],
  Vatilde: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -111,
    -111,
    -71
  ],
  Vcolon: [
    -40,
    -40,
    -40,
    -40,
    -92,
    -74,
    -65,
    -74
  ],
  Vcomma: [
    -120,
    -120,
    -125,
    -125,
    -129,
    -129,
    -129,
    -129
  ],
  Ve: [
    -50,
    -50,
    -80,
    -80,
    -100,
    -111,
    -111,
    -111
  ],
  Veacute: [
    -50,
    -50,
    -80,
    -80,
    -100,
    -111,
    -111,
    -111
  ],
  Vecaron: [
    -50,
    -50,
    -80,
    -80,
    -100,
    -111,
    -111,
    -71
  ],
  Vecircumflex: [
    -50,
    -50,
    -80,
    -80,
    -100,
    -111,
    -111,
    -71
  ],
  Vedieresis: [
    -50,
    -50,
    -80,
    -80,
    -100,
    -71,
    -71,
    -71
  ],
  Vedotaccent: [
    -50,
    -50,
    -80,
    -80,
    -100,
    -111,
    -111,
    -111
  ],
  Vegrave: [
    -50,
    -50,
    -80,
    -80,
    -100,
    -71,
    -71,
    -71
  ],
  Vemacron: [
    -50,
    -50,
    -80,
    -80,
    -100,
    -71,
    -71,
    -71
  ],
  Veogonek: [
    -50,
    -50,
    -80,
    -80,
    -100,
    -111,
    -111,
    -111
  ],
  Vhyphen: [
    -80,
    -80,
    -80,
    -80,
    -74,
    -70,
    -55,
    -100
  ],
  Vo: [
    -90,
    -90,
    -80,
    -80,
    -100,
    -111,
    -111,
    -129
  ],
  Voacute: [
    -90,
    -90,
    -80,
    -80,
    -100,
    -111,
    -111,
    -129
  ],
  Vocircumflex: [
    -90,
    -90,
    -80,
    -80,
    -100,
    -111,
    -111,
    -129
  ],
  Vodieresis: [
    -90,
    -90,
    -80,
    -80,
    -100,
    -111,
    -111,
    -89
  ],
  Vograve: [
    -90,
    -90,
    -80,
    -80,
    -100,
    -111,
    -111,
    -89
  ],
  Vohungarumlaut: [
    -90,
    -90,
    -80,
    -80,
    -100,
    -111,
    -111,
    -129
  ],
  Vomacron: [
    -90,
    -90,
    -80,
    -80,
    -100,
    -111,
    -111,
    -89
  ],
  Voslash: [
    -90,
    -90,
    -80,
    -80,
    -100,
    -111,
    -111,
    -129
  ],
  Votilde: [
    -90,
    -90,
    -80,
    -80,
    -100,
    -111,
    -111,
    -89
  ],
  Vperiod: [
    -120,
    -120,
    -125,
    -125,
    -145,
    -129,
    -129,
    -129
  ],
  Vsemicolon: [
    -40,
    -40,
    -40,
    -40,
    -92,
    -74,
    -74,
    -74
  ],
  Vu: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -55,
    -74,
    -75
  ],
  Vuacute: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -55,
    -74,
    -75
  ],
  Vucircumflex: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -55,
    -74,
    -75
  ],
  Vudieresis: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -55,
    -74,
    -75
  ],
  Vugrave: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -55,
    -74,
    -75
  ],
  Vuhungarumlaut: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -55,
    -74,
    -75
  ],
  Vumacron: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -55,
    -74,
    -75
  ],
  Vuogonek: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -55,
    -74,
    -75
  ],
  Vuring: [
    -60,
    -60,
    -70,
    -70,
    -92,
    -55,
    -74,
    -75
  ],
  WA: [
    -60,
    -60,
    -50,
    -50,
    -120,
    -74,
    -60,
    -120
  ],
  WAacute: [
    -60,
    -60,
    -50,
    -50,
    -120,
    -74,
    -60,
    -120
  ],
  WAbreve: [
    -60,
    -60,
    -50,
    -50,
    -120,
    -74,
    -60,
    -120
  ],
  WAcircumflex: [
    -60,
    -60,
    -50,
    -50,
    -120,
    -74,
    -60,
    -120
  ],
  WAdieresis: [
    -60,
    -60,
    -50,
    -50,
    -120,
    -74,
    -60,
    -120
  ],
  WAgrave: [
    -60,
    -60,
    -50,
    -50,
    -120,
    -74,
    -60,
    -120
  ],
  WAmacron: [
    -60,
    -60,
    -50,
    -50,
    -120,
    -74,
    -60,
    -120
  ],
  WAogonek: [
    -60,
    -60,
    -50,
    -50,
    -120,
    -74,
    -60,
    -120
  ],
  WAring: [
    -60,
    -60,
    -50,
    -50,
    -120,
    -74,
    -60,
    -120
  ],
  WAtilde: [
    -60,
    -60,
    -50,
    -50,
    -120,
    -74,
    -60,
    -120
  ],
  WO: [
    -20,
    -20,
    -20,
    -20,
    -10,
    -15,
    -25,
    -10
  ],
  WOacute: [
    -20,
    -20,
    -20,
    -20,
    -10,
    -15,
    -25,
    -10
  ],
  WOcircumflex: [
    -20,
    -20,
    -20,
    -20,
    -10,
    -15,
    -25,
    -10
  ],
  WOdieresis: [
    -20,
    -20,
    -20,
    -20,
    -10,
    -15,
    -25,
    -10
  ],
  WOgrave: [
    -20,
    -20,
    -20,
    -20,
    -10,
    -15,
    -25,
    -10
  ],
  WOhungarumlaut: [
    -20,
    -20,
    -20,
    -20,
    -10,
    -15,
    -25,
    -10
  ],
  WOmacron: [
    -20,
    -20,
    -20,
    -20,
    -10,
    -15,
    -25,
    -10
  ],
  WOslash: [
    -20,
    -20,
    -20,
    -20,
    -10,
    -15,
    -25,
    -10
  ],
  WOtilde: [
    -20,
    -20,
    -20,
    -20,
    -10,
    -15,
    -25,
    -10
  ],
  Wa: [
    -40,
    -40,
    -40,
    -40,
    -65,
    -85,
    -92,
    -80
  ],
  Waacute: [
    -40,
    -40,
    -40,
    -40,
    -65,
    -85,
    -92,
    -80
  ],
  Wabreve: [
    -40,
    -40,
    -40,
    -40,
    -65,
    -85,
    -92,
    -80
  ],
  Wacircumflex: [
    -40,
    -40,
    -40,
    -40,
    -65,
    -85,
    -92,
    -80
  ],
  Wadieresis: [
    -40,
    -40,
    -40,
    -40,
    -65,
    -85,
    -92,
    -80
  ],
  Wagrave: [
    -40,
    -40,
    -40,
    -40,
    -65,
    -85,
    -92,
    -80
  ],
  Wamacron: [
    -40,
    -40,
    -40,
    -40,
    -65,
    -85,
    -92,
    -80
  ],
  Waogonek: [
    -40,
    -40,
    -40,
    -40,
    -65,
    -85,
    -92,
    -80
  ],
  Waring: [
    -40,
    -40,
    -40,
    -40,
    -65,
    -85,
    -92,
    -80
  ],
  Watilde: [
    -40,
    -40,
    -40,
    -40,
    -65,
    -85,
    -92,
    -80
  ],
  Wcolon: [
    -10,
    -10,
    0,
    0,
    -55,
    -55,
    -65,
    -37
  ],
  Wcomma: [
    -80,
    -80,
    -80,
    -80,
    -92,
    -74,
    -92,
    -92
  ],
  We: [
    -35,
    -35,
    -30,
    -30,
    -65,
    -90,
    -92,
    -80
  ],
  Weacute: [
    -35,
    -35,
    -30,
    -30,
    -65,
    -90,
    -92,
    -80
  ],
  Wecaron: [
    -35,
    -35,
    -30,
    -30,
    -65,
    -90,
    -92,
    -80
  ],
  Wecircumflex: [
    -35,
    -35,
    -30,
    -30,
    -65,
    -90,
    -92,
    -80
  ],
  Wedieresis: [
    -35,
    -35,
    -30,
    -30,
    -65,
    -50,
    -52,
    -40
  ],
  Wedotaccent: [
    -35,
    -35,
    -30,
    -30,
    -65,
    -90,
    -92,
    -80
  ],
  Wegrave: [
    -35,
    -35,
    -30,
    -30,
    -65,
    -50,
    -52,
    -40
  ],
  Wemacron: [
    -35,
    -35,
    -30,
    -30,
    -65,
    -50,
    -52,
    -40
  ],
  Weogonek: [
    -35,
    -35,
    -30,
    -30,
    -65,
    -90,
    -92,
    -80
  ],
  Whyphen: [
    -40,
    -40,
    -40,
    -40,
    -37,
    -50,
    -37,
    -65
  ],
  Wo: [
    -60,
    -60,
    -30,
    -30,
    -75,
    -80,
    -92,
    -80
  ],
  Woacute: [
    -60,
    -60,
    -30,
    -30,
    -75,
    -80,
    -92,
    -80
  ],
  Wocircumflex: [
    -60,
    -60,
    -30,
    -30,
    -75,
    -80,
    -92,
    -80
  ],
  Wodieresis: [
    -60,
    -60,
    -30,
    -30,
    -75,
    -80,
    -92,
    -80
  ],
  Wograve: [
    -60,
    -60,
    -30,
    -30,
    -75,
    -80,
    -92,
    -80
  ],
  Wohungarumlaut: [
    -60,
    -60,
    -30,
    -30,
    -75,
    -80,
    -92,
    -80
  ],
  Womacron: [
    -60,
    -60,
    -30,
    -30,
    -75,
    -80,
    -92,
    -80
  ],
  Woslash: [
    -60,
    -60,
    -30,
    -30,
    -75,
    -80,
    -92,
    -80
  ],
  Wotilde: [
    -60,
    -60,
    -30,
    -30,
    -75,
    -80,
    -92,
    -80
  ],
  Wperiod: [
    -80,
    -80,
    -80,
    -80,
    -92,
    -74,
    -92,
    -92
  ],
  Wsemicolon: [
    -10,
    -10,
    0,
    0,
    -55,
    -55,
    -65,
    -37
  ],
  Wu: [
    -45,
    -45,
    -30,
    -30,
    -50,
    -55,
    -55,
    -50
  ],
  Wuacute: [
    -45,
    -45,
    -30,
    -30,
    -50,
    -55,
    -55,
    -50
  ],
  Wucircumflex: [
    -45,
    -45,
    -30,
    -30,
    -50,
    -55,
    -55,
    -50
  ],
  Wudieresis: [
    -45,
    -45,
    -30,
    -30,
    -50,
    -55,
    -55,
    -50
  ],
  Wugrave: [
    -45,
    -45,
    -30,
    -30,
    -50,
    -55,
    -55,
    -50
  ],
  Wuhungarumlaut: [
    -45,
    -45,
    -30,
    -30,
    -50,
    -55,
    -55,
    -50
  ],
  Wumacron: [
    -45,
    -45,
    -30,
    -30,
    -50,
    -55,
    -55,
    -50
  ],
  Wuogonek: [
    -45,
    -45,
    -30,
    -30,
    -50,
    -55,
    -55,
    -50
  ],
  Wuring: [
    -45,
    -45,
    -30,
    -30,
    -50,
    -55,
    -55,
    -50
  ],
  Wy: [
    -20,
    -20,
    -20,
    -20,
    -60,
    -55,
    -70,
    -73
  ],
  Wyacute: [
    -20,
    -20,
    -20,
    -20,
    -60,
    -55,
    -70,
    -73
  ],
  Wydieresis: [
    -20,
    -20,
    -20,
    -20,
    -60,
    -55,
    -70,
    -73
  ],
  YA: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YAacute: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YAbreve: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YAcircumflex: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YAdieresis: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YAgrave: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YAmacron: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YAogonek: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YAring: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YAtilde: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YO: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YOacute: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YOcircumflex: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YOdieresis: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YOgrave: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YOhungarumlaut: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YOmacron: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YOslash: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YOtilde: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  Ya: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Yaacute: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Yabreve: [
    -90,
    -90,
    -70,
    -70,
    -85,
    -92,
    -92,
    -100
  ],
  Yacircumflex: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Yadieresis: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -60
  ],
  Yagrave: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -60
  ],
  Yamacron: [
    -90,
    -90,
    -70,
    -70,
    -85,
    -92,
    -92,
    -60
  ],
  Yaogonek: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Yaring: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Yatilde: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -60
  ],
  Ycolon: [
    -50,
    -50,
    -60,
    -60,
    -92,
    -92,
    -65,
    -92
  ],
  Ycomma: [
    -100,
    -100,
    -140,
    -140,
    -92,
    -92,
    -92,
    -129
  ],
  Ye: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Yeacute: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Yecaron: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Yecircumflex: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -71,
    -92,
    -100
  ],
  Yedieresis: [
    -80,
    -80,
    -140,
    -140,
    -71,
    -71,
    -52,
    -60
  ],
  Yedotaccent: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Yegrave: [
    -80,
    -80,
    -140,
    -140,
    -71,
    -71,
    -52,
    -60
  ],
  Yemacron: [
    -80,
    -80,
    -70,
    -70,
    -71,
    -71,
    -52,
    -60
  ],
  Yeogonek: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Yo: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Yoacute: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Yocircumflex: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Yodieresis: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Yograve: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Yohungarumlaut: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Yomacron: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Yoslash: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Yotilde: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Yperiod: [
    -100,
    -100,
    -140,
    -140,
    -92,
    -74,
    -92,
    -129
  ],
  Ysemicolon: [
    -50,
    -50,
    -60,
    -60,
    -92,
    -92,
    -65,
    -92
  ],
  Yu: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Yuacute: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Yucircumflex: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Yudieresis: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -71
  ],
  Yugrave: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -71
  ],
  Yuhungarumlaut: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Yumacron: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -71
  ],
  Yuogonek: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Yuring: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  YacuteA: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YacuteAacute: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YacuteAbreve: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YacuteAcircumflex: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YacuteAdieresis: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YacuteAgrave: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YacuteAmacron: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YacuteAogonek: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YacuteAring: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YacuteAtilde: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YacuteO: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YacuteOacute: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YacuteOcircumflex: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YacuteOdieresis: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YacuteOgrave: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YacuteOhungarumlaut: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YacuteOmacron: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YacuteOslash: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YacuteOtilde: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  Yacutea: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Yacuteaacute: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Yacuteabreve: [
    -90,
    -90,
    -70,
    -70,
    -85,
    -92,
    -92,
    -100
  ],
  Yacuteacircumflex: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Yacuteadieresis: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -60
  ],
  Yacuteagrave: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -60
  ],
  Yacuteamacron: [
    -90,
    -90,
    -70,
    -70,
    -85,
    -92,
    -92,
    -60
  ],
  Yacuteaogonek: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Yacutearing: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Yacuteatilde: [
    -90,
    -90,
    -70,
    -70,
    -85,
    -92,
    -92,
    -60
  ],
  Yacutecolon: [
    -50,
    -50,
    -60,
    -60,
    -92,
    -92,
    -65,
    -92
  ],
  Yacutecomma: [
    -100,
    -100,
    -140,
    -140,
    -92,
    -92,
    -92,
    -129
  ],
  Yacutee: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Yacuteeacute: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Yacuteecaron: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Yacuteecircumflex: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -71,
    -92,
    -100
  ],
  Yacuteedieresis: [
    -80,
    -80,
    -140,
    -140,
    -71,
    -71,
    -52,
    -60
  ],
  Yacuteedotaccent: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Yacuteegrave: [
    -80,
    -80,
    -140,
    -140,
    -71,
    -71,
    -52,
    -60
  ],
  Yacuteemacron: [
    -80,
    -80,
    -70,
    -70,
    -71,
    -71,
    -52,
    -60
  ],
  Yacuteeogonek: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Yacuteo: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Yacuteoacute: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Yacuteocircumflex: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Yacuteodieresis: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Yacuteograve: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Yacuteohungarumlaut: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Yacuteomacron: [
    -100,
    -100,
    -70,
    -70,
    -111,
    -111,
    -92,
    -70
  ],
  Yacuteoslash: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Yacuteotilde: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Yacuteperiod: [
    -100,
    -100,
    -140,
    -140,
    -92,
    -74,
    -92,
    -129
  ],
  Yacutesemicolon: [
    -50,
    -50,
    -60,
    -60,
    -92,
    -92,
    -65,
    -92
  ],
  Yacuteu: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Yacuteuacute: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Yacuteucircumflex: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Yacuteudieresis: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -71
  ],
  Yacuteugrave: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -71
  ],
  Yacuteuhungarumlaut: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Yacuteumacron: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -71
  ],
  Yacuteuogonek: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Yacuteuring: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  YdieresisA: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YdieresisAacute: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YdieresisAbreve: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YdieresisAcircumflex: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YdieresisAdieresis: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YdieresisAgrave: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YdieresisAmacron: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YdieresisAogonek: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YdieresisAring: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YdieresisAtilde: [
    -110,
    -110,
    -110,
    -110,
    -110,
    -74,
    -50,
    -120
  ],
  YdieresisO: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YdieresisOacute: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YdieresisOcircumflex: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YdieresisOdieresis: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YdieresisOgrave: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YdieresisOhungarumlaut: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YdieresisOmacron: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YdieresisOslash: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  YdieresisOtilde: [
    -70,
    -70,
    -85,
    -85,
    -35,
    -25,
    -15,
    -30
  ],
  Ydieresisa: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Ydieresisaacute: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Ydieresisabreve: [
    -90,
    -90,
    -70,
    -70,
    -85,
    -92,
    -92,
    -100
  ],
  Ydieresisacircumflex: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Ydieresisadieresis: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -60
  ],
  Ydieresisagrave: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -60
  ],
  Ydieresisamacron: [
    -90,
    -90,
    -70,
    -70,
    -85,
    -92,
    -92,
    -60
  ],
  Ydieresisaogonek: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Ydieresisaring: [
    -90,
    -90,
    -140,
    -140,
    -85,
    -92,
    -92,
    -100
  ],
  Ydieresisatilde: [
    -90,
    -90,
    -70,
    -70,
    -85,
    -92,
    -92,
    -100
  ],
  Ydieresiscolon: [
    -50,
    -50,
    -60,
    -60,
    -92,
    -92,
    -65,
    -92
  ],
  Ydieresiscomma: [
    -100,
    -100,
    -140,
    -140,
    -92,
    -92,
    -92,
    -129
  ],
  Ydieresise: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Ydieresiseacute: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Ydieresisecaron: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Ydieresisecircumflex: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -71,
    -92,
    -100
  ],
  Ydieresisedieresis: [
    -80,
    -80,
    -140,
    -140,
    -71,
    -71,
    -52,
    -60
  ],
  Ydieresisedotaccent: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Ydieresisegrave: [
    -80,
    -80,
    -140,
    -140,
    -71,
    -71,
    -52,
    -60
  ],
  Ydieresisemacron: [
    -80,
    -80,
    -70,
    -70,
    -71,
    -71,
    -52,
    -60
  ],
  Ydieresiseogonek: [
    -80,
    -80,
    -140,
    -140,
    -111,
    -111,
    -92,
    -100
  ],
  Ydieresiso: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Ydieresisoacute: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Ydieresisocircumflex: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Ydieresisodieresis: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Ydieresisograve: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Ydieresisohungarumlaut: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Ydieresisomacron: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Ydieresisoslash: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -110
  ],
  Ydieresisotilde: [
    -100,
    -100,
    -140,
    -140,
    -111,
    -111,
    -92,
    -70
  ],
  Ydieresisperiod: [
    -100,
    -100,
    -140,
    -140,
    -92,
    -74,
    -92,
    -129
  ],
  Ydieresissemicolon: [
    -50,
    -50,
    -60,
    -60,
    -92,
    -92,
    -65,
    -92
  ],
  Ydieresisu: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Ydieresisuacute: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Ydieresisucircumflex: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Ydieresisudieresis: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -71
  ],
  Ydieresisugrave: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -71
  ],
  Ydieresisuhungarumlaut: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Ydieresisumacron: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -71
  ],
  Ydieresisuogonek: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  Ydieresisuring: [
    -100,
    -100,
    -110,
    -110,
    -92,
    -92,
    -92,
    -111
  ],
  ag: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  agbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  agcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  av: [
    -15,
    -15,
    -20,
    -20,
    -25,
    0,
    0,
    -20
  ],
  aw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    0,
    -15
  ],
  ay: [
    -20,
    -20,
    -30,
    -30
  ],
  ayacute: [
    -20,
    -20,
    -30,
    -30
  ],
  aydieresis: [
    -20,
    -20,
    -30,
    -30
  ],
  aacuteg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  aacutegbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  aacutegcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  aacutev: [
    -15,
    -15,
    -20,
    -20,
    -25,
    0,
    0,
    -20
  ],
  aacutew: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    0,
    -15
  ],
  aacutey: [
    -20,
    -20,
    -30,
    -30
  ],
  aacuteyacute: [
    -20,
    -20,
    -30,
    -30
  ],
  aacuteydieresis: [
    -20,
    -20,
    -30,
    -30
  ],
  abreveg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  abrevegbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  abrevegcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  abrevev: [
    -15,
    -15,
    -20,
    -20,
    -25,
    0,
    0,
    -20
  ],
  abrevew: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    0,
    -15
  ],
  abrevey: [
    -20,
    -20,
    -30,
    -30
  ],
  abreveyacute: [
    -20,
    -20,
    -30,
    -30
  ],
  abreveydieresis: [
    -20,
    -20,
    -30,
    -30
  ],
  acircumflexg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  acircumflexgbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  acircumflexgcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  acircumflexv: [
    -15,
    -15,
    -20,
    -20,
    -25,
    0,
    0,
    -20
  ],
  acircumflexw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    0,
    -15
  ],
  acircumflexy: [
    -20,
    -20,
    -30,
    -30
  ],
  acircumflexyacute: [
    -20,
    -20,
    -30,
    -30
  ],
  acircumflexydieresis: [
    -20,
    -20,
    -30,
    -30
  ],
  adieresisg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  adieresisgbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  adieresisgcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  adieresisv: [
    -15,
    -15,
    -20,
    -20,
    -25,
    0,
    0,
    -20
  ],
  adieresisw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    0,
    -15
  ],
  adieresisy: [
    -20,
    -20,
    -30,
    -30
  ],
  adieresisyacute: [
    -20,
    -20,
    -30,
    -30
  ],
  adieresisydieresis: [
    -20,
    -20,
    -30,
    -30
  ],
  agraveg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  agravegbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  agravegcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  agravev: [
    -15,
    -15,
    -20,
    -20,
    -25,
    0,
    0,
    -20
  ],
  agravew: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    0,
    -15
  ],
  agravey: [
    -20,
    -20,
    -30,
    -30
  ],
  agraveyacute: [
    -20,
    -20,
    -30,
    -30
  ],
  agraveydieresis: [
    -20,
    -20,
    -30,
    -30
  ],
  amacrong: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  amacrongbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  amacrongcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  amacronv: [
    -15,
    -15,
    -20,
    -20,
    -25,
    0,
    0,
    -20
  ],
  amacronw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    0,
    -15
  ],
  amacrony: [
    -20,
    -20,
    -30,
    -30
  ],
  amacronyacute: [
    -20,
    -20,
    -30,
    -30
  ],
  amacronydieresis: [
    -20,
    -20,
    -30,
    -30
  ],
  aogonekg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  aogonekgbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  aogonekgcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  aogonekv: [
    -15,
    -15,
    -20,
    -20,
    -25,
    0,
    0,
    -20
  ],
  aogonekw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    0,
    -15
  ],
  aogoneky: [
    -20,
    -20,
    -30,
    -30
  ],
  aogonekyacute: [
    -20,
    -20,
    -30,
    -30
  ],
  aogonekydieresis: [
    -20,
    -20,
    -30,
    -30
  ],
  aringg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  aringgbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  aringgcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  aringv: [
    -15,
    -15,
    -20,
    -20,
    -25,
    0,
    0,
    -20
  ],
  aringw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    0,
    -15
  ],
  aringy: [
    -20,
    -20,
    -30,
    -30
  ],
  aringyacute: [
    -20,
    -20,
    -30,
    -30
  ],
  aringydieresis: [
    -20,
    -20,
    -30,
    -30
  ],
  atildeg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  atildegbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  atildegcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  atildev: [
    -15,
    -15,
    -20,
    -20,
    -25,
    0,
    0,
    -20
  ],
  atildew: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    0,
    -15
  ],
  atildey: [
    -20,
    -20,
    -30,
    -30
  ],
  atildeyacute: [
    -20,
    -20,
    -30,
    -30
  ],
  atildeydieresis: [
    -20,
    -20,
    -30,
    -30
  ],
  bl: [
    -10,
    -10,
    -20,
    -20
  ],
  blacute: [
    -10,
    -10,
    -20,
    -20
  ],
  blcommaaccent: [
    -10,
    -10,
    -20,
    -20
  ],
  blslash: [
    -10,
    -10,
    -20,
    -20
  ],
  bu: [
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20
  ],
  buacute: [
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20
  ],
  bucircumflex: [
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20
  ],
  budieresis: [
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20
  ],
  bugrave: [
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20
  ],
  buhungarumlaut: [
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20
  ],
  bumacron: [
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20
  ],
  buogonek: [
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20
  ],
  buring: [
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20,
    -20
  ],
  bv: [
    -20,
    -20,
    -20,
    -20,
    -15,
    0,
    0,
    -15
  ],
  by: [
    -20,
    -20,
    -20,
    -20
  ],
  byacute: [
    -20,
    -20,
    -20,
    -20
  ],
  bydieresis: [
    -20,
    -20,
    -20,
    -20
  ],
  ch: [
    -10,
    -10,
    0,
    0,
    0,
    -10,
    -15
  ],
  ck: [
    -20,
    -20,
    -20,
    -20,
    0,
    -10,
    -20
  ],
  ckcommaaccent: [
    -20,
    -20,
    -20,
    -20,
    0,
    -10,
    -20
  ],
  cl: [
    -20,
    -20
  ],
  clacute: [
    -20,
    -20
  ],
  clcommaaccent: [
    -20,
    -20
  ],
  clslash: [
    -20,
    -20
  ],
  cy: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  cyacute: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  cydieresis: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  cacuteh: [
    -10,
    -10,
    0,
    0,
    0,
    -10,
    -15
  ],
  cacutek: [
    -20,
    -20,
    -20,
    -20,
    0,
    -10,
    -20
  ],
  cacutekcommaaccent: [
    -20,
    -20,
    -20,
    -20,
    0,
    -10,
    -20
  ],
  cacutel: [
    -20,
    -20
  ],
  cacutelacute: [
    -20,
    -20
  ],
  cacutelcommaaccent: [
    -20,
    -20
  ],
  cacutelslash: [
    -20,
    -20
  ],
  cacutey: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  cacuteyacute: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  cacuteydieresis: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  ccaronh: [
    -10,
    -10,
    0,
    0,
    0,
    -10,
    -15
  ],
  ccaronk: [
    -20,
    -20,
    -20,
    -20,
    0,
    -10,
    -20
  ],
  ccaronkcommaaccent: [
    -20,
    -20,
    -20,
    -20,
    0,
    -10,
    -20
  ],
  ccaronl: [
    -20,
    -20
  ],
  ccaronlacute: [
    -20,
    -20
  ],
  ccaronlcommaaccent: [
    -20,
    -20
  ],
  ccaronlslash: [
    -20,
    -20
  ],
  ccarony: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  ccaronyacute: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  ccaronydieresis: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  ccedillah: [
    -10,
    -10,
    0,
    0,
    0,
    -10,
    -15
  ],
  ccedillak: [
    -20,
    -20,
    -20,
    -20,
    0,
    -10,
    -20
  ],
  ccedillakcommaaccent: [
    -20,
    -20,
    -20,
    -20,
    0,
    -10,
    -20
  ],
  ccedillal: [
    -20,
    -20
  ],
  ccedillalacute: [
    -20,
    -20
  ],
  ccedillalcommaaccent: [
    -20,
    -20
  ],
  ccedillalslash: [
    -20,
    -20
  ],
  ccedillay: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  ccedillayacute: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  ccedillaydieresis: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    0,
    -15
  ],
  colonspace: [
    -40,
    -40,
    -50,
    -50
  ],
  commaquotedblright: [
    -120,
    -120,
    -100,
    -100,
    -45,
    -95,
    -140,
    -70
  ],
  commaquoteright: [
    -120,
    -120,
    -100,
    -100,
    -55,
    -95,
    -140,
    -70
  ],
  commaspace: [
    -40,
    -40
  ],
  dd: [
    -10,
    -10
  ],
  ddcroat: [
    -10,
    -10
  ],
  dv: [
    -15,
    -15
  ],
  dw: [
    -15,
    -15,
    0,
    0,
    -15
  ],
  dy: [
    -15,
    -15
  ],
  dyacute: [
    -15,
    -15
  ],
  dydieresis: [
    -15,
    -15
  ],
  dcroatd: [
    -10,
    -10
  ],
  dcroatdcroat: [
    -10,
    -10
  ],
  dcroatv: [
    -15,
    -15
  ],
  dcroatw: [
    -15,
    -15,
    0,
    0,
    -15
  ],
  dcroaty: [
    -15,
    -15
  ],
  dcroatyacute: [
    -15,
    -15
  ],
  dcroatydieresis: [
    -15,
    -15
  ],
  ecomma: [
    10,
    10,
    -15,
    -15,
    0,
    0,
    -10
  ],
  eperiod: [
    20,
    20,
    -15,
    -15,
    0,
    0,
    -15
  ],
  ev: [
    -15,
    -15,
    -30,
    -30,
    -15,
    0,
    -15,
    -25
  ],
  ew: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -15,
    -25
  ],
  ex: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    -20,
    -15
  ],
  ey: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  eyacute: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  eydieresis: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  eacutecomma: [
    10,
    10,
    -15,
    -15,
    0,
    0,
    -10
  ],
  eacuteperiod: [
    20,
    20,
    -15,
    -15,
    0,
    0,
    -15
  ],
  eacutev: [
    -15,
    -15,
    -30,
    -30,
    -15,
    0,
    -15,
    -25
  ],
  eacutew: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -15,
    -25
  ],
  eacutex: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    -20,
    -15
  ],
  eacutey: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  eacuteyacute: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  eacuteydieresis: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  ecaroncomma: [
    10,
    10,
    -15,
    -15,
    0,
    0,
    -10
  ],
  ecaronperiod: [
    20,
    20,
    -15,
    -15,
    0,
    0,
    -15
  ],
  ecaronv: [
    -15,
    -15,
    -30,
    -30,
    -15,
    0,
    -15,
    -25
  ],
  ecaronw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -15,
    -25
  ],
  ecaronx: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    -20,
    -15
  ],
  ecarony: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  ecaronyacute: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  ecaronydieresis: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  ecircumflexcomma: [
    10,
    10,
    -15,
    -15,
    0,
    0,
    -10
  ],
  ecircumflexperiod: [
    20,
    20,
    -15,
    -15,
    0,
    0,
    -15
  ],
  ecircumflexv: [
    -15,
    -15,
    -30,
    -30,
    -15,
    0,
    -15,
    -25
  ],
  ecircumflexw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -15,
    -25
  ],
  ecircumflexx: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    -20,
    -15
  ],
  ecircumflexy: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  ecircumflexyacute: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  ecircumflexydieresis: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  edieresiscomma: [
    10,
    10,
    -15,
    -15,
    0,
    0,
    -10
  ],
  edieresisperiod: [
    20,
    20,
    -15,
    -15,
    0,
    0,
    -15
  ],
  edieresisv: [
    -15,
    -15,
    -30,
    -30,
    -15,
    0,
    -15,
    -25
  ],
  edieresisw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -15,
    -25
  ],
  edieresisx: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    -20,
    -15
  ],
  edieresisy: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  edieresisyacute: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  edieresisydieresis: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  edotaccentcomma: [
    10,
    10,
    -15,
    -15,
    0,
    0,
    -10
  ],
  edotaccentperiod: [
    20,
    20,
    -15,
    -15,
    0,
    0,
    -15
  ],
  edotaccentv: [
    -15,
    -15,
    -30,
    -30,
    -15,
    0,
    -15,
    -25
  ],
  edotaccentw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -15,
    -25
  ],
  edotaccentx: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    -20,
    -15
  ],
  edotaccenty: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  edotaccentyacute: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  edotaccentydieresis: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  egravecomma: [
    10,
    10,
    -15,
    -15,
    0,
    0,
    -10
  ],
  egraveperiod: [
    20,
    20,
    -15,
    -15,
    0,
    0,
    -15
  ],
  egravev: [
    -15,
    -15,
    -30,
    -30,
    -15,
    0,
    -15,
    -25
  ],
  egravew: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -15,
    -25
  ],
  egravex: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    -20,
    -15
  ],
  egravey: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  egraveyacute: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  egraveydieresis: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  emacroncomma: [
    10,
    10,
    -15,
    -15,
    0,
    0,
    -10
  ],
  emacronperiod: [
    20,
    20,
    -15,
    -15,
    0,
    0,
    -15
  ],
  emacronv: [
    -15,
    -15,
    -30,
    -30,
    -15,
    0,
    -15,
    -25
  ],
  emacronw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -15,
    -25
  ],
  emacronx: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    -20,
    -15
  ],
  emacrony: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  emacronyacute: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  emacronydieresis: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  eogonekcomma: [
    10,
    10,
    -15,
    -15,
    0,
    0,
    -10
  ],
  eogonekperiod: [
    20,
    20,
    -15,
    -15,
    0,
    0,
    -15
  ],
  eogonekv: [
    -15,
    -15,
    -30,
    -30,
    -15,
    0,
    -15,
    -25
  ],
  eogonekw: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -15,
    -25
  ],
  eogonekx: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    -20,
    -15
  ],
  eogoneky: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  eogonekyacute: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  eogonekydieresis: [
    -15,
    -15,
    -20,
    -20,
    0,
    0,
    -30,
    -15
  ],
  fcomma: [
    -10,
    -10,
    -30,
    -30,
    -15,
    -10,
    -10
  ],
  fe: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10
  ],
  feacute: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10
  ],
  fecaron: [
    -10,
    -10,
    -30,
    -30
  ],
  fecircumflex: [
    -10,
    -10,
    -30,
    -30
  ],
  fedieresis: [
    -10,
    -10,
    -30,
    -30
  ],
  fedotaccent: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10
  ],
  fegrave: [
    -10,
    -10,
    -30,
    -30
  ],
  femacron: [
    -10,
    -10,
    -30,
    -30
  ],
  feogonek: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10
  ],
  fo: [
    -20,
    -20,
    -30,
    -30,
    -25,
    -10
  ],
  foacute: [
    -20,
    -20,
    -30,
    -30,
    -25,
    -10
  ],
  focircumflex: [
    -20,
    -20,
    -30,
    -30,
    -25,
    -10
  ],
  fodieresis: [
    -20,
    -20,
    -30,
    -30,
    -25
  ],
  fograve: [
    -20,
    -20,
    -30,
    -30,
    -25,
    -10
  ],
  fohungarumlaut: [
    -20,
    -20,
    -30,
    -30,
    -25,
    -10
  ],
  fomacron: [
    -20,
    -20,
    -30,
    -30,
    -25
  ],
  foslash: [
    -20,
    -20,
    -30,
    -30,
    -25,
    -10
  ],
  fotilde: [
    -20,
    -20,
    -30,
    -30,
    -25,
    -10
  ],
  fperiod: [
    -10,
    -10,
    -30,
    -30,
    -15,
    -10,
    -15
  ],
  fquotedblright: [
    30,
    30,
    60,
    60,
    50
  ],
  fquoteright: [
    30,
    30,
    50,
    50,
    55,
    55,
    92,
    55
  ],
  ge: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  geacute: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gecaron: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gecircumflex: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gedieresis: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gedotaccent: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gegrave: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gemacron: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  geogonek: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  ggbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  ggcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbrevee: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbreveeacute: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbreveecaron: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbreveecircumflex: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbreveedieresis: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbreveedotaccent: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbreveegrave: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbreveemacron: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbreveeogonek: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbreveg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbrevegbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  gbrevegcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccente: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccenteacute: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccentecaron: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccentecircumflex: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccentedieresis: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccentedotaccent: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccentegrave: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccentemacron: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccenteogonek: [
    10,
    10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccentg: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccentgbreve: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccentgcommaaccent: [
    -10,
    -10,
    0,
    0,
    0,
    0,
    -10
  ],
  hy: [
    -20,
    -20,
    -30,
    -30,
    -15,
    0,
    0,
    -5
  ],
  hyacute: [
    -20,
    -20,
    -30,
    -30,
    -15,
    0,
    0,
    -5
  ],
  hydieresis: [
    -20,
    -20,
    -30,
    -30,
    -15,
    0,
    0,
    -5
  ],
  ko: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  koacute: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kocircumflex: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kodieresis: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kograve: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kohungarumlaut: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  komacron: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  koslash: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kotilde: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kcommaaccento: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kcommaaccentoacute: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kcommaaccentocircumflex: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kcommaaccentodieresis: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kcommaaccentograve: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kcommaaccentohungarumlaut: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kcommaaccentomacron: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kcommaaccentoslash: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  kcommaaccentotilde: [
    -15,
    -15,
    -20,
    -20,
    -15,
    -10,
    -10,
    -10
  ],
  lw: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ly: [
    -15,
    -15
  ],
  lyacute: [
    -15,
    -15
  ],
  lydieresis: [
    -15,
    -15
  ],
  lacutew: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  lacutey: [
    -15,
    -15
  ],
  lacuteyacute: [
    -15,
    -15
  ],
  lacuteydieresis: [
    -15,
    -15
  ],
  lcommaaccentw: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  lcommaaccenty: [
    -15,
    -15
  ],
  lcommaaccentyacute: [
    -15,
    -15
  ],
  lcommaaccentydieresis: [
    -15,
    -15
  ],
  lslashw: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  lslashy: [
    -15,
    -15
  ],
  lslashyacute: [
    -15,
    -15
  ],
  lslashydieresis: [
    -15,
    -15
  ],
  mu: [
    -20,
    -20,
    -10,
    -10
  ],
  muacute: [
    -20,
    -20,
    -10,
    -10
  ],
  mucircumflex: [
    -20,
    -20,
    -10,
    -10
  ],
  mudieresis: [
    -20,
    -20,
    -10,
    -10
  ],
  mugrave: [
    -20,
    -20,
    -10,
    -10
  ],
  muhungarumlaut: [
    -20,
    -20,
    -10,
    -10
  ],
  mumacron: [
    -20,
    -20,
    -10,
    -10
  ],
  muogonek: [
    -20,
    -20,
    -10,
    -10
  ],
  muring: [
    -20,
    -20,
    -10,
    -10
  ],
  my: [
    -30,
    -30,
    -15,
    -15
  ],
  myacute: [
    -30,
    -30,
    -15,
    -15
  ],
  mydieresis: [
    -30,
    -30,
    -15,
    -15
  ],
  nu: [
    -10,
    -10,
    -10,
    -10
  ],
  nuacute: [
    -10,
    -10,
    -10,
    -10
  ],
  nucircumflex: [
    -10,
    -10,
    -10,
    -10
  ],
  nudieresis: [
    -10,
    -10,
    -10,
    -10
  ],
  nugrave: [
    -10,
    -10,
    -10,
    -10
  ],
  nuhungarumlaut: [
    -10,
    -10,
    -10,
    -10
  ],
  numacron: [
    -10,
    -10,
    -10,
    -10
  ],
  nuogonek: [
    -10,
    -10,
    -10,
    -10
  ],
  nuring: [
    -10,
    -10,
    -10,
    -10
  ],
  nv: [
    -40,
    -40,
    -20,
    -20,
    -40,
    -40,
    -40,
    -40
  ],
  ny: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  nyacute: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  nydieresis: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  nacuteu: [
    -10,
    -10,
    -10,
    -10
  ],
  nacuteuacute: [
    -10,
    -10,
    -10,
    -10
  ],
  nacuteucircumflex: [
    -10,
    -10,
    -10,
    -10
  ],
  nacuteudieresis: [
    -10,
    -10,
    -10,
    -10
  ],
  nacuteugrave: [
    -10,
    -10,
    -10,
    -10
  ],
  nacuteuhungarumlaut: [
    -10,
    -10,
    -10,
    -10
  ],
  nacuteumacron: [
    -10,
    -10,
    -10,
    -10
  ],
  nacuteuogonek: [
    -10,
    -10,
    -10,
    -10
  ],
  nacuteuring: [
    -10,
    -10,
    -10,
    -10
  ],
  nacutev: [
    -40,
    -40,
    -20,
    -20,
    -40,
    -40,
    -40,
    -40
  ],
  nacutey: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  nacuteyacute: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  nacuteydieresis: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  ncaronu: [
    -10,
    -10,
    -10,
    -10
  ],
  ncaronuacute: [
    -10,
    -10,
    -10,
    -10
  ],
  ncaronucircumflex: [
    -10,
    -10,
    -10,
    -10
  ],
  ncaronudieresis: [
    -10,
    -10,
    -10,
    -10
  ],
  ncaronugrave: [
    -10,
    -10,
    -10,
    -10
  ],
  ncaronuhungarumlaut: [
    -10,
    -10,
    -10,
    -10
  ],
  ncaronumacron: [
    -10,
    -10,
    -10,
    -10
  ],
  ncaronuogonek: [
    -10,
    -10,
    -10,
    -10
  ],
  ncaronuring: [
    -10,
    -10,
    -10,
    -10
  ],
  ncaronv: [
    -40,
    -40,
    -20,
    -20,
    -40,
    -40,
    -40,
    -40
  ],
  ncarony: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  ncaronyacute: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  ncaronydieresis: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  ncommaaccentu: [
    -10,
    -10,
    -10,
    -10
  ],
  ncommaaccentuacute: [
    -10,
    -10,
    -10,
    -10
  ],
  ncommaaccentucircumflex: [
    -10,
    -10,
    -10,
    -10
  ],
  ncommaaccentudieresis: [
    -10,
    -10,
    -10,
    -10
  ],
  ncommaaccentugrave: [
    -10,
    -10,
    -10,
    -10
  ],
  ncommaaccentuhungarumlaut: [
    -10,
    -10,
    -10,
    -10
  ],
  ncommaaccentumacron: [
    -10,
    -10,
    -10,
    -10
  ],
  ncommaaccentuogonek: [
    -10,
    -10,
    -10,
    -10
  ],
  ncommaaccenturing: [
    -10,
    -10,
    -10,
    -10
  ],
  ncommaaccentv: [
    -40,
    -40,
    -20,
    -20,
    -40,
    -40,
    -40,
    -40
  ],
  ncommaaccenty: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  ncommaaccentyacute: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  ncommaaccentydieresis: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  ntildeu: [
    -10,
    -10,
    -10,
    -10
  ],
  ntildeuacute: [
    -10,
    -10,
    -10,
    -10
  ],
  ntildeucircumflex: [
    -10,
    -10,
    -10,
    -10
  ],
  ntildeudieresis: [
    -10,
    -10,
    -10,
    -10
  ],
  ntildeugrave: [
    -10,
    -10,
    -10,
    -10
  ],
  ntildeuhungarumlaut: [
    -10,
    -10,
    -10,
    -10
  ],
  ntildeumacron: [
    -10,
    -10,
    -10,
    -10
  ],
  ntildeuogonek: [
    -10,
    -10,
    -10,
    -10
  ],
  ntildeuring: [
    -10,
    -10,
    -10,
    -10
  ],
  ntildev: [
    -40,
    -40,
    -20,
    -20,
    -40,
    -40,
    -40,
    -40
  ],
  ntildey: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  ntildeyacute: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  ntildeydieresis: [
    -20,
    -20,
    -15,
    -15,
    0,
    0,
    0,
    -15
  ],
  ov: [
    -20,
    -20,
    -15,
    -15,
    -10,
    -15,
    -10,
    -15
  ],
  ow: [
    -15,
    -15,
    -15,
    -15,
    -10,
    -25,
    0,
    -25
  ],
  ox: [
    -30,
    -30,
    -30,
    -30,
    0,
    -10
  ],
  oy: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  oyacute: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  oydieresis: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  oacutev: [
    -20,
    -20,
    -15,
    -15,
    -10,
    -15,
    -10,
    -15
  ],
  oacutew: [
    -15,
    -15,
    -15,
    -15,
    -10,
    -25,
    0,
    -25
  ],
  oacutex: [
    -30,
    -30,
    -30,
    -30,
    0,
    -10
  ],
  oacutey: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  oacuteyacute: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  oacuteydieresis: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  ocircumflexv: [
    -20,
    -20,
    -15,
    -15,
    -10,
    -15,
    -10,
    -15
  ],
  ocircumflexw: [
    -15,
    -15,
    -15,
    -15,
    -10,
    -25,
    0,
    -25
  ],
  ocircumflexx: [
    -30,
    -30,
    -30,
    -30,
    0,
    -10
  ],
  ocircumflexy: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  ocircumflexyacute: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  ocircumflexydieresis: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  odieresisv: [
    -20,
    -20,
    -15,
    -15,
    -10,
    -15,
    -10,
    -15
  ],
  odieresisw: [
    -15,
    -15,
    -15,
    -15,
    -10,
    -25,
    0,
    -25
  ],
  odieresisx: [
    -30,
    -30,
    -30,
    -30,
    0,
    -10
  ],
  odieresisy: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  odieresisyacute: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  odieresisydieresis: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  ogravev: [
    -20,
    -20,
    -15,
    -15,
    -10,
    -15,
    -10,
    -15
  ],
  ogravew: [
    -15,
    -15,
    -15,
    -15,
    -10,
    -25,
    0,
    -25
  ],
  ogravex: [
    -30,
    -30,
    -30,
    -30,
    0,
    -10
  ],
  ogravey: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  ograveyacute: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  ograveydieresis: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  ohungarumlautv: [
    -20,
    -20,
    -15,
    -15,
    -10,
    -15,
    -10,
    -15
  ],
  ohungarumlautw: [
    -15,
    -15,
    -15,
    -15,
    -10,
    -25,
    0,
    -25
  ],
  ohungarumlautx: [
    -30,
    -30,
    -30,
    -30,
    0,
    -10
  ],
  ohungarumlauty: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  ohungarumlautyacute: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  ohungarumlautydieresis: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  omacronv: [
    -20,
    -20,
    -15,
    -15,
    -10,
    -15,
    -10,
    -15
  ],
  omacronw: [
    -15,
    -15,
    -15,
    -15,
    -10,
    -25,
    0,
    -25
  ],
  omacronx: [
    -30,
    -30,
    -30,
    -30,
    0,
    -10
  ],
  omacrony: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  omacronyacute: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  omacronydieresis: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  oslashv: [
    -20,
    -20,
    -70,
    -70,
    -10,
    -15,
    -10,
    -15
  ],
  oslashw: [
    -15,
    -15,
    -70,
    -70,
    -10,
    -25,
    0,
    -25
  ],
  oslashx: [
    -30,
    -30,
    -85,
    -85,
    0,
    -10
  ],
  oslashy: [
    -20,
    -20,
    -70,
    -70,
    0,
    -10,
    0,
    -10
  ],
  oslashyacute: [
    -20,
    -20,
    -70,
    -70,
    0,
    -10,
    0,
    -10
  ],
  oslashydieresis: [
    -20,
    -20,
    -70,
    -70,
    0,
    -10,
    0,
    -10
  ],
  otildev: [
    -20,
    -20,
    -15,
    -15,
    -10,
    -15,
    -10,
    -15
  ],
  otildew: [
    -15,
    -15,
    -15,
    -15,
    -10,
    -25,
    0,
    -25
  ],
  otildex: [
    -30,
    -30,
    -30,
    -30,
    0,
    -10
  ],
  otildey: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  otildeyacute: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  otildeydieresis: [
    -20,
    -20,
    -30,
    -30,
    0,
    -10,
    0,
    -10
  ],
  py: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  pyacute: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  pydieresis: [
    -15,
    -15,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  periodquotedblright: [
    -120,
    -120,
    -100,
    -100,
    -55,
    -95,
    -140,
    -70
  ],
  periodquoteright: [
    -120,
    -120,
    -100,
    -100,
    -55,
    -95,
    -140,
    -70
  ],
  periodspace: [
    -40,
    -40,
    -60,
    -60
  ],
  quotedblrightspace: [
    -80,
    -80,
    -40,
    -40
  ],
  quoteleftquoteleft: [
    -46,
    -46,
    -57,
    -57,
    -63,
    -74,
    -111,
    -74
  ],
  quoterightd: [
    -80,
    -80,
    -50,
    -50,
    -20,
    -15,
    -25,
    -50
  ],
  quoterightdcroat: [
    -80,
    -80,
    -50,
    -50,
    -20,
    -15,
    -25,
    -50
  ],
  quoterightl: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  quoterightlacute: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  quoterightlcommaaccent: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  quoterightlslash: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  quoterightquoteright: [
    -46,
    -46,
    -57,
    -57,
    -63,
    -74,
    -111,
    -74
  ],
  quoterightr: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -15,
    -25,
    -50
  ],
  quoterightracute: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -15,
    -25,
    -50
  ],
  quoterightrcaron: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -15,
    -25,
    -50
  ],
  quoterightrcommaaccent: [
    -40,
    -40,
    -50,
    -50,
    -20,
    -15,
    -25,
    -50
  ],
  quoterights: [
    -60,
    -60,
    -50,
    -50,
    -37,
    -74,
    -40,
    -55
  ],
  quoterightsacute: [
    -60,
    -60,
    -50,
    -50,
    -37,
    -74,
    -40,
    -55
  ],
  quoterightscaron: [
    -60,
    -60,
    -50,
    -50,
    -37,
    -74,
    -40,
    -55
  ],
  quoterightscedilla: [
    -60,
    -60,
    -50,
    -50,
    -37,
    -74,
    -40,
    -55
  ],
  quoterightscommaaccent: [
    -60,
    -60,
    -50,
    -50,
    -37,
    -74,
    -40,
    -55
  ],
  quoterightspace: [
    -80,
    -80,
    -70,
    -70,
    -74,
    -74,
    -111,
    -74
  ],
  quoterightv: [
    -20,
    -20,
    0,
    0,
    -20,
    -15,
    -10,
    -50
  ],
  rc: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcacute: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rccaron: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rccedilla: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcomma: [
    -60,
    -60,
    -50,
    -50,
    -92,
    -65,
    -111,
    -40
  ],
  rd: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    -37
  ],
  rdcroat: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    -37
  ],
  rg: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  rgbreve: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  rgcommaaccent: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  rhyphen: [
    -20,
    -20,
    0,
    0,
    -37,
    0,
    -20,
    -20
  ],
  ro: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  roacute: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rocircumflex: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rodieresis: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rograve: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rohungarumlaut: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  romacron: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  roslash: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rotilde: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rperiod: [
    -60,
    -60,
    -50,
    -50,
    -100,
    -65,
    -111,
    -55
  ],
  rq: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rs: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rsacute: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rscaron: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rscedilla: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rscommaaccent: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rt: [
    20,
    20,
    40,
    40
  ],
  rtcommaaccent: [
    20,
    20,
    40,
    40
  ],
  rv: [
    10,
    10,
    30,
    30,
    -10
  ],
  ry: [
    10,
    10,
    30,
    30
  ],
  ryacute: [
    10,
    10,
    30,
    30
  ],
  rydieresis: [
    10,
    10,
    30,
    30
  ],
  racutec: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  racutecacute: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  racuteccaron: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  racuteccedilla: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  racutecomma: [
    -60,
    -60,
    -50,
    -50,
    -92,
    -65,
    -111,
    -40
  ],
  racuted: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    -37
  ],
  racutedcroat: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    -37
  ],
  racuteg: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  racutegbreve: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  racutegcommaaccent: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  racutehyphen: [
    -20,
    -20,
    0,
    0,
    -37,
    0,
    -20,
    -20
  ],
  racuteo: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  racuteoacute: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  racuteocircumflex: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  racuteodieresis: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  racuteograve: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  racuteohungarumlaut: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  racuteomacron: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  racuteoslash: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  racuteotilde: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  racuteperiod: [
    -60,
    -60,
    -50,
    -50,
    -100,
    -65,
    -111,
    -55
  ],
  racuteq: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  racutes: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  racutesacute: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  racutescaron: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  racutescedilla: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  racutescommaaccent: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  racutet: [
    20,
    20,
    40,
    40
  ],
  racutetcommaaccent: [
    20,
    20,
    40,
    40
  ],
  racutev: [
    10,
    10,
    30,
    30,
    -10
  ],
  racutey: [
    10,
    10,
    30,
    30
  ],
  racuteyacute: [
    10,
    10,
    30,
    30
  ],
  racuteydieresis: [
    10,
    10,
    30,
    30
  ],
  rcaronc: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaroncacute: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaronccaron: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaronccedilla: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaroncomma: [
    -60,
    -60,
    -50,
    -50,
    -92,
    -65,
    -111,
    -40
  ],
  rcarond: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    -37
  ],
  rcarondcroat: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    -37
  ],
  rcarong: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  rcarongbreve: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  rcarongcommaaccent: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  rcaronhyphen: [
    -20,
    -20,
    0,
    0,
    -37,
    0,
    -20,
    -20
  ],
  rcarono: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcaronoacute: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcaronocircumflex: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcaronodieresis: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcaronograve: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcaronohungarumlaut: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcaronomacron: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcaronoslash: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcaronotilde: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcaronperiod: [
    -60,
    -60,
    -50,
    -50,
    -100,
    -65,
    -111,
    -55
  ],
  rcaronq: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcarons: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rcaronsacute: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rcaronscaron: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rcaronscedilla: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rcaronscommaaccent: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rcaront: [
    20,
    20,
    40,
    40
  ],
  rcarontcommaaccent: [
    20,
    20,
    40,
    40
  ],
  rcaronv: [
    10,
    10,
    30,
    30,
    -10
  ],
  rcarony: [
    10,
    10,
    30,
    30
  ],
  rcaronyacute: [
    10,
    10,
    30,
    30
  ],
  rcaronydieresis: [
    10,
    10,
    30,
    30
  ],
  rcommaaccentc: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccentcacute: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccentccaron: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccentccedilla: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccentcomma: [
    -60,
    -60,
    -50,
    -50,
    -92,
    -65,
    -111,
    -40
  ],
  rcommaaccentd: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    -37
  ],
  rcommaaccentdcroat: [
    -20,
    -20,
    0,
    0,
    0,
    0,
    -37
  ],
  rcommaaccentg: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  rcommaaccentgbreve: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  rcommaaccentgcommaaccent: [
    -15,
    -15,
    0,
    0,
    -10,
    0,
    -37,
    -18
  ],
  rcommaaccenthyphen: [
    -20,
    -20,
    0,
    0,
    -37,
    0,
    -20,
    -20
  ],
  rcommaaccento: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcommaaccentoacute: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcommaaccentocircumflex: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcommaaccentodieresis: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcommaaccentograve: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcommaaccentohungarumlaut: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcommaaccentomacron: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcommaaccentoslash: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcommaaccentotilde: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -45
  ],
  rcommaaccentperiod: [
    -60,
    -60,
    -50,
    -50,
    -100,
    -65,
    -111,
    -55
  ],
  rcommaaccentq: [
    -20,
    -20,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccents: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rcommaaccentsacute: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rcommaaccentscaron: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rcommaaccentscedilla: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rcommaaccentscommaaccent: [
    -15,
    -15,
    0,
    0,
    0,
    0,
    -10
  ],
  rcommaaccentt: [
    20,
    20,
    40,
    40
  ],
  rcommaaccenttcommaaccent: [
    20,
    20,
    40,
    40
  ],
  rcommaaccentv: [
    10,
    10,
    30,
    30,
    -10
  ],
  rcommaaccenty: [
    10,
    10,
    30,
    30
  ],
  rcommaaccentyacute: [
    10,
    10,
    30,
    30
  ],
  rcommaaccentydieresis: [
    10,
    10,
    30,
    30
  ],
  sw: [
    -15,
    -15,
    -30,
    -30
  ],
  sacutew: [
    -15,
    -15,
    -30,
    -30
  ],
  scaronw: [
    -15,
    -15,
    -30,
    -30
  ],
  scedillaw: [
    -15,
    -15,
    -30,
    -30
  ],
  scommaaccentw: [
    -15,
    -15,
    -30,
    -30
  ],
  semicolonspace: [
    -40,
    -40,
    -50,
    -50
  ],
  spaceT: [
    -100,
    -100,
    -50,
    -50,
    -30,
    0,
    -18,
    -18
  ],
  spaceTcaron: [
    -100,
    -100,
    -50,
    -50,
    -30,
    0,
    -18,
    -18
  ],
  spaceTcommaaccent: [
    -100,
    -100,
    -50,
    -50,
    -30,
    0,
    -18,
    -18
  ],
  spaceV: [
    -80,
    -80,
    -50,
    -50,
    -45,
    -70,
    -35,
    -50
  ],
  spaceW: [
    -80,
    -80,
    -40,
    -40,
    -30,
    -70,
    -40,
    -30
  ],
  spaceY: [
    -120,
    -120,
    -90,
    -90,
    -55,
    -70,
    -75,
    -90
  ],
  spaceYacute: [
    -120,
    -120,
    -90,
    -90,
    -55,
    -70,
    -75,
    -90
  ],
  spaceYdieresis: [
    -120,
    -120,
    -90,
    -90,
    -55,
    -70,
    -75,
    -90
  ],
  spacequotedblleft: [
    -80,
    -80,
    -30,
    -30
  ],
  spacequoteleft: [
    -60,
    -60,
    -60,
    -60
  ],
  va: [
    -20,
    -20,
    -25,
    -25,
    -10,
    0,
    0,
    -25
  ],
  vaacute: [
    -20,
    -20,
    -25,
    -25,
    -10,
    0,
    0,
    -25
  ],
  vabreve: [
    -20,
    -20,
    -25,
    -25,
    -10,
    0,
    0,
    -25
  ],
  vacircumflex: [
    -20,
    -20,
    -25,
    -25,
    -10,
    0,
    0,
    -25
  ],
  vadieresis: [
    -20,
    -20,
    -25,
    -25,
    -10,
    0,
    0,
    -25
  ],
  vagrave: [
    -20,
    -20,
    -25,
    -25,
    -10,
    0,
    0,
    -25
  ],
  vamacron: [
    -20,
    -20,
    -25,
    -25,
    -10,
    0,
    0,
    -25
  ],
  vaogonek: [
    -20,
    -20,
    -25,
    -25,
    -10,
    0,
    0,
    -25
  ],
  varing: [
    -20,
    -20,
    -25,
    -25,
    -10,
    0,
    0,
    -25
  ],
  vatilde: [
    -20,
    -20,
    -25,
    -25,
    -10,
    0,
    0,
    -25
  ],
  vcomma: [
    -80,
    -80,
    -80,
    -80,
    -55,
    -37,
    -74,
    -65
  ],
  vo: [
    -30,
    -30,
    -25,
    -25,
    -10,
    -15,
    0,
    -20
  ],
  voacute: [
    -30,
    -30,
    -25,
    -25,
    -10,
    -15,
    0,
    -20
  ],
  vocircumflex: [
    -30,
    -30,
    -25,
    -25,
    -10,
    -15,
    0,
    -20
  ],
  vodieresis: [
    -30,
    -30,
    -25,
    -25,
    -10,
    -15,
    0,
    -20
  ],
  vograve: [
    -30,
    -30,
    -25,
    -25,
    -10,
    -15,
    0,
    -20
  ],
  vohungarumlaut: [
    -30,
    -30,
    -25,
    -25,
    -10,
    -15,
    0,
    -20
  ],
  vomacron: [
    -30,
    -30,
    -25,
    -25,
    -10,
    -15,
    0,
    -20
  ],
  voslash: [
    -30,
    -30,
    -25,
    -25,
    -10,
    -15,
    0,
    -20
  ],
  votilde: [
    -30,
    -30,
    -25,
    -25,
    -10,
    -15,
    0,
    -20
  ],
  vperiod: [
    -80,
    -80,
    -80,
    -80,
    -70,
    -37,
    -74,
    -65
  ],
  wcomma: [
    -40,
    -40,
    -60,
    -60,
    -55,
    -37,
    -74,
    -65
  ],
  wo: [
    -20,
    -20,
    -10,
    -10,
    -10,
    -15,
    0,
    -10
  ],
  woacute: [
    -20,
    -20,
    -10,
    -10,
    -10,
    -15,
    0,
    -10
  ],
  wocircumflex: [
    -20,
    -20,
    -10,
    -10,
    -10,
    -15,
    0,
    -10
  ],
  wodieresis: [
    -20,
    -20,
    -10,
    -10,
    -10,
    -15,
    0,
    -10
  ],
  wograve: [
    -20,
    -20,
    -10,
    -10,
    -10,
    -15,
    0,
    -10
  ],
  wohungarumlaut: [
    -20,
    -20,
    -10,
    -10,
    -10,
    -15,
    0,
    -10
  ],
  womacron: [
    -20,
    -20,
    -10,
    -10,
    -10,
    -15,
    0,
    -10
  ],
  woslash: [
    -20,
    -20,
    -10,
    -10,
    -10,
    -15,
    0,
    -10
  ],
  wotilde: [
    -20,
    -20,
    -10,
    -10,
    -10,
    -15,
    0,
    -10
  ],
  wperiod: [
    -40,
    -40,
    -60,
    -60,
    -70,
    -37,
    -74,
    -65
  ],
  xe: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10,
    0,
    -15
  ],
  xeacute: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10,
    0,
    -15
  ],
  xecaron: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10,
    0,
    -15
  ],
  xecircumflex: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10,
    0,
    -15
  ],
  xedieresis: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10,
    0,
    -15
  ],
  xedotaccent: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10,
    0,
    -15
  ],
  xegrave: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10,
    0,
    -15
  ],
  xemacron: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10,
    0,
    -15
  ],
  xeogonek: [
    -10,
    -10,
    -30,
    -30,
    0,
    -10,
    0,
    -15
  ],
  ya: [
    -30,
    -30,
    -20,
    -20
  ],
  yaacute: [
    -30,
    -30,
    -20,
    -20
  ],
  yabreve: [
    -30,
    -30,
    -20,
    -20
  ],
  yacircumflex: [
    -30,
    -30,
    -20,
    -20
  ],
  yadieresis: [
    -30,
    -30,
    -20,
    -20
  ],
  yagrave: [
    -30,
    -30,
    -20,
    -20
  ],
  yamacron: [
    -30,
    -30,
    -20,
    -20
  ],
  yaogonek: [
    -30,
    -30,
    -20,
    -20
  ],
  yaring: [
    -30,
    -30,
    -20,
    -20
  ],
  yatilde: [
    -30,
    -30,
    -20,
    -20
  ],
  ycomma: [
    -80,
    -80,
    -100,
    -100,
    -55,
    -37,
    -55,
    -65
  ],
  ye: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yeacute: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yecaron: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yecircumflex: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yedieresis: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yedotaccent: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yegrave: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yemacron: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yeogonek: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yo: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yoacute: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yocircumflex: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yodieresis: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yograve: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yohungarumlaut: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yomacron: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yoslash: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yotilde: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yperiod: [
    -80,
    -80,
    -100,
    -100,
    -70,
    -37,
    -55,
    -65
  ],
  yacutea: [
    -30,
    -30,
    -20,
    -20
  ],
  yacuteaacute: [
    -30,
    -30,
    -20,
    -20
  ],
  yacuteabreve: [
    -30,
    -30,
    -20,
    -20
  ],
  yacuteacircumflex: [
    -30,
    -30,
    -20,
    -20
  ],
  yacuteadieresis: [
    -30,
    -30,
    -20,
    -20
  ],
  yacuteagrave: [
    -30,
    -30,
    -20,
    -20
  ],
  yacuteamacron: [
    -30,
    -30,
    -20,
    -20
  ],
  yacuteaogonek: [
    -30,
    -30,
    -20,
    -20
  ],
  yacutearing: [
    -30,
    -30,
    -20,
    -20
  ],
  yacuteatilde: [
    -30,
    -30,
    -20,
    -20
  ],
  yacutecomma: [
    -80,
    -80,
    -100,
    -100,
    -55,
    -37,
    -55,
    -65
  ],
  yacutee: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yacuteeacute: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yacuteecaron: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yacuteecircumflex: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yacuteedieresis: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yacuteedotaccent: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yacuteegrave: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yacuteemacron: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yacuteeogonek: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  yacuteo: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yacuteoacute: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yacuteocircumflex: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yacuteodieresis: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yacuteograve: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yacuteohungarumlaut: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yacuteomacron: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yacuteoslash: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yacuteotilde: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  yacuteperiod: [
    -80,
    -80,
    -100,
    -100,
    -70,
    -37,
    -55,
    -65
  ],
  ydieresisa: [
    -30,
    -30,
    -20,
    -20
  ],
  ydieresisaacute: [
    -30,
    -30,
    -20,
    -20
  ],
  ydieresisabreve: [
    -30,
    -30,
    -20,
    -20
  ],
  ydieresisacircumflex: [
    -30,
    -30,
    -20,
    -20
  ],
  ydieresisadieresis: [
    -30,
    -30,
    -20,
    -20
  ],
  ydieresisagrave: [
    -30,
    -30,
    -20,
    -20
  ],
  ydieresisamacron: [
    -30,
    -30,
    -20,
    -20
  ],
  ydieresisaogonek: [
    -30,
    -30,
    -20,
    -20
  ],
  ydieresisaring: [
    -30,
    -30,
    -20,
    -20
  ],
  ydieresisatilde: [
    -30,
    -30,
    -20,
    -20
  ],
  ydieresiscomma: [
    -80,
    -80,
    -100,
    -100,
    -55,
    -37,
    -55,
    -65
  ],
  ydieresise: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  ydieresiseacute: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  ydieresisecaron: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  ydieresisecircumflex: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  ydieresisedieresis: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  ydieresisedotaccent: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  ydieresisegrave: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  ydieresisemacron: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  ydieresiseogonek: [
    -10,
    -10,
    -20,
    -20,
    -10
  ],
  ydieresiso: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  ydieresisoacute: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  ydieresisocircumflex: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  ydieresisodieresis: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  ydieresisograve: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  ydieresisohungarumlaut: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  ydieresisomacron: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  ydieresisoslash: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  ydieresisotilde: [
    -25,
    -25,
    -20,
    -20,
    -25
  ],
  ydieresisperiod: [
    -80,
    -80,
    -100,
    -100,
    -70,
    -37,
    -55,
    -65
  ],
  ze: [
    10,
    10,
    -15,
    -15
  ],
  zeacute: [
    10,
    10,
    -15,
    -15
  ],
  zecaron: [
    10,
    10,
    -15,
    -15
  ],
  zecircumflex: [
    10,
    10,
    -15,
    -15
  ],
  zedieresis: [
    10,
    10,
    -15,
    -15
  ],
  zedotaccent: [
    10,
    10,
    -15,
    -15
  ],
  zegrave: [
    10,
    10,
    -15,
    -15
  ],
  zemacron: [
    10,
    10,
    -15,
    -15
  ],
  zeogonek: [
    10,
    10,
    -15,
    -15
  ],
  zacutee: [
    10,
    10,
    -15,
    -15
  ],
  zacuteeacute: [
    10,
    10,
    -15,
    -15
  ],
  zacuteecaron: [
    10,
    10,
    -15,
    -15
  ],
  zacuteecircumflex: [
    10,
    10,
    -15,
    -15
  ],
  zacuteedieresis: [
    10,
    10,
    -15,
    -15
  ],
  zacuteedotaccent: [
    10,
    10,
    -15,
    -15
  ],
  zacuteegrave: [
    10,
    10,
    -15,
    -15
  ],
  zacuteemacron: [
    10,
    10,
    -15,
    -15
  ],
  zacuteeogonek: [
    10,
    10,
    -15,
    -15
  ],
  zcarone: [
    10,
    10,
    -15,
    -15
  ],
  zcaroneacute: [
    10,
    10,
    -15,
    -15
  ],
  zcaronecaron: [
    10,
    10,
    -15,
    -15
  ],
  zcaronecircumflex: [
    10,
    10,
    -15,
    -15
  ],
  zcaronedieresis: [
    10,
    10,
    -15,
    -15
  ],
  zcaronedotaccent: [
    10,
    10,
    -15,
    -15
  ],
  zcaronegrave: [
    10,
    10,
    -15,
    -15
  ],
  zcaronemacron: [
    10,
    10,
    -15,
    -15
  ],
  zcaroneogonek: [
    10,
    10,
    -15,
    -15
  ],
  zdotaccente: [
    10,
    10,
    -15,
    -15
  ],
  zdotaccenteacute: [
    10,
    10,
    -15,
    -15
  ],
  zdotaccentecaron: [
    10,
    10,
    -15,
    -15
  ],
  zdotaccentecircumflex: [
    10,
    10,
    -15,
    -15
  ],
  zdotaccentedieresis: [
    10,
    10,
    -15,
    -15
  ],
  zdotaccentedotaccent: [
    10,
    10,
    -15,
    -15
  ],
  zdotaccentegrave: [
    10,
    10,
    -15,
    -15
  ],
  zdotaccentemacron: [
    10,
    10,
    -15,
    -15
  ],
  zdotaccenteogonek: [
    10,
    10,
    -15,
    -15
  ],
  Bcomma: [
    0,
    0,
    -20,
    -20
  ],
  Bperiod: [
    0,
    0,
    -20,
    -20
  ],
  Ccomma: [
    0,
    0,
    -30,
    -30
  ],
  Cperiod: [
    0,
    0,
    -30,
    -30
  ],
  Cacutecomma: [
    0,
    0,
    -30,
    -30
  ],
  Cacuteperiod: [
    0,
    0,
    -30,
    -30
  ],
  Ccaroncomma: [
    0,
    0,
    -30,
    -30
  ],
  Ccaronperiod: [
    0,
    0,
    -30,
    -30
  ],
  Ccedillacomma: [
    0,
    0,
    -30,
    -30
  ],
  Ccedillaperiod: [
    0,
    0,
    -30,
    -30
  ],
  Fe: [
    0,
    0,
    -30,
    -30,
    -25,
    -100,
    -75
  ],
  Feacute: [
    0,
    0,
    -30,
    -30,
    -25,
    -100,
    -75
  ],
  Fecaron: [
    0,
    0,
    -30,
    -30,
    -25,
    -100,
    -75
  ],
  Fecircumflex: [
    0,
    0,
    -30,
    -30,
    -25,
    -100,
    -75
  ],
  Fedieresis: [
    0,
    0,
    -30,
    -30,
    -25,
    -100,
    -75
  ],
  Fedotaccent: [
    0,
    0,
    -30,
    -30,
    -25,
    -100,
    -75
  ],
  Fegrave: [
    0,
    0,
    -30,
    -30,
    -25,
    -100,
    -75
  ],
  Femacron: [
    0,
    0,
    -30,
    -30,
    -25,
    -100,
    -75
  ],
  Feogonek: [
    0,
    0,
    -30,
    -30,
    -25,
    -100,
    -75
  ],
  Fo: [
    0,
    0,
    -30,
    -30,
    -25,
    -70,
    -105,
    -15
  ],
  Foacute: [
    0,
    0,
    -30,
    -30,
    -25,
    -70,
    -105,
    -15
  ],
  Focircumflex: [
    0,
    0,
    -30,
    -30,
    -25,
    -70,
    -105,
    -15
  ],
  Fodieresis: [
    0,
    0,
    -30,
    -30,
    -25,
    -70,
    -105,
    -15
  ],
  Fograve: [
    0,
    0,
    -30,
    -30,
    -25,
    -70,
    -105,
    -15
  ],
  Fohungarumlaut: [
    0,
    0,
    -30,
    -30,
    -25,
    -70,
    -105,
    -15
  ],
  Fomacron: [
    0,
    0,
    -30,
    -30,
    -25,
    -70,
    -105,
    -15
  ],
  Foslash: [
    0,
    0,
    -30,
    -30,
    -25,
    -70,
    -105,
    -15
  ],
  Fotilde: [
    0,
    0,
    -30,
    -30,
    -25,
    -70,
    -105,
    -15
  ],
  Fr: [
    0,
    0,
    -45,
    -45,
    0,
    -50,
    -55
  ],
  Fracute: [
    0,
    0,
    -45,
    -45,
    0,
    -50,
    -55
  ],
  Frcaron: [
    0,
    0,
    -45,
    -45,
    0,
    -50,
    -55
  ],
  Frcommaaccent: [
    0,
    0,
    -45,
    -45,
    0,
    -50,
    -55
  ],
  Ja: [
    0,
    0,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jaacute: [
    0,
    0,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jabreve: [
    0,
    0,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jacircumflex: [
    0,
    0,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jadieresis: [
    0,
    0,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jagrave: [
    0,
    0,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jamacron: [
    0,
    0,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jaogonek: [
    0,
    0,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jaring: [
    0,
    0,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  Jatilde: [
    0,
    0,
    -20,
    -20,
    -15,
    -40,
    -35
  ],
  LcaronT: [
    0,
    0,
    -110,
    -110
  ],
  LcaronTcaron: [
    0,
    0,
    -110,
    -110
  ],
  LcaronTcommaaccent: [
    0,
    0,
    -110,
    -110
  ],
  LcaronV: [
    0,
    0,
    -110,
    -110
  ],
  LcaronW: [
    0,
    0,
    -70,
    -70
  ],
  LcaronY: [
    0,
    0,
    -140,
    -140
  ],
  LcaronYacute: [
    0,
    0,
    -140,
    -140
  ],
  LcaronYdieresis: [
    0,
    0,
    -140,
    -140
  ],
  Lcaronquotedblright: [
    0,
    0,
    -140,
    -140
  ],
  Lcaronquoteright: [
    0,
    0,
    -160,
    -160,
    0,
    0,
    0,
    -92
  ],
  Lcarony: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -55
  ],
  Lcaronyacute: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -55
  ],
  Lcaronydieresis: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -55
  ],
  Scomma: [
    0,
    0,
    -20,
    -20
  ],
  Speriod: [
    0,
    0,
    -20,
    -20
  ],
  Sacutecomma: [
    0,
    0,
    -20,
    -20
  ],
  Sacuteperiod: [
    0,
    0,
    -20,
    -20
  ],
  Scaroncomma: [
    0,
    0,
    -20,
    -20
  ],
  Scaronperiod: [
    0,
    0,
    -20,
    -20
  ],
  Scedillacomma: [
    0,
    0,
    -20,
    -20
  ],
  Scedillaperiod: [
    0,
    0,
    -20,
    -20
  ],
  Scommaaccentcomma: [
    0,
    0,
    -20,
    -20
  ],
  Scommaaccentperiod: [
    0,
    0,
    -20,
    -20
  ],
  Trcaron: [
    0,
    0,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Tcaronrcaron: [
    0,
    0,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Tcommaaccentrcaron: [
    0,
    0,
    -120,
    -120,
    -74,
    -37,
    -55,
    -35
  ],
  Yhyphen: [
    0,
    0,
    -140,
    -140,
    -92,
    -92,
    -74,
    -111
  ],
  Yi: [
    0,
    0,
    -20,
    -20,
    -37,
    -55,
    -74,
    -55
  ],
  Yiacute: [
    0,
    0,
    -20,
    -20,
    -37,
    -55,
    -74,
    -55
  ],
  Yiogonek: [
    0,
    0,
    -20,
    -20,
    -37,
    -55,
    -74,
    -55
  ],
  Yacutehyphen: [
    0,
    0,
    -140,
    -140,
    -92,
    -92,
    -74,
    -111
  ],
  Yacutei: [
    0,
    0,
    -20,
    -20,
    -37,
    -55,
    -74,
    -55
  ],
  Yacuteiacute: [
    0,
    0,
    -20,
    -20,
    -37,
    -55,
    -74,
    -55
  ],
  Yacuteiogonek: [
    0,
    0,
    -20,
    -20,
    -37,
    -55,
    -74,
    -55
  ],
  Ydieresishyphen: [
    0,
    0,
    -140,
    -140,
    -92,
    -92,
    -74,
    -111
  ],
  Ydieresisi: [
    0,
    0,
    -20,
    -20,
    -37,
    -55,
    -74,
    -55
  ],
  Ydieresisiacute: [
    0,
    0,
    -20,
    -20,
    -37,
    -55,
    -74,
    -55
  ],
  Ydieresisiogonek: [
    0,
    0,
    -20,
    -20,
    -37,
    -55,
    -74,
    -55
  ],
  bb: [
    0,
    0,
    -10,
    -10,
    -10,
    -10
  ],
  bcomma: [
    0,
    0,
    -40,
    -40
  ],
  bperiod: [
    0,
    0,
    -40,
    -40,
    -40,
    -40,
    -40,
    -40
  ],
  ccomma: [
    0,
    0,
    -15,
    -15
  ],
  cacutecomma: [
    0,
    0,
    -15,
    -15
  ],
  ccaroncomma: [
    0,
    0,
    -15,
    -15
  ],
  ccedillacomma: [
    0,
    0,
    -15,
    -15
  ],
  fa: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  faacute: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  fabreve: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  facircumflex: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  fadieresis: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  fagrave: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  famacron: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  faogonek: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  faring: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  fatilde: [
    0,
    0,
    -30,
    -30,
    0,
    0,
    0,
    -10
  ],
  fdotlessi: [
    0,
    0,
    -28,
    -28,
    -35,
    -30,
    -60,
    -50
  ],
  gr: [
    0,
    0,
    -10,
    -10
  ],
  gracute: [
    0,
    0,
    -10,
    -10
  ],
  grcaron: [
    0,
    0,
    -10,
    -10
  ],
  grcommaaccent: [
    0,
    0,
    -10,
    -10
  ],
  gbrever: [
    0,
    0,
    -10,
    -10
  ],
  gbreveracute: [
    0,
    0,
    -10,
    -10
  ],
  gbrevercaron: [
    0,
    0,
    -10,
    -10
  ],
  gbrevercommaaccent: [
    0,
    0,
    -10,
    -10
  ],
  gcommaaccentr: [
    0,
    0,
    -10,
    -10
  ],
  gcommaaccentracute: [
    0,
    0,
    -10,
    -10
  ],
  gcommaaccentrcaron: [
    0,
    0,
    -10,
    -10
  ],
  gcommaaccentrcommaaccent: [
    0,
    0,
    -10,
    -10
  ],
  ke: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  keacute: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kecaron: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kecircumflex: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kedieresis: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kedotaccent: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kegrave: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kemacron: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  keogonek: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kcommaaccente: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kcommaaccenteacute: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kcommaaccentecaron: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kcommaaccentecircumflex: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kcommaaccentedieresis: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kcommaaccentedotaccent: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kcommaaccentegrave: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kcommaaccentemacron: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  kcommaaccenteogonek: [
    0,
    0,
    -20,
    -20,
    -10,
    -30,
    -10,
    -10
  ],
  ocomma: [
    0,
    0,
    -40,
    -40
  ],
  operiod: [
    0,
    0,
    -40,
    -40
  ],
  oacutecomma: [
    0,
    0,
    -40,
    -40
  ],
  oacuteperiod: [
    0,
    0,
    -40,
    -40
  ],
  ocircumflexcomma: [
    0,
    0,
    -40,
    -40
  ],
  ocircumflexperiod: [
    0,
    0,
    -40,
    -40
  ],
  odieresiscomma: [
    0,
    0,
    -40,
    -40
  ],
  odieresisperiod: [
    0,
    0,
    -40,
    -40
  ],
  ogravecomma: [
    0,
    0,
    -40,
    -40
  ],
  ograveperiod: [
    0,
    0,
    -40,
    -40
  ],
  ohungarumlautcomma: [
    0,
    0,
    -40,
    -40
  ],
  ohungarumlautperiod: [
    0,
    0,
    -40,
    -40
  ],
  omacroncomma: [
    0,
    0,
    -40,
    -40
  ],
  omacronperiod: [
    0,
    0,
    -40,
    -40
  ],
  oslasha: [
    0,
    0,
    -55,
    -55
  ],
  oslashaacute: [
    0,
    0,
    -55,
    -55
  ],
  oslashabreve: [
    0,
    0,
    -55,
    -55
  ],
  oslashacircumflex: [
    0,
    0,
    -55,
    -55
  ],
  oslashadieresis: [
    0,
    0,
    -55,
    -55
  ],
  oslashagrave: [
    0,
    0,
    -55,
    -55
  ],
  oslashamacron: [
    0,
    0,
    -55,
    -55
  ],
  oslashaogonek: [
    0,
    0,
    -55,
    -55
  ],
  oslasharing: [
    0,
    0,
    -55,
    -55
  ],
  oslashatilde: [
    0,
    0,
    -55,
    -55
  ],
  oslashb: [
    0,
    0,
    -55,
    -55
  ],
  oslashc: [
    0,
    0,
    -55,
    -55
  ],
  oslashcacute: [
    0,
    0,
    -55,
    -55
  ],
  oslashccaron: [
    0,
    0,
    -55,
    -55
  ],
  oslashccedilla: [
    0,
    0,
    -55,
    -55
  ],
  oslashcomma: [
    0,
    0,
    -95,
    -95
  ],
  oslashd: [
    0,
    0,
    -55,
    -55
  ],
  oslashdcroat: [
    0,
    0,
    -55,
    -55
  ],
  oslashe: [
    0,
    0,
    -55,
    -55
  ],
  oslasheacute: [
    0,
    0,
    -55,
    -55
  ],
  oslashecaron: [
    0,
    0,
    -55,
    -55
  ],
  oslashecircumflex: [
    0,
    0,
    -55,
    -55
  ],
  oslashedieresis: [
    0,
    0,
    -55,
    -55
  ],
  oslashedotaccent: [
    0,
    0,
    -55,
    -55
  ],
  oslashegrave: [
    0,
    0,
    -55,
    -55
  ],
  oslashemacron: [
    0,
    0,
    -55,
    -55
  ],
  oslasheogonek: [
    0,
    0,
    -55,
    -55
  ],
  oslashf: [
    0,
    0,
    -55,
    -55
  ],
  oslashg: [
    0,
    0,
    -55,
    -55,
    0,
    0,
    -10
  ],
  oslashgbreve: [
    0,
    0,
    -55,
    -55,
    0,
    0,
    -10
  ],
  oslashgcommaaccent: [
    0,
    0,
    -55,
    -55,
    0,
    0,
    -10
  ],
  oslashh: [
    0,
    0,
    -55,
    -55
  ],
  oslashi: [
    0,
    0,
    -55,
    -55
  ],
  oslashiacute: [
    0,
    0,
    -55,
    -55
  ],
  oslashicircumflex: [
    0,
    0,
    -55,
    -55
  ],
  oslashidieresis: [
    0,
    0,
    -55,
    -55
  ],
  oslashigrave: [
    0,
    0,
    -55,
    -55
  ],
  oslashimacron: [
    0,
    0,
    -55,
    -55
  ],
  oslashiogonek: [
    0,
    0,
    -55,
    -55
  ],
  oslashj: [
    0,
    0,
    -55,
    -55
  ],
  oslashk: [
    0,
    0,
    -55,
    -55
  ],
  oslashkcommaaccent: [
    0,
    0,
    -55,
    -55
  ],
  oslashl: [
    0,
    0,
    -55,
    -55
  ],
  oslashlacute: [
    0,
    0,
    -55,
    -55
  ],
  oslashlcommaaccent: [
    0,
    0,
    -55,
    -55
  ],
  oslashlslash: [
    0,
    0,
    -55,
    -55
  ],
  oslashm: [
    0,
    0,
    -55,
    -55
  ],
  oslashn: [
    0,
    0,
    -55,
    -55
  ],
  oslashnacute: [
    0,
    0,
    -55,
    -55
  ],
  oslashncaron: [
    0,
    0,
    -55,
    -55
  ],
  oslashncommaaccent: [
    0,
    0,
    -55,
    -55
  ],
  oslashntilde: [
    0,
    0,
    -55,
    -55
  ],
  oslasho: [
    0,
    0,
    -55,
    -55
  ],
  oslashoacute: [
    0,
    0,
    -55,
    -55
  ],
  oslashocircumflex: [
    0,
    0,
    -55,
    -55
  ],
  oslashodieresis: [
    0,
    0,
    -55,
    -55
  ],
  oslashograve: [
    0,
    0,
    -55,
    -55
  ],
  oslashohungarumlaut: [
    0,
    0,
    -55,
    -55
  ],
  oslashomacron: [
    0,
    0,
    -55,
    -55
  ],
  oslashoslash: [
    0,
    0,
    -55,
    -55
  ],
  oslashotilde: [
    0,
    0,
    -55,
    -55
  ],
  oslashp: [
    0,
    0,
    -55,
    -55
  ],
  oslashperiod: [
    0,
    0,
    -95,
    -95
  ],
  oslashq: [
    0,
    0,
    -55,
    -55
  ],
  oslashr: [
    0,
    0,
    -55,
    -55
  ],
  oslashracute: [
    0,
    0,
    -55,
    -55
  ],
  oslashrcaron: [
    0,
    0,
    -55,
    -55
  ],
  oslashrcommaaccent: [
    0,
    0,
    -55,
    -55
  ],
  oslashs: [
    0,
    0,
    -55,
    -55
  ],
  oslashsacute: [
    0,
    0,
    -55,
    -55
  ],
  oslashscaron: [
    0,
    0,
    -55,
    -55
  ],
  oslashscedilla: [
    0,
    0,
    -55,
    -55
  ],
  oslashscommaaccent: [
    0,
    0,
    -55,
    -55
  ],
  oslasht: [
    0,
    0,
    -55,
    -55
  ],
  oslashtcommaaccent: [
    0,
    0,
    -55,
    -55
  ],
  oslashu: [
    0,
    0,
    -55,
    -55
  ],
  oslashuacute: [
    0,
    0,
    -55,
    -55
  ],
  oslashucircumflex: [
    0,
    0,
    -55,
    -55
  ],
  oslashudieresis: [
    0,
    0,
    -55,
    -55
  ],
  oslashugrave: [
    0,
    0,
    -55,
    -55
  ],
  oslashuhungarumlaut: [
    0,
    0,
    -55,
    -55
  ],
  oslashumacron: [
    0,
    0,
    -55,
    -55
  ],
  oslashuogonek: [
    0,
    0,
    -55,
    -55
  ],
  oslashuring: [
    0,
    0,
    -55,
    -55
  ],
  oslashz: [
    0,
    0,
    -55,
    -55
  ],
  oslashzacute: [
    0,
    0,
    -55,
    -55
  ],
  oslashzcaron: [
    0,
    0,
    -55,
    -55
  ],
  oslashzdotaccent: [
    0,
    0,
    -55,
    -55
  ],
  otildecomma: [
    0,
    0,
    -40,
    -40
  ],
  otildeperiod: [
    0,
    0,
    -40,
    -40
  ],
  pcomma: [
    0,
    0,
    -35,
    -35
  ],
  pperiod: [
    0,
    0,
    -35,
    -35
  ],
  ra: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  raacute: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rabreve: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racircumflex: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  radieresis: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  ragrave: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  ramacron: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  raogonek: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  raring: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  ratilde: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcolon: [
    0,
    0,
    30,
    30
  ],
  ri: [
    0,
    0,
    15,
    15
  ],
  riacute: [
    0,
    0,
    15,
    15
  ],
  ricircumflex: [
    0,
    0,
    15,
    15
  ],
  ridieresis: [
    0,
    0,
    15,
    15
  ],
  rigrave: [
    0,
    0,
    15,
    15
  ],
  rimacron: [
    0,
    0,
    15,
    15
  ],
  riogonek: [
    0,
    0,
    15,
    15
  ],
  rk: [
    0,
    0,
    15,
    15
  ],
  rkcommaaccent: [
    0,
    0,
    15,
    15
  ],
  rl: [
    0,
    0,
    15,
    15
  ],
  rlacute: [
    0,
    0,
    15,
    15
  ],
  rlcommaaccent: [
    0,
    0,
    15,
    15
  ],
  rlslash: [
    0,
    0,
    15,
    15
  ],
  rm: [
    0,
    0,
    25,
    25
  ],
  rn: [
    0,
    0,
    25,
    25,
    -15
  ],
  rnacute: [
    0,
    0,
    25,
    25,
    -15
  ],
  rncaron: [
    0,
    0,
    25,
    25,
    -15
  ],
  rncommaaccent: [
    0,
    0,
    25,
    25,
    -15
  ],
  rntilde: [
    0,
    0,
    25,
    25,
    -15
  ],
  rp: [
    0,
    0,
    30,
    30,
    -10
  ],
  rsemicolon: [
    0,
    0,
    30,
    30
  ],
  ru: [
    0,
    0,
    15,
    15
  ],
  ruacute: [
    0,
    0,
    15,
    15
  ],
  rucircumflex: [
    0,
    0,
    15,
    15
  ],
  rudieresis: [
    0,
    0,
    15,
    15
  ],
  rugrave: [
    0,
    0,
    15,
    15
  ],
  ruhungarumlaut: [
    0,
    0,
    15,
    15
  ],
  rumacron: [
    0,
    0,
    15,
    15
  ],
  ruogonek: [
    0,
    0,
    15,
    15
  ],
  ruring: [
    0,
    0,
    15,
    15
  ],
  racutea: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racuteaacute: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racuteabreve: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racuteacircumflex: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racuteadieresis: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racuteagrave: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racuteamacron: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racuteaogonek: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racutearing: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racuteatilde: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  racutecolon: [
    0,
    0,
    30,
    30
  ],
  racutei: [
    0,
    0,
    15,
    15
  ],
  racuteiacute: [
    0,
    0,
    15,
    15
  ],
  racuteicircumflex: [
    0,
    0,
    15,
    15
  ],
  racuteidieresis: [
    0,
    0,
    15,
    15
  ],
  racuteigrave: [
    0,
    0,
    15,
    15
  ],
  racuteimacron: [
    0,
    0,
    15,
    15
  ],
  racuteiogonek: [
    0,
    0,
    15,
    15
  ],
  racutek: [
    0,
    0,
    15,
    15
  ],
  racutekcommaaccent: [
    0,
    0,
    15,
    15
  ],
  racutel: [
    0,
    0,
    15,
    15
  ],
  racutelacute: [
    0,
    0,
    15,
    15
  ],
  racutelcommaaccent: [
    0,
    0,
    15,
    15
  ],
  racutelslash: [
    0,
    0,
    15,
    15
  ],
  racutem: [
    0,
    0,
    25,
    25
  ],
  racuten: [
    0,
    0,
    25,
    25,
    -15
  ],
  racutenacute: [
    0,
    0,
    25,
    25,
    -15
  ],
  racutencaron: [
    0,
    0,
    25,
    25,
    -15
  ],
  racutencommaaccent: [
    0,
    0,
    25,
    25,
    -15
  ],
  racutentilde: [
    0,
    0,
    25,
    25,
    -15
  ],
  racutep: [
    0,
    0,
    30,
    30,
    -10
  ],
  racutesemicolon: [
    0,
    0,
    30,
    30
  ],
  racuteu: [
    0,
    0,
    15,
    15
  ],
  racuteuacute: [
    0,
    0,
    15,
    15
  ],
  racuteucircumflex: [
    0,
    0,
    15,
    15
  ],
  racuteudieresis: [
    0,
    0,
    15,
    15
  ],
  racuteugrave: [
    0,
    0,
    15,
    15
  ],
  racuteuhungarumlaut: [
    0,
    0,
    15,
    15
  ],
  racuteumacron: [
    0,
    0,
    15,
    15
  ],
  racuteuogonek: [
    0,
    0,
    15,
    15
  ],
  racuteuring: [
    0,
    0,
    15,
    15
  ],
  rcarona: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcaronaacute: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcaronabreve: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcaronacircumflex: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcaronadieresis: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcaronagrave: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcaronamacron: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcaronaogonek: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcaronaring: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcaronatilde: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcaroncolon: [
    0,
    0,
    30,
    30
  ],
  rcaroni: [
    0,
    0,
    15,
    15
  ],
  rcaroniacute: [
    0,
    0,
    15,
    15
  ],
  rcaronicircumflex: [
    0,
    0,
    15,
    15
  ],
  rcaronidieresis: [
    0,
    0,
    15,
    15
  ],
  rcaronigrave: [
    0,
    0,
    15,
    15
  ],
  rcaronimacron: [
    0,
    0,
    15,
    15
  ],
  rcaroniogonek: [
    0,
    0,
    15,
    15
  ],
  rcaronk: [
    0,
    0,
    15,
    15
  ],
  rcaronkcommaaccent: [
    0,
    0,
    15,
    15
  ],
  rcaronl: [
    0,
    0,
    15,
    15
  ],
  rcaronlacute: [
    0,
    0,
    15,
    15
  ],
  rcaronlcommaaccent: [
    0,
    0,
    15,
    15
  ],
  rcaronlslash: [
    0,
    0,
    15,
    15
  ],
  rcaronm: [
    0,
    0,
    25,
    25
  ],
  rcaronn: [
    0,
    0,
    25,
    25,
    -15
  ],
  rcaronnacute: [
    0,
    0,
    25,
    25,
    -15
  ],
  rcaronncaron: [
    0,
    0,
    25,
    25,
    -15
  ],
  rcaronncommaaccent: [
    0,
    0,
    25,
    25,
    -15
  ],
  rcaronntilde: [
    0,
    0,
    25,
    25,
    -15
  ],
  rcaronp: [
    0,
    0,
    30,
    30,
    -10
  ],
  rcaronsemicolon: [
    0,
    0,
    30,
    30
  ],
  rcaronu: [
    0,
    0,
    15,
    15
  ],
  rcaronuacute: [
    0,
    0,
    15,
    15
  ],
  rcaronucircumflex: [
    0,
    0,
    15,
    15
  ],
  rcaronudieresis: [
    0,
    0,
    15,
    15
  ],
  rcaronugrave: [
    0,
    0,
    15,
    15
  ],
  rcaronuhungarumlaut: [
    0,
    0,
    15,
    15
  ],
  rcaronumacron: [
    0,
    0,
    15,
    15
  ],
  rcaronuogonek: [
    0,
    0,
    15,
    15
  ],
  rcaronuring: [
    0,
    0,
    15,
    15
  ],
  rcommaaccenta: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcommaaccentaacute: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcommaaccentabreve: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcommaaccentacircumflex: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcommaaccentadieresis: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcommaaccentagrave: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcommaaccentamacron: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcommaaccentaogonek: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcommaaccentaring: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcommaaccentatilde: [
    0,
    0,
    -10,
    -10,
    0,
    0,
    -15
  ],
  rcommaaccentcolon: [
    0,
    0,
    30,
    30
  ],
  rcommaaccenti: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentiacute: [
    0,
    0,
    15,
    15
  ],
  rcommaaccenticircumflex: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentidieresis: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentigrave: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentimacron: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentiogonek: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentk: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentkcommaaccent: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentl: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentlacute: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentlcommaaccent: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentlslash: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentm: [
    0,
    0,
    25,
    25
  ],
  rcommaaccentn: [
    0,
    0,
    25,
    25,
    -15
  ],
  rcommaaccentnacute: [
    0,
    0,
    25,
    25,
    -15
  ],
  rcommaaccentncaron: [
    0,
    0,
    25,
    25,
    -15
  ],
  rcommaaccentncommaaccent: [
    0,
    0,
    25,
    25,
    -15
  ],
  rcommaaccentntilde: [
    0,
    0,
    25,
    25,
    -15
  ],
  rcommaaccentp: [
    0,
    0,
    30,
    30,
    -10
  ],
  rcommaaccentsemicolon: [
    0,
    0,
    30,
    30
  ],
  rcommaaccentu: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentuacute: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentucircumflex: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentudieresis: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentugrave: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentuhungarumlaut: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentumacron: [
    0,
    0,
    15,
    15
  ],
  rcommaaccentuogonek: [
    0,
    0,
    15,
    15
  ],
  rcommaaccenturing: [
    0,
    0,
    15,
    15
  ],
  scomma: [
    0,
    0,
    -15,
    -15
  ],
  speriod: [
    0,
    0,
    -15,
    -15
  ],
  sacutecomma: [
    0,
    0,
    -15,
    -15
  ],
  sacuteperiod: [
    0,
    0,
    -15,
    -15
  ],
  scaroncomma: [
    0,
    0,
    -15,
    -15
  ],
  scaronperiod: [
    0,
    0,
    -15,
    -15
  ],
  scedillacomma: [
    0,
    0,
    -15,
    -15
  ],
  scedillaperiod: [
    0,
    0,
    -15,
    -15
  ],
  scommaaccentcomma: [
    0,
    0,
    -15,
    -15
  ],
  scommaaccentperiod: [
    0,
    0,
    -15,
    -15
  ],
  ve: [
    0,
    0,
    -25,
    -25,
    -10,
    -15,
    0,
    -15
  ],
  veacute: [
    0,
    0,
    -25,
    -25,
    -10,
    -15,
    0,
    -15
  ],
  vecaron: [
    0,
    0,
    -25,
    -25,
    -10,
    -15,
    0,
    -15
  ],
  vecircumflex: [
    0,
    0,
    -25,
    -25,
    -10,
    -15,
    0,
    -15
  ],
  vedieresis: [
    0,
    0,
    -25,
    -25,
    -10,
    -15,
    0,
    -15
  ],
  vedotaccent: [
    0,
    0,
    -25,
    -25,
    -10,
    -15,
    0,
    -15
  ],
  vegrave: [
    0,
    0,
    -25,
    -25,
    -10,
    -15,
    0,
    -15
  ],
  vemacron: [
    0,
    0,
    -25,
    -25,
    -10,
    -15,
    0,
    -15
  ],
  veogonek: [
    0,
    0,
    -25,
    -25,
    -10,
    -15,
    0,
    -15
  ],
  wa: [
    0,
    0,
    -15,
    -15,
    0,
    -10,
    0,
    -10
  ],
  waacute: [
    0,
    0,
    -15,
    -15,
    0,
    -10,
    0,
    -10
  ],
  wabreve: [
    0,
    0,
    -15,
    -15,
    0,
    -10,
    0,
    -10
  ],
  wacircumflex: [
    0,
    0,
    -15,
    -15,
    0,
    -10,
    0,
    -10
  ],
  wadieresis: [
    0,
    0,
    -15,
    -15,
    0,
    -10,
    0,
    -10
  ],
  wagrave: [
    0,
    0,
    -15,
    -15,
    0,
    -10,
    0,
    -10
  ],
  wamacron: [
    0,
    0,
    -15,
    -15,
    0,
    -10,
    0,
    -10
  ],
  waogonek: [
    0,
    0,
    -15,
    -15,
    0,
    -10,
    0,
    -10
  ],
  waring: [
    0,
    0,
    -15,
    -15,
    0,
    -10,
    0,
    -10
  ],
  watilde: [
    0,
    0,
    -15,
    -15,
    0,
    -10,
    0,
    -10
  ],
  we: [
    0,
    0,
    -10,
    -10,
    0,
    -10
  ],
  weacute: [
    0,
    0,
    -10,
    -10,
    0,
    -10
  ],
  wecaron: [
    0,
    0,
    -10,
    -10,
    0,
    -10
  ],
  wecircumflex: [
    0,
    0,
    -10,
    -10,
    0,
    -10
  ],
  wedieresis: [
    0,
    0,
    -10,
    -10,
    0,
    -10
  ],
  wedotaccent: [
    0,
    0,
    -10,
    -10,
    0,
    -10
  ],
  wegrave: [
    0,
    0,
    -10,
    -10,
    0,
    -10
  ],
  wemacron: [
    0,
    0,
    -10,
    -10,
    0,
    -10
  ],
  weogonek: [
    0,
    0,
    -10,
    -10,
    0,
    -10
  ],
  zo: [
    0,
    0,
    -15,
    -15
  ],
  zoacute: [
    0,
    0,
    -15,
    -15
  ],
  zocircumflex: [
    0,
    0,
    -15,
    -15
  ],
  zodieresis: [
    0,
    0,
    -15,
    -15
  ],
  zograve: [
    0,
    0,
    -15,
    -15
  ],
  zohungarumlaut: [
    0,
    0,
    -15,
    -15
  ],
  zomacron: [
    0,
    0,
    -15,
    -15
  ],
  zoslash: [
    0,
    0,
    -15,
    -15
  ],
  zotilde: [
    0,
    0,
    -15,
    -15
  ],
  zacuteo: [
    0,
    0,
    -15,
    -15
  ],
  zacuteoacute: [
    0,
    0,
    -15,
    -15
  ],
  zacuteocircumflex: [
    0,
    0,
    -15,
    -15
  ],
  zacuteodieresis: [
    0,
    0,
    -15,
    -15
  ],
  zacuteograve: [
    0,
    0,
    -15,
    -15
  ],
  zacuteohungarumlaut: [
    0,
    0,
    -15,
    -15
  ],
  zacuteomacron: [
    0,
    0,
    -15,
    -15
  ],
  zacuteoslash: [
    0,
    0,
    -15,
    -15
  ],
  zacuteotilde: [
    0,
    0,
    -15,
    -15
  ],
  zcarono: [
    0,
    0,
    -15,
    -15
  ],
  zcaronoacute: [
    0,
    0,
    -15,
    -15
  ],
  zcaronocircumflex: [
    0,
    0,
    -15,
    -15
  ],
  zcaronodieresis: [
    0,
    0,
    -15,
    -15
  ],
  zcaronograve: [
    0,
    0,
    -15,
    -15
  ],
  zcaronohungarumlaut: [
    0,
    0,
    -15,
    -15
  ],
  zcaronomacron: [
    0,
    0,
    -15,
    -15
  ],
  zcaronoslash: [
    0,
    0,
    -15,
    -15
  ],
  zcaronotilde: [
    0,
    0,
    -15,
    -15
  ],
  zdotaccento: [
    0,
    0,
    -15,
    -15
  ],
  zdotaccentoacute: [
    0,
    0,
    -15,
    -15
  ],
  zdotaccentocircumflex: [
    0,
    0,
    -15,
    -15
  ],
  zdotaccentodieresis: [
    0,
    0,
    -15,
    -15
  ],
  zdotaccentograve: [
    0,
    0,
    -15,
    -15
  ],
  zdotaccentohungarumlaut: [
    0,
    0,
    -15,
    -15
  ],
  zdotaccentomacron: [
    0,
    0,
    -15,
    -15
  ],
  zdotaccentoslash: [
    0,
    0,
    -15,
    -15
  ],
  zdotaccentotilde: [
    0,
    0,
    -15,
    -15
  ],
  Ap: [
    0,
    0,
    0,
    0,
    -25
  ],
  Aquoteright: [
    0,
    0,
    0,
    0,
    -74,
    -74,
    -37,
    -111
  ],
  Aacutep: [
    0,
    0,
    0,
    0,
    -25
  ],
  Aacutequoteright: [
    0,
    0,
    0,
    0,
    -74,
    -74,
    -37,
    -111
  ],
  Abrevep: [
    0,
    0,
    0,
    0,
    -25
  ],
  Abrevequoteright: [
    0,
    0,
    0,
    0,
    -74,
    -74,
    -37,
    -111
  ],
  Acircumflexp: [
    0,
    0,
    0,
    0,
    -25
  ],
  Acircumflexquoteright: [
    0,
    0,
    0,
    0,
    -74,
    -74,
    -37,
    -111
  ],
  Adieresisp: [
    0,
    0,
    0,
    0,
    -25
  ],
  Adieresisquoteright: [
    0,
    0,
    0,
    0,
    -74,
    -74,
    -37,
    -111
  ],
  Agravep: [
    0,
    0,
    0,
    0,
    -25
  ],
  Agravequoteright: [
    0,
    0,
    0,
    0,
    -74,
    -74,
    -37,
    -111
  ],
  Amacronp: [
    0,
    0,
    0,
    0,
    -25
  ],
  Amacronquoteright: [
    0,
    0,
    0,
    0,
    -74,
    -74,
    -37,
    -111
  ],
  Aogonekp: [
    0,
    0,
    0,
    0,
    -25
  ],
  Aogonekquoteright: [
    0,
    0,
    0,
    0,
    -74,
    -74,
    -37,
    -111
  ],
  Aringp: [
    0,
    0,
    0,
    0,
    -25
  ],
  Aringquoteright: [
    0,
    0,
    0,
    0,
    -74,
    -74,
    -37,
    -111
  ],
  Atildep: [
    0,
    0,
    0,
    0,
    -25
  ],
  Atildequoteright: [
    0,
    0,
    0,
    0,
    -74,
    -74,
    -37,
    -111
  ],
  Je: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jeacute: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jecaron: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jecircumflex: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jedieresis: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jedotaccent: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jegrave: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jemacron: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jeogonek: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jo: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Joacute: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jocircumflex: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jodieresis: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jograve: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Johungarumlaut: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jomacron: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Joslash: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  Jotilde: [
    0,
    0,
    0,
    0,
    -15,
    -40,
    -25
  ],
  NA: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NAacute: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NAbreve: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NAcircumflex: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NAdieresis: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NAgrave: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NAmacron: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NAogonek: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NAring: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NAtilde: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NacuteA: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NacuteAacute: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NacuteAbreve: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NacuteAcircumflex: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NacuteAdieresis: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NacuteAgrave: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NacuteAmacron: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NacuteAogonek: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NacuteAring: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NacuteAtilde: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcaronA: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcaronAacute: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcaronAbreve: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcaronAcircumflex: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcaronAdieresis: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcaronAgrave: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcaronAmacron: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcaronAogonek: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcaronAring: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcaronAtilde: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcommaaccentA: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcommaaccentAacute: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcommaaccentAbreve: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcommaaccentAcircumflex: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcommaaccentAdieresis: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcommaaccentAgrave: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcommaaccentAmacron: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcommaaccentAogonek: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcommaaccentAring: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NcommaaccentAtilde: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NtildeA: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NtildeAacute: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NtildeAbreve: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NtildeAcircumflex: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NtildeAdieresis: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NtildeAgrave: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NtildeAmacron: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NtildeAogonek: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NtildeAring: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  NtildeAtilde: [
    0,
    0,
    0,
    0,
    -20,
    -30,
    -27,
    -35
  ],
  Ti: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -35
  ],
  Tiacute: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -35
  ],
  Tiogonek: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -35
  ],
  Tcaroni: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -35
  ],
  Tcaroniacute: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -35
  ],
  Tcaroniogonek: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -35
  ],
  Tcommaaccenti: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -35
  ],
  Tcommaaccentiacute: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -35
  ],
  Tcommaaccentiogonek: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -35
  ],
  Vi: [
    0,
    0,
    0,
    0,
    -37,
    -55,
    -74,
    -60
  ],
  Viacute: [
    0,
    0,
    0,
    0,
    -37,
    -55,
    -74,
    -60
  ],
  Vicircumflex: [
    0,
    0,
    0,
    0,
    -37,
    0,
    -34,
    -20
  ],
  Vidieresis: [
    0,
    0,
    0,
    0,
    -37,
    0,
    -34,
    -20
  ],
  Vigrave: [
    0,
    0,
    0,
    0,
    -37,
    0,
    -34,
    -20
  ],
  Vimacron: [
    0,
    0,
    0,
    0,
    -37,
    0,
    -34,
    -20
  ],
  Viogonek: [
    0,
    0,
    0,
    0,
    -37,
    -55,
    -74,
    -60
  ],
  Wi: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -40
  ],
  Wiacute: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -40
  ],
  Wiogonek: [
    0,
    0,
    0,
    0,
    -18,
    -37,
    -55,
    -40
  ],
  fi: [
    0,
    0,
    0,
    0,
    -25,
    0,
    -20,
    -20
  ],
  gperiod: [
    0,
    0,
    0,
    0,
    -15,
    0,
    -15
  ],
  gbreveperiod: [
    0,
    0,
    0,
    0,
    -15,
    0,
    -15
  ],
  gcommaaccentperiod: [
    0,
    0,
    0,
    0,
    -15,
    0,
    -15
  ],
  iv: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -25
  ],
  iacutev: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -25
  ],
  icircumflexv: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -25
  ],
  idieresisv: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -25
  ],
  igravev: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -25
  ],
  imacronv: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -25
  ],
  iogonekv: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -25
  ],
  ky: [
    0,
    0,
    0,
    0,
    -15,
    0,
    -10,
    -15
  ],
  kyacute: [
    0,
    0,
    0,
    0,
    -15,
    0,
    -10,
    -15
  ],
  kydieresis: [
    0,
    0,
    0,
    0,
    -15,
    0,
    -10,
    -15
  ],
  kcommaaccenty: [
    0,
    0,
    0,
    0,
    -15,
    0,
    -10,
    -15
  ],
  kcommaaccentyacute: [
    0,
    0,
    0,
    0,
    -15,
    0,
    -10,
    -15
  ],
  kcommaaccentydieresis: [
    0,
    0,
    0,
    0,
    -15,
    0,
    -10,
    -15
  ],
  quotedblleftA: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quotedblleftAacute: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quotedblleftAbreve: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quotedblleftAcircumflex: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quotedblleftAdieresis: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quotedblleftAgrave: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quotedblleftAmacron: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quotedblleftAogonek: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quotedblleftAring: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quotedblleftAtilde: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quoteleftA: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quoteleftAacute: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quoteleftAbreve: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quoteleftAcircumflex: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quoteleftAdieresis: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quoteleftAgrave: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quoteleftAmacron: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quoteleftAogonek: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quoteleftAring: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  quoteleftAtilde: [
    0,
    0,
    0,
    0,
    -10,
    0,
    0,
    -80
  ],
  re: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  reacute: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  recaron: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  recircumflex: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  redieresis: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  redotaccent: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  regrave: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  remacron: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  reogonek: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  racutee: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  racuteeacute: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  racuteecaron: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  racuteecircumflex: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  racuteedieresis: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  racuteedotaccent: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  racuteegrave: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  racuteemacron: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  racuteeogonek: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcarone: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaroneacute: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaronecaron: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaronecircumflex: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaronedieresis: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaronedotaccent: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaronegrave: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaronemacron: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcaroneogonek: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccente: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccenteacute: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccentecaron: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccentecircumflex: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccentedieresis: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccentedotaccent: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccentegrave: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccentemacron: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  rcommaaccenteogonek: [
    0,
    0,
    0,
    0,
    -18,
    0,
    -37
  ],
  spaceA: [
    0,
    0,
    0,
    0,
    -55,
    -37,
    -18,
    -55
  ],
  spaceAacute: [
    0,
    0,
    0,
    0,
    -55,
    -37,
    -18,
    -55
  ],
  spaceAbreve: [
    0,
    0,
    0,
    0,
    -55,
    -37,
    -18,
    -55
  ],
  spaceAcircumflex: [
    0,
    0,
    0,
    0,
    -55,
    -37,
    -18,
    -55
  ],
  spaceAdieresis: [
    0,
    0,
    0,
    0,
    -55,
    -37,
    -18,
    -55
  ],
  spaceAgrave: [
    0,
    0,
    0,
    0,
    -55,
    -37,
    -18,
    -55
  ],
  spaceAmacron: [
    0,
    0,
    0,
    0,
    -55,
    -37,
    -18,
    -55
  ],
  spaceAogonek: [
    0,
    0,
    0,
    0,
    -55,
    -37,
    -18,
    -55
  ],
  spaceAring: [
    0,
    0,
    0,
    0,
    -55,
    -37,
    -18,
    -55
  ],
  spaceAtilde: [
    0,
    0,
    0,
    0,
    -55,
    -37,
    -18,
    -55
  ],
  Fi: [
    0,
    0,
    0,
    0,
    0,
    -40,
    -45
  ],
  Fiacute: [
    0,
    0,
    0,
    0,
    0,
    -40,
    -45
  ],
  Ficircumflex: [
    0,
    0,
    0,
    0,
    0,
    -40,
    -45
  ],
  Fidieresis: [
    0,
    0,
    0,
    0,
    0,
    -40,
    -45
  ],
  Figrave: [
    0,
    0,
    0,
    0,
    0,
    -40,
    -45
  ],
  Fimacron: [
    0,
    0,
    0,
    0,
    0,
    -40,
    -45
  ],
  Fiogonek: [
    0,
    0,
    0,
    0,
    0,
    -40,
    -45
  ],
  eb: [
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  eacuteb: [
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ecaronb: [
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ecircumflexb: [
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  edieresisb: [
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  edotaccentb: [
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  egraveb: [
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  emacronb: [
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  eogonekb: [
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ff: [
    0,
    0,
    0,
    0,
    0,
    -18,
    -18,
    -25
  ],
  quoterightt: [
    0,
    0,
    0,
    0,
    0,
    -37,
    -30,
    -18
  ],
  quoterighttcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    -37,
    -30,
    -18
  ],
  Yicircumflex: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Yidieresis: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Yigrave: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Yimacron: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Yacuteicircumflex: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Yacuteidieresis: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Yacuteigrave: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Yacuteimacron: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Ydieresisicircumflex: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Ydieresisidieresis: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Ydieresisigrave: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  Ydieresisimacron: [
    0,
    0,
    0,
    0,
    0,
    0,
    -34
  ],
  eg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  egbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  egcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  eacuteg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  eacutegbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  eacutegcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  ecarong: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  ecarongbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  ecarongcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  ecircumflexg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  ecircumflexgbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  ecircumflexgcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  edieresisg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  edieresisgbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  edieresisgcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  edotaccentg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  edotaccentgbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  edotaccentgcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  egraveg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  egravegbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  egravegcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  emacrong: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  emacrongbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  emacrongcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  eogonekg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  eogonekgbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  eogonekgcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -40,
    -15
  ],
  fiogonek: [
    0,
    0,
    0,
    0,
    0,
    0,
    -20
  ],
  gcomma: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  gbrevecomma: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  gcommaaccentcomma: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  og: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ogbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ogcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  oacuteg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  oacutegbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  oacutegcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ocircumflexg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ocircumflexgbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ocircumflexgcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  odieresisg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  odieresisgbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  odieresisgcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ograveg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ogravegbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ogravegcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ohungarumlautg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ohungarumlautgbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  ohungarumlautgcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  omacrong: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  omacrongbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  omacrongcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  otildeg: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  otildegbreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  otildegcommaaccent: [
    0,
    0,
    0,
    0,
    0,
    0,
    -10
  ],
  fiacute: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -20
  ],
  ga: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gaacute: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gabreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gacircumflex: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gadieresis: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gagrave: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gamacron: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gaogonek: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  garing: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gatilde: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gbrevea: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gbreveaacute: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gbreveabreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gbreveacircumflex: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gbreveadieresis: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gbreveagrave: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gbreveamacron: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gbreveaogonek: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gbrevearing: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gbreveatilde: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gcommaaccenta: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gcommaaccentaacute: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gcommaaccentabreve: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gcommaaccentacircumflex: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gcommaaccentadieresis: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gcommaaccentagrave: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gcommaaccentamacron: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gcommaaccentaogonek: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gcommaaccentaring: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ],
  gcommaaccentatilde: [
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    -5
  ]
}, AD = {
  attributes: wD,
  glyphWidths: yD,
  kernPairs: _D
};
const ED = (t) => [t.FontName, {
  attributes: t,
  glyphWidths: {},
  kernPairs: {}
}], CD = (t) => {
  const {
    attributes: e,
    glyphWidths: r,
    kernPairs: i
  } = t, n = e.map(ED);
  return Object.keys(r).forEach((a) => {
    r[a].forEach((s, o) => {
      s && (n[o][1].glyphWidths[a] = s);
    });
  }), Object.keys(i).forEach((a) => {
    i[a].forEach((s, o) => {
      s && (n[o][1].kernPairs[a] = s);
    });
  }), Object.fromEntries(n);
}, A3 = CD(AD), SD = (t) => class extends t {
  constructor(r, i, n) {
    super(), this.document = r, this.name = i, this.id = n, this.font = qu.fromJson(A3[this.name]), this.ascender = this.font.ascender, this.descender = this.font.descender, this.bbox = this.font.bbox, this.lineGap = this.font.lineGap;
  }
  embed() {
    return this.dictionary.data = {
      Type: "Font",
      BaseFont: this.name,
      Subtype: "Type1",
      Encoding: "WinAnsiEncoding"
    }, this.dictionary.end();
  }
  encode(r) {
    const i = this.font.encodeText(r), n = this.font.glyphsForString(`${r}`), a = this.font.advancesForGlyphs(n), s = [];
    for (let o = 0; o < n.length; o++) {
      const c = n[o];
      s.push({
        xAdvance: a[o],
        yAdvance: 0,
        xOffset: 0,
        yOffset: 0,
        advanceWidth: this.font.widthOfGlyph(c)
      });
    }
    return [i, s];
  }
  encodeGlyphs(r) {
    const i = [];
    for (let n of Array.from(r))
      i.push(`00${n.id.toString(16)}`.slice(-2));
    return i;
  }
  widthOfString(r, i) {
    const n = this.font.glyphsForString(`${r}`), a = this.font.advancesForGlyphs(n);
    let s = 0;
    for (let c of Array.from(a))
      s += c;
    const o = i / 1e3;
    return s * o;
  }
  static isStandardFont(r) {
    return r in A3;
  }
}, M1 = function() {
  for (var t = arguments.length, e = new Array(t), r = 0; r < t; r++)
    e[r] = arguments[r];
  return Array.from(e).map((n) => `0000${n.toString(16)}`.slice(-4)).join("");
}, TD = (t) => class extends t {
  constructor(r, i, n) {
    super(), this.document = r, this.font = i, this.id = n, this.subset = this.font.createSubset(), this.unicode = [[0]], this.widths = [this.font.getGlyph(0).advanceWidth], this.name = this.font.postscriptName, this.scale = 1e3 / this.font.unitsPerEm, this.ascender = this.font.ascent * this.scale, this.descender = this.font.descent * this.scale, this.xHeight = this.font.xHeight * this.scale, this.capHeight = this.font.capHeight * this.scale, this.lineGap = this.font.lineGap * this.scale, this.bbox = this.font.bbox, this.layoutCache = /* @__PURE__ */ Object.create(null);
  }
  layoutRun(r, i) {
    const n = this.font.layout(r, i, void 0, void 0, "ltr");
    for (let a = 0; a < n.positions.length; a++) {
      const s = n.positions[a];
      for (let o in s)
        s[o] *= this.scale;
      s.advanceWidth = n.glyphs[a].advanceWidth * this.scale;
    }
    return n;
  }
  layoutCached(r) {
    let i;
    if (i = this.layoutCache[r])
      return i;
    const n = this.layoutRun(r);
    return this.layoutCache[r] = n, n;
  }
  layout(r, i, n) {
    if (n == null && (n = !1), i)
      return this.layoutRun(r, i);
    const a = n ? null : [], s = n ? null : [];
    let o = 0, c = 0, l = 0;
    for (; l <= r.length; ) {
      let f;
      if (l === r.length && c < l || (f = r.charAt(l), [" ", "	"].includes(f))) {
        const u = this.layoutCached(r.slice(c, ++l));
        n || (a.push(...Array.from(u.glyphs || [])), s.push(...Array.from(u.positions || []))), o += u.advanceWidth, c = l;
      } else
        l++;
    }
    return {
      glyphs: a,
      positions: s,
      advanceWidth: o
    };
  }
  encode(r, i) {
    const {
      glyphs: n,
      positions: a
    } = this.layout(r, i), s = [];
    for (let o = 0; o < n.length; o++) {
      const c = n[o], l = this.subset.includeGlyph(c.id);
      s.push(`0000${l.toString(16)}`.slice(-4)), this.widths[l] == null && (this.widths[l] = c.advanceWidth * this.scale), this.unicode[l] == null && (this.unicode[l] = c.codePoints);
    }
    return [s, a];
  }
  encodeGlyphs(r) {
    const i = [];
    for (let n = 0; n < r.length; n++) {
      const a = r[n], s = this.subset.includeGlyph(a.id);
      i.push(`0000${s.toString(16)}`.slice(-4)), this.widths[s] == null && (this.widths[s] = a.advanceWidth * this.scale), this.unicode[s] == null && (this.unicode[s] = a.codePoints);
    }
    return i;
  }
  widthOfString(r, i, n) {
    const a = this.layout(r, n, !0).advanceWidth, s = i / 1e3;
    return a * s;
  }
  embed() {
    const r = this.subset.cff != null, i = this.document.ref();
    r && (i.data.Subtype = "CIDFontType0C"), i.end(this.subset.encode());
    const n = ((this.font["OS/2"] != null ? this.font["OS/2"].sFamilyClass : void 0) || 0) >> 8;
    let a = 0;
    this.font.post.isFixedPitch && (a |= 1), 1 <= n && n <= 7 && (a |= 2), a |= 4, n === 10 && (a |= 8), this.font.head.macStyle.italic && (a |= 64);
    const o = [0, 1, 2, 3, 4, 5].map(() => String.fromCharCode(Math.random() * 26 + 65)).join("") + "+" + this.font.postscriptName, {
      bbox: c
    } = this.font, l = this.document.ref({
      Type: "FontDescriptor",
      FontName: o,
      Flags: a,
      FontBBox: [c.minX * this.scale, c.minY * this.scale, c.maxX * this.scale, c.maxY * this.scale],
      ItalicAngle: this.font.italicAngle,
      Ascent: this.ascender,
      Descent: this.descender,
      CapHeight: (this.font.capHeight || this.font.ascent) * this.scale,
      XHeight: (this.font.xHeight || 0) * this.scale,
      StemV: 0
    });
    r ? l.data.FontFile3 = i : l.data.FontFile2 = i, l.end();
    const f = {
      Type: "Font",
      Subtype: "CIDFontType0",
      BaseFont: o,
      CIDSystemInfo: {
        Registry: new String("Adobe"),
        Ordering: new String("Identity"),
        Supplement: 0
      },
      FontDescriptor: l,
      W: [0, this.widths]
    };
    r || (f.Subtype = "CIDFontType2", f.CIDToGIDMap = "Identity");
    const u = this.document.ref(f);
    return u.end(), this.dictionary.data = {
      Type: "Font",
      Subtype: "Type0",
      BaseFont: o,
      Encoding: "Identity-H",
      DescendantFonts: [u],
      ToUnicode: this.toUnicodeCmap()
    }, this.dictionary.end();
  }
  // Maps the glyph ids encoded in the PDF back to unicode strings
  // Because of ligature substitutions and the like, there may be one or more
  // unicode characters represented by each glyph.
  toUnicodeCmap() {
    const r = this.document.ref();
    let i = [], n = `/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo <<
  /Registry (Adobe)
  /Ordering (UCS)
  /Supplement 0
>> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000><ffff>
endcodespacerange`;
    for (let [a, s] of this.unicode.entries()) {
      const o = [];
      i.length >= 100 && (n += `
` + i.length + ` beginbfchar
` + i.join(`
`) + `
endbfchar`, i = []);
      for (let c of s)
        c > 65535 && (c -= 65536, o.push(M1(c >>> 10 & 1023 | 55296)), c = 56320 | c & 1023), o.push(M1(c));
      i.push("<" + M1(a) + "><" + o.join(" ") + ">");
    }
    return i.length && (n += `
` + i.length + ` beginbfchar
` + i.join(`
`) + `
endbfchar
`), n += `endcmap
CMapName currentdict /CMap defineresource pop
end
end`, r.end(n), r;
  }
};
class Vu {
  static open(e, r, i, n) {
    let a;
    if (typeof r == "string") {
      if (E3.isStandardFont(r))
        return new E3(e, r, n);
      throw new Error(`Can't open ${r} in browser build`);
    } else r instanceof Uint8Array ? a = j1(r, i) : r instanceof ArrayBuffer ? a = j1(new Uint8Array(r), i) : typeof r == "object" && (a = r);
    if (a == null)
      throw new Error("Not a supported font format or standard PDF font.");
    return new kD(e, a, n);
  }
  encode() {
    throw new Error("Must be implemented by subclasses");
  }
  widthOfString() {
    throw new Error("Must be implemented by subclasses");
  }
  ref() {
    return this.dictionary != null ? this.dictionary : this.dictionary = this.document.ref();
  }
  finalize() {
    if (!(this.embedded || this.dictionary == null))
      return this.embed(), this.embedded = !0;
  }
  embed() {
    throw new Error("Must be implemented by subclasses");
  }
  lineHeight(e, r) {
    r == null && (r = !1);
    const i = r ? this.lineGap : 0;
    return (this.ascender + i - this.descender) / 1e3 * e;
  }
}
const E3 = SD(Vu), kD = TD(Vu);
var FD = {
  initFonts() {
    return this._fontFamilies = {}, this._fontCount = 0, this._fontSize = 12, this._font = null, this._registeredFonts = {}, this.font("Helvetica");
  },
  font(t, e, r) {
    let i, n;
    if (typeof e == "number" && (r = e, e = null), typeof t == "string" && this._registeredFonts[t] ? (i = t, {
      src: t,
      family: e
    } = this._registeredFonts[t]) : (i = e || t, typeof i != "string" && (i = null)), r != null && this.fontSize(r), n = this._fontFamilies[i])
      return this._font = n, this;
    const a = `F${++this._fontCount}`;
    return this._font = Vu.open(this, t, e, a), (n = this._fontFamilies[this._font.name]) ? (this._font = n, this) : (i && (this._fontFamilies[i] = this._font), this._font.name && (this._fontFamilies[this._font.name] = this._font), this);
  },
  fontSize(t) {
    return this._fontSize = t, this;
  },
  currentLineHeight(t) {
    return t == null && (t = !1), this._font.lineHeight(this._fontSize, t);
  },
  registerFont(t, e, r) {
    return this._registeredFonts[t] = {
      src: e,
      family: r
    }, this;
  }
};
function Ys(t) {
  return Math.fround(t);
}
const C3 = "­", U1 = "-";
class Af extends Xe {
  constructor(e, r) {
    super(), this.document = e, this.horizontalScaling = r.horizontalScaling || 100, this.indent = (r.indent || 0) * this.horizontalScaling / 100, this.characterSpacing = (r.characterSpacing || 0) * this.horizontalScaling / 100, this.wordSpacing = (r.wordSpacing === 0) * this.horizontalScaling / 100, this.columns = r.columns || 1, this.columnGap = (r.columnGap != null ? r.columnGap : 18) * this.horizontalScaling / 100, this.lineWidth = (r.width * this.horizontalScaling / 100 - this.columnGap * (this.columns - 1)) / this.columns, this.spaceLeft = this.lineWidth, this.startX = this.document.x, this.startY = this.document.y, this.column = 1, this.ellipsis = r.ellipsis, this.continuedX = 0, this.features = r.features, r.height != null ? (this.height = r.height, this.maxY = Ys(this.startY + r.height)) : this.maxY = Ys(this.document.page.maxY()), this.on("firstLine", (i) => {
      const n = this.continuedX || this.indent;
      if (this.document.x += n, this.lineWidth -= n, !i.indentAllLines)
        return this.once("line", () => {
          if (this.document.x -= n, this.lineWidth += n, i.continued && !this.continuedX && (this.continuedX = this.indent), !i.continued)
            return this.continuedX = 0;
        });
    }), this.on("lastLine", (i) => {
      const {
        align: n
      } = i;
      return n === "justify" && (i.align = "left"), this.lastLine = !0, this.once("line", () => (this.document.y += i.paragraphGap || 0, i.align = n, this.lastLine = !1));
    });
  }
  wordWidth(e) {
    return this.document.widthOfString(e, this) + this.characterSpacing + this.wordSpacing;
  }
  canFit(e, r) {
    return e[e.length - 1] != C3 ? r <= this.spaceLeft : r + this.wordWidth(U1) <= this.spaceLeft;
  }
  eachWord(e, r) {
    let i;
    const n = new mg(e);
    let a = null;
    const s = /* @__PURE__ */ Object.create(null);
    for (; i = n.nextBreak(); ) {
      var o;
      let f = e.slice((a != null ? a.position : void 0) || 0, i.position), u = s[f] != null ? s[f] : s[f] = this.wordWidth(f);
      if (u > this.lineWidth + this.continuedX) {
        let h = a;
        const d = {};
        for (; f.length; ) {
          var c, l;
          u > this.spaceLeft ? (c = Math.ceil(this.spaceLeft / (u / f.length)), u = this.wordWidth(f.slice(0, c)), l = u <= this.spaceLeft && c < f.length) : c = f.length;
          let p = u > this.spaceLeft && c > 0;
          for (; p || l; )
            p ? (u = this.wordWidth(f.slice(0, --c)), p = u > this.spaceLeft && c > 0) : (u = this.wordWidth(f.slice(0, ++c)), p = u > this.spaceLeft && c > 0, l = u <= this.spaceLeft && c < f.length);
          if (c === 0 && this.spaceLeft === this.lineWidth && (c = 1), d.required = i.required || c < f.length, o = r(f.slice(0, c), u, d, h), h = {
            required: !1
          }, f = f.slice(c), u = this.wordWidth(f), o === !1)
            break;
        }
      } else
        o = r(f, u, i, a);
      if (o === !1)
        break;
      a = i;
    }
  }
  wrap(e, r) {
    this.horizontalScaling = r.horizontalScaling || 100, r.indent != null && (this.indent = r.indent * this.horizontalScaling / 100), r.characterSpacing != null && (this.characterSpacing = r.characterSpacing * this.horizontalScaling / 100), r.wordSpacing != null && (this.wordSpacing = r.wordSpacing * this.horizontalScaling / 100), r.ellipsis != null && (this.ellipsis = r.ellipsis);
    const i = this.document.y + this.document.currentLineHeight(!0);
    (this.document.y > this.maxY || i > this.maxY) && this.nextSection();
    let n = "", a = 0, s = 0, o = 0, {
      y: c
    } = this.document;
    const l = () => (r.textWidth = a + this.wordSpacing * (s - 1), r.wordCount = s, r.lineWidth = this.lineWidth, {
      y: c
    } = this.document, this.emit("line", n, r, this), o++);
    return this.emit("sectionStart", r, this), this.eachWord(e, (f, u, h, d) => {
      if ((d == null || d.required) && (this.emit("firstLine", r, this), this.spaceLeft = this.lineWidth), this.canFit(f, u) && (n += f, a += u, s++), h.required || !this.canFit(f, u)) {
        const p = this.document.currentLineHeight(!0);
        if (this.height != null && this.ellipsis && Ys(this.document.y + p * 2) > this.maxY && this.column >= this.columns) {
          for (this.ellipsis === !0 && (this.ellipsis = "…"), n = n.replace(/\s+$/, ""), a = this.wordWidth(n + this.ellipsis); n && a > this.lineWidth; )
            n = n.slice(0, -1).replace(/\s+$/, ""), a = this.wordWidth(n + this.ellipsis);
          a <= this.lineWidth && (n = n + this.ellipsis), a = this.wordWidth(n);
        }
        return h.required && (u > this.spaceLeft && (l(), n = f, a = u, s = 1), this.emit("lastLine", r, this)), n[n.length - 1] == C3 && (n = n.slice(0, -1) + U1, this.spaceLeft -= this.wordWidth(U1)), l(), Ys(this.document.y + p) > this.maxY && !this.nextSection() ? (s = 0, n = "", !1) : h.required ? (this.spaceLeft = this.lineWidth, n = "", a = 0, s = 0) : (this.spaceLeft = this.lineWidth - u, n = f, a = u, s = 1);
      } else
        return this.spaceLeft -= u;
    }), s > 0 && (this.emit("lastLine", r, this), l()), this.emit("sectionEnd", r, this), r.continued === !0 ? (o > 1 && (this.continuedX = 0), this.continuedX += r.textWidth || 0, this.document.y = c) : this.document.x = this.startX;
  }
  nextSection(e) {
    if (this.emit("sectionEnd", e, this), ++this.column > this.columns) {
      if (this.height != null)
        return !1;
      this.document.continueOnNewPage(), this.column = 1, this.startY = this.document.page.margins.top, this.maxY = this.document.page.maxY(), this.document.x = this.startX, this.document._fillColor && this.document.fillColor(...this.document._fillColor), this.emit("pageBreak", e, this);
    } else
      this.document.x += this.lineWidth + this.columnGap, this.document.y = this.startY, this.emit("columnBreak", e, this);
    return this.emit("sectionStart", e, this), !0;
  }
}
const {
  number: gr
} = at;
var OD = {
  initText() {
    return this._line = this._line.bind(this), this.x = 0, this.y = 0, this._lineGap = 0;
  },
  lineGap(t) {
    return this._lineGap = t, this;
  },
  moveDown(t) {
    return t == null && (t = 1), this.y += this.currentLineHeight(!0) * t + this._lineGap, this;
  },
  moveUp(t) {
    return t == null && (t = 1), this.y -= this.currentLineHeight(!0) * t + this._lineGap, this;
  },
  _text(t, e, r, i, n) {
    i = this._initOptions(e, r, i), t = t == null ? "" : `${t}`, i.wordSpacing && (t = t.replace(/\s{2,}/g, " "));
    const a = () => {
      i.structParent && i.structParent.add(this.struct(i.structType || "P", [this.markStructureContent(i.structType || "P")]));
    };
    if (i.rotation !== 0 && (this.save(), this.rotate(-i.rotation, {
      origin: [this.x, this.y]
    })), i.width) {
      let s = this._wrapper;
      s || (s = new Af(this, i), s.on("line", n), s.on("firstLine", a)), this._wrapper = i.continued ? s : null, this._textOptions = i.continued ? i : null, s.wrap(t, i);
    } else
      for (let s of t.split(`
`))
        a(), n(s, i);
    return i.rotation !== 0 && this.restore(), this;
  },
  text(t, e, r, i) {
    return this._text(t, e, r, i, this._line);
  },
  widthOfString(t, e) {
    e === void 0 && (e = {});
    const r = e.horizontalScaling || 100;
    return (this._font.widthOfString(t, this._fontSize, e.features) + (e.characterSpacing || 0) * (t.length - 1)) * r / 100;
  },
  /**
   * Compute the bounding box of a string
   * based on what will actually be rendered by `doc.text()`
   *
   * @param string - The string
   * @param x - X position of text (defaults to this.x)
   * @param y - Y position of text (defaults to this.y)
   * @param options - Any text options (The same you would apply to `doc.text()`)
   * @returns {{x: number, y: number, width: number, height: number}}
   */
  boundsOfString(t, e, r, i) {
  },
  heightOfString(t, e) {
    const {
      x: r,
      y: i
    } = this;
    e = this._initOptions(e), e.height = 1 / 0;
    const n = e.lineGap || this._lineGap || 0;
    this._text(t, this.x, this.y, e, () => this.y += this.currentLineHeight(!0) + n);
    const a = this.y - i;
    return this.x = r, this.y = i, a;
  },
  list(t, e, r, i, n) {
    i = this._initOptions(e, r, i);
    const a = i.listType || "bullet", s = Math.round(this._font.ascender / 1e3 * this._fontSize), o = s / 2, c = i.bulletRadius || s / 3, l = i.textIndent || (a === "bullet" ? c * 5 : s * 2), f = i.bulletIndent || (a === "bullet" ? c * 8 : s * 2);
    let u = 1;
    const h = [], d = [], p = [];
    var m = function(b) {
      let x = 1;
      for (let _ = 0; _ < b.length; _++) {
        const v = b[_];
        Array.isArray(v) ? (u++, m(v), u--) : (h.push(v), d.push(u), a !== "bullet" && p.push(x++));
      }
    };
    m(t);
    const C = function(b) {
      switch (a) {
        case "numbered":
          return `${b}.`;
        case "lettered":
          var x = String.fromCharCode((b - 1) % 26 + 65), _ = Math.floor((b - 1) / 26 + 1), v = Array(_ + 1).join(x);
          return `${v}.`;
      }
    }, A = function(b, x) {
      n = new Af(this, i), n.on("line", this._line), u = 1, n.once("firstLine", () => {
        let _, v, F, S;
        i.structParent && (i.structTypes ? [v, F, S] = i.structTypes : [v, F, S] = ["LI", "Lbl", "LBody"]), v ? (_ = this.struct(v), i.structParent.add(_)) : i.structParent && (_ = i.structParent);
        let D;
        if ((D = d[x++]) !== u) {
          const B = f * (D - u);
          this.x += B, n.lineWidth -= B, u = D;
        }
        switch (_ && (F || S) && _.add(this.struct(F || S, [this.markStructureContent(F || S)])), a) {
          case "bullet":
            this.circle(this.x - l + c, this.y + o, c), this.fill();
            break;
          case "numbered":
          case "lettered":
            var P = C(p[x - 1]);
            this._fragment(P, this.x - l, this.y, i);
            break;
        }
        _ && F && S && _.add(this.struct(S, [this.markStructureContent(S)])), _ && _ !== i.structParent && _.end();
      }), n.on("sectionStart", () => {
        const _ = l + f * (u - 1);
        return this.x += _, n.lineWidth -= _;
      }), n.on("sectionEnd", () => {
        const _ = l + f * (u - 1);
        return this.x -= _, n.lineWidth += _;
      }), n.wrap(b, i);
    };
    for (let b = 0; b < h.length; b++)
      A.call(this, h[b], b);
    return this;
  },
  _initOptions(t, e, r) {
    var i;
    t === void 0 && (t = {}), r === void 0 && (r = {}), typeof t == "object" && (r = t, t = null);
    const n = Object.assign({}, r);
    if (this._textOptions)
      for (let a in this._textOptions) {
        const s = this._textOptions[a];
        a !== "continued" && n[a] === void 0 && (n[a] = s);
      }
    return t != null && (this.x = t), e != null && (this.y = e), n.lineBreak !== !1 && (n.width == null && (n.width = this.page.width - this.x - this.page.margins.right), n.width = Math.max(n.width, 0)), n.columns || (n.columns = 0), n.columnGap == null && (n.columnGap = 18), n.rotation = Number((i = r.rotation) !== null && i !== void 0 ? i : 0) % 360, n.rotation < 0 && (n.rotation += 360), n;
  },
  _line(t, e, r) {
    e === void 0 && (e = {}), this._fragment(t, this.x, this.y, e);
    const i = e.lineGap || this._lineGap || 0;
    return r ? this.y += this.currentLineHeight(!0) + i : this.x += this.widthOfString(t, e);
  },
  _fragment(t, e, r, i) {
    let n, a, s, o, c, l;
    if (t = `${t}`.replace(/\n/g, ""), t.length === 0)
      return;
    const f = i.align || "left";
    let u = i.wordSpacing || 0;
    const h = i.characterSpacing || 0, d = i.horizontalScaling || 100;
    if (i.width)
      switch (f) {
        case "right":
          c = this.widthOfString(t.replace(/\s+$/, ""), i), e += i.lineWidth - c;
          break;
        case "center":
          e += i.lineWidth / 2 - i.textWidth / 2;
          break;
        case "justify":
          l = t.trim().split(/\s+/), c = this.widthOfString(t.replace(/\s+/g, ""), i);
          var p = this.widthOfString(" ") + h;
          u = Math.max(0, (i.lineWidth - c) / Math.max(1, l.length - 1) - p);
          break;
      }
    if (typeof i.baseline == "number")
      n = -i.baseline;
    else {
      switch (i.baseline) {
        case "svg-middle":
          n = 0.5 * this._font.xHeight;
          break;
        case "middle":
        case "svg-central":
          n = 0.5 * (this._font.descender + this._font.ascender);
          break;
        case "bottom":
        case "ideographic":
          n = this._font.descender;
          break;
        case "alphabetic":
          n = 0;
          break;
        case "mathematical":
          n = 0.5 * this._font.ascender;
          break;
        case "hanging":
          n = 0.8 * this._font.ascender;
          break;
        case "top":
          n = this._font.ascender;
          break;
        default:
          n = this._font.ascender;
      }
      n = n / 1e3 * this._fontSize;
    }
    const m = i.textWidth + u * (i.wordCount - 1) + h * (t.length - 1);
    if (i.link != null && this.link(e, r, m, this.currentLineHeight(), i.link), i.goTo != null && this.goTo(e, r, m, this.currentLineHeight(), i.goTo), i.destination != null && this.addNamedDestination(i.destination, "XYZ", e, r, null), i.underline) {
      this.save(), i.stroke || this.strokeColor(...this._fillColor || []);
      const S = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
      this.lineWidth(S);
      let D = r + this.currentLineHeight() - S;
      this.moveTo(e, D), this.lineTo(e + m, D), this.stroke(), this.restore();
    }
    if (i.strike) {
      this.save(), i.stroke || this.strokeColor(...this._fillColor || []);
      const S = this._fontSize < 10 ? 0.5 : Math.floor(this._fontSize / 10);
      this.lineWidth(S);
      let D = r + this.currentLineHeight() / 2;
      this.moveTo(e, D), this.lineTo(e + m, D), this.stroke(), this.restore();
    }
    if (this.save(), i.oblique) {
      let S;
      typeof i.oblique == "number" ? S = -Math.tan(i.oblique * Math.PI / 180) : S = -0.25, this.transform(1, 0, 0, 1, e, r), this.transform(1, 0, S, 1, -S * n, 0), this.transform(1, 0, 0, 1, -e, -r);
    }
    this.transform(1, 0, 0, -1, 0, this.page.height), r = this.page.height - r - n, this.page.fonts[this._font.id] == null && (this.page.fonts[this._font.id] = this._font.ref()), this.addContent("BT"), this.addContent(`1 0 0 1 ${gr(e)} ${gr(r)} Tm`), this.addContent(`/${this._font.id} ${gr(this._fontSize)} Tf`);
    const C = i.fill && i.stroke ? 2 : i.stroke ? 1 : 0;
    if (C && this.addContent(`${C} Tr`), h && this.addContent(`${gr(h)} Tc`), d !== 100 && this.addContent(`${d} Tz`), u) {
      l = t.trim().split(/\s+/), u += this.widthOfString(" ") + h, u *= 1e3 / this._fontSize, a = [], o = [];
      for (let S of l) {
        const [D, P] = this._font.encode(S, i.features);
        a = a.concat(D), o = o.concat(P);
        const B = {}, I = o[o.length - 1];
        for (let w in I) {
          const k = I[w];
          B[w] = k;
        }
        B.xAdvance += u, o[o.length - 1] = B;
      }
    } else
      [a, o] = this._font.encode(t, i.features);
    const A = this._fontSize / 1e3, b = [];
    let x = 0, _ = !1;
    const v = (S) => {
      if (x < S) {
        const D = a.slice(x, S).join(""), P = o[S - 1].xAdvance - o[S - 1].advanceWidth;
        b.push(`<${D}> ${gr(-P)}`);
      }
      return x = S;
    }, F = (S) => {
      if (v(S), b.length > 0)
        return this.addContent(`[${b.join(" ")}] TJ`), b.length = 0;
    };
    for (s = 0; s < o.length; s++) {
      const S = o[s];
      S.xOffset || S.yOffset ? (F(s), this.addContent(`1 0 0 1 ${gr(e + S.xOffset * A)} ${gr(r + S.yOffset * A)} Tm`), F(s + 1), _ = !0) : (_ && (this.addContent(`1 0 0 1 ${gr(e)} ${gr(r)} Tm`), _ = !1), S.xAdvance - S.advanceWidth !== 0 && v(s + 1)), e += S.xAdvance * A;
    }
    return F(s), this.addContent("ET"), this.restore();
  }
};
const DD = {
  1: "DeviceGray",
  3: "DeviceRGB",
  4: "DeviceCMYK"
};
class BD {
  constructor(e, r) {
    if (this.data = e, this.label = r, this.orientation = 1, this.data.readUInt16BE(0) !== 65496)
      throw "SOI not found in JPEG";
    const i = nA.decode(this.data);
    for (let n = 0; n < i.length; n += 1) {
      const a = i[n];
      a.name === "EXIF" && a.entries.orientation && (this.orientation = a.entries.orientation), a.name === "SOF" && (this.bits || (this.bits = a.precision), this.width || (this.width = a.width), this.height || (this.height = a.height), this.colorSpace || (this.colorSpace = DD[a.numberOfComponents]));
    }
    this.obj = null;
  }
  embed(e) {
    if (!this.obj)
      return this.obj = e.ref({
        Type: "XObject",
        Subtype: "Image",
        BitsPerComponent: this.bits,
        Width: this.width,
        Height: this.height,
        ColorSpace: this.colorSpace,
        Filter: "DCTDecode"
      }), this.colorSpace === "DeviceCMYK" && (this.obj.data.Decode = [1, 0, 1, 0, 1, 0, 1, 0]), this.obj.end(this.data), this.data = null;
  }
}
class ID {
  constructor(e, r) {
    this.label = r, this.image = new rT(e), this.width = this.image.width, this.height = this.image.height, this.imgData = this.image.imgData, this.obj = null;
  }
  embed(e) {
    let r = !1;
    if (this.document = e, this.obj)
      return;
    const i = this.image.hasAlphaChannel, n = this.image.interlaceMethod === 1;
    if (this.obj = this.document.ref({
      Type: "XObject",
      Subtype: "Image",
      BitsPerComponent: i ? 8 : this.image.bits,
      Width: this.width,
      Height: this.height,
      Filter: "FlateDecode"
    }), !i) {
      const a = this.document.ref({
        Predictor: n ? 1 : 15,
        Colors: this.image.colors,
        BitsPerComponent: this.image.bits,
        Columns: this.width
      });
      this.obj.data.DecodeParms = a, a.end();
    }
    if (this.image.palette.length === 0)
      this.obj.data.ColorSpace = this.image.colorSpace;
    else {
      const a = this.document.ref();
      a.end(j.from(this.image.palette)), this.obj.data.ColorSpace = ["Indexed", "DeviceRGB", this.image.palette.length / 3 - 1, a];
    }
    if (this.image.transparency.grayscale != null) {
      const a = this.image.transparency.grayscale;
      this.obj.data.Mask = [a, a];
    } else if (this.image.transparency.rgb) {
      const {
        rgb: a
      } = this.image.transparency, s = [];
      for (let o of a)
        s.push(o, o);
      this.obj.data.Mask = s;
    } else {
      if (this.image.transparency.indexed)
        return r = !0, this.loadIndexedAlphaChannel();
      if (i)
        return r = !0, this.splitAlphaChannel();
    }
    if (n && !r)
      return this.decodeData();
    this.finalize();
  }
  finalize() {
    if (this.alphaChannel) {
      const e = this.document.ref({
        Type: "XObject",
        Subtype: "Image",
        Height: this.height,
        Width: this.width,
        BitsPerComponent: 8,
        Filter: "FlateDecode",
        ColorSpace: "DeviceGray",
        Decode: [0, 1]
      });
      e.end(this.alphaChannel), this.obj.data.SMask = e;
    }
    return this.obj.end(this.imgData), this.image = null, this.imgData = null;
  }
  splitAlphaChannel() {
    return this.image.decodePixels((e) => {
      let r, i;
      const n = this.image.colors, a = this.width * this.height, s = j.alloc(a * n), o = j.alloc(a);
      let c = i = r = 0;
      const l = e.length, f = this.image.bits === 16 ? 1 : 0;
      for (; c < l; ) {
        for (let u = 0; u < n; u++)
          s[i++] = e[c++], c += f;
        o[r++] = e[c++], c += f;
      }
      return this.imgData = wa.deflateSync(s), this.alphaChannel = wa.deflateSync(o), this.finalize();
    });
  }
  loadIndexedAlphaChannel() {
    const e = this.image.transparency.indexed;
    return this.image.decodePixels((r) => {
      const i = j.alloc(this.width * this.height);
      let n = 0;
      for (let a = 0, s = r.length; a < s; a++)
        i[n++] = e[r[a]];
      return this.alphaChannel = wa.deflateSync(i), this.finalize();
    });
  }
  decodeData() {
    this.image.decodePixels((e) => {
      this.imgData = wa.deflateSync(e), this.finalize();
    });
  }
}
class RD {
  static open(e, r) {
    let i;
    if (j.isBuffer(e))
      i = e;
    else if (e instanceof ArrayBuffer)
      i = j.from(new Uint8Array(e));
    else {
      let n;
      if (n = /^data:.+?;base64,(.*)$/.exec(e))
        i = j.from(n[1], "base64");
      else if (i = zo.readFileSync(e), !i)
        return;
    }
    if (i[0] === 255 && i[1] === 216)
      return new BD(i, r);
    if (i[0] === 137 && i.toString("ascii", 1, 4) === "PNG")
      return new ID(i, r);
    throw new Error("Unknown image format.");
  }
}
var PD = {
  initImages() {
    return this._imageRegistry = {}, this._imageCount = 0;
  },
  image(t, e, r, i) {
    i === void 0 && (i = {});
    let n, a, s, o, c, l, f, u, h, d;
    typeof e == "object" && (i = e, e = null);
    const p = i.ignoreOrientation || i.ignoreOrientation !== !1 && this.options.ignoreOrientation;
    e = (l = e ?? i.x) != null ? l : this.x, r = (f = r ?? i.y) != null ? f : this.y, typeof t == "string" && (o = this._imageRegistry[t]), o || (t.width && t.height ? o = t : o = this.openImage(t)), o.obj || o.embed(this), this.page.xobjects[o.label] == null && (this.page.xobjects[o.label] = o.obj);
    let {
      width: m,
      height: C
    } = o;
    !p && o.orientation > 4 && ([m, C] = [C, m]);
    let A = i.width || m, b = i.height || C;
    if (i.width && !i.height) {
      const x = A / m;
      A = m * x, b = C * x;
    } else if (i.height && !i.width) {
      const x = b / C;
      A = m * x, b = C * x;
    } else i.scale ? (A = m * i.scale, b = C * i.scale) : i.fit ? ([s, n] = i.fit, a = s / n, c = m / C, c > a ? (A = s, b = s / c) : (b = n, A = n * c)) : i.cover && ([s, n] = i.cover, a = s / n, c = m / C, c > a ? (b = n, A = n * c) : (A = s, b = s / c));
    if ((i.fit || i.cover) && (i.align === "center" ? e = e + s / 2 - A / 2 : i.align === "right" && (e = e + s - A), i.valign === "center" ? r = r + n / 2 - b / 2 : i.valign === "bottom" && (r = r + n - b)), p)
      b = -b, r -= b, u = 0;
    else
      switch (o.orientation) {
        default:
        case 1:
          b = -b, r -= b, u = 0;
          break;
        case 2:
          A = -A, b = -b, e -= A, r -= b, u = 0;
          break;
        case 3:
          h = e, d = r, b = -b, e -= A, u = 180;
          break;
        case 4:
          break;
        case 5:
          h = e, d = r, [A, b] = [b, A], r -= b, u = 90;
          break;
        case 6:
          h = e, d = r, [A, b] = [b, A], b = -b, u = 90;
          break;
        case 7:
          h = e, d = r, [A, b] = [b, A], b = -b, A = -A, e -= A, u = 90;
          break;
        case 8:
          h = e, d = r, [A, b] = [b, A], b = -b, e -= A, r -= b, u = -90;
          break;
      }
    return i.link != null && this.link(e, r, A, b, i.link), i.goTo != null && this.goTo(e, r, A, b, i.goTo), i.destination != null && this.addNamedDestination(i.destination, "XYZ", e, r, null), this.y === r && (this.y += b), this.save(), u && this.rotate(u, {
      origin: [h, d]
    }), this.transform(A, 0, 0, b, e, r), this.addContent(`/${o.label} Do`), this.restore(), this;
  },
  openImage(t) {
    let e;
    return typeof t == "string" && (e = this._imageRegistry[t]), e || (e = RD.open(t, `I${++this._imageCount}`), typeof t == "string" && (this._imageRegistry[t] = e)), e;
  }
}, LD = {
  annotate(t, e, r, i, n) {
    n.Type = "Annot", n.Rect = this._convertRect(t, e, r, i), n.Border = [0, 0, 0], n.Subtype === "Link" && typeof n.F > "u" && (n.F = 4), n.Subtype !== "Link" && n.C == null && (n.C = this._normalizeColor(n.color || [0, 0, 0])), delete n.color, typeof n.Dest == "string" && (n.Dest = new String(n.Dest));
    for (let s in n) {
      const o = n[s];
      n[s[0].toUpperCase() + s.slice(1)] = o;
    }
    const a = this.ref(n);
    return this.page.annotations.push(a), a.end(), this;
  },
  note(t, e, r, i, n, a) {
    return a === void 0 && (a = {}), a.Subtype = "Text", a.Contents = new String(n), a.Name == null && (a.Name = "Comment"), a.color == null && (a.color = [243, 223, 92]), this.annotate(t, e, r, i, a);
  },
  goTo(t, e, r, i, n, a) {
    return a === void 0 && (a = {}), a.Subtype = "Link", a.A = this.ref({
      S: "GoTo",
      D: new String(n)
    }), a.A.end(), this.annotate(t, e, r, i, a);
  },
  link(t, e, r, i, n, a) {
    if (a === void 0 && (a = {}), a.Subtype = "Link", typeof n == "number") {
      const s = this._root.data.Pages.data;
      if (n >= 0 && n < s.Kids.length)
        a.A = this.ref({
          S: "GoTo",
          D: [s.Kids[n], "XYZ", null, null, null]
        }), a.A.end();
      else
        throw new Error(`The document has no page ${n}`);
    } else
      a.A = this.ref({
        S: "URI",
        URI: new String(n)
      }), a.A.end();
    return this.annotate(t, e, r, i, a);
  },
  _markup(t, e, r, i, n) {
    n === void 0 && (n = {});
    const [a, s, o, c] = this._convertRect(t, e, r, i);
    return n.QuadPoints = [a, c, o, c, a, s, o, s], n.Contents = new String(), this.annotate(t, e, r, i, n);
  },
  highlight(t, e, r, i, n) {
    return n === void 0 && (n = {}), n.Subtype = "Highlight", n.color == null && (n.color = [241, 238, 148]), this._markup(t, e, r, i, n);
  },
  underline(t, e, r, i, n) {
    return n === void 0 && (n = {}), n.Subtype = "Underline", this._markup(t, e, r, i, n);
  },
  strike(t, e, r, i, n) {
    return n === void 0 && (n = {}), n.Subtype = "StrikeOut", this._markup(t, e, r, i, n);
  },
  lineAnnotation(t, e, r, i, n) {
    return n === void 0 && (n = {}), n.Subtype = "Line", n.Contents = new String(), n.L = [t, this.page.height - e, r, this.page.height - i], this.annotate(t, e, r, i, n);
  },
  rectAnnotation(t, e, r, i, n) {
    return n === void 0 && (n = {}), n.Subtype = "Square", n.Contents = new String(), this.annotate(t, e, r, i, n);
  },
  ellipseAnnotation(t, e, r, i, n) {
    return n === void 0 && (n = {}), n.Subtype = "Circle", n.Contents = new String(), this.annotate(t, e, r, i, n);
  },
  textAnnotation(t, e, r, i, n, a) {
    return a === void 0 && (a = {}), a.Subtype = "FreeText", a.Contents = new String(n), a.DA = new String(), this.annotate(t, e, r, i, a);
  },
  fileAnnotation(t, e, r, i, n, a) {
    n === void 0 && (n = {}), a === void 0 && (a = {});
    const s = this.file(n.src, Object.assign({
      hidden: !0
    }, n));
    return a.Subtype = "FileAttachment", a.FS = s, a.Contents ? a.Contents = new String(a.Contents) : s.data.Desc && (a.Contents = s.data.Desc), this.annotate(t, e, r, i, a);
  },
  _convertRect(t, e, r, i) {
    let n = e;
    e += i;
    let a = t + r;
    const [s, o, c, l, f, u] = this._ctm;
    return t = s * t + c * e + f, e = o * t + l * e + u, a = s * a + c * n + f, n = o * a + l * n + u, [t, e, a, n];
  }
};
class Yu {
  constructor(e, r, i, n, a) {
    a === void 0 && (a = {
      expanded: !1
    }), this.document = e, this.options = a, this.outlineData = {}, n !== null && (this.outlineData.Dest = [n.dictionary, "Fit"]), r !== null && (this.outlineData.Parent = r), i !== null && (this.outlineData.Title = new String(i)), this.dictionary = this.document.ref(this.outlineData), this.children = [];
  }
  addItem(e, r) {
    r === void 0 && (r = {
      expanded: !1
    });
    const i = new Yu(this.document, this.dictionary, e, this.document.page, r);
    return this.children.push(i), i;
  }
  endOutline() {
    if (this.children.length > 0) {
      this.options.expanded && (this.outlineData.Count = this.children.length);
      const e = this.children[0], r = this.children[this.children.length - 1];
      this.outlineData.First = e.dictionary, this.outlineData.Last = r.dictionary;
      for (let i = 0, n = this.children.length; i < n; i++) {
        const a = this.children[i];
        i > 0 && (a.outlineData.Prev = this.children[i - 1].dictionary), i < this.children.length - 1 && (a.outlineData.Next = this.children[i + 1].dictionary), a.endOutline();
      }
    }
    return this.dictionary.end();
  }
}
var ND = {
  initOutline() {
    return this.outline = new Yu(this, null, null, null);
  },
  endOutline() {
    if (this.outline.endOutline(), this.outline.children.length > 0)
      return this._root.data.Outlines = this.outline.dictionary, this._root.data.PageMode = "UseOutlines";
  }
};
class uo {
  constructor(e, r) {
    this.refs = [{
      pageRef: e,
      mcid: r
    }];
  }
  push(e) {
    e.refs.forEach((r) => this.refs.push(r));
  }
}
class $r {
  constructor(e, r, i, n) {
    i === void 0 && (i = {}), n === void 0 && (n = null), this.document = e, this._attached = !1, this._ended = !1, this._flushed = !1, this.dictionary = e.ref({
      // Type: "StructElem",
      S: r
    });
    const a = this.dictionary.data;
    (Array.isArray(i) || this._isValidChild(i)) && (n = i, i = {}), typeof i.title < "u" && (a.T = new String(i.title)), typeof i.lang < "u" && (a.Lang = new String(i.lang)), typeof i.alt < "u" && (a.Alt = new String(i.alt)), typeof i.expanded < "u" && (a.E = new String(i.expanded)), typeof i.actual < "u" && (a.ActualText = new String(i.actual)), this._children = [], n && (Array.isArray(n) || (n = [n]), n.forEach((s) => this.add(s)), this.end());
  }
  add(e) {
    if (this._ended)
      throw new Error("Cannot add child to already-ended structure element");
    if (!this._isValidChild(e))
      throw new Error("Invalid structure element child");
    return e instanceof $r && (e.setParent(this.dictionary), this._attached && e.setAttached()), e instanceof uo && this._addContentToParentTree(e), typeof e == "function" && this._attached && (e = this._contentForClosure(e)), this._children.push(e), this;
  }
  _addContentToParentTree(e) {
    e.refs.forEach((r) => {
      let {
        pageRef: i,
        mcid: n
      } = r;
      const a = this.document.getStructParentTree().get(i.data.StructParents);
      a[n] = this.dictionary;
    });
  }
  setParent(e) {
    if (this.dictionary.data.P)
      throw new Error("Structure element added to more than one parent");
    this.dictionary.data.P = e, this._flush();
  }
  setAttached() {
    this._attached || (this._children.forEach((e, r) => {
      e instanceof $r && e.setAttached(), typeof e == "function" && (this._children[r] = this._contentForClosure(e));
    }), this._attached = !0, this._flush());
  }
  end() {
    this._ended || (this._children.filter((e) => e instanceof $r).forEach((e) => e.end()), this._ended = !0, this._flush());
  }
  _isValidChild(e) {
    return e instanceof $r || e instanceof uo || typeof e == "function";
  }
  _contentForClosure(e) {
    const r = this.document.markStructureContent(this.dictionary.data.S);
    return e(), this.document.endMarkedContent(), this._addContentToParentTree(r), r;
  }
  _isFlushable() {
    return !this.dictionary.data.P || !this._ended ? !1 : this._children.every((e) => typeof e == "function" ? !1 : e instanceof $r ? e._isFlushable() : !0);
  }
  _flush() {
    this._flushed || !this._isFlushable() || (this.dictionary.data.K = [], this._children.forEach((e) => this._flushChild(e)), this.dictionary.end(), this._children = [], this.dictionary.data.K = null, this._flushed = !0);
  }
  _flushChild(e) {
    e instanceof $r && this.dictionary.data.K.push(e.dictionary), e instanceof uo && e.refs.forEach((r) => {
      let {
        pageRef: i,
        mcid: n
      } = r;
      this.dictionary.data.Pg || (this.dictionary.data.Pg = i), this.dictionary.data.Pg === i ? this.dictionary.data.K.push(n) : this.dictionary.data.K.push({
        Type: "MCR",
        Pg: i,
        MCID: n
      });
    });
  }
}
class MD extends fv {
  _compareKeys(e, r) {
    return parseInt(e) - parseInt(r);
  }
  _keysName() {
    return "Nums";
  }
  _dataForKey(e) {
    return parseInt(e);
  }
}
var UD = {
  initMarkings(t) {
    this.structChildren = [], t.tagged && (this.getMarkInfoDictionary().data.Marked = !0, this.getStructTreeRoot());
  },
  markContent(t, e) {
    if (e === void 0 && (e = null), t === "Artifact" || e && e.mcid) {
      let i = 0;
      for (this.page.markings.forEach((n) => {
        (i || n.structContent || n.tag === "Artifact") && i++;
      }); i--; )
        this.endMarkedContent();
    }
    if (!e)
      return this.page.markings.push({
        tag: t
      }), this.addContent(`/${t} BMC`), this;
    this.page.markings.push({
      tag: t,
      options: e
    });
    const r = {};
    return typeof e.mcid < "u" && (r.MCID = e.mcid), t === "Artifact" && (typeof e.type == "string" && (r.Type = e.type), Array.isArray(e.bbox) && (r.BBox = [e.bbox[0], this.page.height - e.bbox[3], e.bbox[2], this.page.height - e.bbox[1]]), Array.isArray(e.attached) && e.attached.every((i) => typeof i == "string") && (r.Attached = e.attached)), t === "Span" && (e.lang && (r.Lang = new String(e.lang)), e.alt && (r.Alt = new String(e.alt)), e.expanded && (r.E = new String(e.expanded)), e.actual && (r.ActualText = new String(e.actual))), this.addContent(`/${t} ${at.convert(r)} BDC`), this;
  },
  markStructureContent(t, e) {
    e === void 0 && (e = {});
    const r = this.getStructParentTree().get(this.page.structParentTreeKey), i = r.length;
    r.push(null), this.markContent(t, {
      ...e,
      mcid: i
    });
    const n = new uo(this.page.dictionary, i);
    return this.page.markings.slice(-1)[0].structContent = n, n;
  },
  endMarkedContent() {
    return this.page.markings.pop(), this.addContent("EMC"), this;
  },
  struct(t, e, r) {
    return e === void 0 && (e = {}), r === void 0 && (r = null), new $r(this, t, e, r);
  },
  addStructure(t) {
    const e = this.getStructTreeRoot();
    return t.setParent(e), t.setAttached(), this.structChildren.push(t), e.data.K || (e.data.K = []), e.data.K.push(t.dictionary), this;
  },
  initPageMarkings(t) {
    t.forEach((e) => {
      if (e.structContent) {
        const r = e.structContent, i = this.markStructureContent(e.tag, e.options);
        r.push(i), this.page.markings.slice(-1)[0].structContent = r;
      } else
        this.markContent(e.tag, e.options);
    });
  },
  endPageMarkings(t) {
    const e = t.markings;
    return e.forEach(() => t.write("EMC")), t.markings = [], e;
  },
  getMarkInfoDictionary() {
    return this._root.data.MarkInfo || (this._root.data.MarkInfo = this.ref({})), this._root.data.MarkInfo;
  },
  hasMarkInfoDictionary() {
    return !!this._root.data.MarkInfo;
  },
  getStructTreeRoot() {
    return this._root.data.StructTreeRoot || (this._root.data.StructTreeRoot = this.ref({
      Type: "StructTreeRoot",
      ParentTree: new MD(),
      ParentTreeNextKey: 0
    })), this._root.data.StructTreeRoot;
  },
  getStructParentTree() {
    return this.getStructTreeRoot().data.ParentTree;
  },
  createStructParentTreeNextKey() {
    this.getMarkInfoDictionary();
    const t = this.getStructTreeRoot(), e = t.data.ParentTreeNextKey++;
    return t.data.ParentTree.add(e, []), e;
  },
  endMarkings() {
    const t = this._root.data.StructTreeRoot;
    t && (t.end(), this.structChildren.forEach((e) => e.end())), this._root.data.MarkInfo && this._root.data.MarkInfo.end();
  }
};
const S3 = {
  readOnly: 1,
  required: 2,
  noExport: 4,
  multiline: 4096,
  password: 8192,
  toggleToOffButton: 16384,
  radioButton: 32768,
  pushButton: 65536,
  combo: 131072,
  edit: 262144,
  sort: 524288,
  multiSelect: 2097152,
  noSpell: 4194304
}, T3 = {
  left: 0,
  center: 1,
  right: 2
}, k3 = {
  value: "V",
  defaultValue: "DV"
}, F3 = {
  zip: "0",
  zipPlus4: "1",
  zip4: "1",
  phone: "2",
  ssn: "3"
}, O3 = {
  number: {
    nDec: 0,
    sepComma: !1,
    negStyle: "MinusBlack",
    currency: "",
    currencyPrepend: !0
  },
  percent: {
    nDec: 0,
    sepComma: !1
  }
};
var $D = {
  /**
   * Must call if adding AcroForms to a document. Must also call font() before
   * this method to set the default font.
   */
  initForm() {
    if (!this._font)
      throw new Error("Must set a font before calling initForm method");
    this._acroform = {
      fonts: {},
      defaultFont: this._font.name
    }, this._acroform.fonts[this._font.id] = this._font.ref();
    let t = {
      Fields: [],
      NeedAppearances: !0,
      DA: new String(`/${this._font.id} 0 Tf 0 g`),
      DR: {
        Font: {}
      }
    };
    t.DR.Font[this._font.id] = this._font.ref();
    const e = this.ref(t);
    return this._root.data.AcroForm = e, this;
  },
  /**
   * Called automatically by document.js
   */
  endAcroForm() {
    if (this._root.data.AcroForm) {
      if (!Object.keys(this._acroform.fonts).length && !this._acroform.defaultFont)
        throw new Error("No fonts specified for PDF form");
      let t = this._root.data.AcroForm.data.DR.Font;
      Object.keys(this._acroform.fonts).forEach((e) => {
        t[e] = this._acroform.fonts[e];
      }), this._root.data.AcroForm.data.Fields.forEach((e) => {
        this._endChild(e);
      }), this._root.data.AcroForm.end();
    }
    return this;
  },
  _endChild(t) {
    return Array.isArray(t.data.Kids) && (t.data.Kids.forEach((e) => {
      this._endChild(e);
    }), t.end()), this;
  },
  /**
   * Creates and adds a form field to the document. Form fields are intermediate
   * nodes in a PDF form that are used to specify form name heirarchy and form
   * value defaults.
   * @param {string} name - field name (T attribute in field dictionary)
   * @param {object} options  - other attributes to include in field dictionary
   */
  formField(t, e) {
    e === void 0 && (e = {});
    let r = this._fieldDict(t, null, e), i = this.ref(r);
    return this._addToParent(i), i;
  },
  /**
   * Creates and adds a Form Annotation to the document. Form annotations are
   * called Widget annotations internally within a PDF file.
   * @param {string} name - form field name (T attribute of widget annotation
   * dictionary)
   * @param {number} x
   * @param {number} y
   * @param {number} w
   * @param {number} h
   * @param {object} options
   */
  formAnnotation(t, e, r, i, n, a, s) {
    s === void 0 && (s = {});
    let o = this._fieldDict(t, e, s);
    o.Subtype = "Widget", o.F === void 0 && (o.F = 4), this.annotate(r, i, n, a, o);
    let c = this.page.annotations[this.page.annotations.length - 1];
    return this._addToParent(c);
  },
  formText(t, e, r, i, n, a) {
    return a === void 0 && (a = {}), this.formAnnotation(t, "text", e, r, i, n, a);
  },
  formPushButton(t, e, r, i, n, a) {
    return a === void 0 && (a = {}), this.formAnnotation(t, "pushButton", e, r, i, n, a);
  },
  formCombo(t, e, r, i, n, a) {
    return a === void 0 && (a = {}), this.formAnnotation(t, "combo", e, r, i, n, a);
  },
  formList(t, e, r, i, n, a) {
    return a === void 0 && (a = {}), this.formAnnotation(t, "list", e, r, i, n, a);
  },
  formRadioButton(t, e, r, i, n, a) {
    return a === void 0 && (a = {}), this.formAnnotation(t, "radioButton", e, r, i, n, a);
  },
  formCheckbox(t, e, r, i, n, a) {
    return a === void 0 && (a = {}), this.formAnnotation(t, "checkbox", e, r, i, n, a);
  },
  _addToParent(t) {
    let e = t.data.Parent;
    return e ? (e.data.Kids || (e.data.Kids = []), e.data.Kids.push(t)) : this._root.data.AcroForm.data.Fields.push(t), this;
  },
  _fieldDict(t, e, r) {
    if (r === void 0 && (r = {}), !this._acroform)
      throw new Error("Call document.initForm() method before adding form elements to document");
    let i = Object.assign({}, r);
    return e !== null && (i = this._resolveType(e, r)), i = this._resolveFlags(i), i = this._resolveJustify(i), i = this._resolveFont(i), i = this._resolveStrings(i), i = this._resolveColors(i), i = this._resolveFormat(i), i.T = new String(t), i.parent && (i.Parent = i.parent, delete i.parent), i;
  },
  _resolveType(t, e) {
    if (t === "text")
      e.FT = "Tx";
    else if (t === "pushButton")
      e.FT = "Btn", e.pushButton = !0;
    else if (t === "radioButton")
      e.FT = "Btn", e.radioButton = !0;
    else if (t === "checkbox")
      e.FT = "Btn";
    else if (t === "combo")
      e.FT = "Ch", e.combo = !0;
    else if (t === "list")
      e.FT = "Ch";
    else
      throw new Error(`Invalid form annotation type '${t}'`);
    return e;
  },
  _resolveFormat(t) {
    const e = t.format;
    if (e && e.type) {
      let r, i, n = "";
      if (F3[e.type] !== void 0)
        r = "AFSpecial_Keystroke", i = "AFSpecial_Format", n = F3[e.type];
      else {
        let a = e.type.charAt(0).toUpperCase() + e.type.slice(1);
        if (r = `AF${a}_Keystroke`, i = `AF${a}_Format`, e.type === "date")
          r += "Ex", n = String(e.param);
        else if (e.type === "time")
          n = String(e.param);
        else if (e.type === "number") {
          let s = Object.assign({}, O3.number, e);
          n = String([String(s.nDec), s.sepComma ? "0" : "1", '"' + s.negStyle + '"', "null", '"' + s.currency + '"', String(s.currencyPrepend)].join(","));
        } else if (e.type === "percent") {
          let s = Object.assign({}, O3.percent, e);
          n = String([String(s.nDec), s.sepComma ? "0" : "1"].join(","));
        }
      }
      t.AA = t.AA ? t.AA : {}, t.AA.K = {
        S: "JavaScript",
        JS: new String(`${r}(${n});`)
      }, t.AA.F = {
        S: "JavaScript",
        JS: new String(`${i}(${n});`)
      };
    }
    return delete t.format, t;
  },
  _resolveColors(t) {
    let e = this._normalizeColor(t.backgroundColor);
    return e && (t.MK || (t.MK = {}), t.MK.BG = e), e = this._normalizeColor(t.borderColor), e && (t.MK || (t.MK = {}), t.MK.BC = e), delete t.backgroundColor, delete t.borderColor, t;
  },
  _resolveFlags(t) {
    let e = 0;
    return Object.keys(t).forEach((r) => {
      S3[r] && (t[r] && (e |= S3[r]), delete t[r]);
    }), e !== 0 && (t.Ff = t.Ff ? t.Ff : 0, t.Ff |= e), t;
  },
  _resolveJustify(t) {
    let e = 0;
    return t.align !== void 0 && (typeof T3[t.align] == "number" && (e = T3[t.align]), delete t.align), e !== 0 && (t.Q = e), t;
  },
  _resolveFont(t) {
    if (this._acroform.fonts[this._font.id] == null && (this._acroform.fonts[this._font.id] = this._font.ref()), this._acroform.defaultFont !== this._font.name) {
      t.DR = {
        Font: {}
      };
      const e = t.fontSize || 0;
      t.DR.Font[this._font.id] = this._font.ref(), t.DA = new String(`/${this._font.id} ${e} Tf 0 g`);
    }
    return t;
  },
  _resolveStrings(t) {
    let e = [];
    function r(i) {
      if (Array.isArray(i))
        for (let n = 0; n < i.length; n++)
          typeof i[n] == "string" ? e.push(new String(i[n])) : e.push(i[n]);
    }
    return r(t.Opt), t.select && (r(t.select), delete t.select), e.length && (t.Opt = e), Object.keys(k3).forEach((i) => {
      t[i] !== void 0 && (t[k3[i]] = t[i], delete t[i]);
    }), ["V", "DV"].forEach((i) => {
      typeof t[i] == "string" && (t[i] = new String(t[i]));
    }), t.MK && t.MK.CA && (t.MK.CA = new String(t.MK.CA)), t.label && (t.MK = t.MK ? t.MK : {}, t.MK.CA = new String(t.label), delete t.label), t;
  }
}, zD = {
  /**
   * Embed contents of `src` in PDF
   * @param {Buffer | ArrayBuffer | string} src input Buffer, ArrayBuffer, base64 encoded string or path to file
   * @param {object} options
   *  * options.name: filename to be shown in PDF, will use `src` if none set
   *  * options.type: filetype to be shown in PDF
   *  * options.description: description to be shown in PDF
   *  * options.hidden: if true, do not add attachment to EmbeddedFiles dictionary. Useful for file attachment annotations
   *  * options.creationDate: override creation date
   *  * options.modifiedDate: override modified date
   *  * options.relationship: Relationship between the PDF document and its attached file. Can be 'Alternative', 'Data', 'Source', 'Supplement' or 'Unspecified'.
   * @returns filespec reference
   */
  file(t, e) {
    e === void 0 && (e = {}), e.name = e.name || t, e.relationship = e.relationship || "Unspecified";
    const r = {
      Type: "EmbeddedFile",
      Params: {}
    };
    let i;
    if (!t)
      throw new Error("No src specified");
    if (j.isBuffer(t))
      i = t;
    else if (t instanceof ArrayBuffer)
      i = j.from(new Uint8Array(t));
    else {
      let l;
      if (l = /^data:(.*?);base64,(.*)$/.exec(t))
        l[1] && (r.Subtype = l[1].replace("/", "#2F")), i = j.from(l[2], "base64");
      else {
        if (i = zo.readFileSync(t), !i)
          throw new Error(`Could not read contents of file at filepath ${t}`);
        const {
          birthtime: f,
          ctime: u
        } = zo.statSync(t);
        r.Params.CreationDate = f, r.Params.ModDate = u;
      }
    }
    e.creationDate instanceof Date && (r.Params.CreationDate = e.creationDate), e.modifiedDate instanceof Date && (r.Params.ModDate = e.modifiedDate), e.type && (r.Subtype = e.type.replace("/", "#2F"));
    const n = Vd.MD5(Vd.lib.WordArray.create(new Uint8Array(i)));
    r.Params.CheckSum = new String(n), r.Params.Size = i.byteLength;
    let a;
    this._fileRegistry || (this._fileRegistry = {});
    let s = this._fileRegistry[e.name];
    s && WD(r, s) ? a = s.ref : (a = this.ref(r), a.end(i), this._fileRegistry[e.name] = {
      ...r,
      ref: a
    });
    const o = {
      Type: "Filespec",
      AFRelationship: e.relationship,
      F: new String(e.name),
      EF: {
        F: a
      },
      UF: new String(e.name)
    };
    e.description && (o.Desc = new String(e.description));
    const c = this.ref(o);
    return c.end(), e.hidden || this.addNamedEmbeddedFile(e.name, c), this._root.data.AF ? this._root.data.AF.push(c) : this._root.data.AF = [c], c;
  }
};
function WD(t, e) {
  return t.Subtype === e.Subtype && t.Params.CheckSum.toString() === e.Params.CheckSum.toString() && t.Params.Size === e.Params.Size && t.Params.CreationDate.getTime() === e.Params.CreationDate.getTime() && (t.Params.ModDate === void 0 && e.Params.ModDate === void 0 || t.Params.ModDate.getTime() === e.Params.ModDate.getTime());
}
var HD = "/home/runner/work/react-pdf/react-pdf/packages/pdfkit/src/mixins", qD = {
  initPDFA(t) {
    t.charAt(t.length - 3) === "-" ? (this.subset_conformance = t.charAt(t.length - 1).toUpperCase(), this.subset = parseInt(t.charAt(t.length - 2))) : (this.subset_conformance = "B", this.subset = parseInt(t.charAt(t.length - 1)));
  },
  endSubset() {
    this._addPdfaMetadata(), this._addColorOutputIntent();
  },
  _addColorOutputIntent() {
    const t = zo.readFileSync(`${HD}/data/sRGB_IEC61966_2_1.icc`), e = this.ref({
      Length: t.length,
      N: 3
    });
    e.write(t), e.end();
    const r = this.ref({
      Type: "OutputIntent",
      S: "GTS_PDFA1",
      Info: new String("sRGB IEC61966-2.1"),
      OutputConditionIdentifier: new String("sRGB IEC61966-2.1"),
      DestOutputProfile: e
    });
    r.end(), this._root.data.OutputIntents = [r];
  },
  _getPdfaid() {
    return `
        <rdf:Description xmlns:pdfaid="http://www.aiim.org/pdfa/ns/id/" rdf:about="">
            <pdfaid:part>${this.subset}</pdfaid:part>
            <pdfaid:conformance>${this.subset_conformance}</pdfaid:conformance>
        </rdf:Description>
        `;
  },
  _addPdfaMetadata() {
    this.appendXML(this._getPdfaid());
  }
}, VD = {
  initPDFUA() {
    this.subset = 1;
  },
  endSubset() {
    this._addPdfuaMetadata();
  },
  _addPdfuaMetadata() {
    this.appendXML(this._getPdfuaid());
  },
  _getPdfuaid() {
    return `
        <rdf:Description xmlns:pdfuaid="http://www.aiim.org/pdfua/ns/id/" rdf:about="">
            <pdfuaid:part>${this.subset}</pdfuaid:part>
        </rdf:Description>
        `;
  }
}, YD = {
  _importSubset(t) {
    Object.assign(this, t);
  },
  initSubset(t) {
    switch (t.subset) {
      case "PDF/A-1":
      case "PDF/A-1a":
      case "PDF/A-1b":
      case "PDF/A-2":
      case "PDF/A-2a":
      case "PDF/A-2b":
      case "PDF/A-3":
      case "PDF/A-3a":
      case "PDF/A-3b":
        this._importSubset(qD), this.initPDFA(t.subset);
        break;
      case "PDF/UA":
        this._importSubset(VD), this.initPDFUA();
        break;
    }
  }
};
class GD {
  constructor() {
    this._metadata = `
        <?xpacket begin="\uFEFF" id="W5M0MpCehiHzreSzNTczkc9d"?>
            <x:xmpmeta xmlns:x="adobe:ns:meta/">
                <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        `;
  }
  _closeTags() {
    this._metadata = this._metadata.concat(`
                </rdf:RDF>
            </x:xmpmeta>
        <?xpacket end="w"?>
        `);
  }
  append(e, r) {
    r === void 0 && (r = !0), this._metadata = this._metadata.concat(e), r && (this._metadata = this._metadata.concat(`
`));
  }
  getXML() {
    return this._metadata;
  }
  getLength() {
    return this._metadata.length;
  }
  end() {
    this._closeTags(), this._metadata = this._metadata.trim();
  }
}
var ZD = {
  initMetadata() {
    this.metadata = new GD();
  },
  appendXML(t, e) {
    e === void 0 && (e = !0), this.metadata.append(t, e);
  },
  _addInfo() {
    this.appendXML(`
        <rdf:Description rdf:about="" xmlns:xmp="http://ns.adobe.com/xap/1.0/">
            <xmp:CreateDate>${this.info.CreationDate.toISOString().split(".")[0] + "Z"}</xmp:CreateDate>
            <xmp:CreatorTool>${this.info.Creator}</xmp:CreatorTool>
        </rdf:Description>
        `), (this.info.Title || this.info.Author || this.info.Subject) && (this.appendXML(`
            <rdf:Description rdf:about="" xmlns:dc="http://purl.org/dc/elements/1.1/">
            `), this.info.Title && this.appendXML(`
                <dc:title>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Title}</rdf:li>
                    </rdf:Alt>
                </dc:title>
                `), this.info.Author && this.appendXML(`
                <dc:creator>
                    <rdf:Seq>
                        <rdf:li>${this.info.Author}</rdf:li>
                    </rdf:Seq>
                </dc:creator>
                `), this.info.Subject && this.appendXML(`
                <dc:description>
                    <rdf:Alt>
                        <rdf:li xml:lang="x-default">${this.info.Subject}</rdf:li>
                    </rdf:Alt>
                </dc:description>
                `), this.appendXML(`
            </rdf:Description>
            `)), this.appendXML(`
        <rdf:Description rdf:about="" xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
            <pdf:Producer>${this.info.Creator}</pdf:Producer>`, !1), this.info.Keywords && this.appendXML(`
            <pdf:Keywords>${this.info.Keywords}</pdf:Keywords>`, !1), this.appendXML(`
        </rdf:Description>
        `);
  },
  endMetadata() {
    this._addInfo(), this.metadata.end(), this.version != 1.3 && (this.metadataRef = this.ref({
      length: this.metadata.getLength(),
      Type: "Metadata",
      Subtype: "XML"
    }), this.metadataRef.compress = !1, this.metadataRef.write(j.from(this.metadata.getXML(), "utf-8")), this.metadataRef.end(), this._root.data.Metadata = this.metadataRef);
  }
};
class Gu extends Qp.Readable {
  constructor(e) {
    switch (e === void 0 && (e = {}), super(e), this.options = e, e.pdfVersion) {
      case "1.4":
        this.version = 1.4;
        break;
      case "1.5":
        this.version = 1.5;
        break;
      case "1.6":
        this.version = 1.6;
        break;
      case "1.7":
      case "1.7ext3":
        this.version = 1.7;
        break;
      default:
        this.version = 1.3;
        break;
    }
    this.compress = this.options.compress != null ? this.options.compress : !0, this._pageBuffer = [], this._pageBufferStart = 0, this._offsets = [], this._waiting = 0, this._ended = !1, this._offset = 0;
    const r = this.ref({
      Type: "Pages",
      Count: 0,
      Kids: []
    }), i = this.ref({
      Dests: new fo()
    });
    if (this._root = this.ref({
      Type: "Catalog",
      Pages: r,
      Names: i
    }), this.options.lang && (this._root.data.Lang = new String(this.options.lang)), this.page = null, this.initMetadata(), this.initColor(), this.initVector(), this.initFonts(e.font), this.initText(), this.initImages(), this.initOutline(), this.initMarkings(e), this.initSubset(e), this.info = {
      Producer: "PDFKit",
      Creator: "PDFKit",
      CreationDate: /* @__PURE__ */ new Date()
    }, this.options.info)
      for (let n in this.options.info) {
        const a = this.options.info[n];
        this.info[n] = a;
      }
    this.options.displayTitle && (this._root.data.ViewerPreferences = this.ref({
      DisplayDocTitle: !0
    })), this._id = KO.generateFileID(this.info), this._write(`%PDF-${this.version}`), this._write("%ÿÿÿÿ"), this.options.autoFirstPage !== !1 && this.addPage();
  }
  addPage(e) {
    e == null && ({
      options: e
    } = this), this.options.bufferPages || this.flushPages(), this.page = new jO(this, e), this._pageBuffer.push(this.page);
    const r = this._root.data.Pages.data;
    return r.Kids.push(this.page.dictionary), r.Count++, this.x = this.page.margins.left, this.y = this.page.margins.top, this._ctm = [1, 0, 0, 1, 0, 0], this.transform(1, 0, 0, -1, 0, this.page.height), this.emit("pageAdded"), this;
  }
  continueOnNewPage(e) {
    const r = this.endPageMarkings(this.page);
    return this.addPage(e ?? this.page._options), this.initPageMarkings(r), this;
  }
  bufferedPageRange() {
    return {
      start: this._pageBufferStart,
      count: this._pageBuffer.length
    };
  }
  switchToPage(e) {
    let r;
    if (!(r = this._pageBuffer[e - this._pageBufferStart]))
      throw new Error(`switchToPage(${e}) out of bounds, current buffer covers pages ${this._pageBufferStart} to ${this._pageBufferStart + this._pageBuffer.length - 1}`);
    return this.page = r;
  }
  flushPages() {
    const e = this._pageBuffer;
    this._pageBuffer = [], this._pageBufferStart += e.length;
    for (let r of e)
      this.endPageMarkings(r), r.end();
  }
  addNamedDestination(e) {
    for (var r = arguments.length, i = new Array(r > 1 ? r - 1 : 0), n = 1; n < r; n++)
      i[n - 1] = arguments[n];
    i.length === 0 && (i = ["XYZ", null, null, null]), i[0] === "XYZ" && i[2] !== null && (i[2] = this.page.height - i[2]), i.unshift(this.page.dictionary), this._root.data.Names.data.Dests.add(e, i);
  }
  addNamedEmbeddedFile(e, r) {
    this._root.data.Names.data.EmbeddedFiles || (this._root.data.Names.data.EmbeddedFiles = new fo({
      limits: !1
    })), this._root.data.Names.data.EmbeddedFiles.add(e, r);
  }
  addNamedJavaScript(e, r) {
    this._root.data.Names.data.JavaScript || (this._root.data.Names.data.JavaScript = new fo());
    let i = {
      JS: new String(r),
      S: "JavaScript"
    };
    this._root.data.Names.data.JavaScript.add(e, i);
  }
  ref(e) {
    const r = new cv(this, this._offsets.length + 1, e);
    return this._offsets.push(null), this._waiting++, r;
  }
  _read() {
  }
  // do nothing, but this method is required by node
  _write(e) {
    return j.isBuffer(e) || (e = j.from(e + `
`, "binary")), this.push(e), this._offset += e.length;
  }
  addContent(e) {
    return this.page.write(e), this;
  }
  _refEnd(e) {
    if (this._offsets[e.id - 1] = e.offset, --this._waiting === 0 && this._ended)
      return this._finalize(), this._ended = !1;
  }
  end() {
    this.flushPages(), this._info = this.ref();
    for (let e in this.info) {
      let r = this.info[e];
      typeof r == "string" && (r = new String(r));
      let i = this.ref(r);
      i.end(), this._info.data[e] = i;
    }
    this._info.end();
    for (let e in this._fontFamilies)
      this._fontFamilies[e].finalize();
    return this.endOutline(), this.endMarkings(), this.subset && this.endSubset(), this.endMetadata(), this._root.end(), this._root.data.Pages.end(), this._root.data.Names.end(), this.endAcroForm(), this._root.data.ViewerPreferences && this._root.data.ViewerPreferences.end(), this._security && this._security.end(), this._waiting === 0 ? this._finalize() : this._ended = !0;
  }
  _finalize() {
    const e = this._offset;
    this._write("xref"), this._write(`0 ${this._offsets.length + 1}`), this._write("0000000000 65535 f ");
    for (let i of this._offsets)
      i = `0000000000${i}`.slice(-10), this._write(i + " 00000 n ");
    const r = {
      Size: this._offsets.length + 1,
      Root: this._root,
      Info: this._info,
      ID: [this._id, this._id]
    };
    return this._security && (r.Encrypt = this._security.dictionary), this._write("trailer"), this._write(at.convert(r)), this._write("startxref"), this._write(`${e}`), this._write("%%EOF"), this.push(null);
  }
  toString() {
    return "[object PDFDocument]";
  }
}
const xt = (t) => {
  Object.assign(Gu.prototype, t);
};
xt(ZD);
xt(lD);
xt(mD);
xt(FD);
xt(OD);
xt(PD);
xt(LD);
xt(ND);
xt(UD);
xt($D);
xt(zD);
xt(YD);
Gu.LineWrapper = Af;
const gv = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD", jD = gv + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040", XD = "[" + gv + "][" + jD + "]*", KD = new RegExp("^" + XD + "$");
function pv(t, e) {
  const r = [];
  let i = e.exec(t);
  for (; i; ) {
    const n = [];
    n.startIndex = e.lastIndex - i[0].length;
    const a = i.length;
    for (let s = 0; s < a; s++)
      n.push(i[s]);
    r.push(n), i = e.exec(t);
  }
  return r;
}
const Zu = function(t) {
  const e = KD.exec(t);
  return !(e === null || typeof e > "u");
};
function JD(t) {
  return typeof t < "u";
}
const QD = {
  allowBooleanAttributes: !1,
  //A tag can have attributes without any value
  unpairedTags: []
};
function eB(t, e) {
  e = Object.assign({}, QD, e);
  const r = [];
  let i = !1, n = !1;
  t[0] === "\uFEFF" && (t = t.substr(1));
  for (let a = 0; a < t.length; a++)
    if (t[a] === "<" && t[a + 1] === "?") {
      if (a += 2, a = B3(t, a), a.err) return a;
    } else if (t[a] === "<") {
      let s = a;
      if (a++, t[a] === "!") {
        a = I3(t, a);
        continue;
      } else {
        let o = !1;
        t[a] === "/" && (o = !0, a++);
        let c = "";
        for (; a < t.length && t[a] !== ">" && t[a] !== " " && t[a] !== "	" && t[a] !== `
` && t[a] !== "\r"; a++)
          c += t[a];
        if (c = c.trim(), c[c.length - 1] === "/" && (c = c.substring(0, c.length - 1), a--), !lB(c)) {
          let u;
          return c.trim().length === 0 ? u = "Invalid space after '<'." : u = "Tag '" + c + "' is an invalid name.", d0("InvalidTag", u, N0(t, a));
        }
        const l = iB(t, a);
        if (l === !1)
          return d0("InvalidAttr", "Attributes for '" + c + "' have open quote.", N0(t, a));
        let f = l.value;
        if (a = l.index, f[f.length - 1] === "/") {
          const u = a - f.length;
          f = f.substring(0, f.length - 1);
          const h = R3(f, e);
          if (h === !0)
            i = !0;
          else
            return d0(h.err.code, h.err.msg, N0(t, u + h.err.line));
        } else if (o)
          if (l.tagClosed) {
            if (f.trim().length > 0)
              return d0("InvalidTag", "Closing tag '" + c + "' can't have attributes or invalid starting.", N0(t, s));
            if (r.length === 0)
              return d0("InvalidTag", "Closing tag '" + c + "' has not been opened.", N0(t, s));
            {
              const u = r.pop();
              if (c !== u.tagName) {
                let h = N0(t, u.tagStartPos);
                return d0(
                  "InvalidTag",
                  "Expected closing tag '" + u.tagName + "' (opened in line " + h.line + ", col " + h.col + ") instead of closing tag '" + c + "'.",
                  N0(t, s)
                );
              }
              r.length == 0 && (n = !0);
            }
          } else return d0("InvalidTag", "Closing tag '" + c + "' doesn't have proper closing.", N0(t, a));
        else {
          const u = R3(f, e);
          if (u !== !0)
            return d0(u.err.code, u.err.msg, N0(t, a - f.length + u.err.line));
          if (n === !0)
            return d0("InvalidXml", "Multiple possible root nodes found.", N0(t, a));
          e.unpairedTags.indexOf(c) !== -1 || r.push({ tagName: c, tagStartPos: s }), i = !0;
        }
        for (a++; a < t.length; a++)
          if (t[a] === "<")
            if (t[a + 1] === "!") {
              a++, a = I3(t, a);
              continue;
            } else if (t[a + 1] === "?") {
              if (a = B3(t, ++a), a.err) return a;
            } else
              break;
          else if (t[a] === "&") {
            const u = sB(t, a);
            if (u == -1)
              return d0("InvalidChar", "char '&' is not expected.", N0(t, a));
            a = u;
          } else if (n === !0 && !D3(t[a]))
            return d0("InvalidXml", "Extra text at the end", N0(t, a));
        t[a] === "<" && a--;
      }
    } else {
      if (D3(t[a]))
        continue;
      return d0("InvalidChar", "char '" + t[a] + "' is not expected.", N0(t, a));
    }
  if (i) {
    if (r.length == 1)
      return d0("InvalidTag", "Unclosed tag '" + r[0].tagName + "'.", N0(t, r[0].tagStartPos));
    if (r.length > 0)
      return d0("InvalidXml", "Invalid '" + JSON.stringify(r.map((a) => a.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
  } else return d0("InvalidXml", "Start tag expected.", 1);
  return !0;
}
function D3(t) {
  return t === " " || t === "	" || t === `
` || t === "\r";
}
function B3(t, e) {
  const r = e;
  for (; e < t.length; e++)
    if (t[e] == "?" || t[e] == " ") {
      const i = t.substr(r, e - r);
      if (e > 5 && i === "xml")
        return d0("InvalidXml", "XML declaration allowed only at the start of the document.", N0(t, e));
      if (t[e] == "?" && t[e + 1] == ">") {
        e++;
        break;
      } else
        continue;
    }
  return e;
}
function I3(t, e) {
  if (t.length > e + 5 && t[e + 1] === "-" && t[e + 2] === "-") {
    for (e += 3; e < t.length; e++)
      if (t[e] === "-" && t[e + 1] === "-" && t[e + 2] === ">") {
        e += 2;
        break;
      }
  } else if (t.length > e + 8 && t[e + 1] === "D" && t[e + 2] === "O" && t[e + 3] === "C" && t[e + 4] === "T" && t[e + 5] === "Y" && t[e + 6] === "P" && t[e + 7] === "E") {
    let r = 1;
    for (e += 8; e < t.length; e++)
      if (t[e] === "<")
        r++;
      else if (t[e] === ">" && (r--, r === 0))
        break;
  } else if (t.length > e + 9 && t[e + 1] === "[" && t[e + 2] === "C" && t[e + 3] === "D" && t[e + 4] === "A" && t[e + 5] === "T" && t[e + 6] === "A" && t[e + 7] === "[") {
    for (e += 8; e < t.length; e++)
      if (t[e] === "]" && t[e + 1] === "]" && t[e + 2] === ">") {
        e += 2;
        break;
      }
  }
  return e;
}
const tB = '"', rB = "'";
function iB(t, e) {
  let r = "", i = "", n = !1;
  for (; e < t.length; e++) {
    if (t[e] === tB || t[e] === rB)
      i === "" ? i = t[e] : i !== t[e] || (i = "");
    else if (t[e] === ">" && i === "") {
      n = !0;
      break;
    }
    r += t[e];
  }
  return i !== "" ? !1 : {
    value: r,
    index: e,
    tagClosed: n
  };
}
const nB = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
function R3(t, e) {
  const r = pv(t, nB), i = {};
  for (let n = 0; n < r.length; n++) {
    if (r[n][1].length === 0)
      return d0("InvalidAttr", "Attribute '" + r[n][2] + "' has no space in starting.", pa(r[n]));
    if (r[n][3] !== void 0 && r[n][4] === void 0)
      return d0("InvalidAttr", "Attribute '" + r[n][2] + "' is without value.", pa(r[n]));
    if (r[n][3] === void 0 && !e.allowBooleanAttributes)
      return d0("InvalidAttr", "boolean attribute '" + r[n][2] + "' is not allowed.", pa(r[n]));
    const a = r[n][2];
    if (!oB(a))
      return d0("InvalidAttr", "Attribute '" + a + "' is an invalid name.", pa(r[n]));
    if (!i.hasOwnProperty(a))
      i[a] = 1;
    else
      return d0("InvalidAttr", "Attribute '" + a + "' is repeated.", pa(r[n]));
  }
  return !0;
}
function aB(t, e) {
  let r = /\d/;
  for (t[e] === "x" && (e++, r = /[\da-fA-F]/); e < t.length; e++) {
    if (t[e] === ";")
      return e;
    if (!t[e].match(r))
      break;
  }
  return -1;
}
function sB(t, e) {
  if (e++, t[e] === ";")
    return -1;
  if (t[e] === "#")
    return e++, aB(t, e);
  let r = 0;
  for (; e < t.length; e++, r++)
    if (!(t[e].match(/\w/) && r < 20)) {
      if (t[e] === ";")
        break;
      return -1;
    }
  return e;
}
function d0(t, e, r) {
  return {
    err: {
      code: t,
      msg: e,
      line: r.line || r,
      col: r.col
    }
  };
}
function oB(t) {
  return Zu(t);
}
function lB(t) {
  return Zu(t);
}
function N0(t, e) {
  const r = t.substring(0, e).split(/\r?\n/);
  return {
    line: r.length,
    // column number is last line's length + 1, because column numbering starts at 1:
    col: r[r.length - 1].length + 1
  };
}
function pa(t) {
  return t.startIndex + t[1].length;
}
const cB = {
  preserveOrder: !1,
  attributeNamePrefix: "@_",
  attributesGroupName: !1,
  textNodeName: "#text",
  ignoreAttributes: !0,
  removeNSPrefix: !1,
  // remove NS from tag name or attribute name if true
  allowBooleanAttributes: !1,
  //a tag can have attributes without any value
  //ignoreRootElement : false,
  parseTagValue: !0,
  parseAttributeValue: !1,
  trimValues: !0,
  //Trim string values of tag and attributes
  cdataPropName: !1,
  numberParseOptions: {
    hex: !0,
    leadingZeros: !0,
    eNotation: !0
  },
  tagValueProcessor: function(t, e) {
    return e;
  },
  attributeValueProcessor: function(t, e) {
    return e;
  },
  stopNodes: [],
  //nested tags will not be parsed even for errors
  alwaysCreateTextNode: !1,
  isArray: () => !1,
  commentPropName: !1,
  unpairedTags: [],
  processEntities: !0,
  htmlEntities: !1,
  ignoreDeclaration: !1,
  ignorePiTags: !1,
  transformTagName: !1,
  transformAttributeName: !1,
  updateTag: function(t, e, r) {
    return t;
  },
  // skipEmptyListItem: false
  captureMetaData: !1
}, fB = function(t) {
  return Object.assign({}, cB, t);
};
let Wo;
typeof Symbol != "function" ? Wo = "@@xmlMetadata" : Wo = Symbol("XML Node Metadata");
class di {
  constructor(e) {
    this.tagname = e, this.child = [], this[":@"] = {};
  }
  add(e, r) {
    e === "__proto__" && (e = "#__proto__"), this.child.push({ [e]: r });
  }
  addChild(e, r) {
    e.tagname === "__proto__" && (e.tagname = "#__proto__"), e[":@"] && Object.keys(e[":@"]).length > 0 ? this.child.push({ [e.tagname]: e.child, ":@": e[":@"] }) : this.child.push({ [e.tagname]: e.child }), r !== void 0 && (this.child[this.child.length - 1][Wo] = { startIndex: r });
  }
  /** symbol used for metadata */
  static getMetaDataSymbol() {
    return Wo;
  }
}
function uB(t, e) {
  const r = {};
  if (t[e + 3] === "O" && t[e + 4] === "C" && t[e + 5] === "T" && t[e + 6] === "Y" && t[e + 7] === "P" && t[e + 8] === "E") {
    e = e + 9;
    let i = 1, n = !1, a = !1, s = "";
    for (; e < t.length; e++)
      if (t[e] === "<" && !a) {
        if (n && gB(t, e)) {
          e += 7;
          let o, c;
          [o, c, e] = hB(t, e + 1), c.indexOf("&") === -1 && (r[bB(o)] = {
            regx: RegExp(`&${o};`, "g"),
            val: c
          });
        } else if (n && pB(t, e)) e += 8;
        else if (n && vB(t, e)) e += 8;
        else if (n && mB(t, e)) e += 9;
        else if (dB) a = !0;
        else throw new Error("Invalid DOCTYPE");
        i++, s = "";
      } else if (t[e] === ">") {
        if (a ? t[e - 1] === "-" && t[e - 2] === "-" && (a = !1, i--) : i--, i === 0)
          break;
      } else t[e] === "[" ? n = !0 : s += t[e];
    if (i !== 0)
      throw new Error("Unclosed DOCTYPE");
  } else
    throw new Error("Invalid Tag instead of DOCTYPE");
  return { entities: r, i: e };
}
function hB(t, e) {
  let r = "";
  for (; e < t.length && t[e] !== "'" && t[e] !== '"'; e++)
    r += t[e];
  if (r = r.trim(), r.indexOf(" ") !== -1) throw new Error("External entites are not supported");
  const i = t[e++];
  let n = "";
  for (; e < t.length && t[e] !== i; e++)
    n += t[e];
  return [r, n, e];
}
function dB(t, e) {
  return t[e + 1] === "!" && t[e + 2] === "-" && t[e + 3] === "-";
}
function gB(t, e) {
  return t[e + 1] === "!" && t[e + 2] === "E" && t[e + 3] === "N" && t[e + 4] === "T" && t[e + 5] === "I" && t[e + 6] === "T" && t[e + 7] === "Y";
}
function pB(t, e) {
  return t[e + 1] === "!" && t[e + 2] === "E" && t[e + 3] === "L" && t[e + 4] === "E" && t[e + 5] === "M" && t[e + 6] === "E" && t[e + 7] === "N" && t[e + 8] === "T";
}
function vB(t, e) {
  return t[e + 1] === "!" && t[e + 2] === "A" && t[e + 3] === "T" && t[e + 4] === "T" && t[e + 5] === "L" && t[e + 6] === "I" && t[e + 7] === "S" && t[e + 8] === "T";
}
function mB(t, e) {
  return t[e + 1] === "!" && t[e + 2] === "N" && t[e + 3] === "O" && t[e + 4] === "T" && t[e + 5] === "A" && t[e + 6] === "T" && t[e + 7] === "I" && t[e + 8] === "O" && t[e + 9] === "N";
}
function bB(t) {
  if (Zu(t))
    return t;
  throw new Error(`Invalid entity name ${t}`);
}
const xB = /^[-+]?0x[a-fA-F0-9]+$/, wB = /^([\-\+])?(0*)([0-9]*(\.[0-9]*)?)$/, yB = {
  hex: !0,
  // oct: false,
  leadingZeros: !0,
  decimalPoint: ".",
  eNotation: !0
  //skipLike: /regex/
};
function _B(t, e = {}) {
  if (e = Object.assign({}, yB, e), !t || typeof t != "string") return t;
  let r = t.trim();
  if (e.skipLike !== void 0 && e.skipLike.test(r)) return t;
  if (t === "0") return 0;
  if (e.hex && xB.test(r))
    return EB(r, 16);
  if (r.search(/[eE]/) !== -1) {
    const i = r.match(/^([-\+])?(0*)([0-9]*(\.[0-9]*)?[eE][-\+]?[0-9]+)$/);
    if (i) {
      if (e.leadingZeros)
        r = (i[1] || "") + i[3];
      else if (!(i[2] === "0" && i[3][0] === ".")) return t;
      return e.eNotation ? Number(r) : t;
    } else
      return t;
  } else {
    const i = wB.exec(r);
    if (i) {
      const n = i[1], a = i[2];
      let s = AB(i[3]);
      if (!e.leadingZeros && a.length > 0 && n && r[2] !== ".") return t;
      if (!e.leadingZeros && a.length > 0 && !n && r[1] !== ".") return t;
      if (e.leadingZeros && a === t) return 0;
      {
        const o = Number(r), c = "" + o;
        return c.search(/[eE]/) !== -1 ? e.eNotation ? o : t : r.indexOf(".") !== -1 ? c === "0" && s === "" || c === s || n && c === "-" + s ? o : t : a ? s === c || n + s === c ? o : t : r === c || r === n + c ? o : t;
      }
    } else
      return t;
  }
}
function AB(t) {
  return t && t.indexOf(".") !== -1 && (t = t.replace(/0+$/, ""), t === "." ? t = "0" : t[0] === "." ? t = "0" + t : t[t.length - 1] === "." && (t = t.substr(0, t.length - 1))), t;
}
function EB(t, e) {
  if (parseInt) return parseInt(t, e);
  if (Number.parseInt) return Number.parseInt(t, e);
  if (window && window.parseInt) return window.parseInt(t, e);
  throw new Error("parseInt, Number.parseInt, window.parseInt are not supported");
}
function CB(t) {
  return typeof t == "function" ? t : Array.isArray(t) ? (e) => {
    for (const r of t)
      if (typeof r == "string" && e === r || r instanceof RegExp && r.test(e))
        return !0;
  } : () => !1;
}
class SB {
  constructor(e) {
    this.options = e, this.currentNode = null, this.tagsNodeStack = [], this.docTypeEntities = {}, this.lastEntities = {
      apos: { regex: /&(apos|#39|#x27);/g, val: "'" },
      gt: { regex: /&(gt|#62|#x3E);/g, val: ">" },
      lt: { regex: /&(lt|#60|#x3C);/g, val: "<" },
      quot: { regex: /&(quot|#34|#x22);/g, val: '"' }
    }, this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" }, this.htmlEntities = {
      space: { regex: /&(nbsp|#160);/g, val: " " },
      // "lt" : { regex: /&(lt|#60);/g, val: "<" },
      // "gt" : { regex: /&(gt|#62);/g, val: ">" },
      // "amp" : { regex: /&(amp|#38);/g, val: "&" },
      // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
      // "apos" : { regex: /&(apos|#39);/g, val: "'" },
      cent: { regex: /&(cent|#162);/g, val: "¢" },
      pound: { regex: /&(pound|#163);/g, val: "£" },
      yen: { regex: /&(yen|#165);/g, val: "¥" },
      euro: { regex: /&(euro|#8364);/g, val: "€" },
      copyright: { regex: /&(copy|#169);/g, val: "©" },
      reg: { regex: /&(reg|#174);/g, val: "®" },
      inr: { regex: /&(inr|#8377);/g, val: "₹" },
      num_dec: { regex: /&#([0-9]{1,7});/g, val: (r, i) => String.fromCodePoint(Number.parseInt(i, 10)) },
      num_hex: { regex: /&#x([0-9a-fA-F]{1,6});/g, val: (r, i) => String.fromCodePoint(Number.parseInt(i, 16)) }
    }, this.addExternalEntities = TB, this.parseXml = BB, this.parseTextData = kB, this.resolveNameSpace = FB, this.buildAttributesMap = DB, this.isItStopNode = LB, this.replaceEntitiesValue = RB, this.readStopNodeData = MB, this.saveTextToParentTag = PB, this.addChild = IB, this.ignoreAttributesFn = CB(this.options.ignoreAttributes);
  }
}
function TB(t) {
  const e = Object.keys(t);
  for (let r = 0; r < e.length; r++) {
    const i = e[r];
    this.lastEntities[i] = {
      regex: new RegExp("&" + i + ";", "g"),
      val: t[i]
    };
  }
}
function kB(t, e, r, i, n, a, s) {
  if (t !== void 0 && (this.options.trimValues && !i && (t = t.trim()), t.length > 0)) {
    s || (t = this.replaceEntitiesValue(t));
    const o = this.options.tagValueProcessor(e, t, r, n, a);
    return o == null ? t : typeof o != typeof t || o !== t ? o : this.options.trimValues ? Cf(t, this.options.parseTagValue, this.options.numberParseOptions) : t.trim() === t ? Cf(t, this.options.parseTagValue, this.options.numberParseOptions) : t;
  }
}
function FB(t) {
  if (this.options.removeNSPrefix) {
    const e = t.split(":"), r = t.charAt(0) === "/" ? "/" : "";
    if (e[0] === "xmlns")
      return "";
    e.length === 2 && (t = r + e[1]);
  }
  return t;
}
const OB = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
function DB(t, e, r) {
  if (this.options.ignoreAttributes !== !0 && typeof t == "string") {
    const i = pv(t, OB), n = i.length, a = {};
    for (let s = 0; s < n; s++) {
      const o = this.resolveNameSpace(i[s][1]);
      if (this.ignoreAttributesFn(o, e))
        continue;
      let c = i[s][4], l = this.options.attributeNamePrefix + o;
      if (o.length)
        if (this.options.transformAttributeName && (l = this.options.transformAttributeName(l)), l === "__proto__" && (l = "#__proto__"), c !== void 0) {
          this.options.trimValues && (c = c.trim()), c = this.replaceEntitiesValue(c);
          const f = this.options.attributeValueProcessor(o, c, e);
          f == null ? a[l] = c : typeof f != typeof c || f !== c ? a[l] = f : a[l] = Cf(
            c,
            this.options.parseAttributeValue,
            this.options.numberParseOptions
          );
        } else this.options.allowBooleanAttributes && (a[l] = !0);
    }
    if (!Object.keys(a).length)
      return;
    if (this.options.attributesGroupName) {
      const s = {};
      return s[this.options.attributesGroupName] = a, s;
    }
    return a;
  }
}
const BB = function(t) {
  t = t.replace(/\r\n?/g, `
`);
  const e = new di("!xml");
  let r = e, i = "", n = "";
  for (let a = 0; a < t.length; a++)
    if (t[a] === "<")
      if (t[a + 1] === "/") {
        const o = ki(t, ">", a, "Closing Tag is not closed.");
        let c = t.substring(a + 2, o).trim();
        if (this.options.removeNSPrefix) {
          const u = c.indexOf(":");
          u !== -1 && (c = c.substr(u + 1));
        }
        this.options.transformTagName && (c = this.options.transformTagName(c)), r && (i = this.saveTextToParentTag(i, r, n));
        const l = n.substring(n.lastIndexOf(".") + 1);
        if (c && this.options.unpairedTags.indexOf(c) !== -1)
          throw new Error(`Unpaired tag can not be used as closing tag: </${c}>`);
        let f = 0;
        l && this.options.unpairedTags.indexOf(l) !== -1 ? (f = n.lastIndexOf(".", n.lastIndexOf(".") - 1), this.tagsNodeStack.pop()) : f = n.lastIndexOf("."), n = n.substring(0, f), r = this.tagsNodeStack.pop(), i = "", a = o;
      } else if (t[a + 1] === "?") {
        let o = Ef(t, a, !1, "?>");
        if (!o) throw new Error("Pi Tag is not closed.");
        if (i = this.saveTextToParentTag(i, r, n), !(this.options.ignoreDeclaration && o.tagName === "?xml" || this.options.ignorePiTags)) {
          const c = new di(o.tagName);
          c.add(this.options.textNodeName, ""), o.tagName !== o.tagExp && o.attrExpPresent && (c[":@"] = this.buildAttributesMap(o.tagExp, n, o.tagName)), this.addChild(r, c, n, a);
        }
        a = o.closeIndex + 1;
      } else if (t.substr(a + 1, 3) === "!--") {
        const o = ki(t, "-->", a + 4, "Comment is not closed.");
        if (this.options.commentPropName) {
          const c = t.substring(a + 4, o - 2);
          i = this.saveTextToParentTag(i, r, n), r.add(this.options.commentPropName, [{ [this.options.textNodeName]: c }]);
        }
        a = o;
      } else if (t.substr(a + 1, 2) === "!D") {
        const o = uB(t, a);
        this.docTypeEntities = o.entities, a = o.i;
      } else if (t.substr(a + 1, 2) === "![") {
        const o = ki(t, "]]>", a, "CDATA is not closed.") - 2, c = t.substring(a + 9, o);
        i = this.saveTextToParentTag(i, r, n);
        let l = this.parseTextData(c, r.tagname, n, !0, !1, !0, !0);
        l == null && (l = ""), this.options.cdataPropName ? r.add(this.options.cdataPropName, [{ [this.options.textNodeName]: c }]) : r.add(this.options.textNodeName, l), a = o + 2;
      } else {
        let o = Ef(t, a, this.options.removeNSPrefix), c = o.tagName;
        const l = o.rawTagName;
        let f = o.tagExp, u = o.attrExpPresent, h = o.closeIndex;
        this.options.transformTagName && (c = this.options.transformTagName(c)), r && i && r.tagname !== "!xml" && (i = this.saveTextToParentTag(i, r, n, !1));
        const d = r;
        d && this.options.unpairedTags.indexOf(d.tagname) !== -1 && (r = this.tagsNodeStack.pop(), n = n.substring(0, n.lastIndexOf("."))), c !== e.tagname && (n += n ? "." + c : c);
        const p = a;
        if (this.isItStopNode(this.options.stopNodes, n, c)) {
          let m = "";
          if (f.length > 0 && f.lastIndexOf("/") === f.length - 1)
            c[c.length - 1] === "/" ? (c = c.substr(0, c.length - 1), n = n.substr(0, n.length - 1), f = c) : f = f.substr(0, f.length - 1), a = o.closeIndex;
          else if (this.options.unpairedTags.indexOf(c) !== -1)
            a = o.closeIndex;
          else {
            const A = this.readStopNodeData(t, l, h + 1);
            if (!A) throw new Error(`Unexpected end of ${l}`);
            a = A.i, m = A.tagContent;
          }
          const C = new di(c);
          c !== f && u && (C[":@"] = this.buildAttributesMap(f, n, c)), m && (m = this.parseTextData(m, c, n, !0, u, !0, !0)), n = n.substr(0, n.lastIndexOf(".")), C.add(this.options.textNodeName, m), this.addChild(r, C, n, p);
        } else {
          if (f.length > 0 && f.lastIndexOf("/") === f.length - 1) {
            c[c.length - 1] === "/" ? (c = c.substr(0, c.length - 1), n = n.substr(0, n.length - 1), f = c) : f = f.substr(0, f.length - 1), this.options.transformTagName && (c = this.options.transformTagName(c));
            const m = new di(c);
            c !== f && u && (m[":@"] = this.buildAttributesMap(f, n, c)), this.addChild(r, m, n, p), n = n.substr(0, n.lastIndexOf("."));
          } else {
            const m = new di(c);
            this.tagsNodeStack.push(r), c !== f && u && (m[":@"] = this.buildAttributesMap(f, n, c)), this.addChild(r, m, n, p), r = m;
          }
          i = "", a = h;
        }
      }
    else
      i += t[a];
  return e.child;
};
function IB(t, e, r, i) {
  this.options.captureMetaData || (i = void 0);
  const n = this.options.updateTag(e.tagname, r, e[":@"]);
  n === !1 || (typeof n == "string" && (e.tagname = n), t.addChild(e, i));
}
const RB = function(t) {
  if (this.options.processEntities) {
    for (let e in this.docTypeEntities) {
      const r = this.docTypeEntities[e];
      t = t.replace(r.regx, r.val);
    }
    for (let e in this.lastEntities) {
      const r = this.lastEntities[e];
      t = t.replace(r.regex, r.val);
    }
    if (this.options.htmlEntities)
      for (let e in this.htmlEntities) {
        const r = this.htmlEntities[e];
        t = t.replace(r.regex, r.val);
      }
    t = t.replace(this.ampEntity.regex, this.ampEntity.val);
  }
  return t;
};
function PB(t, e, r, i) {
  return t && (i === void 0 && (i = e.child.length === 0), t = this.parseTextData(
    t,
    e.tagname,
    r,
    !1,
    e[":@"] ? Object.keys(e[":@"]).length !== 0 : !1,
    i
  ), t !== void 0 && t !== "" && e.add(this.options.textNodeName, t), t = ""), t;
}
function LB(t, e, r) {
  const i = "*." + r;
  for (const n in t) {
    const a = t[n];
    if (i === a || e === a) return !0;
  }
  return !1;
}
function NB(t, e, r = ">") {
  let i, n = "";
  for (let a = e; a < t.length; a++) {
    let s = t[a];
    if (i)
      s === i && (i = "");
    else if (s === '"' || s === "'")
      i = s;
    else if (s === r[0])
      if (r[1]) {
        if (t[a + 1] === r[1])
          return {
            data: n,
            index: a
          };
      } else
        return {
          data: n,
          index: a
        };
    else s === "	" && (s = " ");
    n += s;
  }
}
function ki(t, e, r, i) {
  const n = t.indexOf(e, r);
  if (n === -1)
    throw new Error(i);
  return n + e.length - 1;
}
function Ef(t, e, r, i = ">") {
  const n = NB(t, e + 1, i);
  if (!n) return;
  let a = n.data;
  const s = n.index, o = a.search(/\s/);
  let c = a, l = !0;
  o !== -1 && (c = a.substring(0, o), a = a.substring(o + 1).trimStart());
  const f = c;
  if (r) {
    const u = c.indexOf(":");
    u !== -1 && (c = c.substr(u + 1), l = c !== n.data.substr(u + 1));
  }
  return {
    tagName: c,
    tagExp: a,
    closeIndex: s,
    attrExpPresent: l,
    rawTagName: f
  };
}
function MB(t, e, r) {
  const i = r;
  let n = 1;
  for (; r < t.length; r++)
    if (t[r] === "<")
      if (t[r + 1] === "/") {
        const a = ki(t, ">", r, `${e} is not closed`);
        if (t.substring(r + 2, a).trim() === e && (n--, n === 0))
          return {
            tagContent: t.substring(i, r),
            i: a
          };
        r = a;
      } else if (t[r + 1] === "?")
        r = ki(t, "?>", r + 1, "StopNode is not closed.");
      else if (t.substr(r + 1, 3) === "!--")
        r = ki(t, "-->", r + 3, "StopNode is not closed.");
      else if (t.substr(r + 1, 2) === "![")
        r = ki(t, "]]>", r, "StopNode is not closed.") - 2;
      else {
        const a = Ef(t, r, ">");
        a && ((a && a.tagName) === e && a.tagExp[a.tagExp.length - 1] !== "/" && n++, r = a.closeIndex);
      }
}
function Cf(t, e, r) {
  if (e && typeof t == "string") {
    const i = t.trim();
    return i === "true" ? !0 : i === "false" ? !1 : _B(t, r);
  } else
    return JD(t) ? t : "";
}
const $1 = di.getMetaDataSymbol();
function UB(t, e) {
  return vv(t, e);
}
function vv(t, e, r) {
  let i;
  const n = {};
  for (let a = 0; a < t.length; a++) {
    const s = t[a], o = $B(s);
    let c = "";
    if (r === void 0 ? c = o : c = r + "." + o, o === e.textNodeName)
      i === void 0 ? i = s[o] : i += "" + s[o];
    else {
      if (o === void 0)
        continue;
      if (s[o]) {
        let l = vv(s[o], e, c);
        const f = WB(l, e);
        s[$1] !== void 0 && (l[$1] = s[$1]), s[":@"] ? zB(l, s[":@"], c, e) : Object.keys(l).length === 1 && l[e.textNodeName] !== void 0 && !e.alwaysCreateTextNode ? l = l[e.textNodeName] : Object.keys(l).length === 0 && (e.alwaysCreateTextNode ? l[e.textNodeName] = "" : l = ""), n[o] !== void 0 && n.hasOwnProperty(o) ? (Array.isArray(n[o]) || (n[o] = [n[o]]), n[o].push(l)) : e.isArray(o, c, f) ? n[o] = [l] : n[o] = l;
      }
    }
  }
  return typeof i == "string" ? i.length > 0 && (n[e.textNodeName] = i) : i !== void 0 && (n[e.textNodeName] = i), n;
}
function $B(t) {
  const e = Object.keys(t);
  for (let r = 0; r < e.length; r++) {
    const i = e[r];
    if (i !== ":@") return i;
  }
}
function zB(t, e, r, i) {
  if (e) {
    const n = Object.keys(e), a = n.length;
    for (let s = 0; s < a; s++) {
      const o = n[s];
      i.isArray(o, r + "." + o, !0, !0) ? t[o] = [e[o]] : t[o] = e[o];
    }
  }
}
function WB(t, e) {
  const { textNodeName: r } = e, i = Object.keys(t).length;
  return !!(i === 0 || i === 1 && (t[r] || typeof t[r] == "boolean" || t[r] === 0));
}
class HB {
  constructor(e) {
    this.externalEntities = {}, this.options = fB(e);
  }
  /**
   * Parse XML dats to JS object 
   * @param {string|Buffer} xmlData 
   * @param {boolean|Object} validationOption 
   */
  parse(e, r) {
    if (typeof e != "string") if (e.toString)
      e = e.toString();
    else
      throw new Error("XML data is accepted in String or Bytes[] form.");
    if (r) {
      r === !0 && (r = {});
      const a = eB(e, r);
      if (a !== !0)
        throw Error(`${a.err.msg}:${a.err.line}:${a.err.col}`);
    }
    const i = new SB(this.options);
    i.addExternalEntities(this.externalEntities);
    const n = i.parseXml(e);
    return this.options.preserveOrder || n === void 0 ? n : UB(n, this.options);
  }
  /**
   * Add Entity which is not by default supported by this library
   * @param {string} key 
   * @param {string} value 
   */
  addEntity(e, r) {
    if (r.indexOf("&") !== -1)
      throw new Error("Entity value can't have '&'");
    if (e.indexOf("&") !== -1 || e.indexOf(";") !== -1)
      throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
    if (r === "&")
      throw new Error("An entity with value '&' is not permitted");
    this.externalEntities[e] = r;
  }
  /**
   * Returns a Symbol that can be used to access the metadata
   * property on a node.
   * 
   * If Symbol is not available in the environment, an ordinary property is used
   * and the name of the property is here returned.
   * 
   * The XMLMetaData property is only present when `captureMetaData`
   * is true in the options.
   */
  static getMetaDataSymbol() {
    return di.getMetaDataSymbol();
  }
}
var Z0, Tf, Ke, Ho, Fn, On, L, mv, bv, xv, wv, yv, _v, Av, Ev, Cv, O, ge, xe, Wt, v0, qo, ja, qB, Sv, ye, Sf, VB, YB, M0, q;
class JB {
  constructor(e = {}) {
    P0(this, L);
    P0(this, Z0);
    P0(this, Tf, 0);
    P0(this, Ke, {});
    P0(this, Ho, null);
    P0(this, Fn, null);
    P0(this, On, null);
    // ---------------- FUNCOES ----------------
    P0(this, O, 595.28);
    P0(this, ge, 841.89);
    P0(this, xe, 5);
    P0(this, Wt, {
      borda: "black",
      txt: "black",
      lineWidth: 1,
      ltraj: "#4b5563"
    });
    P0(this, v0, 0);
    //Margem do topo para proximo bloco
    P0(this, qo, 1);
    P0(this, ja, 1);
    const r = new HB({
      ignoreAttributes: !1,
      attributeNamePrefix: "@",
      parseTagValue: !1
      // Evita conversão automática de valores
    });
    e.xml = r.parse(e.xml), tt(this, Ke, e.xml || {}), tt(this, Ho, e.xmlRes || null), tt(this, Fn, e.logo || null), tt(this, On, e.imgDemo || null), tt(this, Z0, new Gu({
      bufferPages: !0,
      margin: 0,
      size: [
        y(this, O),
        y(this, ge)
      ],
      info: {
        Author: "Kalmon Valadao Tavares",
        Title: "DANFE",
        Creator: "Guara DEV",
        Producer: "http://github.com/brasil-js/danfe"
      }
    }));
  }
  getPDF() {
    return new Promise(async (e, r) => {
      try {
        N(this, L, bv).call(this), N(this, L, xv).call(this), N(this, L, wv).call(this), N(this, L, yv).call(this), N(this, L, _v).call(this), N(this, L, Av).call(this), N(this, L, Ev).call(this), y(this, On) != null && N(this, L, mv).call(this), y(this, Z0).end();
        const i = y(this, Z0).read();
        e(i.toString("base64"));
      } catch (i) {
        r(i);
      }
    });
  }
}
Z0 = new WeakMap(), Tf = new WeakMap(), Ke = new WeakMap(), Ho = new WeakMap(), Fn = new WeakMap(), On = new WeakMap(), L = new WeakSet(), mv = function() {
  y(this, Z0).image(y(this, On), 0, 0, { width: y(this, O) }).text("", 0, 0);
}, //Recibo
bv = function() {
  N(this, L, ye).call(this, { l: 0, t: y(this, ge) * 0.03, w: y(this, O) * 0.805, h: y(this, ge) * 0.03 }), N(this, L, q).call(this, { aling: "left", txt: "IDENTIFICAÇÃO E ASSINATURA DO RECEBEDOR", l: y(this, O) * 0.18, t: 28, w: y(this, O) * 0.5 }), N(this, L, ye).call(this, { l: 0, t: 0, w: y(this, O) * 0.805, h: y(this, ge) * 0.06 }), N(this, L, q).call(this, { aling: "justify", l: 2, t: 3, w: y(this, O) * 0.78, txt: `RECEBEMOS DE ${y(this, Ke).NFe.infNFe.emit.xNome} OS PRODUTOS E/OU SERVIÇOS CONSTANTES DA NOTA FISCAL ELETRÔNICA INDICADA ABAIXO. EMISSÃO: ${new Date(y(this, Ke).NFe.infNFe.ide.dhEmi).toLocaleString().split(",")[0]} VALOR TOTAL: R$ ${y(this, Ke).NFe.infNFe.total.ICMSTot.vNF} DESTINATÁRIO: ${y(this, Ke).NFe.infNFe.dest.xNome} - ${y(this, Ke).NFe.infNFe.dest.enderDest.xLgr}, N°${y(this, Ke).NFe.infNFe.dest.enderDest.nro}, Bairro ${y(this, Ke).NFe.infNFe.dest.enderDest.xBairro}, ${y(this, Ke).NFe.infNFe.dest.enderDest.xMun}}-${y(this, Ke).NFe.infNFe.dest.enderDest.UF}` }), N(this, L, ye).call(this, { l: 0, t: y(this, ge) * 0.03, w: y(this, O) * 0.175, h: y(this, ge) * 0.03 }), N(this, L, q).call(this, { aling: "left", txt: "DATA DE RECEBIMENTO", l: 2, t: 28, w: y(this, O) * 0.17 }), N(this, L, ye).call(this, { l: 0, t: 0, w: y(this, O), h: y(this, ge) * 0.06 }), N(this, L, q).call(this, { aling: "center", font: "bold", txt: "NF-e", l: y(this, O) * 0.81, t: 6, size: 15, w: y(this, O) * 0.18 }), N(this, L, q).call(this, { aling: "center", font: "bold", txt: `Nº.  ${y(this, Ke).NFe.infNFe.ide.nNF.padStart(9, "0").slice(0, 3)}.${y(this, Ke).NFe.infNFe.ide.nNF.padStart(9, "0").slice(3, 6)}.${y(this, Ke).NFe.infNFe.ide.nNF.padStart(9, "0").slice(6, 9)}`, l: y(this, O) * 0.81, t: 22, size: 12, w: y(this, O) * 0.18 }), N(this, L, q).call(this, { aling: "center", font: "bold", txt: `Série ${y(this, Ke).NFe.infNFe.ide.serie}`, l: y(this, O) * 0.81, t: 34, size: 12, w: y(this, O) * 0.18 }), N(this, L, Sf).call(this, { t: y(this, ge) * 0.07, ls: 0, le: y(this, O) }), tt(this, v0, y(this, v0) + y(this, ge) * 0.071);
}, xv = async function() {
  N(this, L, ye).call(this, { l: 0, t: 0, w: y(this, O) * 0.41, h: y(this, ge) * 0.108 }), N(this, L, q).call(this, {
    aling: "center",
    font: "italic",
    txt: "IDENTIFICAÇÃO DO EMITENTE",
    l: 0,
    t: 3,
    w: y(this, O) * 0.4
  });
  let e = 0;
  N(this, L, q).call(this, {
    aling: "center",
    font: "bold",
    txt: y(this, Ke).NFe.infNFe.emit.xNome,
    l: 0,
    t: 34 + e,
    w: y(this, O) * 0.4,
    size: 12
  }), N(this, L, q).call(this, {
    aling: "center",
    txt: `${y(this, Ke).NFe.infNFe.emit.enderEmit.xLgr}, N°${y(this, Ke).NFe.infNFe.emit.enderEmit.nro}, ${y(this, Ke).NFe.infNFe.emit.enderEmit.xBairro}, CEP ${y(this, Ke).NFe.infNFe.emit.enderEmit.CEP}`,
    l: 0,
    t: 44 + e,
    w: y(this, O) * 0.4,
    size: 10
  }), N(this, L, q).call(this, {
    aling: "center",
    txt: `${y(this, Ke).NFe.infNFe.emit.enderEmit.xMun} - ${y(this, Ke).NFe.infNFe.emit.enderEmit.UF}, Fone ${y(this, Ke).NFe.infNFe.emit.enderEmit.fone}`,
    l: 0,
    t: 54 + e,
    w: y(this, O) * 0.4,
    size: 10
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.41, t: 0, w: y(this, O) * 0.168, h: y(this, ge) * 0.108 }), N(this, L, q).call(this, {
    aling: "center",
    font: "bold",
    txt: "DANFE",
    l: y(this, O) * 0.41,
    t: 8,
    w: y(this, O) * 0.167,
    size: 12
  }), N(this, L, q).call(this, {
    aling: "center",
    txt: "Documento Auxiliar da Nota Fiscal Eletrônica",
    l: y(this, O) * 0.41,
    t: 20,
    w: y(this, O) * 0.167
  }), N(this, L, q).call(this, {
    aling: "left",
    txt: `0 - ENTRADA
1 - SAÍDA`,
    l: y(this, O) * 0.42,
    t: 39,
    w: y(this, O) * 0.169,
    size: 9
  }), N(this, L, q).call(this, {
    aling: "center",
    font: "bold",
    txt: `Nº. ${y(this, Ke).NFe.infNFe.ide.nNF}`,
    l: y(this, O) * 0.41,
    t: 61,
    w: y(this, O) * 0.167,
    size: 11
  }), N(this, L, q).call(this, {
    aling: "center",
    font: "bold",
    txt: `Série ${y(this, Ke).NFe.infNFe.ide.serie}`,
    l: y(this, O) * 0.41,
    t: 71,
    w: y(this, O) * 0.167,
    size: 11
  }), N(this, L, q).call(this, {
    aling: "center",
    font: "italic",
    txt: `Folha ${y(this, qo)}/${y(this, ja)}`,
    l: y(this, O) * 0.41,
    t: 81,
    w: y(this, O) * 0.167,
    size: 8
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.54, t: y(this, ge) * 0.045, w: y(this, O) * 0.023, h: y(this, ge) * 0.023 }), N(this, L, q).call(this, {
    aling: "center",
    font: "bold",
    txt: "1",
    l: y(this, O) * 0.54,
    t: y(this, ge) * 0.05,
    w: y(this, O) * 0.023,
    size: 15
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.578, t: 0, w: y(this, O), h: y(this, ge) * 0.054 }), N(this, L, ye).call(this, { l: y(this, O) * 0.578, t: y(this, ge) * 0.054, w: y(this, O), h: y(this, ge) * 0.027 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "IDENTIFICAÇÃO DO EMITENTE",
    l: y(this, O) * 0.582,
    t: y(this, ge) * 0.056
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "5124 1047 5063 0600 0188 5500 0000 0002 4710 0002 0235",
    l: y(this, O) * 0.582,
    t: y(this, ge) * 0.071,
    w: y(this, O),
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.578, t: y(this, ge) * 0.0808, w: y(this, O), h: y(this, ge) * 0.027 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "Consulta de autenticidade no portal nacional da NF-e",
    l: y(this, O) * 0.582,
    t: y(this, ge) * 0.084,
    w: y(this, O),
    size: 9
  }), N(this, L, q).call(this, {
    aling: "center",
    txt: "www.nfe.fazenda.gov.br/portal ou no site da Sefaz Autorizadora",
    l: y(this, O) * 0.582,
    t: y(this, ge) * 0.097,
    w: y(this, O),
    size: 9
  }), N(this, L, ye).call(this, { l: 0, t: y(this, ge) * 0.108, w: y(this, O) * 0.578, h: y(this, ge) * 0.023 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "NATUREZA DA OPERAÇÃO",
    l: 3,
    t: y(this, ge) * 0.11
  }), N(this, L, q).call(this, {
    aling: "center",
    txt: "VENDA",
    l: 3,
    t: y(this, ge) * 0.121,
    w: y(this, O) * 0.56,
    font: "bold",
    size: 10
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.578, t: y(this, ge) * 0.108, w: y(this, O) * 0.578, h: y(this, ge) * 0.023 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "PROTOCOLO DE AUTORIZAÇÃO DE USO",
    l: y(this, O) * 0.58,
    t: y(this, ge) * 0.11
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "1512500663278923 - 14/01/2025 13:50:32",
    l: y(this, O) * 0.582,
    t: y(this, ge) * 0.122,
    w: y(this, O),
    size: 9
  }), N(this, L, ye).call(this, { l: 0, t: y(this, ge) * 0.131, w: y(this, O) * 0.256, h: y(this, ge) * 0.023 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "INSCRIÇÃO ESTADUAL",
    l: 2,
    t: y(this, ge) * 0.133
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "XX.XXX.XXX/XXX-XX",
    l: 0,
    t: y(this, ge) * 0.145,
    w: y(this, O) * 0.24,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.256, t: y(this, ge) * 0.131, w: y(this, O) * 0.249, h: y(this, ge) * 0.023 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "INSCRIÇÃO MUNICIPAL",
    l: y(this, O) * 0.259,
    t: y(this, ge) * 0.133
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "XX.XXX.XXX/XXX-XX",
    l: y(this, O) * 0.259,
    t: y(this, ge) * 0.145,
    w: y(this, O) * 0.24,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.505, t: y(this, ge) * 0.131, w: y(this, O) * 0.578, h: y(this, ge) * 0.023 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "INSCRIÇÃO ESTADUAL DO SUBST. TRIBUT",
    l: y(this, O) * 0.507,
    t: y(this, ge) * 0.133
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "XX.XXX.XXX/XXX-XX",
    l: y(this, O) * 0.507,
    t: y(this, ge) * 0.145,
    w: y(this, O) * 0.24,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.753, t: y(this, ge) * 0.131, w: y(this, O) * 0.578, h: y(this, ge) * 0.023 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "CNPJ / CPF",
    l: y(this, O) * 0.755,
    t: y(this, ge) * 0.133
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "XX.XXX.XXX/XXX-XX",
    l: y(this, O) * 0.755,
    t: y(this, ge) * 0.145,
    w: y(this, O),
    size: 9
  }), tt(this, v0, y(this, v0) + y(this, ge) * 0.16);
}, wv = function() {
  N(this, L, q).call(this, {
    font: "bold",
    aling: "left",
    txt: "DESTINATÁRIO / REMETENTE",
    l: 0,
    t: 1,
    size: 8
  }), N(this, L, ye).call(this, { l: 0, t: 8, w: y(this, O) * 0.61, h: y(this, ge) * 0.023 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "NOME / RAZÃO SOCIAL",
    l: 2,
    t: 10
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "left",
    txt: "ADELMO CARLOS CIQUEIRA SILVA",
    l: 2,
    t: y(this, ge) * 0.023,
    w: y(this, O) * 0.61,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.61, t: 8, w: y(this, O) * 0.225, h: y(this, ge) * 0.023 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "CNPJ / CPF",
    l: y(this, O) * 0.61,
    t: 10
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "040.799.071-25",
    l: y(this, O) * 0.61,
    t: y(this, ge) * 0.023,
    w: y(this, O) * 0.225,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.835, t: 8, w: y(this, O) * 0.225, h: y(this, ge) * 0.023 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "DATA DA EMISSÃO",
    l: y(this, O) * 0.835,
    t: 10
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "10/10/2024",
    l: y(this, O) * 0.835,
    t: y(this, ge) * 0.023,
    w: y(this, O) * 0.15,
    size: 9
  }), N(this, L, ye).call(this, { l: 0, t: 27.5, w: y(this, O) * 0.47, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "ENDEREÇO",
    l: 2,
    t: 29
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "left",
    txt: "RUA DAS SAMAMBAIAS, 144",
    l: 2,
    t: 39,
    w: y(this, O) * 0.45,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.47, t: 27.5, w: y(this, O) * 0.205, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "BAIRRO / DISTRITO",
    l: y(this, O) * 0.472,
    t: 29
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "PARQUE ELDORADO",
    l: y(this, O) * 0.472,
    t: 39,
    w: y(this, O) * 0.2,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.675, t: 27.5, w: y(this, O) * 0.16, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "BAIRRO / DISTRITO",
    l: y(this, O) * 0.677,
    t: 29
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "78850-000",
    l: y(this, O) * 0.677,
    t: 39,
    w: y(this, O) * 0.16,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.835, t: 27.5, w: y(this, O) * 0.225, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "DATA DA SAÍDA/ENTRADA",
    l: y(this, O) * 0.837,
    t: 29
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "10/10/2024",
    l: y(this, O) * 0.837,
    t: 39,
    w: y(this, O) * 0.16,
    size: 9
  }), N(this, L, ye).call(this, { l: 0, t: 46.5, w: y(this, O) * 0.47, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "ENDEREÇO",
    l: 2,
    t: 48.5
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "left",
    txt: "RUA DAS SAMAMBAIAS, 144",
    l: 2,
    t: 58.5,
    w: y(this, O) * 0.45,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.47, t: 46.5, w: y(this, O) * 0.04, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "UF",
    l: y(this, O) * 0.472,
    t: 48.5
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "MT",
    l: y(this, O) * 0.47,
    t: 58.5,
    w: y(this, O) * 0.04,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.51, t: 46.5, w: y(this, O) * 0.165, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "FONE / FAX",
    l: y(this, O) * 0.512,
    t: 48.5
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "MT",
    l: y(this, O) * 0.512,
    t: 58.5,
    w: y(this, O) * 0.165,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.675, t: 46.5, w: y(this, O) * 0.16, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "INSCRIÇÃO ESTADUAL",
    l: y(this, O) * 0.677,
    t: 48.5
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "MT",
    l: y(this, O) * 0.677,
    t: 58.5,
    w: y(this, O) * 0.16,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.835, t: 46.5, w: y(this, O) * 0.1565, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: " HORA DA SAÍDA/ENTRADA",
    l: y(this, O) * 0.834,
    t: 48.5
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "MT",
    l: y(this, O) * 0.834,
    t: 58.5,
    w: y(this, O) * 0.1565,
    size: 9
  }), tt(this, v0, y(this, v0) + 69);
}, yv = function(e = 2, r = !0) {
  r && N(this, L, q).call(this, {
    font: "bold",
    aling: "left",
    txt: "PAGAMENTO",
    l: 0,
    t: 1,
    size: 8
  }), N(this, L, ye).call(this, { l: e, t: 8, w: y(this, O) * 0.25, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "Forma:",
    l: e,
    t: 9
  }), N(this, L, q).call(this, {
    aling: "right",
    txt: "Pagamento Instantâneo (PIX)",
    l: e,
    t: 9,
    w: y(this, O) * 0.24,
    size: 9
  }), N(this, L, q).call(this, {
    aling: "left",
    txt: "Valor:",
    l: e,
    t: 18,
    w: y(this, O) * 0.25,
    size: 9
  }), N(this, L, q).call(this, {
    aling: "right",
    txt: "R$ 5.000,00",
    l: e,
    t: 18,
    w: y(this, O) * 0.24,
    size: 9
  }), tt(this, v0, y(this, v0) + 30);
}, _v = function() {
  const e = {
    vBC: "Base Calc. ICMS",
    vICMS: "Valor ICMS",
    vICMSDeson: "ICMS Desonerado",
    vFCP: "Valor FCP",
    vBCST: "Base Calc. ICMS ST",
    vST: "ICMS Subst. Trib.",
    vFCPST: "Valor FCP ST",
    vFCPSTRet: "FCP Retido ST",
    vProd: "Valor Produtos",
    vFrete: "Valor Frete",
    vSeg: "Valor Seguro",
    vDesc: "Valor Desconto",
    vII: "Valor Imp. Import.",
    vIPI: "Valor IPI",
    vIPIDevol: "IPI Devolvido",
    vPIS: "Valor PIS",
    vCOFINS: "Valor COFINS",
    vOutro: "Outras Desp. Acess.",
    vNF: "Valor Total NF-e"
  };
  N(this, L, q).call(this, {
    font: "bold",
    aling: "left",
    txt: " CÁLCULO DO IMPOSTO",
    l: 0,
    t: 1,
    size: 8
  });
  let r = 0, i = 0;
  Object.keys(e).forEach((n, a) => {
    N(this, L, ye).call(this, { l: 0 + i, t: 8 + r, w: y(this, O) * 0.11, h: 19 }), N(this, L, q).call(this, {
      aling: "left",
      txt: e[n],
      l: 2 + i,
      t: 9 + r,
      w: y(this, O) * 0.11
    }), N(this, L, q).call(this, {
      font: "bold",
      aling: "right",
      txt: "R$ 0.00",
      l: 0 + i,
      t: 19 + r,
      w: (y(this, O) - y(this, xe)) * 0.105 - (i > 0 ? 0 : 5),
      size: 9
    }), i += y(this, O) * 0.11, (1 + a) % 9 === 0 && (r += 19, i = 0);
  }), tt(this, v0, y(this, v0) + (30 + r));
}, Av = function() {
  N(this, L, q).call(this, {
    font: "bold",
    aling: "left",
    txt: "TRANSPORTADOR / VOLUMES TRANSPORTADOS",
    l: 0,
    t: 1,
    size: 8
  }), N(this, L, ye).call(this, { l: 0, t: 8, w: y(this, O) * 0.29, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "NOME / RAZÃO SOCIAL",
    l: 2,
    t: 9
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: 2,
    t: 19,
    w: y(this, O) * 0.29,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.29, t: 8, w: y(this, O) * 0.15, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "FRETE",
    l: y(this, O) * 0.293,
    t: 9
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "9-Sem Transporte",
    l: y(this, O) * 0.293,
    t: 19,
    w: y(this, O) * 0.15,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.44, t: 8, w: y(this, O) * 0.15, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "CÓDIGO ANTT",
    l: y(this, O) * 0.442,
    t: 9
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.44,
    t: 19,
    w: y(this, O) * 0.15,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.59, t: 8, w: y(this, O) * 0.15, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "PLACA DO VEÍCULO",
    l: y(this, O) * 0.592,
    t: 9
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.59,
    t: 19,
    w: y(this, O) * 0.15,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.74, t: 8, w: y(this, O) * 0.04, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "UF",
    l: y(this, O) * 0.742,
    t: 9
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.742,
    t: 19,
    w: y(this, O) * 0.04,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.78, t: 8, w: y(this, O) * 0.22, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "CNPJ / CPF",
    l: y(this, O) * 0.782,
    t: 9
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.78,
    t: 19,
    w: y(this, O) * 0.22,
    size: 9
  }), N(this, L, ye).call(this, { l: 0, t: 27, w: y(this, O) * 0.44, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "ENDEREÇO",
    l: 2,
    t: 28
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: 2,
    t: 38,
    w: y(this, O) * 0.44,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.44, t: 27, w: y(this, O) * 0.3, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "MUNICÍPIO",
    l: y(this, O) * 0.442,
    t: 28
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.44,
    t: 38,
    w: y(this, O) * 0.3,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.74, t: 27, w: y(this, O) * 0.04, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "UF",
    l: y(this, O) * 0.742,
    t: 28
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.742,
    t: 38,
    w: y(this, O) * 0.04,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.78, t: 27, w: y(this, O) * 0.22, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: " INSCRIÇÃO ESTADUAL",
    l: y(this, O) * 0.782,
    t: 28
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.78,
    t: 38,
    w: y(this, O) * 0.22,
    size: 9
  }), N(this, L, ye).call(this, { l: 0, t: 46, w: y(this, O) * 0.11, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "QUANTIDADE",
    l: 2,
    t: 47
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: 2,
    t: 57,
    w: y(this, O) * 0.11,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.11, t: 46, w: y(this, O) * 0.17, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "ESPÉCIE",
    l: y(this, O) * 0.112,
    t: 47
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.112,
    t: 57,
    w: y(this, O) * 0.17,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.28, t: 46, w: y(this, O) * 0.16, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "MARCA",
    l: y(this, O) * 0.282,
    t: 47
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.28,
    t: 57,
    w: y(this, O) * 0.16,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.44, t: 46, w: y(this, O) * 0.17, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "NUMERAÇÃO",
    l: y(this, O) * 0.442,
    t: 47
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.44,
    t: 57,
    w: y(this, O) * 0.16,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.61, t: 46, w: y(this, O) * 0.19, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "PESO BRUTO",
    l: y(this, O) * 0.612,
    t: 47
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.61,
    t: 57,
    w: y(this, O) * 0.16,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.8, t: 46, w: y(this, O) * 0.2, h: 19 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "PESO LÍQUIDO",
    l: y(this, O) * 0.802,
    t: 47
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.8,
    t: 57,
    w: y(this, O) * 0.2,
    size: 9
  }), tt(this, v0, y(this, v0) + 68);
}, Ev = function() {
  N(this, L, q).call(this, {
    font: "bold",
    aling: "left",
    txt: "DADOS DOS PRODUTOS / SERVIÇOS",
    l: 0,
    t: 1,
    size: 8
  });
  let e = 0;
  y(this, ja) <= 1 ? e = 10 + y(this, ge) - y(this, v0) - 75 : e = 10 + y(this, ge) - y(this, v0), N(this, L, ye).call(this, { l: 0, t: 9, w: y(this, O), h: e }), N(this, L, q).call(this, {
    aling: "center",
    txt: "CÓD. PRODUTO",
    l: 0,
    t: 12,
    w: y(this, O) * 0.1
  }), N(this, L, q).call(this, {
    aling: "center",
    txt: "DESCRIÇÃO DO PRODUTO / SERVIÇO",
    l: y(this, O) * 0.1,
    t: 12,
    w: y(this, O) * 0.25
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.1, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "NCM/SH",
    l: y(this, O) * 0.35,
    t: 12,
    w: y(this, O) * 0.05
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.35, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "O/CSOSN",
    l: y(this, O) * 0.4,
    t: 12,
    w: y(this, O) * 0.05
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.4, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "CFOP",
    l: y(this, O) * 0.45,
    t: 12,
    w: y(this, O) * 0.04
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.45, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "UN",
    l: y(this, O) * 0.49,
    t: 12,
    w: y(this, O) * 0.03
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.49, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "QUANT",
    l: y(this, O) * 0.52,
    t: 12,
    w: y(this, O) * 0.07
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.52, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "QUANT",
    l: y(this, O) * 0.59,
    t: 12,
    w: y(this, O) * 0.06
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.59, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "V. TOTAL",
    l: y(this, O) * 0.65,
    t: 12,
    w: y(this, O) * 0.06
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.65, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "V. DESC.",
    l: y(this, O) * 0.71,
    t: 12,
    w: y(this, O) * 0.06
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.71, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "B.CÁLC ICMS",
    l: y(this, O) * 0.77,
    t: 12,
    w: y(this, O) * 0.04
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.77, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "V. ICMS",
    l: y(this, O) * 0.81,
    t: 12,
    w: y(this, O) * 0.06
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.81, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "V. IPI",
    l: y(this, O) * 0.87,
    t: 12,
    w: y(this, O) * 0.04
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.87, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "ALIQ. ICM",
    l: y(this, O) * 0.91,
    t: 12,
    w: y(this, O) * 0.04
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.91, ts: 15, te: e + 15 }), N(this, L, q).call(this, {
    aling: "center",
    txt: "ALIQ. ICM",
    l: y(this, O) * 0.95,
    t: 12,
    w: y(this, O) * 0.04
  }), N(this, L, M0).call(this, { l: y(this, O) * 0.95, ts: 15, te: e + 15 }), N(this, L, Sf).call(this, { t: 32, ls: 0, le: y(this, O) });
  let r = 32;
  Array.isArray(y(this, Ke).NFe.infNFe.det) && y(this, Ke).NFe.infNFe.det.forEach((i) => {
    for (N(this, L, q).call(this, {
      aling: "center",
      txt: i.prod.cEAN,
      l: 0,
      t: r,
      w: y(this, O) * 0.1
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: i.prod.xProd,
      l: y(this, O) * 0.1,
      t: r,
      w: y(this, O) * 0.25
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: i.prod.NCM,
      l: y(this, O) * 0.35,
      t: r,
      w: y(this, O) * 0.05
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: "O/CSOSN",
      l: y(this, O) * 0.4,
      t: r,
      w: y(this, O) * 0.05
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: i.prod.CFOP,
      l: y(this, O) * 0.45,
      t: r,
      w: y(this, O) * 0.04
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: i.prod.uCom,
      l: y(this, O) * 0.49,
      t: r,
      w: y(this, O) * 0.03
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: i.prod.qCom,
      l: y(this, O) * 0.52,
      t: r,
      w: y(this, O) * 0.07
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: (1 * i.prod.vUnCom).toFixed(2),
      l: y(this, O) * 0.59,
      t: r,
      w: y(this, O) * 0.06
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: i.prod.vProd,
      l: y(this, O) * 0.65,
      t: r,
      w: y(this, O) * 0.06
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: i.prod.vDesc,
      l: y(this, O) * 0.71,
      t: r,
      w: y(this, O) * 0.06
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: "B.CÁLC ICMS",
      l: y(this, O) * 0.77,
      t: r,
      w: y(this, O) * 0.04
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: "V. ICMS",
      l: y(this, O) * 0.81,
      t: r,
      w: y(this, O) * 0.06
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: "V. IPI",
      l: y(this, O) * 0.87,
      t: r,
      w: y(this, O) * 0.04
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: "ALIQ. ICM",
      l: y(this, O) * 0.91,
      t: r,
      w: y(this, O) * 0.04
    }), N(this, L, q).call(this, {
      aling: "center",
      txt: "ALIQ. ICM",
      l: y(this, O) * 0.95,
      t: r,
      w: y(this, O) * 0.04
    }); i.prod.xProd.length > 28; )
      r += 9, i.prod.xProd = i.prod.xProd.slice(0, 28), console.log("nexct!");
    r += 9;
  }), tt(this, v0, y(this, v0) + (e + 12)), console.log(y(this, v0)), N(this, L, Cv).call(this);
}, //Limite maximo 787
Cv = function() {
  N(this, L, q).call(this, {
    font: "bold",
    aling: "left",
    txt: "DADOS ADICIONAIS",
    l: 0,
    t: 1,
    size: 8
  }), N(this, L, ye).call(this, { l: 0, t: 9, w: y(this, O) * 0.65, h: 28 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "PESO LÍQUIDO",
    l: 2,
    t: 11
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: 0,
    t: 9,
    w: y(this, O) * 0.2,
    size: 9
  }), N(this, L, ye).call(this, { l: y(this, O) * 0.65, t: 9, w: y(this, O) * 0.36, h: 28 }), N(this, L, q).call(this, {
    aling: "left",
    txt: "PESO LÍQUIDO",
    l: y(this, O) * 0.652,
    t: 11
  }), N(this, L, q).call(this, {
    font: "bold",
    aling: "center",
    txt: "",
    l: y(this, O) * 0.65,
    t: 9,
    w: y(this, O) * 0.36,
    size: 9
  }), N(this, L, q).call(this, {
    aling: "left",
    txt: "Impresso em 19/02/2025 as 08:58:52",
    l: 0,
    t: 39
  }), N(this, L, q).call(this, {
    aling: "right",
    txt: "Gerado em www.fsist.com.br",
    l: 0,
    t: 39,
    w: y(this, O) - y(this, xe) * 2
  });
}, O = new WeakMap(), ge = new WeakMap(), xe = new WeakMap(), Wt = new WeakMap(), v0 = new WeakMap(), qo = new WeakMap(), ja = new WeakMap(), qB = function() {
  return new Promise((e, r) => {
    typeof require > "u" ? y(this, Fn) ? fetch(y(this, Fn)).then((i) => i.blob()).then((i) => N(this, L, Sv).call(this, i)).then(e).catch(r) : r(new Error("Logo não foi definido.")) : r(new Error("Método não suportado no ambiente Node.js"));
  });
}, Sv = function(e) {
  const r = new FileReader();
  return r.readAsDataURL(e), new Promise((i) => {
    r.onloadend = () => {
      i(r.result);
    };
  });
}, ye = function(e = { l: 0, t: 0, w: 0, h: 0 }, r = y(this, v0)) {
  y(this, Z0).lineWidth(y(this, Wt).lineWidth).moveTo(e.l <= y(this, xe) ? y(this, xe) : e.l, e.t + r + y(this, xe)).lineTo(e.l + e.w >= y(this, O) ? y(this, O) - y(this, xe) : e.l + e.w, e.t + r + y(this, xe)).lineTo(e.l + e.w >= y(this, O) ? y(this, O) - y(this, xe) : e.l + e.w, e.t + r + y(this, xe) + e.h).lineTo(e.l <= y(this, xe) ? y(this, xe) : e.l, e.t + r + y(this, xe) + e.h).lineTo(e.l <= y(this, xe) ? y(this, xe) : e.l, e.t + r + y(this, xe) - y(this, Wt).lineWidth * 0.3).stroke();
}, //Linha trajada
Sf = function(e = { t: 0, ls: 0, le: 0 }, r = y(this, v0)) {
  if (e.t = (e.t <= y(this, xe) ? y(this, xe) : e.t) + r, e.t = e.t >= y(this, ge) - y(this, xe) ? y(this, ge) - y(this, xe) : e.t, e.ls > e.le) {
    let i = e.ls;
    e.ls = e.le, e.le = i;
  }
  e.ls = e.ls <= y(this, xe) ? y(this, xe) : e.ls, e.le = e.le >= y(this, O) - y(this, xe) ? y(this, O) - y(this, xe) : e.le, y(this, Z0).moveTo(e.ls, e.t).lineTo(e.le, e.t).dash(3, { space: 5 }).stroke(y(this, Wt).ltraj), y(this, Z0).undash();
}, //Linha Horizontal
VB = function(e = { t: 0, ls: 0, le: 0 }, r = y(this, v0)) {
  if (e.t = (e.t <= y(this, xe) ? y(this, xe) : e.t) + r, e.t = e.t >= y(this, ge) - y(this, xe) ? y(this, ge) - y(this, xe) : e.t, e.ls > e.le) {
    let i = e.ls;
    e.ls = e.le, e.le = i;
  }
  e.ls = e.ls <= y(this, xe) ? y(this, xe) : e.ls, e.le = e.le >= y(this, O) - y(this, xe) ? y(this, O) - y(this, xe) : e.le, y(this, Z0).moveTo(e.ls, e.t).lineTo(e.le, e.t).stroke(y(this, Wt).borda);
}, //Linha vertical
YB = function(e = { l: 0, ts: 0, te: 0 }, r = y(this, v0)) {
  if (e.l = e.l <= y(this, xe) ? y(this, xe) : e.l, e.l = e.l >= y(this, O) - y(this, xe) ? y(this, O) - y(this, xe) : e.l, e.ts > e.te) {
    let i = e.ts;
    e.ts = e.te, e.te = i;
  }
  e.ts = (e.ts <= y(this, xe) ? y(this, xe) : e.ts) + r, e.te = (e.te >= y(this, O) - y(this, xe) ? y(this, O) - y(this, xe) : e.te) + r, y(this, Z0).moveTo(e.l, e.ts).lineTo(e.l, e.te).stroke(y(this, Wt).borda);
}, M0 = function(e = { l: 0, ts: 0, te: 0 }, r = y(this, v0)) {
  if (e.l = e.l <= y(this, xe) ? y(this, xe) : e.l, e.l = e.l >= y(this, O) - y(this, xe) ? y(this, O) - y(this, xe) : e.l, e.ts > e.te) {
    let i = e.ts;
    e.ts = e.te, e.te = i;
  }
  e.ts = (e.ts <= y(this, xe) ? y(this, xe) : e.ts) + r, e.te = (e.te >= y(this, O) - y(this, xe) ? y(this, O) - y(this, xe) : e.te) + r, y(this, Z0).moveTo(e.l, e.ts).lineTo(e.l, e.te).dash(3, { space: 5 }).stroke(y(this, Wt).ltraj);
}, //Adicionar texto
q = function(e, r = y(this, v0)) {
  let i = "";
  switch (e.font) {
    case "italic":
      i = "Times-Italic";
      break;
    case "bold":
      i = "Times-Bold";
      break;
    default:
      i = "Times-Roman";
      break;
  }
  y(this, Z0).font(i).fillColor(y(this, Wt).txt).fontSize(e.size || 7).text(
    e.txt,
    e.l <= y(this, xe) ? y(this, xe) + e.l : e.l,
    (e.t <= y(this, xe) ? e.t + y(this, xe) : e.t + y(this, xe)) + r,
    {
      width: (e.w && e.w >= y(this, O) ? e.w - e.l : e.w) ?? y(this, O) - e.l,
      align: e.aling || "center"
    }
  );
};
export {
  JB as danfe
};
